<?xml-stylesheet type="text/xsl" href="GDNFunctions.xsl"?>
<function name="tokenize" namespace="http://gotdotnet.com/exslt/regular-expressions" prefix="regexp2">
    <syntax>
        <return>node-set</return>
        <params>
            <param>string</param>
            <param>string</param>
            <param optional="yes">string</param>
        </params>
    </syntax>
    <description>
        <p>The <tt>regexp2:tokenize</tt> function breaks the input string (first argument) into a sequence of strings, 
        treating any substring that matches the regexp (second argument) as a separator.</p>
        <p>Third optional argument is concatenation of regexp flags - 'm' for multiline matching and 'i' for case-insensitive matching.</p>
        <p>The separators themselves are not returned.<br/> 
        The matching strings are returned as a set of 'match' elements.</p>
    </description>
    <sample>
        <source><![CDATA[
<input>The quick brown fox jumps over a lazy dog.</input>
]]></source>
        <stylesheet><![CDATA[<xsl:stylesheet version="1.0" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns:regexp2="http://gotdotnet.com/exslt/regular-expressions" 
exclude-result-prefixes="regexp2">
    <xsl:output indent="yes"/>
    <xsl:template match="/">
        <out>
Input string: <xsl:value-of select="input"/>        
Tokens: 
    <xsl:copy-of select="regexp2:tokenize(input, ' ')"/>
        </out>
    </xsl:template>
</xsl:stylesheet>
]]></stylesheet>
        <result><![CDATA[<out>
Input string: The quick brown fox jumps over a lazy dog.        
Tokens: 
    <match>The</match>
    <match>quick</match>
    <match>brown</match>
    <match>fox</match>
    <match>jumps</match>
    <match>over</match>
    <match>a</match>
    <match>lazy</match>
    <match>dog.</match>
</out>]]></result>
    </sample>
</function>

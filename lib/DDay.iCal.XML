<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DDay.iCal</name>
    </assembly>
    <members>
        <member name="M:DDay.iCal.ICopyable.CopyFrom(DDay.iCal.ICopyable)">
            <summary>
            Copies all relevant fields/properties from
            the target object to the current one.
            </summary>
        </member>
        <member name="M:DDay.iCal.ICopyable.Copy``1">
            <summary>
            Returns a copy of the current object, including
            all relevent fields/properties, resulting in a
            semantically equivalent copy of the object.
            (which consequently passes an object.Equals(obj1, obj2)
            test).
            </summary>
        </member>
        <member name="M:DDay.iCal.ILoadable.OnLoaded">
            <summary>
            Fires the Loaded event.
            </summary>
        </member>
        <member name="P:DDay.iCal.ILoadable.IsLoaded">
            <summary>
            Gets whether or not the object has been loaded.
            </summary>
        </member>
        <member name="E:DDay.iCal.ILoadable.Loaded">
            <summary>
            An event that fires when the object has been loaded.
            </summary>
        </member>
        <member name="M:DDay.iCal.ICalendarObject.AddChild(DDay.iCal.ICalendarObject)">
            <summary>
            Adds a child object to the current object.
            </summary>
        </member>
        <member name="M:DDay.iCal.ICalendarObject.RemoveChild(DDay.iCal.ICalendarObject)">
            <summary>
            Removes a child object from the current object.
            </summary>
        </member>
        <member name="M:DDay.iCal.ICalendarObject.InsertChild(System.Int32,DDay.iCal.ICalendarObject)">
            <summary>
            Inserts a child at the given index in the children list.
            </summary>
        </member>
        <member name="M:DDay.iCal.ICalendarObject.RemoveChildAt(System.Int32)">
            <summary>
            Removes a child at the given index in the children list.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DDay.iCal.ICalendarObject.ClearChildren">
            <summary>
            Clears all children from the object.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Name">
            <summary>
            The name of the calendar object.
            Every calendar object can be assigned
            a name.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Parent">
            <summary>
            Returns the parent of this object.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Children">
            <summary>
            Returns a list of children of this object.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Calendar">
            <summary>
            Returns the iCalendar that this object
            is associated with.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Line">
            <summary>
            Returns the line number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="P:DDay.iCal.ICalendarObject.Column">
            <summary>
            Returns the column number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="E:DDay.iCal.IUniqueComponent.UIDChanged">
            <summary>
            Fires when the UID of the component has changed.
            </summary>
        </member>
        <member name="M:DDay.iCal.IGetOccurrences.ClearEvaluation">
            <summary>
            Clears a previous evaluation, usually because one of the 
            key elements used for evaluation has changed 
            (Start, End, Duration, recurrence rules, exceptions, etc.).
            </summary>
        </member>
        <member name="M:DDay.iCal.IGetOccurrences.GetOccurrences(DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of this component that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:DDay.iCal.IGetOccurrences.GetOccurrences(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of this component that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="P:DDay.iCal.IRecurrable.Start">
            <summary>
            Gets/sets the start date/time of the component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDay.iCal.IAlarmContainer.PollAlarms(DDay.iCal.IDateTime,DDay.iCal.IDateTime)" -->
        <member name="P:DDay.iCal.IAlarmContainer.Alarms">
            <summary>
            A list of <see cref="T:DDay.iCal.Alarm"/>s for this recurring component.
            </summary>
        </member>
        <member name="M:DDay.iCal.ITodo.IsCompleted(DDay.iCal.IDateTime)">
            <summary>
            Use this method to determine if a todo item has been completed.
            This takes into account recurrence items and the previous date
            of completion, if any.        
            <note>
            This method evaluates the recurrence pattern for this TODO
            as necessary to ensure all relevant information is taken
            into account to give the most accurate result possible.
            </note>
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the todo item has been completed</returns>
        </member>
        <member name="M:DDay.iCal.ITodo.IsActive(DDay.iCal.IDateTime)">
            <summary>
            Returns 'True' if the todo item is Active as of <paramref name="currDt"/>.
            An item is Active if it requires action of some sort.
            </summary>
            <param name="currDt">The date and time to test.</param>
            <returns>True if the item is Active as of <paramref name="currDt"/>, False otherwise.</returns>
        </member>
        <member name="M:DDay.iCal.ITodo.IsCancelled">
            <summary>
            Returns True if the todo item was cancelled.
            </summary>
            <returns>True if the todo was cancelled, False otherwise.</returns>
        </member>
        <member name="P:DDay.iCal.ITodo.Completed">
            <summary>
            The date/time the todo was completed.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.Due">
            <summary>
            The due date of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.Duration">
            <summary>
            The duration of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.Location">
            <summary>
            The location of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.PercentComplete">
            <summary>
            A number between 0 and 100 that represents
            the percentage of completion of this item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.Resources">
            <summary>
            A list of resources associated with this todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.ITodo.Status">
            <summary>
            The current status of the todo item.
            </summary>
        </member>
        <member name="M:DDay.iCal.IGetOccurrencesTyped.GetOccurrences``1(DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:DDay.iCal.IGetOccurrencesTyped.GetOccurrences``1(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="M:DDay.iCal.IEvaluator.Clear">
            <summary>
            Clears the evaluation, eliminating all data that has
            been collected up to this point.  Since this data is cached
            as needed, this method can be useful to gather information
            that is guaranteed to not be out-of-date.
            </summary>
        </member>
        <member name="M:DDay.iCal.IEvaluator.Evaluate(DDay.iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaluates this item to determine the dates and times for which it occurs/recurs.
            This method only evaluates items which occur/recur between <paramref name="fromDate"/>
            and <paramref name="toDate"/>; therefore, if you require a list of items which
            occur outside of this range, you must specify a <paramref name="fromDate"/> and
            <paramref name="toDate"/> which encapsulate the date(s) of interest.
            This method evaluates using the <paramref name="startDate"/> as the beginning
            point.  For example, for a WEEKLY occurrence, the <paramref name="startDate"/>
            determines the day of week that this item will recur on.
            <note type="caution">
                For events with very complex recurrence rules, this method may be a bottleneck
                during processing time, especially when this method is called for a large number
                of items, in sequence, or for a very large time span.
            </note>
            </summary>
            <param name="startDate">The date to begin evaluation from.</param>
            <param name="fromDate">The beginning date of the range to evaluate.</param>
            <param name="toDate">The end date of the range to evaluate.</param>
            <returns>
                A list of <see cref="T:System.DateTime"/> objects for
                each date/time when this item occurs/recurs.
            </returns>
        </member>
        <member name="P:DDay.iCal.IEvaluator.Calendar">
            <summary>
            The system calendar that governs the evaluation rules.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvaluator.EvaluationStartBounds">
            <summary>
            The start bounds of the evaluation.  This gives
            the first date/time that is covered by the evaluation.
            This together with EvaluationEndBounds determines
            what time frames have already been evaluated, so
            duplicate evaluation doesn't occur.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvaluator.EvaluationEndBounds">
            <summary>
            The end bounds of the evaluation.
            See <see cref="P:DDay.iCal.IEvaluator.EvaluationStartBounds"/> for more info.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvaluator.Periods">
            <summary>
            Gets a list of periods collected so far during
            the evaluation process.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvaluator.AssociatedObject">
            <summary>
            Gets the object associated with this evaluator.
            </summary>
        </member>
        <member name="M:DDay.iCal.RecurringEvaluator.EvaluateRRule(DDay.iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaulates the RRule component, and adds each specified Period
            to the <see cref="!:Periods"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:DDay.iCal.RecurringEvaluator.EvaluateRDate(DDay.iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalates the RDate component, and adds each specified DateTime or
            Period to the <see cref="!:Periods"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:DDay.iCal.RecurringEvaluator.EvaluateExRule(DDay.iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evaulates the ExRule component, and excludes each specified DateTime
            from the <see cref="!:Periods"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:DDay.iCal.RecurringEvaluator.EvaluateExDate(DDay.iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalates the ExDate component, and excludes each specified DateTime or
            Period from the <see cref="!:Periods"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:DDay.iCal.EventEvaluator.Evaluate(DDay.iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaluates this event to determine the dates and times for which the event occurs.
            This method only evaluates events which occur between <paramref name="FromDate"/>
            and <paramref name="ToDate"/>; therefore, if you require a list of events which
            occur outside of this range, you must specify a <paramref name="FromDate"/> and
            <paramref name="ToDate"/> which encapsulate the date(s) of interest.
            <note type="caution">
                For events with very complex recurrence rules, this method may be a bottleneck
                during processing time, especially when this method in called for a large number
                of events, in sequence, or for a very large time span.
            </note>
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
            <returns></returns>
        </member>
        <member name="T:DDay.iCal.UniqueComponent">
            <summary>
            Represents a unique component, a component with a unique UID,
            which can be used to uniquely identify the component.    
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarComponent">
            <summary>
            This class is used by the parsing framework for iCalendar components.
            Generally, you should not need to use this class directly.
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarObject">
            <summary>
            The base class for all iCalendar objects and components.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarObjectBase.CopyFrom(DDay.iCal.ICopyable)">
            <summary>
            Copies values from the target object to the
            current object.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarObjectBase.Copy``1">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>The copy of the object.</returns>
        </member>
        <member name="M:DDay.iCal.CalendarObject.AddChild(DDay.iCal.ICalendarObject)">
            <summary>
            Adds an <see cref="!:iCalObject"/>-based object as a child
            of the current object.
            </summary>
            <param name="child">The <see cref="!:iCalObject"/>-based object to add.</param>
        </member>
        <member name="M:DDay.iCal.CalendarObject.RemoveChild(DDay.iCal.ICalendarObject)">
            <summary>
            Removed an <see cref="!:iCalObject"/>-based object from the <see cref="P:DDay.iCal.CalendarObject.Children"/>
            collection.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:DDay.iCal.CalendarObject.InsertChild(System.Int32,DDay.iCal.ICalendarObject)">
            <summary>
            Inserts a child at the given index in the children list.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarObject.RemoveChildAt(System.Int32)">
            <summary>
            Removes a child at the given index in the children list.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DDay.iCal.CalendarObject.ClearChildren">
            <summary>
            Clears all children from the object.
            </summary>
        </member>
        <member name="P:DDay.iCal.CalendarObject.Parent">
            <summary>
            Returns the parent <see cref="!:iCalObject"/> that owns this one.
            </summary>
        </member>
        <member name="P:DDay.iCal.CalendarObject.Children">
            <summary>
            A read-only collection of <see cref="!:iCalObject"/>s that are children 
            of the current object.
            </summary>
        </member>
        <member name="P:DDay.iCal.CalendarObject.Name">
            <summary>
            Gets or sets the name of the <see cref="!:iCalObject"/>.  For iCalendar components,
            this is the RFC 5545 name of the component.
            <example>
                <list type="bullet">
                    <item>Event - "VEVENT"</item>
                    <item>Todo - "VTODO"</item>
                    <item>TimeZone - "VTIMEZONE"</item>
                    <item>etc.</item>
                </list>
            </example>
            </summary>        
        </member>
        <member name="P:DDay.iCal.CalendarObject.Calendar">
            <summary>
            Returns the <see cref="T:DDay.iCal.iCalendar"/> that this <see cref="!:iCalObject"/>
            belongs to.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarComponent.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads an iCalendar component (Event, Todo, Journal, etc.) from an open stream.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarComponent.AddProperty(System.String,System.String)">
            <summary>
            Adds a property to this component.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarComponent.AddProperty(DDay.iCal.ICalendarProperty)">
            <summary>
            Adds a property to this component.
            </summary>
        </member>
        <member name="P:DDay.iCal.CalendarComponent.Properties">
            <summary>
            Returns a list of properties that are associated with the iCalendar object.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.DTEnd">
            <summary>
            The end date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if an end time and duration are available,
            but a start time has not been set, the start time
            will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.Duration">
            <summary>
            The duration of the event.
            <note>
            If a start time and duration is available,
            the end time is automatically determined.
            Likewise, if the end time and duration is
            available, but a start time is not determined,
            the start time will be extrapolated from
            available information.
            </note>
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.End">
            <summary>
            An alias to the DTEnd field (i.e. end date/time).
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.IsAllDay">
            <summary>
            Returns true if the event is an all-day event.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.Location">
            <summary>
            The location of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.Resources">
            <summary>
            Resources that will be used during the event.
            <example>Conference room #2</example>
            <example>Projector</example>
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.Status">
            <summary>
            The status of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.IEvent.Transparency">
            <summary>
            The transparency of the event.  In other words,
            whether or not the period of time this event
            occupies can contain other events (transparent),
            or if the time cannot be scheduled for anything
            else (opaque).
            </summary>
        </member>
        <member name="M:DDay.iCal.IAlarm.GetOccurrences(DDay.iCal.IRecurringComponent,DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Gets a list of alarm occurrences for the given recurring component, <paramref name="rc"/>
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
        </member>
        <member name="M:DDay.iCal.IAlarm.Poll(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Polls the <see cref="T:DDay.iCal.Alarm"/> component for alarms that have been triggered
            since the provided <paramref name="Start"/> date/time.  If <paramref name="Start"/>
            is null, all triggered alarms will be returned.
            </summary>
            <param name="Start">The earliest date/time to poll trigerred alarms for.</param>
            <param name="End">The latest date/time to poll trigerred alarms for.</param>
            <returns>A list of <see cref="T:DDay.iCal.AlarmOccurrence"/> objects, each containing a triggered alarm.</returns>
        </member>
        <member name="T:DDay.iCal.CalendarDataType">
            <summary>
            An abstract class from which all iCalendar data types inherit.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarDataType.CopyFrom(DDay.iCal.ICopyable)">
            <summary>
            Copies values from the target object to the
            current object.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarDataType.Copy``1">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>The copy of the object.</returns>
        </member>
        <member name="T:DDay.iCal.Todo">
            <summary>
            A class that represents an RFC 5545 VTODO component.
            </summary> 
        </member>
        <member name="T:DDay.iCal.RecurringComponent">
            <summary>
            An iCalendar component that recurs.
            </summary>
            <remarks>
            This component automatically handles
            RRULEs, RDATE, EXRULEs, and EXDATEs, as well as the DTSTART
            for the recurring item (all recurring items must have a DTSTART).
            </remarks>
        </member>
        <member name="P:DDay.iCal.RecurringComponent.DTStart">
            <summary>
            The start date/time of the component.
            </summary>
        </member>
        <member name="P:DDay.iCal.RecurringComponent.Start">
            <summary>
            An alias to the DTStart field (i.e. start date/time).
            </summary>
        </member>
        <member name="P:DDay.iCal.RecurringComponent.Alarms">
            <summary>
            A list of <see cref="T:DDay.iCal.Alarm"/>s for this recurring component.
            </summary>
        </member>
        <member name="M:DDay.iCal.Todo.IsCompleted(DDay.iCal.IDateTime)">
            <summary>
            Use this method to determine if a todo item has been completed.
            This takes into account recurrence items and the previous date
            of completion, if any.        
            <note>
            This method evaluates the recurrence pattern for this TODO
            as necessary to ensure all relevant information is taken
            into account to give the most accurate result possible.
            </note>
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the todo item has been completed</returns>
        </member>
        <member name="M:DDay.iCal.Todo.IsActive(DDay.iCal.IDateTime)">
            <summary>
            Returns 'True' if the todo item is Active as of <paramref name="currDt"/>.
            An item is Active if it requires action of some sort.
            </summary>
            <param name="currDt">The date and time to test.</param>
            <returns>True if the item is Active as of <paramref name="currDt"/>, False otherwise.</returns>
        </member>
        <member name="M:DDay.iCal.Todo.IsCancelled">
            <summary>
            Returns True if the todo item was cancelled.
            </summary>
            <returns>True if the todo was cancelled, False otherwise.</returns>
        </member>
        <member name="P:DDay.iCal.Todo.Completed">
            <summary>
            The date/time the todo was completed.
            </summary>
        </member>
        <member name="P:DDay.iCal.Todo.DTStart">
            <summary>
            The start date/time of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.Todo.Due">
            <summary>
            The due date of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.Todo.Duration">
            <summary>
            The duration of the todo item.
            </summary>
        </member>
        <member name="P:DDay.iCal.Todo.Status">
            <summary>
            The status of the todo item.
            </summary>
        </member>
        <member name="M:DDay.iCal.IMergeable.MergeWith(DDay.iCal.IMergeable)">
            <summary>
            Merges this object with another.
            </summary>
        </member>
        <member name="M:DDay.iCal.IICalendar.Create``1">
            <summary>
            Creates a new component, and adds it
            to the calendar.
            </summary>
        </member>
        <member name="M:DDay.iCal.IICalendar.GetTimeZone(System.String)">
            <summary>
            Returns the time zone object that corresponds
            to the provided TZID, or null of no matching
            time zone could be found.
            </summary>
        </member>
        <member name="M:DDay.iCal.IICalendar.AddTimeZone(System.TimeZoneInfo)">
            <summary>
            Adds a system time zone to the iCalendar.  This time zone may
            then be used in date/time objects contained in the 
            calendar.
            </summary>
            <param name="tzi">A System.TimeZoneInfo object to add to the calendar.</param>
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="M:DDay.iCal.IICalendar.AddLocalTimeZone">
            <summary>
            Adds the local system time zone to the iCalendar.  
            This time zone may then be used in date/time
            objects contained in the calendar.
            </summary>
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="P:DDay.iCal.IICalendar.Version">
            <summary>
            Gets/sets the calendar version.  Defaults to "2.0".
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.ProductID">
            <summary>
            Gets/sets the product ID for the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.Scale">
            <summary>
            Gets/sets the scale of the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.Method">
            <summary>
            Gets/sets the calendar method.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.RecurrenceRestriction">
            <summary>
            Gets/sets the restriction on how evaluation of 
            recurrence patterns occurs within this calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.RecurrenceEvaluationMode">
            <summary>
            Gets/sets the evaluation mode during recurrence
            evaluation.  Default is ThrowException.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.UniqueComponents">
            <summary>
            Gets a list of unique components contained in the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.Events">
            <summary>
            Gets a list of Events contained in the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.FreeBusy">
            <summary>
            Gets a list of Free/Busy components contained in the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.Journals">
            <summary>
            Gets a list of Journal entries contained in the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.TimeZones">
            <summary>
            Gets a list of time zones contained in the calendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.IICalendar.Todos">
            <summary>
            Gets a list of To-do items contained in the calendar.
            </summary>
        </member>
        <member name="T:DDay.iCal.iCalDateTime">
            <summary>
            The iCalendar equivalent of the .NET <see cref="T:System.DateTime"/> class.
            <remarks>
            In addition to the features of the <see cref="T:System.DateTime"/> class, the <see cref="T:DDay.iCal.iCalDateTime"/>
            class handles time zone differences, and integrates seamlessly into the iCalendar framework.
            </remarks>
            </summary>
        </member>
        <member name="T:DDay.iCal.EncodableDataType">
            <summary>
            An abstract class from which all iCalendar data types inherit.
            </summary>
        </member>
        <member name="M:DDay.iCal.IDateTime.ToTimeZone(DDay.iCal.TimeZoneObservance)">
            <summary>
            Converts the date/time value to a local time
            within the specified time zone.
            </summary>
        </member>
        <member name="M:DDay.iCal.IDateTime.ToTimeZone(System.String)">
            <summary>
            Converts the date/time value to a local time
            within the specified time zone.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Local">
            <summary>
            Converts the date/time to this computer's local date/time.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.UTC">
            <summary>
            Converts the date/time to UTC (Coordinated Universal Time)
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.TimeZoneObservance">
            <summary>
            Retrieves the <see cref="T:DDay.iCal.iCalTimeZoneInfo"/> object for the time
            zone set by <see cref="P:DDay.iCal.IDateTime.TZID"/>.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.IsUniversalTime">
            <summary>
            Gets/sets whether the Value of this date/time represents
            a universal time.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.TimeZoneName">
            <summary>
            Gets the time zone name this time is in, if it references a time zone.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Value">
            <summary>
            Gets/sets the underlying DateTime value stored.  This should always
            use DateTimeKind.Utc, regardless of its actual representation.
            Use IsUniversalTime along with the TZID to control how this
            date/time is handled.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.HasDate">
            <summary>
            Gets/sets whether or not this date/time value contains a 'date' part.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.HasTime">
            <summary>
            Gets/sets whether or not this date/time value contains a 'time' part.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.TZID">
            <summary>
            Gets/sets the time zone ID for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Year">
            <summary>
            Gets the year for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Month">
            <summary>
            Gets the month for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Day">
            <summary>
            Gets the day for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Hour">
            <summary>
            Gets the hour for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Minute">
            <summary>
            Gets the minute for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Second">
            <summary>
            Gets the second for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Millisecond">
            <summary>
            Gets the millisecond for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Ticks">
            <summary>
            Gets the ticks for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.DayOfWeek">
            <summary>
            Gets the DayOfWeek for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.DayOfYear">
            <summary>
            Gets the DayOfYear for this date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.FirstDayOfYear">
            <summary>
            Gets the first day of the year currently represented by the IDateTime instance.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.FirstDayOfMonth">
            <summary>
            Gets the first day of the month currently represented by the IDateTime instance.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.Date">
            <summary>
            Gets the date portion of the date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.IDateTime.TimeOfDay">
            <summary>
            Gets the time portion of the date/time value.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalDateTime.Local">
            <summary>
            Converts the date/time to this computer's local date/time.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalDateTime.UTC">
            <summary>
            Converts the date/time to UTC (Coordinated Universal Time)
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalDateTime.TimeZoneObservance">
            <summary>
            Gets/sets the <see cref="T:DDay.iCal.iCalTimeZoneInfo"/> object for the time
            zone set by <see cref="P:DDay.iCal.iCalDateTime.TZID"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDay.iCal.KeyedList`2" -->
        <member name="M:DDay.iCal.IKeyedList`2.ContainsKey(`1)">
            <summary>
            Returns true if the list contains at least one 
            object with a matching key, false otherwise.
            </summary>
        </member>
        <member name="M:DDay.iCal.IKeyedList`2.IndexOf(`1)">
            <summary>
            Returns the index of the first object
            with the matching key.
            </summary>
        </member>
        <member name="M:DDay.iCal.IKeyedList`2.CountOf(`1)">
            <summary>
            Returns the number of objects in the list
            with a matching key.
            </summary>
        </member>
        <member name="M:DDay.iCal.IKeyedList`2.AllOf(`1)">
            <summary>
            Returns an enumerable list of objects that
            match the specified key.
            </summary>
        </member>
        <member name="M:DDay.iCal.IKeyedList`2.Remove(`1)">
            <summary>
            Removes all objects with the matching <paramref name="key"/>.
            </summary>
            <returns>True if any objects were removed, false otherwise.</returns>
        </member>
        <member name="M:DDay.iCal.IKeyedList`2.ToArray">
            <summary>
            Converts the list to an array of the values contained therein.
            </summary>
        </member>
        <member name="P:DDay.iCal.IKeyedList`2.Item(`1)">
            <summary>
            Gets/sets an object with the matching key to
            the provided value.  When setting the value,
            if another object with a matching key exists,
            it will be overwritten.  If overwriting is
            not desired, use the Add() method instead.
            </summary>
        </member>
        <member name="M:DDay.iCal.KeyedList`2.ContainsKey(`1)">
            <summary>
            Returns true if the list contains at least one 
            object with a matching key, false otherwise.
            </summary>
        </member>
        <member name="M:DDay.iCal.KeyedList`2.IndexOf(`1)">
            <summary>
            Returns the index of the first object
            with the matching key.
            </summary>
        </member>
        <member name="T:DDay.iCal.Journal">
            <summary>
            A class that represents an RFC 5545 VJOURNAL component.
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarComponentCompositeList`1">
            <summary>
            This class works similar to the CalendarPropertyCompositeList class,
            but works with components instead of properties.
            
            It consolidates components of a given name into a list,
            and allows you to work with directly against the
            components themselves.  This preserves the notion that our components
            are still stored directly within the calendar object, but gives
            us the flexibility to work with multiple components through a
            single (composite) list.
            </summary>
        </member>
        <member name="T:DDay.iCal.StatusCode">
            <summary>
            An iCalendar status code.
            </summary>
        </member>
        <member name="T:DDay.iCal.Period">
            <summary>
            Represents an iCalendar period of time.
            </summary>    
        </member>
        <member name="P:DDay.iCal.Period.MatchesDateOnly">
            <summary>
            When true, comparisons between this and other <see cref="T:DDay.iCal.Period"/>
            objects are matched against the date only, and
            not the date-time combination.
            </summary>
        </member>
        <member name="T:DDay.iCal.RecurrencePattern">
            <summary>
            An iCalendar representation of the <c>RRULE</c> property.
            </summary>
        </member>
        <member name="T:DDay.iCal.AssociatedCalendarParameterList">
            <summary>
            This class provides a parameter list via the associated container.
            <example>
            For example, let's say an event has several properties:
            
            BEGIN:VEVENT
            SUMMARY:My Event
            DTSTART;TZID=MST:20100703T080000
            DTEND;TZID=MST:20100703T090000
            END:VEVENT
            
            When we process this event, we get an object model similar to this:
            
            Event
              -> Properties
                    -> CalendarProperty
                        -> Name: SUMMARY
                        -> Value: My Event
                    -> CalendarProperty
                        -> Name: DTSTART
                        -> Value
                            -> Type: iCalDateTime
                            -> Value: 20100703T080000
                        -> Parameters
                            -> CalendarParameter: TZID=MST
                    -> CalendarProperty
                        -> Name: DTEND
                        -> Value
                            -> Type: iCalDateTime
                            -> Value: 20100703T090000
                        -> Parameters
                            -> CalendarParameter: TZID=MST
            </example>
            The problem with this is that, in order to serialize the value
            of DTSTART and DTEND properly, they need to be aware of the
            TZID parameters that were attached to the event properties.
            This is very important when the parameter itself hints at
            different types of serialization.  Some examples are:
            
            ENCODING=BASE64
            VALUE=DATE
            
            That is why the AssociatedCalendarParameterList was created.
            This class associates a CalendarDataType-based property value 
            with the property itself, so it can be serialized correctly.
            </summary>
        </member>
        <member name="T:DDay.iCal.UniqueComponentList`1">
            <summary>
            A collection of iCalendar components.  This class is used by the 
            <see cref="T:DDay.iCal.iCalendar"/> class to maintain a collection of events,
            to-do items, journal entries, and free/busy times.
            </summary>
        </member>
        <member name="T:DDay.iCal.FilteredCalendarObjectList`1">
            <summary>
            A collection of iCalendar components.  This class is used by the 
            <see cref="T:DDay.iCal.iCalendar"/> class to maintain a collection of events,
            to-do items, journal entries, and free/busy times.
            </summary>
        </member>
        <member name="F:DDay.iCal.FilteredCalendarObjectList`1.m_Attached">
            <summary>
            NOTE: we use a weak reference here to ensure this doesn't cause a memory leak.
            As this class merely provides a service to calendar properties, we shouldn't
            be holding on to memory references via this object anyhow.
            </summary>
        </member>
        <member name="M:DDay.iCal.UniqueComponentList`1.ResolveUIDs">
            <summary>
            Re-links the UID dictionary to the actual components in our list.
            Also, if any items do not have a UID assigned to them, they will
            automatically have a UID assigned.
            </summary>
        </member>
        <member name="M:DDay.iCal.IAttachment.LoadDataFromUri">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="!:URI"/>.
            </summary>
        </member>
        <member name="M:DDay.iCal.IAttachment.LoadDataFromUri(System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="!:URI"/>.
            </summary>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="M:DDay.iCal.IAttachment.LoadDataFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="!:URI"/>.
            </summary>
            <param name="uri">The Uri from which to download the <c>Data</c></param>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="P:DDay.iCal.IAttachment.Uri">
            <summary>
            The URI where the attachment information can be located.
            </summary>
        </member>
        <member name="P:DDay.iCal.IAttachment.Data">
            <summary>
            A binary representation of the data that was loaded.
            </summary>
        </member>
        <member name="P:DDay.iCal.IAttachment.Value">
            <summary>
            A unicode-encoded version of the data that was loaded.
            </summary>
        </member>
        <member name="P:DDay.iCal.IAttachment.FormatType">
            <summary>
            To specify the content type of a referenced object.
            This optional value should be an IANA-registered
            MIME type, if specified.
            </summary>
        </member>
        <member name="P:DDay.iCal.IAttachment.ValueEncoding">
            <summary>
            Gets/sets the encoding used to store the value.
            </summary>
        </member>
        <member name="T:DDay.iCal.iCalendarCollection">
            <summary>
            A list of iCalendars.
            </summary>
        </member>
        <member name="M:DDay.iCal.Serialization.iCalendar.DataTypeSerializerFactory.Build(System.Type,DDay.iCal.Serialization.ISerializationContext)">
            <summary>
            Returns a serializer that can be used to serialize and object
            of type <paramref name="objectType"/>.
            <note>
                TODO: Add support for caching.
            </note>
            </summary>
            <param name="objectType">The type of object to be serialized.</param>
            <param name="ctx">The serialization context.</param>
        </member>
        <member name="T:DDay.iCal.Organizer">
            <summary>
            A class that represents the organizer of an event/todo/journal.
            </summary>
        </member>
        <member name="T:DDay.iCal.Event">
            <summary>
            A class that represents an RFC 5545 VEVENT component.
            </summary>
            <note>
                TODO: Add support for the following properties:
                <list type="bullet">
                    <item>Add support for the Organizer and Attendee properties</item>
                    <item>Add support for the Class property</item>
                    <item>Add support for the Geo property</item>
                    <item>Add support for the Priority property</item>
                    <item>Add support for the Related property</item>
                    <item>Create a TextCollection DataType for 'text' items separated by commas</item>
                </list>
            </note>
        </member>
        <member name="M:DDay.iCal.Event.#ctor">
            <summary>
            Constructs an Event object, with an <see cref="!:iCalObject"/>
            (usually an iCalendar object) as its parent.
            </summary>
            <param name="parent">An <see cref="!:iCalObject"/>, usually an iCalendar object.</param>
        </member>
        <member name="M:DDay.iCal.Event.OccursOn(DDay.iCal.IDateTime)">
            <summary>
            Use this method to determine if an event occurs on a given date.
            <note type="caution">
                This event should be called only after the <see cref="!:Evaluate"/>
                method has calculated the dates for which this event occurs.
            </note>
            </summary>
            <param name="DateTime">The date to test.</param>
            <returns>True if the event occurs on the <paramref name="DateTime"/> provided, False otherwise.</returns>
        </member>
        <member name="M:DDay.iCal.Event.OccursAt(DDay.iCal.IDateTime)">
            <summary>
            Use this method to determine if an event begins at a given date and time.
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the event begins at the given date and time</returns>
        </member>
        <member name="M:DDay.iCal.Event.IsActive">
            <summary>
            Determines whether or not the <see cref="T:DDay.iCal.Event"/> is actively displayed
            as an upcoming or occurred event.
            </summary>
            <returns>True if the event has not been cancelled, False otherwise.</returns>
        </member>
        <member name="P:DDay.iCal.Event.DTStart">
            <summary>
            The start date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if the end date/time has not been
            set, but a start and duration are available,
            the end date/time will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.DTEnd">
            <summary>
            The end date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if an end time and duration are available,
            but a start time has not been set, the start time
            will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.Duration">
            <summary>
            The duration of the event.
            <note>
            If a start time and duration is available,
            the end time is automatically determined.
            Likewise, if the end time and duration is
            available, but a start time is not determined,
            the start time will be extrapolated from
            available information.
            </note>
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.End">
            <summary>
            An alias to the DTEnd field (i.e. end date/time).
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.IsAllDay">
            <summary>
            Returns true if the event is an all-day event.
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.Location">
            <summary>
            The location of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.Resources">
            <summary>
            Resources that will be used during the event.
            <example>Conference room #2</example>
            <example>Projector</example>
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.Status">
            <summary>
            The status of the event.
            </summary>
        </member>
        <member name="P:DDay.iCal.Event.Transparency">
            <summary>
            The transparency of the event.  In other words,
            whether or not the period of time this event
            occupies can contain other events (transparent),
            or if the time cannot be scheduled for anything
            else (opaque).
            </summary>
        </member>
        <member name="T:DDay.iCal.Alarm">
            <summary>
            A class that represents an RFC 2445 VALARM component.
            FIXME: move GetOccurrences() logic into an AlarmEvaluator.
            </summary>    
        </member>
        <member name="M:DDay.iCal.Alarm.GetOccurrences(DDay.iCal.IRecurringComponent,DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Gets a list of alarm occurrences for the given recurring component, <paramref name="rc"/>
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
        </member>
        <member name="M:DDay.iCal.Alarm.Poll(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Polls the <see cref="T:DDay.iCal.Alarm"/> component for alarms that have been triggered
            since the provided <paramref name="Start"/> date/time.  If <paramref name="Start"/>
            is null, all triggered alarms will be returned.
            </summary>
            <param name="Start">The earliest date/time to poll trigerred alarms for.</param>
            <returns>A list of <see cref="T:DDay.iCal.AlarmOccurrence"/> objects, each containing a triggered alarm.</returns>
        </member>
        <member name="M:DDay.iCal.Alarm.AddRepeatedItems">
            <summary>
            Handles the repetitions that occur from the <c>REPEAT</c> and
            <c>DURATION</c> properties.  Each recurrence of the alarm will
            have its own set of generated repetitions.
            </summary>
        </member>
        <member name="T:DDay.iCal.iCalendar">
             <summary>
             A class that represents an iCalendar object.  To load an iCalendar object, generally a
             static LoadFromXXX method is used.
             <example>
                 For example, use the following code to load an iCalendar object from a URL:
                 <code>
                    IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));
                 </code>
             </example>
             Once created, an iCalendar object can be used to gathers relevant information about
             events, todos, time zones, journal entries, and free/busy time.
             </summary>
             <remarks>
             <para>
             The following is an example of loading an iCalendar and displaying a text-based calendar.
             
             <code>
             //
             // The following code loads and displays an iCalendar 
             // with US Holidays for 2006.
             //
             IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://www.applegatehomecare.com/Calendars/USHolidays.ics"));
             
             IList&lt;Occurrence&gt; occurrences = iCal.GetOccurrences(
                 new iCalDateTime(2006, 1, 1, "US-Eastern", iCal),
                 new iCalDateTime(2006, 12, 31, "US-Eastern", iCal));
             
             foreach (Occurrence o in occurrences)
             {
                 IEvent evt = o.Component as IEvent;
                 if (evt != null)
                 {
                     // Display the date of the event
                     Console.Write(o.Period.StartTime.Local.Date.ToString("MM/dd/yyyy") + " -\t");
            
                     // Display the event summary
                     Console.Write(evt.Summary);
            
                     // Display the time the event happens (unless it's an all-day event)
                     if (evt.Start.HasTime)
                     {
                         Console.Write(" (" + evt.Start.Local.ToShortTimeString() + " - " + evt.End.Local.ToShortTimeString());
                         if (evt.Start.TimeZoneInfo != null)
                             Console.Write(" " + evt.Start.TimeZoneInfo.TimeZoneName);
                         Console.Write(")");
                     }
            
                     Console.Write(Environment.NewLine);
                 }
             }
             </code>
             </para>
             <para>
             The following example loads all active to-do items from an iCalendar:
             
             <code>
             //
             // The following code loads and displays active todo items from an iCalendar
             // for January 6th, 2006.    
             //
             IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));    
             
             iCalDateTime dt = new iCalDateTime(2006, 1, 6, "US-Eastern", iCal);
             foreach(Todo todo in iCal.Todos)
             {
                 if (todo.IsActive(dt))
                 {
                     // Display the todo summary
                     Console.WriteLine(todo.Summary);
                 }
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:DDay.iCal.iCalendar.LoadFromFile(System.String)">
            <summary>
            Loads an <see cref="T:DDay.iCal.iCalendar"/> from the file system.
            </summary>
            <param name="Filepath">The path to the file to load.</param>
            <returns>An <see cref="T:DDay.iCal.iCalendar"/> object</returns>        
        </member>
        <member name="M:DDay.iCal.iCalendar.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads an <see cref="T:DDay.iCal.iCalendar"/> from an open stream.
            </summary>
            <param name="s">The stream from which to load the <see cref="T:DDay.iCal.iCalendar"/> object</param>
            <returns>An <see cref="T:DDay.iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.LoadFromUri(System.Uri)">
            <summary>
            Loads an <see cref="T:DDay.iCal.iCalendar"/> from a given Uri.
            </summary>
            <param name="url">The Uri from which to load the <see cref="T:DDay.iCal.iCalendar"/> object</param>
            <returns>An <see cref="T:DDay.iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.LoadFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads an <see cref="T:DDay.iCal.iCalendar"/> from a given Uri, using a 
            specified <paramref name="username"/> and <paramref name="password"/>
            for credentials.
            </summary>
            <param name="url">The Uri from which to load the <see cref="T:DDay.iCal.iCalendar"/> object</param>
            <returns>an <see cref="T:DDay.iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.#ctor">
            <summary>
            To load an existing an iCalendar object, use one of the provided LoadFromXXX methods.
            <example>
            For example, use the following code to load an iCalendar object from a URL:
            <code>
                IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));
            </code>
            </example>
            </summary>
        </member>
        <member name="M:DDay.iCal.iCalendar.AddTimeZone(DDay.iCal.ITimeZone)">
            <summary>
            Adds a time zone to the iCalendar.  This time zone may
            then be used in date/time objects contained in the 
            calendar.
            </summary>        
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.AddTimeZone(System.TimeZoneInfo)">
            <summary>
            Adds a system time zone to the iCalendar.  This time zone may
            then be used in date/time objects contained in the 
            calendar.
            </summary>
            <param name="tzi">A System.TimeZoneInfo object to add to the calendar.</param>
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.AddLocalTimeZone">
            <summary>
            Adds the local system time zone to the iCalendar.  
            This time zone may then be used in date/time
            objects contained in the calendar.
            </summary>
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.GetTimeZone(System.String)">
            <summary>
            Retrieves the <see cref="!:DDay.iCal.TimeZone"/> object for the specified
            <see cref="!:TZID"/> (Time Zone Identifier).
            </summary>
            <param name="tzid">A valid <see cref="!:TZID"/> object, or a valid <see cref="!:TZID"/> string.</param>
            <returns>A <see cref="T:System.TimeZone"/> object for the <see cref="!:TZID"/>.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.Evaluate(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Evaluates component recurrences for the given range of time.
            <example>
                For example, if you are displaying a month-view for January 2007,
                you would want to evaluate recurrences for Jan. 1, 2007 to Jan. 31, 2007
                to display relevant information for those dates.
            </example>
            </summary>
            <param name="FromDate">The beginning date/time of the range to test.</param>
            <param name="ToDate">The end date/time of the range to test.</param>
        </member>
        <member name="M:DDay.iCal.iCalendar.Evaluate``1(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Evaluates component recurrences for the given range of time, for
            the type of recurring component specified.
            </summary>
            <typeparam name="T">The type of component to be evaluated for recurrences.</typeparam>
            <param name="FromDate">The beginning date/time of the range to test.</param>
            <param name="ToDate">The end date/time of the range to test.</param>
        </member>
        <member name="M:DDay.iCal.iCalendar.ClearEvaluation">
            <summary>
            Clears recurrence evaluations for recurring components.        
            </summary>        
        </member>
        <member name="M:DDay.iCal.iCalendar.GetOccurrences(DDay.iCal.IDateTime)">
            <summary>
            Returns a list of occurrences of each recurring component
            for the date provided (<paramref name="dt"/>).
            </summary>
            <param name="dt">The date for which to return occurrences. Time is ignored on this parameter.</param>
            <returns>A list of occurrences that occur on the given date (<paramref name="dt"/>).</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.GetOccurrences(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Returns a list of occurrences of each recurring component
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
            <param name="FromDate">The beginning date/time of the range.</param>
            <param name="ToDate">The end date/time of the range.</param>
            <returns>A list of occurrences that fall between the dates provided.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.GetOccurrences``1(DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:DDay.iCal.iCalendar.GetOccurrences``1(DDay.iCal.IDateTime,DDay.iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="M:DDay.iCal.iCalendar.Create``1">
            <summary>
            Creates a typed object that is a direct child of the iCalendar itself.  Generally,
            you would invoke this method to create an Event, Todo, Journal, TimeZone, FreeBusy,
            or other base component type.
            </summary>
            <example>
            To create an event, use the following:
            <code>
            IICalendar iCal = new iCalendar();
            
            Event evt = iCal.Create&lt;Event&gt;();
            </code>
            
            This creates the event, and adds it to the Events list of the iCalendar.
            </example>
            <typeparam name="T">The type of object to create</typeparam>
            <returns>An object of the type specified</returns>
        </member>
        <member name="P:DDay.iCal.iCalendar.Events">
            <summary>
            A collection of <see cref="T:DDay.iCal.Event"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalendar.FreeBusy">
            <summary>
            A collection of <see cref="T:DDay.iCal.FreeBusy"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalendar.Journals">
            <summary>
            A collection of <see cref="T:DDay.iCal.Journal"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalendar.TimeZones">
            <summary>
            A collection of <see cref="!:DDay.iCal.TimeZone"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalendar.Todos">
            <summary>
            A collection of <see cref="T:DDay.iCal.Todo"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:DDay.iCal.Serialization.iCalendar.SerializationInfo.Line">
            <summary>
            Returns the line number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="P:DDay.iCal.Serialization.iCalendar.SerializationInfo.Column">
            <summary>
            Returns the column number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarParameterCompositeList">
            <summary>
            This class works similar to the CalendarPropertyCompositeList class,
            but works with parameters instead of properties.
            
            It consolidates parameters of a given name into a list,
            and allows you to work with those values directly against the
            parameters themselves.  This preserves the notion that our values
            are still stored directly within the calendar parameter, but gives
            us the flexibility to work with multiple parameters through a
            single (composite) list.
            </summary>
        </member>
        <member name="T:DDay.iCal.iCalTimeZone">
            <summary>
            A class that represents an RFC 5545 VTIMEZONE component.
            </summary>
        </member>
        <member name="M:DDay.iCal.iCalTimeZone.GetTimeZoneObservance(DDay.iCal.IDateTime)">
            <summary>
            Retrieves the iCalTimeZoneInfo object that contains information
            about the TimeZone, with the name of the current timezone,
            offset from UTC, etc.
            </summary>
            <param name="dt">The iCalDateTime object for which to retrieve the iCalTimeZoneInfo.</param>
            <returns>A TimeZoneInfo object for the specified iCalDateTime</returns>
        </member>
        <member name="F:DDay.iCal.CalendarParameterList.m_Parent">
            <summary>
            NOTE: we use a weak reference here to ensure this doesn't cause a memory leak.
            As this class merely provides a service to calendar properties, we shouldn't
            be holding on to memory references via this object anyhow.
            </summary>
        </member>
        <member name="P:DDay.iCal.Serialization.SerializationContext.Default">
            <summary>
            Gets the Singleton instance of the SerializationContext class.
            </summary>
        </member>
        <member name="T:DDay.iCal.Serialization.iCalendar.ComponentPropertyConsolidator">
            <summary>
            FIXME: implement this.
            </summary>
        </member>
        <member name="T:DDay.iCal.WeekDay">
            <summary>
            Represents an RFC 5545 "BYDAY" value.
            </summary>
        </member>
        <member name="T:DDay.iCal.EventStatus">
            <summary>
            Status codes available to an <see cref="T:DDay.iCal.Event"/> item
            </summary>
        </member>
        <member name="T:DDay.iCal.TodoStatus">
            <summary>
            Status codes available to a <see cref="T:DDay.iCal.Todo"/> item.
            </summary>
        </member>
        <member name="T:DDay.iCal.JournalStatus">
            <summary>
            Status codes available to a <see cref="T:DDay.iCal.Journal"/> entry.
            </summary>    
        </member>
        <member name="T:DDay.iCal.FrequencyOccurrence">
            <summary>
            Indicates the occurrence of the specific day within a
            MONTHLY or YEARLY recurrence frequency. For example, within
            a MONTHLY frequency, consider the following:
            
            RecurrencePattern r = new RecurrencePattern();
            r.Frequency = FrequencyType.Monthly;
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, FrequencyOccurrence.First));
            
            The above example represents the first Monday within the month,
            whereas if FrequencyOccurrence.Last were specified, it would 
            represent the last Monday of the month.
            
            For a YEARLY frequency, consider the following:
            
            Recur r = new Recur();
            r.Frequency = FrequencyType.Yearly;
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, FrequencyOccurrence.Second));
            
            The above example represents the second Monday of the year.  This can
            also be represented with the following code:
            
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, 2));
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceRestrictionType.Default">
            <summary>
            Same as RestrictSecondly.
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceRestrictionType.NoRestriction">
            <summary>
            Does not restrict recurrence evaluation - WARNING: this may cause very slow performance!
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceRestrictionType.RestrictSecondly">
            <summary>
            Disallows use of the SECONDLY frequency for recurrence evaluation
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceRestrictionType.RestrictMinutely">
            <summary>
            Disallows use of the MINUTELY and SECONDLY frequencies for recurrence evaluation
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceRestrictionType.RestrictHourly">
            <summary>
            Disallows use of the HOURLY, MINUTELY, and SECONDLY frequencies for recurrence evaluation
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceEvaluationModeType.Default">
            <summary>
            Same as ThrowException.
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceEvaluationModeType.AdjustAutomatically">
            <summary>
            Automatically adjusts the evaluation to the next-best frequency based on the restriction type.
            For example, if the restriction were IgnoreSeconds, and the frequency were SECONDLY, then
            this would cause the frequency to be adjusted to MINUTELY, the next closest thing.
            </summary>
        </member>
        <member name="F:DDay.iCal.RecurrenceEvaluationModeType.ThrowException">
            <summary>
            This will throw an exception if a recurrence rule is evaluated that does not meet the minimum
            restrictions.  For example, if the restriction were IgnoreSeconds, and a SECONDLY frequency
            were evaluated, an exception would be thrown.
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Publish">
            <summary>
            Used to publish an iCalendar object to one or
            more "Calendar Users".  There is no interactivity
            between the publisher and any other "Calendar User".
            An example might include a baseball team publishing
            its schedule to the public.
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Request">
            <summary>
            Used to schedule an iCalendar object with other
            "Calendar Users".  Requests are interactive in
            that they require the receiver to respond using
            the reply methods.  Meeting requests, busy-time
            requests, and the assignment of tasks to other
            "Calendar Users" are all examples.  Requests are
            also used by the Organizer to update the status
            of an iCalendar object. 
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Reply">
            <summary>
            A reply is used in response to a request to
            convey Attendee status to the Organizer.
            Replies are commonly used to respond to meeting
            and task requests.     
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Add">
            <summary>
            Add one or more new instances to an existing
            recurring iCalendar object. 
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Cancel">
            <summary>
            Cancel one or more instances of an existing
            iCalendar object.
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Refresh">
            <summary>
            Used by an Attendee to request the latest
            version of an iCalendar object.
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.Counter">
            <summary>
            Used by an Attendee to negotiate a change in an
            iCalendar object.  Examples include the request
            to change a proposed event time or change the
            due date for a task.
            </summary>
        </member>
        <member name="F:DDay.iCal.CalendarMethods.DeclineCounter">
            <summary>
            Used by the Organizer to decline the proposed
            counter-proposal.
            </summary>
        </member>
        <member name="T:DDay.iCal.RecurringComponentDateSorter">
            <summary>
            Sorts recurring components by their start dates
            </summary>
        </member>
        <member name="M:DDay.iCal.TextUtil.RemoveEmptyLines(System.String)">
            <summary>
            Removes blank lines from a string with normalized (\r\n)
            line endings.
            NOTE: this method makes the line/col numbers output from
            antlr incorrect.
            </summary>
        </member>
        <member name="M:DDay.iCal.TextUtil.Normalize(System.String,DDay.iCal.Serialization.ISerializationContext)">
            <summary>
            Normalizes line endings, converting "\r" into "\r\n" and "\n" into "\r\n".        
            </summary>
        </member>
        <member name="M:DDay.iCal.TextUtil.UnwrapLines(System.String)">
            <summary>
            Unwraps lines from the RFC 2445 "line folding" technique.
            NOTE: this method makes the line/col numbers output from
            antlr incorrect.
            </summary>
        </member>
        <member name="M:DDay.iCal.Serialization.iCalendar.SerializerFactory.Build(System.Type,DDay.iCal.Serialization.ISerializationContext)">
            <summary>
            Returns a serializer that can be used to serialize and object
            of type <paramref name="objectType"/>.
            <note>
                TODO: Add support for caching.
            </note>
            </summary>
            <param name="objectType">The type of object to be serialized.</param>
            <param name="ctx">The serialization context.</param>
        </member>
        <member name="T:DDay.iCal.AlarmOccurrence">
            <summary>
            A class that represents a specific occurrence of an <see cref="P:DDay.iCal.AlarmOccurrence.Alarm"/>.        
            </summary>
            <remarks>
            The <see cref="T:DDay.iCal.AlarmOccurrence"/> contains the <see cref="P:DDay.iCal.AlarmOccurrence.Period"/> when
            the alarm occurs, the <see cref="P:DDay.iCal.AlarmOccurrence.Alarm"/> that fired, and the 
            component on which the alarm fired.
            </remarks>
        </member>
        <member name="T:DDay.iCal.UTCOffset">
            <summary>
            Represents a time offset from UTC (Coordinated Universal Time).
            </summary>
        </member>
        <member name="M:DDay.iCal.ITimeZoneInfo.GetObservance(DDay.iCal.IDateTime)">
            <summary>
            Returns the observance that corresponds to
            the date/time provided, or null if no matching
            observance could be found within this TimeZoneInfo.
            </summary>
        </member>
        <member name="M:DDay.iCal.ITimeZoneInfo.Contains(DDay.iCal.IDateTime)">
            <summary>
            Returns true if this time zone info represents
            the observed time zone for the IDateTime value
            provided.
            </summary>
        </member>
        <member name="T:DDay.iCal.PeriodList">
            <summary>
            An iCalendar list of recurring dates (or date exclusions)
            </summary>
        </member>
        <member name="T:DDay.iCal.GeographicLocation">
            <summary>
            A class that represents the geographical location of an
            <see cref="T:DDay.iCal.Event"/> or <see cref="T:DDay.iCal.Todo"/> item.
            </summary>
        </member>
        <member name="T:DDay.iCal.RecurrencePatternEvaluator">
            <summary>
            Much of this code comes from iCal4j, as Ben Fortuna has done an
            excellent job with the recurrence pattern evaluation there.
            
            Here's the iCal4j license:
            ==================
             iCal4j - License
             ==================
             
            Copyright (c) 2009, Ben Fortuna
            All rights reserved.
            
            Redistribution and use in source and binary forms, with or without
            modification, are permitted provided that the following conditions
            are met:
            
            o Redistributions of source code must retain the above copyright
            notice, this list of conditions and the following disclaimer.
            
            o Redistributions in binary form must reproduce the above copyright
            notice, this list of conditions and the following disclaimer in the
            documentation and/or other materials provided with the distribution.
            
            o Neither the name of Ben Fortuna nor the names of any other contributors
            may be used to endorse or promote products derived from this software
            without specific prior written permission.
            
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
            "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
            LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
            A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
            EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
            PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
            PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
            LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
            NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
            SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            </summary>
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetDates(DDay.iCal.IDateTime,System.DateTime,System.DateTime,System.Int32,DDay.iCal.IRecurrencePattern,System.Boolean)">
            Returns a list of start dates in the specified period represented by this recur. This method includes a base date
            argument, which indicates the start of the fist occurrence of this recurrence. The base date is used to inject
            default values to return a set of dates in the correct format. For example, if the search start date (start) is
            Wed, Mar 23, 12:19PM, but the recurrence is Mon - Fri, 9:00AM - 5:00PM, the start dates returned should all be at
            9:00AM, and not 12:19PM.
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetCandidates(System.DateTime,DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean}[])">
            Returns a list of possible dates generated from the applicable BY* rules, using the specified date as a seed.
            @param date the seed date
            @param value the type of date list to return
            @return a DateList
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.ApplySetPosRules(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern)">
            Applies BYSETPOS rules to <code>dates</code>. Valid positions are from 1 to the size of the date list. Invalid
            positions are ignored.
            @param dates
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetMonthVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYMONTH rules specified in this Recur instance to the specified date list. If no BYMONTH rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetWeekNoVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYWEEKNO rules specified in this Recur instance to the specified date list. If no BYWEEKNO rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetYearDayVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYYEARDAY rules specified in this Recur instance to the specified date list. If no BYYEARDAY rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetMonthDayVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYMONTHDAY rules specified in this Recur instance to the specified date list. If no BYMONTHDAY rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetDayVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYDAY rules specified in this Recur instance to the specified date list. If no BYDAY rules are specified
            the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetAbsWeekDays(System.DateTime,DDay.iCal.IWeekDay,DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Returns a list of applicable dates corresponding to the specified week day in accordance with the frequency
            specified by this recurrence rule.
            @param date
            @param weekDay
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetOffsetDates(System.Collections.Generic.List{System.DateTime},System.Int32)">
            Returns a single-element sublist containing the element of <code>list</code> at <code>offset</code>. Valid
            offsets are from 1 to the size of the list. If an invalid offset is supplied, all elements from <code>list</code>
            are added to <code>sublist</code>.
            @param list
            @param offset
            @param sublist
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetHourVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYHOUR rules specified in this Recur instance to the specified date list. If no BYHOUR rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetMinuteVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYMINUTE rules specified in this Recur instance to the specified date list. If no BYMINUTE rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:DDay.iCal.RecurrencePatternEvaluator.GetSecondVariants(System.Collections.Generic.List{System.DateTime},DDay.iCal.IRecurrencePattern,System.Nullable{System.Boolean})">
            Applies BYSECOND rules specified in this Recur instance to the specified date list. If no BYSECOND rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="T:DDay.iCal.Attachment">
            <summary>
            A class to handle attachments, or URIs as attachments, within an iCalendar. 
            </summary>
        </member>
        <member name="M:DDay.iCal.Attachment.LoadDataFromUri">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="!:URI"/>.
            </summary>
        </member>
        <member name="M:DDay.iCal.Attachment.LoadDataFromUri(System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="!:URI"/>.
            </summary>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="M:DDay.iCal.Attachment.LoadDataFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the contents of the
            given <see cref="!:URI"/>.
            </summary>
            <param name="uri">The Uri from which to download the <c>Data</c></param>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="T:DDay.iCal.iCalTimeZoneInfo">
            <summary>
            A class that contains time zone information, and is usually accessed
            from an iCalendar object using the <see cref="M:DDay.iCal.iCalendar.GetTimeZone(System.String)"/> method.        
            </summary>
        </member>
        <member name="P:DDay.iCal.iCalTimeZoneInfo.TimeZoneName">
            <summary>
            Returns the name of the current Time Zone.
            <example>
                The following are examples:
                <list type="bullet">
                    <item>EST</item>
                    <item>EDT</item>
                    <item>MST</item>
                    <item>MDT</item>
                </list>
            </example>
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarProperty">
            <summary>
            A class that represents a property of the <see cref="T:DDay.iCal.iCalendar"/>
            itself or one of its components.  It can also represent non-standard
            (X-) properties of an iCalendar component, as seen with many
            applications, such as with Apple's iCal.
            X-WR-CALNAME:US Holidays
            </summary>
            <remarks>
            Currently, the "known" properties for an iCalendar are as
            follows:
            <list type="bullet">
                <item>ProdID</item>
                <item>Version</item>
                <item>CalScale</item>
                <item>Method</item>
            </list>
            There may be other, custom X-properties applied to the calendar,
            and X-properties may be applied to calendar components.
            </remarks>
        </member>
        <member name="M:DDay.iCal.CalendarProperty.AddParameter(System.String,System.String)">
            <summary>
            Adds a parameter to the iCalendar object.
            </summary>
        </member>
        <member name="M:DDay.iCal.CalendarProperty.AddParameter(DDay.iCal.ICalendarParameter)">
            <summary>
            Adds a parameter to the iCalendar object.
            </summary>
        </member>
        <member name="P:DDay.iCal.CalendarProperty.Parameters">
            <summary>
            Returns a list of parameters that are associated with the iCalendar object.
            </summary>
        </member>
        <member name="T:DDay.iCal.CalendarPropertyCompositeList`1">
            <summary>
            This class takes multiple calendar properties/property values
            and consolidates them into a single list.
            
            <example>
            Consider the following example:
            
            BEGIN:VEVENT
            CATEGORIES:APPOINTMENT,EDUCATION
            CATEGORIES:MEETING
            END:EVENT
            </example>
            
            When we process this event, we don't really care that there
            are 2 different CATEGORIES properties, no do we care that
            the first CATEGORIES property has 2 values, whereas the 
            second CATEGORIES property only has 1 value.  In the end,
            we want a list of 3 values: APPOINTMENT, EDUCATION, and MEETING.
            
            This class consolidates properties of a given name into a list,
            and allows you to work with those values directly against the
            properties themselves.  This preserves the notion that our values
            are still stored directly within the calendar property, but gives
            us the flexibility to work with multiple properties through a
            single (composite) list.
            </summary>
        </member>
        <member name="T:DDay.iCal.Trigger">
            <summary>
            A class that is used to specify exactly when an <see cref="T:DDay.iCal.Alarm"/> component will trigger.
            Usually this date/time is relative to the component to which the Alarm is associated.
            </summary>    
        </member>
        <member name="T:DDay.iCal.RequestStatus">
            <summary>
            A class that represents the return status of an iCalendar request.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack</name>
    </assembly>
    <members>
        <member name="M:ServiceStack.WebHost.Endpoints.RestHandler.CreateRequest(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Used in Unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.GetHtmlHelper">
            <summary>
            Ensure the same instance is used for subclasses
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.InitHelpers">
            <summary>
            Called before page is executed
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.OnLoad">
            <summary>
            Called after page is executed but before it's merged with the 
            website template if any.
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Raw(System.String)">
            <summary>
            Don't HTML encode safe output
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Partial(System.String,System.Object)">
            <summary>
            Return the output of a different view with the specified name 
            using the supplied model
            </summary>
            <param name="viewName"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.TryResolve``1">
            <summary>
            Resolve registered Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.AppHost">
            <summary>
            The AppHost so you can access configuration and resolve dependencies, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.MarkdownPage">
            <summary>
            This precompiled Markdown page with Metadata
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Html">
            <summary>
            ASP.NET MVC's HtmlHelper
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ScopeArgs">
            <summary>
            All variables passed to and created by your page. 
            The Response DTO is stored and accessible via the 'Model' variable.
             
            All variables and outputs created are stored in ScopeArgs which is what's available
            to your website template. The Generated page is stored in the 'Body' variable.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.RenderHtml">
            <summary>
            Whether HTML or Markdown output is requested
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Model">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory.ReturnRequestInfo(System.Web.HttpRequest)">
            <summary>
            If enabled, just returns the Request Info as it understands
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.RestPath.IsMatch(System.String,System.String[])">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.PathComponentsCount">
            <summary>
            The number of segments separated by '/' determinable by path.Split('/').Length
            e.g. /path/to/here.ext == 3
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.TotalComponentsCount">
            <summary>
            The total number of segments after subparts have been exploded ('.') 
            e.g. /path/to/here.ext == 4
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.FirstMatchHashKey">
            <summary>
            Provide for quick lookups based on hashes that can be determined from a request url
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.ApplyRequestFilters(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.ApplyResponseFilters(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the response filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.AppHostHttpListenerBase">
            <summary>
            Inherit from this class if you want to host your web services inside a 
            Console Application, Windows Service, etc.
            
            Usage of HttpListener allows you to host webservices on the same port (:80) as IIS 
            however it requires admin user privillages.
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase">
            <summary>
            Wrapper class for the HTTPListener to allow easier access to the
            server, for start and stop management and event routing of the actual
            inbound requests.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Start(System.String)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing backslash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Stop">
            <summary>
            Shut down the Web Service
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.ProcessRequest(System.Net.HttpListenerContext)">
            <summary>
            Overridable method that can be used to implement a custom hnandler
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ServiceStack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_CantRegisterContainer">
            <summary>
              Looks up a localized string similar to Container service is built-in and read-only..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_IncompatibleAsType">
            <summary>
              Looks up a localized string similar to Service type {0} does not inherit or implement {1}..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingNamedType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} named &apos;{1}&apos; could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_UnknownScope">
            <summary>
              Looks up a localized string similar to Unknown scope..
            </summary>
        </member>
        <member name="T:Funq.IRegistration">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:Funq.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="T:Funq.IReusedOwned">
            <summary>
            Fluent API that exposes both <see cref="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)"/>
            and owner (<see cref="M:Funq.IOwned.OwnedBy(Funq.Owner)"/>).
            </summary>
        </member>
        <member name="T:Funq.IReused">
            <summary>
            Fluent API that allows specifying the reuse instances.
            </summary>
        </member>
        <member name="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies how instances are reused within a container or hierarchy. Default 
            scope is <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IOwned">
            <summary>
            Fluent API that allows specifying the owner of instances 
            created from a registration.
            </summary>
        </member>
        <member name="M:Funq.IOwned.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner of instances created from this registration. Default 
            owner is <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="T:Funq.IRegistration`1">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IInitializable`1">
            <summary>
            Fluent API that allows registering an initializer for the 
            service.
            </summary>
        </member>
        <member name="M:Funq.IInitializable`1.InitializedBy(System.Action{Funq.Container,`0})">
            <summary>
            Specifies an initializer that should be invoked after 
            the service instance has been created by the factory.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Create(System.String)">
            <summary>
            Changes the links for the servicestack/metadata page
            </summary>
            <param name="serviceStackHandlerPrefix"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Support.GzipOptimizationTest">
            <summary>
            Highly optimized code to find if GZIP is supported from:
             - http://dotnetperls.com/gzip-request
            
            Other resources for GZip, deflate resources:
            - http://www.west-wind.com/Weblog/posts/10564.aspx
            	- http://www.west-wind.com/WebLog/posts/102969.aspx
            - ICSharpCode 
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(System.Boolean)">
            <summary>
            Create a new Markdown instance and optionally load options from a configuration
            file. There they should be stored in the appSettings section, available options are:
            
                Markdown.StrictBoldItalic (true/false)
                Markdown.EmptyElementSuffix (">" or " />" without the quotes)
                Markdown.LinkEmails (true/false)
                Markdown.AutoNewLines (true/false)
                Markdown.AutoHyperlink (true/false)
                Markdown.EncodeProblemUrlCharacters (true/false) 
                
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            Header 1  
            ========  
            
            Header 2  
            --------  
            
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems 
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Owner">
            <summary>
            Ownership setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Reuse">
            <summary>
            Reuse scope setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Container">
            <summary>
            The container where the entry was registered.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner for instances, which determines how 
            they will be disposed.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies the scope for instances, which determines 
            visibility of instances across containers and hierarchies.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Factory">
            <summary>
            The Func delegate that creates instances of the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Instance">
            <summary>
            The cached service instance if the scope is <see cref="F:Funq.ReuseScope.Hierarchy"/> or 
            <see cref="F:Funq.ReuseScope.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Initializer">
            <summary>
            The Func delegate that initializes the object after creation.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.CloneFor(Funq.Container)">
            <summary>
            Clones the service entry assigning the <see cref="T:Funq.Container"/> to the 
            <paramref name="newContainer"/>. Does not copy the <see cref="F:Funq.ServiceEntry`2.Instance"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetPermanentCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetSessionCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets a persistent cookie with an expiresAt date
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.DeleteCookie(ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="T:Funq.ReuseScope">
            <summary>
            Determines visibility and reuse of instances provided by the container.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Hierarchy">
            <summary>
            Instances are reused within a container hierarchy. Instances 
            are created (if necessary) in the container where the registration
            was performed, and are reused by all descendent containers.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Container">
            <summary>
            Instances are reused only at the given container. Descendent 
            containers do not reuse parent container instances and get  
            a new instance at their level.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.None">
            <summary>
            Each request to resolve the dependency will result in a new 
            instance being returned.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Default">
            <summary>
            Default scope, which equals <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:ServiceStack.Configuration.AppSettings">
            <summary>
            More familiar name for the new crowd.
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Extensions.HttpRequestExtensions">
            	 * 
            		 Input: http://localhost:96/Cambia3/Temp/Test.aspx/path/info?q=item#fragment
            
            		Some HttpRequest path and URL properties:
            		Request.ApplicationPath:	/Cambia3
            		Request.CurrentExecutionFilePath:	/Cambia3/Temp/Test.aspx
            		Request.FilePath:			/Cambia3/Temp/Test.aspx
            		Request.Path:				/Cambia3/Temp/Test.aspx/path/info
            		Request.PathInfo:			/path/info
            		Request.PhysicalApplicationPath:	D:\Inetpub\wwwroot\CambiaWeb\Cambia3\
            		Request.QueryString:		/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.AbsolutePath:	/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.AbsoluteUri:	http://localhost:96/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Fragment:	
            		Request.Url.Host:			localhost
            		Request.Url.LocalPath:		/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.PathAndQuery:	/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Port:			96
            		Request.Url.Query:			?query=arg
            		Request.Url.Scheme:			http
            		Request.Url.Segments:		/
            									Cambia3/
            									Temp/
            									Test.aspx/
            									path/
            									info
            	 * 
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolveItem(ServiceStack.ServiceHost.IHttpRequest,System.String,System.Func{ServiceStack.ServiceHost.IHttpRequest,System.Object})">
            <summary>
            Use this to treat Request.Items[] as a cache by returning pre-computed items to save 
            calculating them multiple times.
            </summary>
        </member>
        <member name="T:Funq.IFunqlet">
            <summary>
            Funqlets are a set of components provided as a package 
            to an existing container (like a module).
            </summary>
        </member>
        <member name="M:Funq.IFunqlet.Configure(Funq.Container)">
            <summary>
            Configure the given container with the 
            registrations provided by the funqlet.
            </summary>
            <param name="container">Container to register.</param>
        </member>
        <member name="T:Funq.IContainerModule">
            <summary>
            Interface used by plugins to contribute registrations 
            to an existing container.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResult``1(ServiceStack.ServiceHost.IRequestContext,``0)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
            <param name="requestContext"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Func{``0})">
            <summary>
            Overload for the <see cref="M:ServiceStack.CacheAccess.Providers.ContentCacheManager.Resolve``1(System.Func{``0},ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan})"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Overload for the <see cref="M:ServiceStack.CacheAccess.Providers.ContentCacheManager.Resolve``1(System.Func{``0},ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan})"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            <param name="expireCacheIn">How long to cache for, null is no expiration</param>
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.RemoveFromCache(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="requestContext"></param>
            <param name="cacheClient"></param>
            <param name="cacheKeys"></param>
        </member>
        <member name="T:Funq.Container">
            <summary>
			Main container class for components, supporting container hierarchies and
			lifetime management of <see cref="T:System.IDisposable"/> instances.
		</summary>
        </member>
        <member name="M:Funq.Container.#ctor">
            <summary>
			Initializes a new empty container.
		</summary>
        </member>
        <member name="M:Funq.Container.CreateChildContainer">
            <summary>
			Creates a child container of the current one, which exposes its
			current service registration to the new child container.
		</summary>
        </member>
        <member name="M:Funq.Container.Dispose">
            <summary>
			Disposes the container and all instances owned by it (see
			<see cref="F:Funq.Owner.Container"/>), as well as all child containers
			created through <see cref="M:Funq.Container.CreateChildContainer"/>.
		</summary>
        </member>
        <member name="M:Funq.Container.Register``1(``0)">
            <summary>
			Registers a service instance with the container. This instance 
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/> 
			behavior.
		</summary><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,``0)">
            <summary>
			Registers a named service instance with the container. This instance
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/>
			behavior.
		</summary><param name="name">Name of the service to register.</param><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.LazyResolve``1">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance 
			of the service when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The function that can resolve to the service instance when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``3">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``4">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``5">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``6">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``7">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``1(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service with the given name when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``3(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``4(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``5(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``6(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``7(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.Register``1(System.Func{Funq.Container,``0})">
            <summary>
			Registers the given service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,System.Func{Funq.Container,``0})">
            <summary>
			Registers the given named service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.String,System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.String,System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.String,System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Resolve``1">
            <summary>
			Resolves the given service by type, without passing any arguments for
			its construction.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``2(``1)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``3(``1,``2)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``4(``1,``2,``3)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``5(``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``1(System.String)">
            <summary>
			Resolves the given service by type and name, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``2(System.String,``1)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``3(System.String,``1,``2)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.TryResolve``1">
            <summary>
			Attempts to resolve the given service by type, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``2(``1)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``3(``1,``2)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``4(``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``5(``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``1(System.String)">
            <summary>
			Attempts to resolve the given service by type and name, without passing
			arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``2(System.String,``1)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``3(System.String,``1,``2)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="P:Funq.Container.DefaultOwner">
            <summary>
			Default owner for new registrations. <see cref="F:Funq.Owner.Container"/> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultReuse">
            <summary>
			Default reuse scope for new registrations. <see cref="F:Funq.ReuseScope.Hierarchy"/> by default.
		</summary>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.ContentCacheManager">
            <summary>
            Provides static helper methods to serialize and compress results
            </summary>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.ContentCacheManager.Resolve``1(System.Func{``0},ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Returns a serialized dto based on the mime-type, created using the factoryFn().
            If the correct mimeType is found, it will return the cached result.
            If a compressionType is set it will return a compressed version of the result.
            If no result is found, the dto is created by the factoryFn()
            The dto is set on the cacheClient[cacheKey] =&gt; factoryFn()
            e.g. urn:user:1 =&gt; dto
            The serialized dto is set on the cacheClient[cacheKey.mimeType] =&gt; serialized(factoryFn())
            e.g. urn:user:1.xml =&gt; xmlDto
            Finally, if a compressionType is specified, the compressed dto is set on the
            cacheClient[cacheKey.mimeType.compressionType] =&gt; compressed(serialized(factoryFn()))
            e.g. urn:user:1.xml.gzip =&gt; compressedXmlDto
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="factoryFn">The factory fn.</param>
            <param name="serializationContext">The serialization context.</param>
            <param name="compressionType">Type of the compression. -optional null means no compression</param>
            <param name="cacheClient">The cache client</param>
            <param name="cacheKey">The base cache key</param>
            <param name="expireCacheIn">How long to cache for, default is no expiration</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.ContentCacheManager.Clear(ServiceStack.CacheAccess.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="cacheClient">The cache client.</param>
            <param name="cacheKeys">The cache keys.</param>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.ContentCacheManager.ResolveFromCache``1(ServiceStack.CacheAccess.Providers.ContentSerializer{``0},ServiceStack.CacheAccess.ICacheClient,System.String)">
            <summary>
            Helper method on ContentSerializer to 'Resolve' the serialized/compressed
            result using the cacheClient and cacheKey provided
            </summary>
            <typeparam name="T"></typeparam>
            <param name="contentSerializer">The content serializer.</param>
            <param name="cacheClient">The cache client.</param>
            <param name="cacheKey">The cache key.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Ext.AllFilesHandler">
            <summary>
            Summary description for $codebehindclassname$
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.EndPoints.Formats.MarkdownFormat.SerializeToStream(ServiceStack.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
            <summary>
            Render Markdown for text/markdown and text/plain ContentTypes
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.ServiceOperations.GetBaseTypeWithTheSameName(System.Type)">
            <summary>
            Gets the name of the base most type in the heirachy tree with the same.
            
            We get an exception when trying to create a schema with multiple types of the same name
            like when inheriting from a DataContract with the same name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.ServiceOperations.LoadOperationTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Loads the operation types into a dictionary.
            If there are multiple operation types with the same name,
            the operation type that is last will be the one 'discoverable' via the service.
            </summary>
            <param name="operationTypes">The operation types.</param>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpRequestExtensions.GetItemOrCookie(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets string value from Items[name] then Cookies[name] if exists.
            Useful when *first* setting the users response cookie in the request filter.
            To access the value for this initial request you need to set it in Items[].
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpRequestExtensions.GetParam(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets request paramater string value by looking in the following order:
            - QueryString[name]
            - FormData[name]
            - Cookies[name]
            - Items[name]
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="T:Funq.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.FileAndCacheTextManager">
            <summary>
            Stores both 'compressed' and 'text' caches of the dto in the FileSystem and ICacheTextManager provided.
            The ContentType is inferred from the ICacheTextManager's ContentType.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Funq.ResolutionException">
            <summary>
            Exception thrown by the container when a service cannot be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type)">
            <summary>
            Initializes the exception with the service that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes the exception with the service (and its name) that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes the exception with an arbitrary message.
            </summary>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.FileSystemXmlCacheClient">
            <summary>
            Implements a very limited subset of ICacheClient, i.e.
            
            	- T Get[T]()
            	- Set(path, value)
            	- Remove(path)
            
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceHost.ServiceExecOperations">
            <summary>
            Static type constants for referring to service exec methods
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.AppHostBase">
            <summary>
            Inherit from this class if you want to host your web services inside an
            ASP.NET application.
            </summary>
        </member>
        <member name="T:Funq.Owner">
            <summary>
            Determines who is responsible for disposing instances 
            registered with a container.
            </summary>
        </member>
        <member name="F:Funq.Owner.Container">
            <summary>
            Container should dispose provided instances when it is disposed. This is the 
            default.
            </summary>
        </member>
        <member name="F:Funq.Owner.External">
            <summary>
            Container does not dispose provided instances.
            </summary>
        </member>
        <member name="F:Funq.Owner.Default">
            <summary>
            Default owner, which equals <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.StaticFileHandler.SetDefaultFile(System.String)">
            <summary>
            Keep default file contents in-memory
            </summary>
            <param name="defaultFilePath"></param>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheAdd(System.String,System.Object,System.DateTime)">
            <summary>
            Stores The value with key only if such key doesn't exist at the server yet. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The expires at.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime,System.Nullable{System.Int64})">
            <summary>
            Adds or replaces the value with key. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The expires at.</param>
            <param name="checkLastModified">The check last modified.</param>
            <returns>True; if it succeeded</returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(ServiceStack.ServiceHost.IHttpResponse,System.Object,ServiceStack.ServiceHost.ResponseSerializerDelegate,ServiceStack.ServiceHost.IRequestContext,System.Byte[],System.Byte[])">
            <summary>
            Writes to response.
            Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.
            </summary>
            <param name="response">The response.</param>
            <param name="result">Whether or not it was implicity handled by ServiceStack's built-in handlers.</param>
            <param name="defaultAction">The default action.</param>
            <param name="serializerCtx">The serialization context.</param>
            <param name="bodyPrefix">Add prefix to response body if any</param>
            <param name="bodySuffix">Add suffix to response body if any</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.ServiceManager.#ctor(Funq.Container,ServiceStack.ServiceHost.ServiceController)">
            <summary>
            Inject alternative container and strategy for resolving Service Types
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceHost.ServiceControllerReflection">
            <summary>
            Keeping around just to compare how slow it is
            </summary>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.ContentSerializer`1">
            <summary>
            Encapsulates the behaviour of serving compressed or uncompressed 
            serialized results for a particular MimeType and CompressionType.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetNullableAppSetting(System.String)">
            <summary>
            Gets the nullable app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String)">
            <summary>
            Gets the app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ConfigSectionExists(System.String)">
            <summary>
            Determines wheter the Config section identified by the sectionName exists.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String,System.String)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting``1(System.String,``0)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue, for non-string values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionStringSetting(System.String)">
            <summary>
            Gets the connection string setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetListFromAppSetting(System.String)">
            <summary>
            Gets the list from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetDictionaryFromAppSetting(System.String)">
            <summary>
            Gets the dictionary from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetParseMethod(System.Type)">
            <summary>
            Get the static Parse(string) method on the type supplied
            </summary>
            <param name="type"></param>
            <returns>A delegate to the type's Parse(string) if it has one</returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConstructorInfo(System.Type)">
            <summary>
            Gets the constructor info for T(string) if exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ParseTextValue``1(System.String)">
            <summary>
            Returns the value returned by the 'T.Parse(string)' method if exists otherwise 'new T(string)'. 
            e.g. if T was a TimeSpan it will return TimeSpan.Parse(textValue).
            If there is no Parse Method it will attempt to create a new instance of the destined type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The default value.</param>
            <returns>T.Parse(string) or new T(string) value</returns>
        </member>
    </members>
</doc>

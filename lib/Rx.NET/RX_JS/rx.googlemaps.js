// Copyright (c) Microsoft Corporation.  All rights reserved.
// This code is licensed by Microsoft Corporation under the terms
// of the MICROSOFT REACTIVE EXTENSIONS FOR JAVASCRIPT AND .NET LIBRARIES License.
// See http://go.microsoft.com/fwlink/?LinkId=186234.

(function(){var a=google.maps;var b=a.event;var c;var d=this;if(typeof ProvideCustomRxRootObject =="undefined")c=d.Rx; else c=ProvideCustomRxRootObject();var e=c.Observable;var f=e.Create;var g=c.AsyncSubject;b.addListenerAsObservable=function(h,i){return f(function(j){var k=b.addListener(h,i,function(l){j.OnNext(l);});return function(){b.removeListener(k);};});};b.addDomListenerAsObservable=function(h,i){return f(function(j){var k=b.addDomListener(h,i,function(l){j.OnNext(l);});return function(){b.removeListener(k);};});};a.ElevationService.prototype.getElevationAlongPathAsObservable=function(h){var i=new g();this.getElevationAlongPath(h,function(j,k){if(k!=a.ElevationStatus.OK)i.OnError(k); else{i.OnNext(j);i.OnCompleted();}});return i;};a.ElevationService.prototype.getElevationForLocationsAsObservable=function(h){var i=new g();this.getElevationForLocations(h,function(j,k){if(k!=a.ElevationStatus.OK)i.OnError(k); else{i.OnNext(j);i.OnCompleted();}});return i;};a.Geocoder.prototype.geocodeAsObservable=function(h){var i=new g();this.geocode(h,function(j,k){if(k!=a.GeocoderStatus.OK)i.OnError(k); else{i.OnNext(j);i.OnCompleted();}});return i;};a.DirectionsService.prototype.routeAsObservable=function(h){var i=new g();this.route(h,function(j,k){if(k!=a.DirectionsStatus.OK)i.OnError(k); else{i.OnNext(j);i.OnCompleted();}});return i;};a.StreetViewService.prototype.getPanoramaById=function(h){var i=new g();this.getPanoramaById(h,function(j,k){if(k!=a.StreetViewStatus.OK)i.OnError(k); else{i.OnNext(j);i.OnCompleted();}});return i;};a.StreetViewService.prototype.getPanoramaByLocation=function(h,i){var j=new g();this.getPanoramaByByLocation(h,i,function(k,l){if(l!=a.StreetViewStatus.OK)j.OnError(l); else{j.OnNext(k);j.OnCompleted();}});return j;};a.MVCArray.prototype.ToObservable=function(h){if(h===a)h=currentThreadScheduler;var i=this;return observableCreateWithDisposable(function(j){var k=0;return h.ScheduleRecursive(function(l){if(k<i.getLength()){j.OnNext(i.getAt(k));l();}else j.OnCompleted();});});};})();
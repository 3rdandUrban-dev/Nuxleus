//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GiantSoft.FtpManagerCore.FtpManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FtpUser", Namespace="http://schemas.datacontract.org/2004/07/GiantSoft.FtpService")]
    [System.SerializableAttribute()]
    public partial class FtpUser : GiantSoft.FtpManagerCore.FtpManager.SocketUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxDownloadSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MaxSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxThreadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxUploadSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ThreadCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UsedSpaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxDownloadSpeed {
            get {
                return this.MaxDownloadSpeedField;
            }
            set {
                if ((this.MaxDownloadSpeedField.Equals(value) != true)) {
                    this.MaxDownloadSpeedField = value;
                    this.RaisePropertyChanged("MaxDownloadSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxSpace {
            get {
                return this.MaxSpaceField;
            }
            set {
                if ((this.MaxSpaceField.Equals(value) != true)) {
                    this.MaxSpaceField = value;
                    this.RaisePropertyChanged("MaxSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxThread {
            get {
                return this.MaxThreadField;
            }
            set {
                if ((this.MaxThreadField.Equals(value) != true)) {
                    this.MaxThreadField = value;
                    this.RaisePropertyChanged("MaxThread");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxUploadSpeed {
            get {
                return this.MaxUploadSpeedField;
            }
            set {
                if ((this.MaxUploadSpeedField.Equals(value) != true)) {
                    this.MaxUploadSpeedField = value;
                    this.RaisePropertyChanged("MaxUploadSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Root {
            get {
                return this.RootField;
            }
            set {
                if ((object.ReferenceEquals(this.RootField, value) != true)) {
                    this.RootField = value;
                    this.RaisePropertyChanged("Root");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ThreadCount {
            get {
                return this.ThreadCountField;
            }
            set {
                if ((this.ThreadCountField.Equals(value) != true)) {
                    this.ThreadCountField = value;
                    this.RaisePropertyChanged("ThreadCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UsedSpace {
            get {
                return this.UsedSpaceField;
            }
            set {
                if ((this.UsedSpaceField.Equals(value) != true)) {
                    this.UsedSpaceField = value;
                    this.RaisePropertyChanged("UsedSpace");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SocketUser", Namespace="http://schemas.datacontract.org/2004/07/GiantSoft.SocketServiceCore")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GiantSoft.FtpManagerCore.FtpManager.FtpUser))]
    public partial class SocketUser : System.MarshalByRefObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLoginTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LoginTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Disabled {
            get {
                return this.DisabledField;
            }
            set {
                if ((this.DisabledField.Equals(value) != true)) {
                    this.DisabledField = value;
                    this.RaisePropertyChanged("Disabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLoginTime {
            get {
                return this.LastLoginTimeField;
            }
            set {
                if ((this.LastLoginTimeField.Equals(value) != true)) {
                    this.LastLoginTimeField = value;
                    this.RaisePropertyChanged("LastLoginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoginTimes {
            get {
                return this.LoginTimesField;
            }
            set {
                if ((this.LoginTimesField.Equals(value) != true)) {
                    this.LoginTimesField = value;
                    this.RaisePropertyChanged("LoginTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateUserResult", Namespace="http://schemas.datacontract.org/2004/07/GiantSoft.SocketServiceCore")]
    public enum CreateUserResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserNameAlreadyExist = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownError = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FtpManager.IServerManager")]
    public interface IServerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/Start", ReplyAction="http://tempuri.org/IServerManager/StartResponse")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/Stop", ReplyAction="http://tempuri.org/IServerManager/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerManager/Restart", ReplyAction="http://tempuri.org/IServerManager/RestartResponse")]
        void Restart();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IServerManagerChannel : GiantSoft.FtpManagerCore.FtpManager.IServerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ServerManagerClient : System.ServiceModel.ClientBase<GiantSoft.FtpManagerCore.FtpManager.IServerManager>, GiantSoft.FtpManagerCore.FtpManager.IServerManager {
        
        public ServerManagerClient() {
        }
        
        public ServerManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public void Restart() {
            base.Channel.Restart();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FtpManager.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetAllUsers", ReplyAction="http://tempuri.org/IUserManager/GetAllUsersResponse")]
        GiantSoft.FtpManagerCore.FtpManager.FtpUser[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetFtpUserByID", ReplyAction="http://tempuri.org/IUserManager/GetFtpUserByIDResponse")]
        GiantSoft.FtpManagerCore.FtpManager.FtpUser GetFtpUserByID(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetFtpUserByUserName", ReplyAction="http://tempuri.org/IUserManager/GetFtpUserByUserNameResponse")]
        GiantSoft.FtpManagerCore.FtpManager.FtpUser GetFtpUserByUserName(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateFtpUser", ReplyAction="http://tempuri.org/IUserManager/UpdateFtpUserResponse")]
        bool UpdateFtpUser(GiantSoft.FtpManagerCore.FtpManager.FtpUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/CreateFtpUser", ReplyAction="http://tempuri.org/IUserManager/CreateFtpUserResponse")]
        GiantSoft.FtpManagerCore.FtpManager.CreateUserResult CreateFtpUser(GiantSoft.FtpManagerCore.FtpManager.FtpUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ChangePassword", ReplyAction="http://tempuri.org/IUserManager/ChangePasswordResponse")]
        bool ChangePassword(long userID, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IUserManagerChannel : GiantSoft.FtpManagerCore.FtpManager.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<GiantSoft.FtpManagerCore.FtpManager.IUserManager>, GiantSoft.FtpManagerCore.FtpManager.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GiantSoft.FtpManagerCore.FtpManager.FtpUser[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public GiantSoft.FtpManagerCore.FtpManager.FtpUser GetFtpUserByID(long userID) {
            return base.Channel.GetFtpUserByID(userID);
        }
        
        public GiantSoft.FtpManagerCore.FtpManager.FtpUser GetFtpUserByUserName(string username) {
            return base.Channel.GetFtpUserByUserName(username);
        }
        
        public bool UpdateFtpUser(GiantSoft.FtpManagerCore.FtpManager.FtpUser user) {
            return base.Channel.UpdateFtpUser(user);
        }
        
        public GiantSoft.FtpManagerCore.FtpManager.CreateUserResult CreateFtpUser(GiantSoft.FtpManagerCore.FtpManager.FtpUser user) {
            return base.Channel.CreateFtpUser(user);
        }
        
        public bool ChangePassword(long userID, string password) {
            return base.Channel.ChangePassword(userID, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FtpManager.IStatusReporter")]
    public interface IStatusReporter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusReporter/GetCurrentConnectionCount", ReplyAction="http://tempuri.org/IStatusReporter/GetCurrentConnectionCountResponse")]
        int GetCurrentConnectionCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusReporter/GetOnlineUserCount", ReplyAction="http://tempuri.org/IStatusReporter/GetOnlineUserCountResponse")]
        int GetOnlineUserCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatusReporter/Ping", ReplyAction="http://tempuri.org/IStatusReporter/PingResponse")]
        string Ping();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IStatusReporterChannel : GiantSoft.FtpManagerCore.FtpManager.IStatusReporter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StatusReporterClient : System.ServiceModel.ClientBase<GiantSoft.FtpManagerCore.FtpManager.IStatusReporter>, GiantSoft.FtpManagerCore.FtpManager.IStatusReporter {
        
        public StatusReporterClient() {
        }
        
        public StatusReporterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StatusReporterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatusReporterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatusReporterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetCurrentConnectionCount() {
            return base.Channel.GetCurrentConnectionCount();
        }
        
        public int GetOnlineUserCount() {
            return base.Channel.GetOnlineUserCount();
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
    }
}

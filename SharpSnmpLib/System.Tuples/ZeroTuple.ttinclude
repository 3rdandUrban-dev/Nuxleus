<#+
//Generates the Zero Tuple class
//One use of this class is for automatic type deduction like:
//Tuple.New(1, "test", 1.0);
void GenerateZeroTuple(int pMaxTupleLength)
{
#>
    /// <summary>
    /// Tuple utility class. This class does not represent a zero-tuple, but is used
	/// for creating new tuples with the New method or converting lists to tuples using
	/// the ToTuple method
    /// </summary>
	public static class Tuple
	{
<#+
	for(int i = 0; i < pMaxTupleLength; ++i)
	{
		List<String> stringList = GetNumberedList("T{0}", i + 1);
		String templateParameters = String.Join(", ", stringList.ToArray());
		
		stringList = GetNumberedList("T{0} t{0}", i + 1);
		String functionParameters = String.Join(", ", stringList.ToArray());
#>
        /// <summary>
        /// Creates a new tuple of length <#= i + 1 #> containing the passed values.
        /// </summary>
<#+
	for(int j = 0; j < i + 1; ++j)
	{
#>
        /// <typeparam name="T<#= j + 1 #>">Type of the new Element<#= j + 1 #></typeparam>
        /// <param name="t<#= j + 1 #>">Value of the new Element<#= j + 1 #></param>
<#+
	}
#>
        /// <returns>Tuple of length <#= i + 1 #> containing the values passed in.</returns>
		public static Tuple<<#= templateParameters #>> New<<#= templateParameters #>>(<#= functionParameters #>)
		{
			return new Tuple<<#= templateParameters #>>(<#= templateParameters.ToLower() #>);
		}
		
<#+
	}
#>

<#+ if(generateConversions)
	{
#>
#region ToTuple methods

<#+
	for(int i = 0; i < pMaxTupleLength; ++i)
	{
		List<String> stringList = GetNumberedList("T{0}", i + 1);
		String templateParameters = String.Join(", ", stringList.ToArray());
		
		stringList = GetNumberedList("T{0} t{0}", i + 1);
		String functionParameters = String.Join(", ", stringList.ToArray());
#>
        /// <summary>
        /// Creates a tuple of length <#= i + 1 #> by taking values from the enumerable passed in.
        /// </summary>
<#+
		for(int j = 0; j < i + 1; ++j)
		{
#>
        /// <typeparam name="T<#= j + 1 #>">Type of the new Element<#= j + 1 #>. Enumerable must have an object of the same type at position <#= j + 1 #></typeparam>
<#+
		}
#>
        /// <param name="pList">The Enumerable form which to take the new tuple elements. Should have at least <#= i + 1 #> elements.</param>
        /// <returns>Tuple of length <#= i + 1 #> that contains values from the enumerable.</returns>
		public static Tuple<<#= templateParameters #>> ToTuple<<#= templateParameters #>>(IEnumerable pList)
		{
			Tuple<<#= templateParameters #>> t = new Tuple<<#= templateParameters #>>();
			IEnumerator e = pList.GetEnumerator();
<#+
		for(int j = 0; j < i + 1; ++j)
		{
#>
			if(!e.MoveNext())
				throw new ArgumentException("Enumerable is too short. Needs to have at least <#= i + 1 #> elements.", "pList");
			t.Element<#= j + 1 #> = (T<#= j + 1 #>)e.Current;
<#+
		}
#>
			return t;
		}
		
<#+
	}
#>

#endregion
<#+
	}
#>
	}
<#+
}
#>
<#+
//generates a Tuple<> class with length specified by the parameter
void GenerateTuple(int pLength)
{
	List<String> stringList = GetNumberedList("T{0}", pLength);
	String templateParameters = String.Join(", ", stringList.ToArray());
	
	stringList = GetNumberedList("T{0} t{0}", pLength);
	String functionParameters = String.Join(", ", stringList.ToArray());
#>

/// <summary>
/// Represents a tuple of length <#= pLength #>
/// </summary>
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
/// <typeparam name="T<#= i + 1 #>">Type of the tuple's Item<#= i + 1 #></typeparam>
<#+
	}
#>
<#+
	if(addDataContract) 
	{
#>
[DataContract]
<#+
	}
#>
public class Tuple<<#= templateParameters #>> : ICollection, IEnumerable, IEnumerable<Object>,
	IEquatable<Tuple<<#= templateParameters #>>>, IComparable<Tuple<<#= templateParameters #>>>
{
<#+ 
	//define n+1 costructors, from a default one to the full one
	for(int i = 0; i <= pLength; ++i)
	{
		stringList = GetNumberedList("T{0} t{0}", i);
		String constructorParameters = String.Join(", ", stringList.ToArray());
#>
    /// <summary>
<#+
		if(i == 0) 
		{
#>
    /// An empty tuple constructor. All elements will have their default values.
<#+
		}
		else
		{
#>
    /// Tuple constructor. The first <#= i #> elements will be assigned the values passed in.
<#+
		}
#>
    /// </summary>
<#+
	for(int j = 0; j < i; ++j)
	{
#>
	/// <param name="t<#= j + 1 #>">Value of the tuple's Item<#= j + 1 #></param>
<#+
	}
#>
	public Tuple(<#= constructorParameters #>)
	{
<#+
		//generate property assignments
		for(int j = 0; j < i; ++j)
		{
#>
		Item<#= j + 1 #> = t<#= j + 1 #>;
<#+
		}
#>
	}
	
<#+
	}
#>

<#+
	//Append and Prepend methods
	if(pLength != maxTupleLength)
	{
#>
<#+
		//append elements function
		for(int i = 0; i < maxTupleLength - pLength; ++i)
		{
			stringList = GetNumberedList("T{0}", pLength + i + 1);
			String newTemplateParameters = String.Join(", ", stringList.ToArray());

			stringList = GetNumberedList("T{0}", pLength + 1, pLength + i + 1);
			String otherTemplateParameters = String.Join(", ", stringList.ToArray());
			
			stringList = GetNumberedList("T{0} t{0}", pLength + 1, pLength + i + 1);
			String otherFunctionParameters = String.Join(", ", stringList.ToArray());
#>
    /// <summary>
    /// Creates a new tuple of length <#= pLength + i + 1 #> with the values passed in appended to the end.
    /// </summary>
<#+
	for(int j = 0; j < i + 1; ++j)
	{
#>
	/// <typeparam name="T<#= pLength + j + 1 #>">Type of the new tuple's Item<#= pLength + j + 1 #></typeparam>
	/// <param name="t<#= pLength + j + 1 #>">Value of the new tuple's Item<#= pLength + j + 1 #></param>
<#+
	}
#>
    /// <returns>A new tuple of length <#= pLength + i + 1 #> with the passed in elements added at the end.</returns>
	public Tuple<<#= newTemplateParameters #>> Append<<#= otherTemplateParameters #>>(<#= otherFunctionParameters #>)
	{
		return Tuple.New(
			Item1
<#+
			for(int j = 1; j < pLength; ++j)
			{
#>
			,Item<#= j + 1 #>
<#+
			}
#>
<#+
			for(int j = 0; j < i + 1; ++j)
			{
#>
			,t<#= j + pLength + 1 #>
<#+
			}
#>
		);
	}

<#+
		}
#>

<#+
		//prepend from tuple
		for(int i = 0; i < maxTupleLength - pLength; ++i)
		{
			stringList = GetNumberedList("T{0}", pLength + 1, pLength + i + 1);
			String otherTemplateParameters = String.Join(", ", stringList.ToArray());
			
			stringList.AddRange(GetNumberedList("T{0}", pLength));
			String newTemplateParameters = String.Join(", ", stringList.ToArray());
			
			stringList = GetNumberedList("T{0} t{0}", pLength + 1, pLength + i + 1);
			String otherFunctionParameters = String.Join(", ", stringList.ToArray());
#>
    /// <summary>
    /// Creates a new tuple of length <#= pLength + i + 1 #> with the values passed in prepended to the beginning.
    /// </summary>
<#+
	for(int j = 0; j < i + 1; ++j)
	{
#>
	/// <typeparam name="T<#= pLength + j + 1 #>">Type of the new tuple's Item<#= j + 1 #></typeparam>
	/// <param name="t<#= pLength + j + 1 #>">Value of the new tuple's Item<#= j + 1 #></param>
<#+
	}
#>
    /// <returns>A new tuple of length <#= pLength + i + 1 #> with the passed in elements added at the beginning.</returns>
	public Tuple<<#= newTemplateParameters #>> Prepend<<#= otherTemplateParameters #>>(<#= otherFunctionParameters #>)
	{
		return Tuple.New(
			t<#= pLength + 1 #>
<#+
			for(int j = 1; j < i + 1; ++j)
			{
#>
			,t<#= j + pLength + 1 #>
<#+
			}
#>
<#+
			for(int j = 0; j < pLength; ++j)
			{
#>
			,Item<#= j + 1 #>
<#+
			}
#>
		);
	}

<#+
		}
#>
	
<#+
		//append from tuple
		for(int i = 0; i < maxTupleLength - pLength; ++i)
		{
			stringList = GetNumberedList("T{0}", pLength + i + 1);
			String newTemplateParameters = String.Join(", ", stringList.ToArray());

			stringList = GetNumberedList("T{0}", pLength + 1, pLength + i + 1);
			String otherTemplateParameters = String.Join(", ", stringList.ToArray());
#>
    /// <summary>
    /// Creates a new tuple of length <#= pLength + i + 1 #> with the values of the tuple passed in appended to the end.
    /// </summary>
<#+
	for(int j = 0; j < i + 1; ++j)
	{
#>
	/// <typeparam name="T<#= pLength + j + 1 #>">Type of the new tuple's Item<#= pLength + j + 1 #></typeparam>
<#+
	}
#>
	/// <param name="pOther">Tuple of length <#= i + 1 #> containing the elements to be appended.</param>
	/// <returns>A new tuple of length <#= pLength + i + 1 #> with the elements of the tuple passed in added at the end.</returns>
	public Tuple<<#= newTemplateParameters #>> Append<<#= otherTemplateParameters #>>(Tuple<<#= otherTemplateParameters #>> pOther)
	{
		return Tuple.New(
			Item1
<#+
			for(int j = 1; j < pLength; ++j)
			{
#>
			,Item<#= j + 1 #>
<#+
			}
#>
<#+
			for(int j = 0; j < i + 1; ++j)
			{
#>
			,pOther.Item<#= j + 1 #>
<#+
			}
#>
		);
	}

<#+
		}
#>

<#+
		//prepend from tuple
		for(int i = 0; i < maxTupleLength - pLength; ++i)
		{
			stringList = GetNumberedList("T{0}", pLength + 1, pLength + i + 1);
			String otherTemplateParameters = String.Join(", ", stringList.ToArray());
			
			stringList.AddRange(GetNumberedList("T{0}", pLength));
			String newTemplateParameters = String.Join(", ", stringList.ToArray());

#>
    /// <summary>
    /// Creates a new tuple of length <#= pLength + i + 1 #> with the values passed from the tuple in prepended to the beginning.
    /// </summary>
<#+
	for(int j = 0; j < i + 1; ++j)
	{
#>
	/// <typeparam name="T<#= pLength + j + 1 #>">Type of the new tuple's Item<#= j + 1 #></typeparam>
<#+
	}
#>
	/// <param name="pOther">Tuple of length <#= i + 1 #> containing the elements to be prepended.</param>
    /// <returns>A new tuple of length <#= pLength + i + 1 #> with the passed in elements added at the beginning.</returns>
	public Tuple<<#= newTemplateParameters #>> Prepend<<#= otherTemplateParameters #>>(Tuple<<#= otherTemplateParameters #>> pOther)
	{
		return Tuple.New(
			pOther.Item1
<#+
			for(int j = 1; j < i + 1; ++j)
			{
#>
			,pOther.Item<#= j + 1 #>
<#+
			}
#>
<#+
			for(int j = 0; j < pLength; ++j)
			{
#>
			,Item<#= j + 1 #>
<#+
			}
#>
		);
	}

<#+
		}
#>

<#+
	}
#>

#region Object overrides

<#+ //generate Object functions
#>
    /// <summary>
    /// Returns the hash code of this instance.
    /// </summary>
    /// <returns>Hash code of the object.</returns>
	public override int GetHashCode()
	{
		int hash = 0;
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
		hash ^= Item<#= i + 1 #>.GetHashCode();
<#+
	}
#>
		return hash;
	}
	
    /// <summary>
    /// Returns a value indicating weather this instance is equal to another instance.
    /// </summary>
    /// <param name="pObj">The object we wish to compare with this instance.</param>
    /// <returns>A value indicating if this object is equal to the one passed in.</returns>
	public override bool Equals(Object pObj)
	{
		if(pObj == null)
			return false;
		if(!(pObj is Tuple<<#= templateParameters #>>))
			return false;

		return Equals((Tuple<<#= templateParameters #>>)pObj);
	}
	
    /// <summary>
    /// Converts the tuple to a string. This will be a comma separated list
	/// of the string values of the elements enclosed in brackets.
    /// </summary>
    /// <returns>A string representation of the tuple.</returns>
	public override string ToString()
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("(");
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
		sb.Append(Item<#= i + 1 #>);
<#+		if(i + 1 != pLength) 
		{
#>
		sb.Append(", ");
<#+
		}
	}
#>
		sb.Append(")");
		return sb.ToString();
	}
	
	
    /// <summary>
	/// Returns a string representation of the tuple using the specified format.
    /// </summary>
	/// <param name="pFormat">The format to use for the string representation.</param>
    /// <returns>A string representation of the tuple.</returns>
	public string ToString(String pFormat)
	{
		return String.Format(pFormat
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
			,Item<#= i + 1 #>
<#+
	}
#>
		);
	}
	
#endregion

#region IEquatable<> implementation

    /// <summary>
    /// A value indicating if this tuple is equal to a tuple
	/// of the same length and type. This will be so if all members are
	/// equal.
    /// </summary>
    /// <returns>A value indicating weather this tuple is equal to another tuple of the same length and type.</returns>
	public bool Equals(Tuple<<#= templateParameters #>> pObj)
	{
		if(pObj == null)
			return false;

		bool result = true;
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
		result = result && EqualityComparer<T<#= i + 1 #>>.Default.Equals(Item<#= i + 1 #>, pObj.Item<#= i + 1 #>);
<#+
	}
#>
		return result;
	}
	
#endregion

#region ICollection implementation

    /// <summary>
    /// Copies the elements of this tuple to an Array.
	/// The array should have at least <#= pLength #> elements available
	/// after the index parameter.
    /// </summary>
	/// <param name="pArray">The array to copy the values to.</param>
	/// <param name="pIndex">The offset in the array at which to start inserting the values.</param>
	void ICollection.CopyTo(Array pArray, int pIndex)
	{
		if (pArray == null)
			throw new ArgumentNullException("pArray");
		if (pIndex < 0)
			throw new ArgumentOutOfRangeException("pIndex");
		if (pArray.Length - pIndex <= 0 || (pArray.Length - pIndex) < <#= pLength #>)
			throw new ArgumentException("pIndex");

<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
		pArray.SetValue(Item<#= i + 1 #>, pIndex + <#= i #>);
<#+
	}
#>
	}
	
    /// <summary>
    /// Gets the length of the tuple, that is it returns <#= pLength #>.
    /// </summary>
	int ICollection.Count
	{
		get { return <#= pLength #>; }
	}
	
	bool ICollection.IsSynchronized
	{
		get { return false; }
	}

	Object ICollection.SyncRoot 
	{
		get { return this; }
	}
	
#endregion

#region IEnumerable implementation

    /// <summary>
    /// Returns an enumerator to this tuple.
    /// </summary>
    /// <returns>An enumerator of the elements of the tuple.</returns>
	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}

#endregion

#region IEnumerable<object> implementation

    /// <summary>
    /// Returns an enumerator to this tuple.
    /// </summary>
    /// <returns>An enumerator of the elements of the tuple.</returns>
	public IEnumerator<Object> GetEnumerator()
    {
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
		yield return Item<#= i + 1 #>;
<#+
	}
#>
    }

#endregion

#region IComparable<> implementation

    /// <summary>
    /// Returns a value indicating the order of this tuple compared
	/// to another tuple of the same length and type. The order is defined
	/// as the order of the first element of the tuples.
    /// </summary>
	/// <param name="pOther">The tuple we are comparing this one to.</param>
    /// <returns>value indicating the order of this tuple compared to another tuple of the same length and type.</returns>
	public int CompareTo(Tuple<<#= templateParameters #>> pOther)
	{
		return Comparer<T1>.Default.Compare(Item1, pOther.Item1);
	}

#endregion

    /// <summary>
    /// Get or sets the value of the element at
	/// the specified index in the tuple.
    /// </summary>
    /// <param name="pIndex">The index of the element in the tuple.</param>
	public Object this[int pIndex]
	{
		get
		{
			switch(pIndex)
			{
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
				case <#= i #> : return Item<#= i + 1 #>;
<#+
	}
#>
			}
			throw new ArgumentOutOfRangeException("pIndex");
		}
			
		set
		{
			switch(pIndex)
			{
<#+
	for(int i = 0; i < pLength; ++i)
	{
#>
				case <#= i #> :
					if(value is T<#= i + 1 #>)
						Item<#= i + 1 #> = (T<#= i + 1 #>)value;
					else
						throw new Exception("Trying to set a field with an object of the wrong type");
					return;
<#+
	}
#>
			}
			throw new ArgumentOutOfRangeException("pIndex");
		}
	}
	
	/// <summary>
    /// Compares two tuples and returns a value indicating if they are equal.
    /// </summary>
    /// <param name="pA">A tuple to compare.</param>
    /// <param name="pB">A tuple to compare.</param>
    /// <returns>A value indicating if the two tuples are equal.</returns>
	public static bool operator==(Tuple<<#= templateParameters #>> pA, Tuple<<#= templateParameters #>> pB)
	{
		if(System.Object.ReferenceEquals(pA, pB))
			return true;

		if((object)pA == null || (object)pB == null)
			return false;

		return pA.Equals(pB);
	}

	/// <summary>
    /// Compares two tuples and returns a value indicating if they are unequal.
    /// </summary>
    /// <param name="pA">A tuple to compare.</param>
    /// <param name="pB">A tuple to compare.</param>
    /// <returns>A value indicating if the two tuples are unequal.</returns>
	public static bool operator!=(Tuple<<#= templateParameters #>> pA, Tuple<<#= templateParameters #>> pB)
	{
		return !pA.Equals(pB);
	}
	
<#+
	//generate properties
	for(int i = 0; i < pLength; ++i)
	{
#>
    /// <summary>
    /// Gets the element of the tuple at position <#= i + 1 #>.
    /// </summary>
<#+
		if(addDataContract) 
		{
#>
	[DataMember]
<#+
		}
#>
	public T<#= i + 1 #> Item<#= i + 1 #> { get; set; }
	
<#+
	}
#>
 
<#+
	//generate ordinal number properties
	if(generateOrdinalNames) 
	{
#>
<#+
		for(int i = 0; i < pLength && i < maxOrdinal; ++i)
		{
#>
    /// <summary>
    /// Gets or sets the <#= GetOrdinalNumber(i + 1).ToLower() #> element of
	/// the tuple. Same as using Item<#= i + 1 #>. Only added for
	/// syntax reasons.
    /// </summary>
	public T<#= i + 1 #> <#= GetOrdinalNumber(i + 1) #>
	{ 
		get { return Item<#= i + 1 #>; }
		set { Item<#= i + 1 #> = value; }
	}
	
<#+
		}
	}
#>
 
<#+
	//generate ordinal number properties
	if(generateHeadTail) 
	{
#>
    /// <summary>
    /// Gets or sets the head of the tuple, that is the first element.
	/// Same as using the properties Item1 or First. Only Added
	/// for syntax reasons.
    /// </summary>
	public T1 Head
	{
		get { return Item1; }
		set { Item1 = value; }
	}
	
<#+
		if(pLength != 1) 
		{
			stringList = GetNumberedList("T{0}", 2, pLength);
			String tailTemplateParameters = String.Join(", ", stringList.ToArray());
#>
    /// <summary>
    /// Gets the tail of the tuple, that is, all elements
	/// except the first one. This property actually returns a completely
	/// new tuple so be careful about that as changing the tail
	/// not change the original tuple.
    /// </summary>
	public Tuple <<#= tailTemplateParameters  #>> Tail
	{
		get
		{
			return Tuple.New(
				Item2
<#+
			for(int i = 2; i < pLength; ++i)
			{
#>
				,Item<#= i + 1 #>
<#+
			}
#>
			);
		}
	}
<#+
		}
	}
#>
}

<#+
}
#>
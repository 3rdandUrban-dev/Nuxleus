<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" debug="true" hostSpecific="true" #>
<#@ assembly name="Microsoft.VisualStudio.TextTemplating.Modeling.10.0.dll" #>
<#@ output extension=".cs" #>

<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#@ include file="Settings.ttinclude" #>
<#@ include file="Util.ttinclude" #>

using System.Collections;

<#
if(generateConversions && generateExtension)
{
#>
namespace System.Tuples
{
#region Conversions
	
	/// <summary>
	/// Static class containing extension methods For IEnumberable that convert a list
	/// to a tuple. Same as calling Tuple.ToTuple(enumerable), but shorter
	/// </summary>
	public static class TupleConversions
	{
<#
	for(int i = 0; i < maxTupleLength; ++i)
	{
		List<String> stringList = GetNumberedList("T{0}", i + 1);
		String templateParameters = String.Join(", ", stringList.ToArray());
#>
        /// <summary>
        /// Creates a tuple of length <#= i + 1 #> by taking values from the enumerable called on / passed in.
		/// Same as calling Tuple.ToTuple&lt;<#= templateParameters #>&gt;(pList)
        /// </summary>
<#
		for(int j = 0; j < i + 1; ++j)
		{
#>
        /// <typeparam name="T<#= j + 1 #>">Type of the new Element<#= j + 1 #>. Enumerable must have an object of the same type at position <#= j + 1 #></typeparam>
<#
		}
#>
        /// <param name="pList">The Enumerable form which to take the new tuple elements. Should have at least <#= i + 1 #> elements.</param>
        /// <returns>Tuple of length <#= i + 1 #> that contains values from the enumerable.</returns>
		public static Tuple<<#= templateParameters #>> ToTuple<<#= templateParameters #>>(this IEnumerable pList)
		{
			return Tuple.ToTuple<<#= templateParameters #>>(pList);
		}
		
<#
	}
#>
	}

#endregion
}
<#
}
#>
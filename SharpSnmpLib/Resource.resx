<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="novarbind" type="System.Byte[], mscorlib">
    <value>MCICAQAEBnB1YmxpY6QVBgErQAR/AAABAgEGAgEMQwI/4DAA</value>
  </data>
  <data name="onevarbind" type="System.Byte[], mscorlib">
    <value>
        MEQCAQAEBnB1YmxpY6Q3BgorBgEEAZByh2gCQAR/AAABAgEGAgEMQwI/4DAZMBcGCysGAQQBkHKHaRUA
        BAhUcmFwVGVzdA==
</value>
  </data>
  <data name="twovarbinds" type="System.Byte[], mscorlib">
    <value>
        MF0CAQAEBnB1YmxpY6RQBgorBgEEAZByh2gCQAR/AAABAgEGAgEMQwI/4DAyMBcGCysGAQQBkHKHaRUA
        BAhUcmFwVGVzdDAXBgsrBgEEAZByh2kWAAQIVHJhcFRlc3Q=
</value>
  </data>
  <data name="fivevarbinds" type="System.Byte[], mscorlib">
    <value>
        MIGuAgEABAZwdWJsaWOkgaAGCisGAQQBkHKHaAJABH8AAAECAQYCAQxDAj/gMIGBMBcGCysGAQQBkHKH
        aRUABAhUcmFwVGVzdDAYBgsrBgEEAZByh2kWAAQJVHJhcFRlc3QyMBgGCysGAQQBkHKHaRcABAlUcmFw
        VGVzdDMwGAYLKwYBBAGQcodpGAAECVRyYXBUZXN0NDAYBgsrBgEEAZByh2kZAAQJVHJhcFRlc3Q1
</value>
  </data>
  <data name="get" type="System.Byte[], mscorlib">
    <value>MIEvAoEBAASBBnB1YmxpY6CBHwKBAQoCgQEAAoEBADCBEDCBDQaBCCsGAQIBAQYABQA=</value>
  </data>
  <data name="getresponse" type="System.Byte[], mscorlib">
    <value>MC4CAQAEBnB1YmxpY6IhAgEKAgEAAgEAMBYwFAYIKwYBAgEBBgAECFNoYW5naGFp</value>
  </data>
  <data name="SNMPv2-SMI" type="System.Byte[], mscorlib">
    <value>
        U05NUHYyLVNNSSBERUZJTklUSU9OUyA6Oj0gQkVHSU4KCi0tIHRoZSBwYXRoIHRvIHRoZSByb290Cgpv
        cmcgICAgICAgICAgICBPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyBpc28gMyB9ICAtLSAgImlzbyIgPSAx
        CmRvZCAgICAgICAgICAgIE9CSkVDVCBJREVOVElGSUVSIDo6PSB7IG9yZyA2IH0KaW50ZXJuZXQgICAg
        ICAgT0JKRUNUIElERU5USUZJRVIgOjo9IHsgZG9kIDEgfQoKZGlyZWN0b3J5ICAgICAgT0JKRUNUIElE
        RU5USUZJRVIgOjo9IHsgaW50ZXJuZXQgMSB9CgptZ210ICAgICAgICAgICBPQkpFQ1QgSURFTlRJRklF
        UiA6Oj0geyBpbnRlcm5ldCAyIH0KbWliLTIgICAgICAgICAgT0JKRUNUIElERU5USUZJRVIgOjo9IHsg
        bWdtdCAxIH0KdHJhbnNtaXNzaW9uICAgT0JKRUNUIElERU5USUZJRVIgOjo9IHsgbWliLTIgMTAgfQoK
        ZXhwZXJpbWVudGFsICAgT0JKRUNUIElERU5USUZJRVIgOjo9IHsgaW50ZXJuZXQgMyB9Cgpwcml2YXRl
        ICAgICAgICBPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyBpbnRlcm5ldCA0IH0KZW50ZXJwcmlzZXMgICAg
        T0JKRUNUIElERU5USUZJRVIgOjo9IHsgcHJpdmF0ZSAxIH0KCnNlY3VyaXR5ICAgICAgIE9CSkVDVCBJ
        REVOVElGSUVSIDo6PSB7IGludGVybmV0IDUgfQoKc25tcFYyICAgICAgICAgT0JKRUNUIElERU5USUZJ
        RVIgOjo9IHsgaW50ZXJuZXQgNiB9CgotLSB0cmFuc3BvcnQgZG9tYWlucwpzbm1wRG9tYWlucyAgICBP
        QkpFQ1QgSURFTlRJRklFUiA6Oj0geyBzbm1wVjIgMSB9CgotLSB0cmFuc3BvcnQgcHJveGllcwpzbm1w
        UHJveHlzICAgICBPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyBzbm1wVjIgMiB9CgotLSBtb2R1bGUgaWRl
        bnRpdGllcwpzbm1wTW9kdWxlcyAgICBPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyBzbm1wVjIgMyB9Cgot
        LSBFeHRlbmRlZCBVVENUaW1lLCB0byBhbGxvdyBkYXRlcyB3aXRoIGZvdXItZGlnaXQgeWVhcnMKLS0g
        KE5vdGUgdGhhdCB0aGlzIGRlZmluaXRpb24gb2YgRXh0VVRDVGltZSBpcyBub3QgdG8gYmUgSU1QT1JU
        ZWQKLS0gIGJ5IE1JQiBtb2R1bGVzLikKRXh0VVRDVGltZSA6Oj0gT0NURVQgU1RSSU5HKFNJWkUoMTEg
        fCAxMykpCiAgICAtLSBmb3JtYXQgaXMgWVlNTURESEhNTVogb3IgWVlZWU1NRERISE1NWgoKICAgIC0t
        ICAgd2hlcmU6IFlZICAgLSBsYXN0IHR3byBkaWdpdHMgb2YgeWVhciAob25seSB5ZWFycwogICAgLS0g
        ICAgICAgICAgICAgICAgIGJldHdlZW4gMTkwMC0xOTk5KQogICAgLS0gICAgICAgICAgWVlZWSAtIGxh
        c3QgZm91ciBkaWdpdHMgb2YgdGhlIHllYXIgKGFueSB5ZWFyKQogICAgLS0gICAgICAgICAgTU0gICAt
        IG1vbnRoICgwMSB0aHJvdWdoIDEyKQogICAgLS0gICAgICAgICAgREQgICAtIGRheSBvZiBtb250aCAo
        MDEgdGhyb3VnaCAzMSkKICAgIC0tICAgICAgICAgIEhIICAgLSBob3VycyAoMDAgdGhyb3VnaCAyMykK
        ICAgIC0tICAgICAgICAgIE1NICAgLSBtaW51dGVzICgwMCB0aHJvdWdoIDU5KQogICAgLS0gICAgICAg
        ICAgWiAgICAtIGRlbm90ZXMgR01UICh0aGUgQVNDSUkgY2hhcmFjdGVyIFopCiAgICAtLQogICAgLS0g
        Rm9yIGV4YW1wbGUsICI5NTAyMTkyMDE1WiIgYW5kICIxOTk1MDIxOTIwMTVaIiByZXByZXNlbnQKICAg
        IC0tIDg6MTVwbSBHTVQgb24gMTkgRmVicnVhcnkgMTk5NS4gWWVhcnMgYWZ0ZXIgMTk5OSBtdXN0IHVz
        ZQogICAgLS0gdGhlIGZvdXIgZGlnaXQgeWVhciBmb3JtYXQuIFllYXJzIDE5MDAtMTk5OSBtYXkgdXNl
        IHRoZQogICAgLS0gdHdvIG9yIGZvdXIgZGlnaXQgZm9ybWF0LgoKLS0gZGVmaW5pdGlvbnMgZm9yIGlu
        Zm9ybWF0aW9uIG1vZHVsZXMKCk1PRFVMRS1JREVOVElUWSBNQUNSTyA6Oj0KQkVHSU4KICAgIFRZUEUg
        Tk9UQVRJT04gOjo9CiAgICAgICAgICAgICAgICAgICJMQVNULVVQREFURUQiIHZhbHVlKFVwZGF0ZSBF
        eHRVVENUaW1lKQogICAgICAgICAgICAgICAgICAiT1JHQU5JWkFUSU9OIiBUZXh0CiAgICAgICAgICAg
        ICAgICAgICJDT05UQUNULUlORk8iIFRleHQKICAgICAgICAgICAgICAgICAgIkRFU0NSSVBUSU9OIiBU
        ZXh0CiAgICAgICAgICAgICAgICAgIFJldmlzaW9uUGFydAoKICAgIFZBTFVFIE5PVEFUSU9OIDo6PQog
        ICAgICAgICAgICAgICAgICB2YWx1ZShWQUxVRSBPQkpFQ1QgSURFTlRJRklFUikKCiAgICBSZXZpc2lv
        blBhcnQgOjo9CiAgICAgICAgICAgICAgICAgIFJldmlzaW9ucwogICAgICAgICAgICAgICAgfCBlbXB0
        eQogICAgUmV2aXNpb25zIDo6PQogICAgICAgICAgICAgICAgICBSZXZpc2lvbgogICAgICAgICAgICAg
        ICAgfCBSZXZpc2lvbnMgUmV2aXNpb24KICAgIFJldmlzaW9uIDo6PQogICAgICAgICAgICAgICAgICAi
        UkVWSVNJT04iIHZhbHVlKFVwZGF0ZSBFeHRVVENUaW1lKQogICAgICAgICAgICAgICAgICAiREVTQ1JJ
        UFRJT04iIFRleHQKCiAgICAtLSBhIGNoYXJhY3RlciBzdHJpbmcgYXMgZGVmaW5lZCBpbiBzZWN0aW9u
        IDMuMS4xCiAgICBUZXh0IDo6PSB2YWx1ZShJQTVTdHJpbmcpCkVORAoKT0JKRUNULUlERU5USVRZIE1B
        Q1JPIDo6PQpCRUdJTgogICAgVFlQRSBOT1RBVElPTiA6Oj0KICAgICAgICAgICAgICAgICAgIlNUQVRV
        UyIgU3RhdHVzCiAgICAgICAgICAgICAgICAgICJERVNDUklQVElPTiIgVGV4dAoKICAgICAgICAgICAg
        ICAgICAgUmVmZXJQYXJ0CgogICAgVkFMVUUgTk9UQVRJT04gOjo9CiAgICAgICAgICAgICAgICAgIHZh
        bHVlKFZBTFVFIE9CSkVDVCBJREVOVElGSUVSKQoKICAgIFN0YXR1cyA6Oj0KICAgICAgICAgICAgICAg
        ICAgImN1cnJlbnQiCiAgICAgICAgICAgICAgICB8ICJkZXByZWNhdGVkIgogICAgICAgICAgICAgICAg
        fCAib2Jzb2xldGUiCgogICAgUmVmZXJQYXJ0IDo6PQogICAgICAgICAgICAgICAgICAiUkVGRVJFTkNF
        IiBUZXh0CiAgICAgICAgICAgICAgICB8IGVtcHR5CgogICAgLS0gYSBjaGFyYWN0ZXIgc3RyaW5nIGFz
        IGRlZmluZWQgaW4gc2VjdGlvbiAzLjEuMQogICAgVGV4dCA6Oj0gdmFsdWUoSUE1U3RyaW5nKQpFTkQK
        Ci0tIG5hbWVzIG9mIG9iamVjdHMKLS0gKE5vdGUgdGhhdCB0aGVzZSBkZWZpbml0aW9ucyBvZiBPYmpl
        Y3ROYW1lIGFuZCBOb3RpZmljYXRpb25OYW1lCi0tICBhcmUgbm90IHRvIGJlIElNUE9SVGVkIGJ5IE1J
        QiBtb2R1bGVzLikKCk9iamVjdE5hbWUgOjo9CiAgICBPQkpFQ1QgSURFTlRJRklFUgoKTm90aWZpY2F0
        aW9uTmFtZSA6Oj0KICAgIE9CSkVDVCBJREVOVElGSUVSCgotLSBzeW50YXggb2Ygb2JqZWN0cwoKLS0g
        dGhlICJiYXNlIHR5cGVzIiBkZWZpbmVkIGhlcmUgYXJlOgotLSAgIDMgYnVpbHQtaW4gQVNOLjEgdHlw
        ZXM6IElOVEVHRVIsIE9DVEVUIFNUUklORywgT0JKRUNUIElERU5USUZJRVIKLS0gICA4IGFwcGxpY2F0
        aW9uLWRlZmluZWQgdHlwZXM6IEludGVnZXIzMiwgSXBBZGRyZXNzLCBDb3VudGVyMzIsCi0tICAgICAg
        ICAgICAgICBHYXVnZTMyLCBVbnNpZ25lZDMyLCBUaW1lVGlja3MsIE9wYXF1ZSwgYW5kIENvdW50ZXI2
        NAoKT2JqZWN0U3ludGF4IDo6PQogICAgQ0hPSUNFIHsKICAgICAgICBzaW1wbGUKICAgICAgICAgICAg
        U2ltcGxlU3ludGF4LAogICAgICAgICAgLS0gbm90ZSB0aGF0IFNFUVVFTkNFcyBmb3IgY29uY2VwdHVh
        bCB0YWJsZXMgYW5kCiAgICAgICAgICAtLSByb3dzIGFyZSBub3QgbWVudGlvbmVkIGhlcmUuLi4KCiAg
        ICAgICAgYXBwbGljYXRpb24td2lkZQogICAgICAgICAgICBBcHBsaWNhdGlvblN5bnRheAogICAgfQoK
        LS0gYnVpbHQtaW4gQVNOLjEgdHlwZXMKClNpbXBsZVN5bnRheCA6Oj0KICAgIENIT0lDRSB7CiAgICAg
        ICAgLS0gSU5URUdFUnMgd2l0aCBhIG1vcmUgcmVzdHJpY3RpdmUgcmFuZ2UKICAgICAgICAtLSBtYXkg
        YWxzbyBiZSB1c2VkCiAgICAgICAgaW50ZWdlci12YWx1ZSAgICAgICAgICAgICAgIC0tIGluY2x1ZGVz
        IEludGVnZXIzMgogICAgICAgICAgICBJTlRFR0VSICgtMjE0NzQ4MzY0OC4uMjE0NzQ4MzY0NyksCiAg
        ICAgICAgLS0gT0NURVQgU1RSSU5HcyB3aXRoIGEgbW9yZSByZXN0cmljdGl2ZSBzaXplCiAgICAgICAg
        LS0gbWF5IGFsc28gYmUgdXNlZAogICAgICAgIHN0cmluZy12YWx1ZQogICAgICAgICAgICBPQ1RFVCBT
        VFJJTkcgKFNJWkUgKDAuLjY1NTM1KSksCiAgICAgICAgb2JqZWN0SUQtdmFsdWUKICAgICAgICAgICAg
        T0JKRUNUIElERU5USUZJRVIKICAgIH0KCi0tIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gSU5URUdFUiwg
        YnV0IG5ldmVyIG5lZWRzIG1vcmUgdGhhbgotLSAzMi1iaXRzIGZvciBhIHR3bydzIGNvbXBsZW1lbnQg
        cmVwcmVzZW50YXRpb24KSW50ZWdlcjMyIDo6PQogICAgICAgIElOVEVHRVIgKC0yMTQ3NDgzNjQ4Li4y
        MTQ3NDgzNjQ3KQoKLS0gYXBwbGljYXRpb24td2lkZSB0eXBlcwoKQXBwbGljYXRpb25TeW50YXggOjo9
        CiAgICBDSE9JQ0UgewogICAgICAgIGlwQWRkcmVzcy12YWx1ZQogICAgICAgICAgICBJcEFkZHJlc3Ms
        CiAgICAgICAgY291bnRlci12YWx1ZQogICAgICAgICAgICBDb3VudGVyMzIsCiAgICAgICAgdGltZXRp
        Y2tzLXZhbHVlCiAgICAgICAgICAgIFRpbWVUaWNrcywKICAgICAgICBhcmJpdHJhcnktdmFsdWUKICAg
        ICAgICAgICAgT3BhcXVlLAogICAgICAgIGJpZy1jb3VudGVyLXZhbHVlCiAgICAgICAgICAgIENvdW50
        ZXI2NCwKICAgICAgICB1bnNpZ25lZC1pbnRlZ2VyLXZhbHVlICAtLSBpbmNsdWRlcyBHYXVnZTMyCiAg
        ICAgICAgICAgIFVuc2lnbmVkMzIKICAgIH0KCi0tIGluIG5ldHdvcmstYnl0ZSBvcmRlcgoKLS0gKHRo
        aXMgaXMgYSB0YWdnZWQgdHlwZSBmb3IgaGlzdG9yaWNhbCByZWFzb25zKQpJcEFkZHJlc3MgOjo9CiAg
        ICBbQVBQTElDQVRJT04gMF0KICAgICAgICBJTVBMSUNJVCBPQ1RFVCBTVFJJTkcgKFNJWkUgKDQpKQoK
        LS0gdGhpcyB3cmFwcwpDb3VudGVyMzIgOjo9CiAgICBbQVBQTElDQVRJT04gMV0KICAgICAgICBJTVBM
        SUNJVCBJTlRFR0VSICgwLi40Mjk0OTY3Mjk1KQoKLS0gdGhpcyBkb2Vzbid0IHdyYXAKR2F1Z2UzMiA6
        Oj0KICAgIFtBUFBMSUNBVElPTiAyXQogICAgICAgIElNUExJQ0lUIElOVEVHRVIgKDAuLjQyOTQ5Njcy
        OTUpCgotLSBhbiB1bnNpZ25lZCAzMi1iaXQgcXVhbnRpdHkKLS0gaW5kaXN0aW5ndWlzaGFibGUgZnJv
        bSBHYXVnZTMyClVuc2lnbmVkMzIgOjo9CiAgICBbQVBQTElDQVRJT04gMl0KICAgICAgICBJTVBMSUNJ
        VCBJTlRFR0VSICgwLi40Mjk0OTY3Mjk1KQoKLS0gaHVuZHJlZHRocyBvZiBzZWNvbmRzIHNpbmNlIGFu
        IGVwb2NoClRpbWVUaWNrcyA6Oj0KICAgIFtBUFBMSUNBVElPTiAzXQogICAgICAgIElNUExJQ0lUIElO
        VEVHRVIgKDAuLjQyOTQ5NjcyOTUpCgotLSBmb3IgYmFja3dhcmQtY29tcGF0aWJpbGl0eSBvbmx5Ck9w
        YXF1ZSA6Oj0KICAgIFtBUFBMSUNBVElPTiA0XQogICAgICAgIElNUExJQ0lUIE9DVEVUIFNUUklORwoK
        LS0gZm9yIGNvdW50ZXJzIHRoYXQgd3JhcCBpbiBsZXNzIHRoYW4gb25lIGhvdXIgd2l0aCBvbmx5IDMy
        IGJpdHMKQ291bnRlcjY0IDo6PQogICAgW0FQUExJQ0FUSU9OIDZdCiAgICAgICAgSU1QTElDSVQgSU5U
        RUdFUiAoMC4uMTg0NDY3NDQwNzM3MDk1NTE2MTUpCgotLSBkZWZpbml0aW9uIGZvciBvYmplY3RzCgpP
        QkpFQ1QtVFlQRSBNQUNSTyA6Oj0KQkVHSU4KICAgIFRZUEUgTk9UQVRJT04gOjo9CiAgICAgICAgICAg
        ICAgICAgICJTWU5UQVgiIFN5bnRheAogICAgICAgICAgICAgICAgICBVbml0c1BhcnQKICAgICAgICAg
        ICAgICAgICAgIk1BWC1BQ0NFU1MiIEFjY2VzcwogICAgICAgICAgICAgICAgICAiU1RBVFVTIiBTdGF0
        dXMKICAgICAgICAgICAgICAgICAgIkRFU0NSSVBUSU9OIiBUZXh0CiAgICAgICAgICAgICAgICAgIFJl
        ZmVyUGFydAoKICAgICAgICAgICAgICAgICAgSW5kZXhQYXJ0CiAgICAgICAgICAgICAgICAgIERlZlZh
        bFBhcnQKCiAgICBWQUxVRSBOT1RBVElPTiA6Oj0KICAgICAgICAgICAgICAgICAgdmFsdWUoVkFMVUUg
        T2JqZWN0TmFtZSkKCiAgICBTeW50YXggOjo9ICAgLS0gTXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2lu
        ZzoKICAgICAgICAgICAgICAgICAgICAgICAtLSBhIGJhc2UgdHlwZSAob3IgaXRzIHJlZmluZW1lbnQp
        LAogICAgICAgICAgICAgICAgICAgICAgIC0tIGEgdGV4dHVhbCBjb252ZW50aW9uIChvciBpdHMgcmVm
        aW5lbWVudCksIG9yCiAgICAgICAgICAgICAgICAgICAgICAgLS0gYSBCSVRTIHBzZXVkby10eXBlCiAg
        ICAgICAgICAgICAgICAgICB0eXBlCiAgICAgICAgICAgICAgICB8ICJCSVRTIiAieyIgTmFtZWRCaXRz
        ICJ9IgoKICAgIE5hbWVkQml0cyA6Oj0gTmFtZWRCaXQKICAgICAgICAgICAgICAgIHwgTmFtZWRCaXRz
        ICIsIiBOYW1lZEJpdAoKICAgIE5hbWVkQml0IDo6PSAgaWRlbnRpZmllciAiKCIgbnVtYmVyICIpIiAt
        LSBudW1iZXIgaXMgbm9ubmVnYXRpdmUKCiAgICBVbml0c1BhcnQgOjo9CiAgICAgICAgICAgICAgICAg
        ICJVTklUUyIgVGV4dAogICAgICAgICAgICAgICAgfCBlbXB0eQoKICAgIEFjY2VzcyA6Oj0KICAgICAg
        ICAgICAgICAgICAgIm5vdC1hY2Nlc3NpYmxlIgogICAgICAgICAgICAgICAgfCAiYWNjZXNzaWJsZS1m
        b3Itbm90aWZ5IgogICAgICAgICAgICAgICAgfCAicmVhZC1vbmx5IgogICAgICAgICAgICAgICAgfCAi
        cmVhZC13cml0ZSIKICAgICAgICAgICAgICAgIHwgInJlYWQtY3JlYXRlIgoKICAgIFN0YXR1cyA6Oj0K
        ICAgICAgICAgICAgICAgICAgImN1cnJlbnQiCiAgICAgICAgICAgICAgICB8ICJkZXByZWNhdGVkIgog
        ICAgICAgICAgICAgICAgfCAib2Jzb2xldGUiCgogICAgUmVmZXJQYXJ0IDo6PQogICAgICAgICAgICAg
        ICAgICAiUkVGRVJFTkNFIiBUZXh0CiAgICAgICAgICAgICAgICB8IGVtcHR5CgogICAgSW5kZXhQYXJ0
        IDo6PQogICAgICAgICAgICAgICAgICAiSU5ERVgiICAgICJ7IiBJbmRleFR5cGVzICJ9IgogICAgICAg
        ICAgICAgICAgfCAiQVVHTUVOVFMiICJ7IiBFbnRyeSAgICAgICJ9IgogICAgICAgICAgICAgICAgfCBl
        bXB0eQogICAgSW5kZXhUeXBlcyA6Oj0KICAgICAgICAgICAgICAgICAgSW5kZXhUeXBlCiAgICAgICAg
        ICAgICAgICB8IEluZGV4VHlwZXMgIiwiIEluZGV4VHlwZQogICAgSW5kZXhUeXBlIDo6PQogICAgICAg
        ICAgICAgICAgICAiSU1QTElFRCIgSW5kZXgKICAgICAgICAgICAgICAgIHwgSW5kZXgKCiAgICBJbmRl
        eCA6Oj0KICAgICAgICAgICAgICAgICAgICAtLSB1c2UgdGhlIFNZTlRBWCB2YWx1ZSBvZiB0aGUKICAg
        ICAgICAgICAgICAgICAgICAtLSBjb3JyZXNwb25kZW50IE9CSkVDVC1UWVBFIGludm9jYXRpb24KICAg
        ICAgICAgICAgICAgICAgdmFsdWUoT2JqZWN0TmFtZSkKICAgIEVudHJ5IDo6PQogICAgICAgICAgICAg
        ICAgICAgIC0tIHVzZSB0aGUgSU5ERVggdmFsdWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgLS0g
        Y29ycmVzcG9uZGVudCBPQkpFQ1QtVFlQRSBpbnZvY2F0aW9uCiAgICAgICAgICAgICAgICAgIHZhbHVl
        KE9iamVjdE5hbWUpCgogICAgRGVmVmFsUGFydCA6Oj0gIkRFRlZBTCIgInsiIERlZnZhbHVlICJ9Igog
        ICAgICAgICAgICAgICAgfCBlbXB0eQoKICAgIERlZnZhbHVlIDo6PSAgLS0gbXVzdCBiZSB2YWxpZCBm
        b3IgdGhlIHR5cGUgc3BlY2lmaWVkIGluCiAgICAgICAgICAgICAgICAgIC0tIFNZTlRBWCBjbGF1c2Ug
        b2Ygc2FtZSBPQkpFQ1QtVFlQRSBtYWNybwogICAgICAgICAgICAgICAgICB2YWx1ZShPYmplY3RTeW50
        YXgpCiAgICAgICAgICAgICAgICB8ICJ7IiBCaXRzVmFsdWUgIn0iCgogICAgQml0c1ZhbHVlIDo6PSBC
        aXROYW1lcwogICAgICAgICAgICAgICAgfCBlbXB0eQoKICAgIEJpdE5hbWVzIDo6PSAgQml0TmFtZQog
        ICAgICAgICAgICAgICAgfCBCaXROYW1lcyAiLCIgQml0TmFtZQoKICAgIEJpdE5hbWUgOjo9IGlkZW50
        aWZpZXIKCiAgICAtLSBhIGNoYXJhY3RlciBzdHJpbmcgYXMgZGVmaW5lZCBpbiBzZWN0aW9uIDMuMS4x
        CiAgICBUZXh0IDo6PSB2YWx1ZShJQTVTdHJpbmcpCkVORAoKLS0gZGVmaW5pdGlvbnMgZm9yIG5vdGlm
        aWNhdGlvbnMKCk5PVElGSUNBVElPTi1UWVBFIE1BQ1JPIDo6PQpCRUdJTgogICAgVFlQRSBOT1RBVElP
        TiA6Oj0KICAgICAgICAgICAgICAgICAgT2JqZWN0c1BhcnQKICAgICAgICAgICAgICAgICAgIlNUQVRV
        UyIgU3RhdHVzCiAgICAgICAgICAgICAgICAgICJERVNDUklQVElPTiIgVGV4dAogICAgICAgICAgICAg
        ICAgICBSZWZlclBhcnQKCiAgICBWQUxVRSBOT1RBVElPTiA6Oj0KICAgICAgICAgICAgICAgICAgdmFs
        dWUoVkFMVUUgTm90aWZpY2F0aW9uTmFtZSkKCiAgICBPYmplY3RzUGFydCA6Oj0KICAgICAgICAgICAg
        ICAgICAgIk9CSkVDVFMiICJ7IiBPYmplY3RzICJ9IgogICAgICAgICAgICAgICAgfCBlbXB0eQogICAg
        T2JqZWN0cyA6Oj0KICAgICAgICAgICAgICAgICAgT2JqZWN0CgogICAgICAgICAgICAgICAgfCBPYmpl
        Y3RzICIsIiBPYmplY3QKICAgIE9iamVjdCA6Oj0KICAgICAgICAgICAgICAgICAgdmFsdWUoT2JqZWN0
        TmFtZSkKCiAgICBTdGF0dXMgOjo9CiAgICAgICAgICAgICAgICAgICJjdXJyZW50IgogICAgICAgICAg
        ICAgICAgfCAiZGVwcmVjYXRlZCIKICAgICAgICAgICAgICAgIHwgIm9ic29sZXRlIgoKICAgIFJlZmVy
        UGFydCA6Oj0KICAgICAgICAgICAgICAgICAgIlJFRkVSRU5DRSIgVGV4dAogICAgICAgICAgICAgICAg
        fCBlbXB0eQoKICAgIC0tIGEgY2hhcmFjdGVyIHN0cmluZyBhcyBkZWZpbmVkIGluIHNlY3Rpb24gMy4x
        LjEKICAgIFRleHQgOjo9IHZhbHVlKElBNVN0cmluZykKRU5ECgotLSBkZWZpbml0aW9ucyBvZiBhZG1p
        bmlzdHJhdGl2ZSBpZGVudGlmaWVycwoKemVyb0RvdFplcm8gICAgT0JKRUNULUlERU5USVRZCiAgICBT
        VEFUVVMgICAgIGN1cnJlbnQKICAgIERFU0NSSVBUSU9OCiAgICAgICAgICAgICJBIHZhbHVlIHVzZWQg
        Zm9yIG51bGwgaWRlbnRpZmllcnMuIgogICAgOjo9IHsgMCAwIH0KCkVORAo=
</value>
  </data>
</root>
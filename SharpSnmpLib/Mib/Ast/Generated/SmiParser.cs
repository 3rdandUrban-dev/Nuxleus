//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Smi.g 2011-12-24 17:19:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


#pragma warning disable 3001, 3003, 3005, 3009, 1591 


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Lextm.SharpSnmpLib.Mib.Ast 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class SmiParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSENT_KW", "ABSTRACT_SYNTAX_KW", "ALL_KW", "ANY_KW", "APPLICATION_KW", "ARGUMENT_KW", "ASSIGN_OP", "AUTOMATIC_KW", "BAR", "BASED_NUM_KW", "BEGIN_KW", "BIT_KW", "BLK_COMMENT", "BMP_STR_KW", "BOOLEAN_KW", "BY_KW", "B_OR_H_STRING", "B_STRING", "CHARACTER_KW", "CHARB", "CHARH", "CHOICE_KW", "CLASS_KW", "COLON", "COMMA", "COMMENT", "COMPONENTS_KW", "COMPONENT_KW", "CONSTRAINED_KW", "C_STRING", "DEFAULT_KW", "DEFINED_KW", "DEFINITIONS_KW", "DOT", "DOTDOT", "DOTDOTDOT", "EMBEDDED_KW", "END_KW", "ENUMERATED_KW", "ERRORS_KW", "ERROR_KW", "EXCEPT_KW", "EXCLAMATION", "EXPLICIT_KW", "EXPORTS_KW", "EXTENSIBILITY_KW", "EXTERNAL_KW", "FALSE_KW", "FROM_KW", "GENERALIZED_TIME_KW", "GENERAL_STR_KW", "GRAPHIC_STR_KW", "HDIG", "H_STRING", "IA5_STRING_KW", "IDENTIFIER_KW", "IMPLICIT_KW", "IMPLIED_KW", "IMPORTS_KW", "INCLUDES_KW", "INSTANCE_KW", "INTEGER_KW", "INTERSECTION", "INTERSECTION_KW", "ISO646_STR_KW", "LESS", "LINKED_KW", "LOWER", "L_BRACE", "L_BRACKET", "L_PAREN", "MAX_KW", "MINUS", "MINUS_INFINITY_KW", "MIN_KW", "NULL_KW", "NUMBER", "NUMERIC_STR_KW", "OBJECT_DESCRIPTOR_KW", "OBJECT_KW", "OCTET_KW", "OF_KW", "OID_KW", "OPERATION_KW", "OPTIONAL_KW", "PARAMETER_KW", "PATTERN_KW", "PDV_KW", "PLUS", "PLUS_INFINITY_KW", "PRESENT_KW", "PRINTABLE_STR_KW", "PRIVATE_KW", "REAL_KW", "RELATIVE_KW", "RESULT_KW", "R_BRACE", "R_BRACKET", "R_PAREN", "SEMI", "SEQUENCE_KW", "SET_KW", "SINGLE_QUOTE", "SIZE_KW", "SL_COMMENT", "STRING_KW", "T61_STR_KW", "TAGS_KW", "TELETEX_STR_KW", "TRUE_KW", "TYPE_IDENTIFIER_KW", "UNION_KW", "UNIQUE_KW", "UNIVERSAL_KW", "UNIVERSAL_STR_KW", "UPPER", "UTC_TIME_KW", "UTF8_STR_KW", "VIDEOTEX_STR_KW", "VISIBLE_STR_KW", "WITH_KW", "WS", "'ABSTRACT-BIND'", "'ABSTRACT-ERROR'", "'ABSTRACT-OPERATION'", "'ABSTRACT-UNBIND'", "'ACCESS'", "'AGENT-CAPABILITIES'", "'ALGORITHM'", "'APPLICATION-CONTEXT'", "'APPLICATION-SERVICE-ELEMENT'", "'AUGMENTS'", "'BIND'", "'BITS'", "'CONTACT-INFO'", "'CREATION-REQUIRES'", "'DEFVAL'", "'DESCRIPTION'", "'DISPLAY-HINT'", "'ENCRYPTED'", "'ENTERPRISE'", "'EXTENDS'", "'EXTENSION'", "'EXTENSION-ATTRIBUTE'", "'EXTENSIONS'", "'GROUP'", "'INDEX'", "'INSTALL-ERRORS'", "'LAST-UPDATED'", "'MACRO'", "'MANDATORY-GROUPS'", "'MAX-ACCESS'", "'MIN-ACCESS'", "'MODULE'", "'MODULE-COMPLIANCE'", "'MODULE-IDENTITY'", "'NOTIFICATION-GROUP'", "'NOTIFICATION-TYPE'", "'NOTIFICATIONS'", "'OBJECT-GROUP'", "'OBJECT-IDENTITY'", "'OBJECT-TYPE'", "'OBJECTS'", "'ORGANIZATION'", "'PIB-ACCESS'", "'PIB-DEFINITIONS'", "'PIB-INDEX'", "'PIB-MIN-ACCESS'", "'PIB-REFERENCES'", "'PIB-TAG'", "'PORT'", "'PRODUCT-RELEASE'", "'PROTECTED'", "'REFERENCE'", "'REFINE'", "'RELATIVE-OID'", "'REVISION'", "'SECURITY-CATEGORY'", "'SIGNATURE'", "'SIGNED'", "'STATUS'", "'SUBJECT-CATEGORIES'", "'SUPPORTS'", "'SYNTAX'", "'TEXTUAL-CONVENTION'", "'TOKEN'", "'TOKEN-DATA'", "'TRAP-TYPE'", "'UNBIND'", "'UNIQUENESS'", "'UNITS'", "'VARIABLES'", "'VARIATION'", "'WRITE-SYNTAX'"
	};
	public const int EOF=-1;
	public const int ABSENT_KW=4;
	public const int ABSTRACT_SYNTAX_KW=5;
	public const int ALL_KW=6;
	public const int ANY_KW=7;
	public const int APPLICATION_KW=8;
	public const int ARGUMENT_KW=9;
	public const int ASSIGN_OP=10;
	public const int AUTOMATIC_KW=11;
	public const int BAR=12;
	public const int BASED_NUM_KW=13;
	public const int BEGIN_KW=14;
	public const int BIT_KW=15;
	public const int BLK_COMMENT=16;
	public const int BMP_STR_KW=17;
	public const int BOOLEAN_KW=18;
	public const int BY_KW=19;
	public const int B_OR_H_STRING=20;
	public const int B_STRING=21;
	public const int CHARACTER_KW=22;
	public const int CHARB=23;
	public const int CHARH=24;
	public const int CHOICE_KW=25;
	public const int CLASS_KW=26;
	public const int COLON=27;
	public const int COMMA=28;
	public const int COMMENT=29;
	public const int COMPONENTS_KW=30;
	public const int COMPONENT_KW=31;
	public const int CONSTRAINED_KW=32;
	public const int C_STRING=33;
	public const int DEFAULT_KW=34;
	public const int DEFINED_KW=35;
	public const int DEFINITIONS_KW=36;
	public const int DOT=37;
	public const int DOTDOT=38;
	public const int DOTDOTDOT=39;
	public const int EMBEDDED_KW=40;
	public const int END_KW=41;
	public const int ENUMERATED_KW=42;
	public const int ERRORS_KW=43;
	public const int ERROR_KW=44;
	public const int EXCEPT_KW=45;
	public const int EXCLAMATION=46;
	public const int EXPLICIT_KW=47;
	public const int EXPORTS_KW=48;
	public const int EXTENSIBILITY_KW=49;
	public const int EXTERNAL_KW=50;
	public const int FALSE_KW=51;
	public const int FROM_KW=52;
	public const int GENERALIZED_TIME_KW=53;
	public const int GENERAL_STR_KW=54;
	public const int GRAPHIC_STR_KW=55;
	public const int HDIG=56;
	public const int H_STRING=57;
	public const int IA5_STRING_KW=58;
	public const int IDENTIFIER_KW=59;
	public const int IMPLICIT_KW=60;
	public const int IMPLIED_KW=61;
	public const int IMPORTS_KW=62;
	public const int INCLUDES_KW=63;
	public const int INSTANCE_KW=64;
	public const int INTEGER_KW=65;
	public const int INTERSECTION=66;
	public const int INTERSECTION_KW=67;
	public const int ISO646_STR_KW=68;
	public const int LESS=69;
	public const int LINKED_KW=70;
	public const int LOWER=71;
	public const int L_BRACE=72;
	public const int L_BRACKET=73;
	public const int L_PAREN=74;
	public const int MAX_KW=75;
	public const int MINUS=76;
	public const int MINUS_INFINITY_KW=77;
	public const int MIN_KW=78;
	public const int NULL_KW=79;
	public const int NUMBER=80;
	public const int NUMERIC_STR_KW=81;
	public const int OBJECT_DESCRIPTOR_KW=82;
	public const int OBJECT_KW=83;
	public const int OCTET_KW=84;
	public const int OF_KW=85;
	public const int OID_KW=86;
	public const int OPERATION_KW=87;
	public const int OPTIONAL_KW=88;
	public const int PARAMETER_KW=89;
	public const int PATTERN_KW=90;
	public const int PDV_KW=91;
	public const int PLUS=92;
	public const int PLUS_INFINITY_KW=93;
	public const int PRESENT_KW=94;
	public const int PRINTABLE_STR_KW=95;
	public const int PRIVATE_KW=96;
	public const int REAL_KW=97;
	public const int RELATIVE_KW=98;
	public const int RESULT_KW=99;
	public const int R_BRACE=100;
	public const int R_BRACKET=101;
	public const int R_PAREN=102;
	public const int SEMI=103;
	public const int SEQUENCE_KW=104;
	public const int SET_KW=105;
	public const int SINGLE_QUOTE=106;
	public const int SIZE_KW=107;
	public const int SL_COMMENT=108;
	public const int STRING_KW=109;
	public const int T61_STR_KW=110;
	public const int TAGS_KW=111;
	public const int TELETEX_STR_KW=112;
	public const int TRUE_KW=113;
	public const int TYPE_IDENTIFIER_KW=114;
	public const int UNION_KW=115;
	public const int UNIQUE_KW=116;
	public const int UNIVERSAL_KW=117;
	public const int UNIVERSAL_STR_KW=118;
	public const int UPPER=119;
	public const int UTC_TIME_KW=120;
	public const int UTF8_STR_KW=121;
	public const int VIDEOTEX_STR_KW=122;
	public const int VISIBLE_STR_KW=123;
	public const int WITH_KW=124;
	public const int WS=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;

	public SmiParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SmiParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SmiParser.tokenNames; } }
	public override string GrammarFileName { get { return "Smi.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class statement_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public MibDocument result = new MibDocument();
		public statement_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Smi.g:597:1: statement returns [MibDocument result = new MibDocument()] : (mod= module_definition )* EOF ;
	[GrammarRule("statement")]
	private SmiParser.statement_return statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
		SmiParser.statement_return retval = new SmiParser.statement_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF1 = default(IToken);
		SmiParser.module_definition_return mod = default(SmiParser.module_definition_return);

		CommonTree EOF1_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(597, 1);
		try
		{
			// Smi.g:598:5: ( (mod= module_definition )* EOF )
			DebugEnterAlt(1);
			// Smi.g:598:7: (mod= module_definition )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(598, 7);
			// Smi.g:598:7: (mod= module_definition )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==UPPER))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:598:8: mod= module_definition
					{
					DebugLocation(598, 11);
					PushFollow(Follow._module_definition_in_statement1924);
					mod=module_definition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mod.Tree);
					DebugLocation(598, 30);
					if (state.backtracking == 0)
					{
						 retval.result.Add(mod.result); 
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(598, 61);
			EOF1=(IToken)Match(input,EOF,Follow._EOF_in_statement1930); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF1_tree = (CommonTree)adaptor.Create(EOF1);
			adaptor.AddChild(root_0, EOF1_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	private sealed partial class module_definition_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public MibModule result;
		public module_definition_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_module_definition();
	partial void LeaveRule_module_definition();
	// $ANTLR start "module_definition"
	// Smi.g:604:1: module_definition returns [MibModule result] : name= module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW mod= module_body END_KW ;
	[GrammarRule("module_definition")]
	private SmiParser.module_definition_return module_definition()
	{
		EnterRule_module_definition();
		EnterRule("module_definition", 2);
		TraceIn("module_definition", 2);
		SmiParser.module_definition_return retval = new SmiParser.module_definition_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set2 = default(IToken);
		IToken set3 = default(IToken);
		IToken TAGS_KW4 = default(IToken);
		IToken EXTENSIBILITY_KW5 = default(IToken);
		IToken IMPLIED_KW6 = default(IToken);
		IToken ASSIGN_OP7 = default(IToken);
		IToken BEGIN_KW8 = default(IToken);
		IToken END_KW9 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> name = default(AstParserRuleReturnScope<CommonTree, IToken>);
		SmiParser.module_body_return mod = default(SmiParser.module_body_return);

		CommonTree set2_tree = default(CommonTree);
		CommonTree set3_tree = default(CommonTree);
		CommonTree TAGS_KW4_tree = default(CommonTree);
		CommonTree EXTENSIBILITY_KW5_tree = default(CommonTree);
		CommonTree IMPLIED_KW6_tree = default(CommonTree);
		CommonTree ASSIGN_OP7_tree = default(CommonTree);
		CommonTree BEGIN_KW8_tree = default(CommonTree);
		CommonTree END_KW9_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "module_definition");
		DebugLocation(604, 4);
		try
		{
			// Smi.g:605:5: (name= module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW mod= module_body END_KW )
			DebugEnterAlt(1);
			// Smi.g:605:7: name= module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW mod= module_body END_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(605, 11);
			PushFollow(Follow._module_identifier_in_module_definition1955);
			name=module_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, name.Tree);
			DebugLocation(605, 30);

			set2=(IToken)input.LT(1);
			if (input.LA(1)==DEFINITIONS_KW||input.LA(1)==169)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set2));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(606, 3);
			// Smi.g:606:3: ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==AUTOMATIC_KW||LA2_1==EXPLICIT_KW||LA2_1==IMPLICIT_KW))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:606:5: ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW
				{
				DebugLocation(606, 5);

				set3=(IToken)input.LT(1);
				if (input.LA(1)==AUTOMATIC_KW||input.LA(1)==EXPLICIT_KW||input.LA(1)==IMPLICIT_KW)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set3));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(606, 48);
				TAGS_KW4=(IToken)Match(input,TAGS_KW,Follow._TAGS_KW_in_module_definition1982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TAGS_KW4_tree = (CommonTree)adaptor.Create(TAGS_KW4);
				adaptor.AddChild(root_0, TAGS_KW4_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(607, 3);
			// Smi.g:607:3: ( EXTENSIBILITY_KW IMPLIED_KW )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==EXTENSIBILITY_KW))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:607:4: EXTENSIBILITY_KW IMPLIED_KW
				{
				DebugLocation(607, 4);
				EXTENSIBILITY_KW5=(IToken)Match(input,EXTENSIBILITY_KW,Follow._EXTENSIBILITY_KW_in_module_definition1991); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXTENSIBILITY_KW5_tree = (CommonTree)adaptor.Create(EXTENSIBILITY_KW5);
				adaptor.AddChild(root_0, EXTENSIBILITY_KW5_tree);
				}
				DebugLocation(607, 21);
				IMPLIED_KW6=(IToken)Match(input,IMPLIED_KW,Follow._IMPLIED_KW_in_module_definition1993); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IMPLIED_KW6_tree = (CommonTree)adaptor.Create(IMPLIED_KW6);
				adaptor.AddChild(root_0, IMPLIED_KW6_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(608, 3);
			ASSIGN_OP7=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_module_definition1999); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ASSIGN_OP7_tree = (CommonTree)adaptor.Create(ASSIGN_OP7);
			adaptor.AddChild(root_0, ASSIGN_OP7_tree);
			}
			DebugLocation(608, 13);
			BEGIN_KW8=(IToken)Match(input,BEGIN_KW,Follow._BEGIN_KW_in_module_definition2001); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BEGIN_KW8_tree = (CommonTree)adaptor.Create(BEGIN_KW8);
			adaptor.AddChild(root_0, BEGIN_KW8_tree);
			}
			DebugLocation(608, 25);
			PushFollow(Follow._module_body_in_module_definition2005);
			mod=module_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mod.Tree);
			DebugLocation(608, 38);
			END_KW9=(IToken)Match(input,END_KW,Follow._END_KW_in_module_definition2007); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END_KW9_tree = (CommonTree)adaptor.Create(END_KW9);
			adaptor.AddChild(root_0, END_KW9_tree);
			}
			DebugLocation(609, 3);
			if (state.backtracking == 0)
			{

						    retval.result = (mod!=null?mod.result:default(MibModule)); 
							retval.result.Name = (name!=null?input.ToString(name.Start,name.Stop):null);
						
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_definition", 2);
			LeaveRule("module_definition", 2);
			LeaveRule_module_definition();
		}
		DebugLocation(613, 4);
		} finally { DebugExitRule(GrammarFileName, "module_definition"); }
		return retval;

	}
	// $ANTLR end "module_definition"

	partial void EnterRule_module_identifier();
	partial void LeaveRule_module_identifier();
	// $ANTLR start "module_identifier"
	// Smi.g:615:1: module_identifier : UPPER ( obj_id_comp_lst )? ;
	[GrammarRule("module_identifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> module_identifier()
	{
		EnterRule_module_identifier();
		EnterRule("module_identifier", 3);
		TraceIn("module_identifier", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken UPPER10 = default(IToken);
		SmiParser.obj_id_comp_lst_return obj_id_comp_lst11 = default(SmiParser.obj_id_comp_lst_return);

		CommonTree UPPER10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "module_identifier");
		DebugLocation(615, 44);
		try
		{
			// Smi.g:615:18: ( UPPER ( obj_id_comp_lst )? )
			DebugEnterAlt(1);
			// Smi.g:615:20: UPPER ( obj_id_comp_lst )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(615, 20);
			UPPER10=(IToken)Match(input,UPPER,Follow._UPPER_in_module_identifier2024); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UPPER10_tree = (CommonTree)adaptor.Create(UPPER10);
			adaptor.AddChild(root_0, UPPER10_tree);
			}
			DebugLocation(615, 26);
			// Smi.g:615:26: ( obj_id_comp_lst )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==L_BRACE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:615:27: obj_id_comp_lst
				{
				DebugLocation(615, 27);
				PushFollow(Follow._obj_id_comp_lst_in_module_identifier2027);
				obj_id_comp_lst11=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_comp_lst11.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_identifier", 3);
			LeaveRule("module_identifier", 3);
			LeaveRule_module_identifier();
		}
		DebugLocation(615, 44);
		} finally { DebugExitRule(GrammarFileName, "module_identifier"); }
		return retval;

	}
	// $ANTLR end "module_identifier"

	private sealed partial class module_body_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public MibModule result = new MibModule();
		public module_body_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_module_body();
	partial void LeaveRule_module_body();
	// $ANTLR start "module_body"
	// Smi.g:617:1: module_body returns [MibModule result = new MibModule()] : (ex= exports )? (im= imports )? (a= assignment )* ;
	[GrammarRule("module_body")]
	private SmiParser.module_body_return module_body()
	{
		EnterRule_module_body();
		EnterRule("module_body", 4);
		TraceIn("module_body", 4);
		SmiParser.module_body_return retval = new SmiParser.module_body_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.exports_return ex = default(SmiParser.exports_return);
		SmiParser.imports_return im = default(SmiParser.imports_return);
		SmiParser.assignment_return a = default(SmiParser.assignment_return);

		try { DebugEnterRule(GrammarFileName, "module_body");
		DebugLocation(617, 45);
		try
		{
			// Smi.g:618:5: ( (ex= exports )? (im= imports )? (a= assignment )* )
			DebugEnterAlt(1);
			// Smi.g:619:2: (ex= exports )? (im= imports )? (a= assignment )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(619, 2);
			// Smi.g:619:2: (ex= exports )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==EXPORTS_KW))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:619:3: ex= exports
				{
				DebugLocation(619, 5);
				PushFollow(Follow._exports_in_module_body2050);
				ex=exports();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ex.Tree);
				DebugLocation(619, 14);
				if (state.backtracking == 0)
				{
					 retval.result.Exports = (ex!=null?ex.result:default(Exports)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(620, 2);
			// Smi.g:620:2: (im= imports )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==IMPORTS_KW))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:620:3: im= imports
				{
				DebugLocation(620, 5);
				PushFollow(Follow._imports_in_module_body2061);
				im=imports();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, im.Tree);
				DebugLocation(620, 14);
				if (state.backtracking == 0)
				{
					 retval.result.Imports = (im!=null?im.result:default(Imports)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(621, 2);
			// Smi.g:621:2: (a= assignment )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==ERROR_KW||LA7_1==LOWER||LA7_1==OBJECT_KW||LA7_1==OPERATION_KW||LA7_1==UPPER||(LA7_1>=126 && LA7_1<=129)||(LA7_1>=131 && LA7_1<=134)||LA7_1==136||LA7_1==143||(LA7_1>=146 && LA7_1<=148)||(LA7_1>=158 && LA7_1<=161)||(LA7_1>=163 && LA7_1<=165)||LA7_1==174||LA7_1==176||LA7_1==178||(LA7_1>=181 && LA7_1<=183)||(LA7_1>=188 && LA7_1<=192)))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:621:3: a= assignment
					{
					DebugLocation(621, 4);
					PushFollow(Follow._assignment_in_module_body2072);
					a=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, a.Tree);
					DebugLocation(621, 16);
					if (state.backtracking == 0)
					{
						 retval.result.Add((a!=null?a.result:default(IConstruct))); 
					}

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_body", 4);
			LeaveRule("module_body", 4);
			LeaveRule_module_body();
		}
		DebugLocation(621, 45);
		} finally { DebugExitRule(GrammarFileName, "module_body"); }
		return retval;

	}
	// $ANTLR end "module_body"

	private sealed partial class obj_id_comp_lst_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IdComponentList result = new IdComponentList();
		public obj_id_comp_lst_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_obj_id_comp_lst();
	partial void LeaveRule_obj_id_comp_lst();
	// $ANTLR start "obj_id_comp_lst"
	// Smi.g:624:1: obj_id_comp_lst returns [IdComponentList result = new IdComponentList()] : L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=>dv= defined_value )? (oid= obj_id_component )+ R_BRACE ;
	[GrammarRule("obj_id_comp_lst")]
	private SmiParser.obj_id_comp_lst_return obj_id_comp_lst()
	{
		EnterRule_obj_id_comp_lst();
		EnterRule("obj_id_comp_lst", 5);
		TraceIn("obj_id_comp_lst", 5);
		SmiParser.obj_id_comp_lst_return retval = new SmiParser.obj_id_comp_lst_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE12 = default(IToken);
		IToken R_BRACE13 = default(IToken);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);
		SmiParser.obj_id_component_return oid = default(SmiParser.obj_id_component_return);

		CommonTree L_BRACE12_tree = default(CommonTree);
		CommonTree R_BRACE13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "obj_id_comp_lst");
		DebugLocation(624, 1);
		try
		{
			// Smi.g:625:5: ( L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=>dv= defined_value )? (oid= obj_id_component )+ R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:625:7: L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=>dv= defined_value )? (oid= obj_id_component )+ R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(625, 7);
			L_BRACE12=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_obj_id_comp_lst2095); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE12_tree = (CommonTree)adaptor.Create(L_BRACE12);
			adaptor.AddChild(root_0, L_BRACE12_tree);
			}
			DebugLocation(625, 15);
			// Smi.g:625:15: ( ( LOWER ( LOWER | NUMBER ) )=>dv= defined_value )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==UPPER) && (EvaluatePredicate(synpred1_Smi_fragment)))
			{
				alt8 = 1;
			}
			else if ((LA8_1==LOWER))
			{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Smi_fragment)))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:625:16: ( LOWER ( LOWER | NUMBER ) )=>dv= defined_value
				{
				DebugLocation(625, 44);
				PushFollow(Follow._defined_value_in_obj_id_comp_lst2112);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(625, 59);
				if (state.backtracking == 0)
				{
					 retval.result.DefinedValue = (dv!=null?dv.result:default(DefinedValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(626, 2);
			// Smi.g:626:2: (oid= obj_id_component )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==LOWER||LA9_1==NUMBER))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:626:3: oid= obj_id_component
					{
					DebugLocation(626, 6);
					PushFollow(Follow._obj_id_component_in_obj_id_comp_lst2122);
					oid=obj_id_component();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, oid.Tree);
					DebugLocation(626, 24);
					if (state.backtracking == 0)
					{
						 retval.result.Add((oid!=null?oid.result:default(IdComponent))); 
					}

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(627, 2);
			R_BRACE13=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_obj_id_comp_lst2130); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE13_tree = (CommonTree)adaptor.Create(R_BRACE13);
			adaptor.AddChild(root_0, R_BRACE13_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("obj_id_comp_lst", 5);
			LeaveRule("obj_id_comp_lst", 5);
			LeaveRule_obj_id_comp_lst();
		}
		DebugLocation(628, 1);
		} finally { DebugExitRule(GrammarFileName, "obj_id_comp_lst"); }
		return retval;

	}
	// $ANTLR end "obj_id_comp_lst"

	protected sealed partial class defined_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public DefinedValue result = new DefinedValue();
		public defined_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_defined_value();
	partial void LeaveRule_defined_value();
	// $ANTLR start "defined_value"
	// Smi.g:631:11: protected defined_value returns [DefinedValue result = new DefinedValue()] : (mod= UPPER DOT )? v= LOWER ;
	[GrammarRule("defined_value")]
	protected SmiParser.defined_value_return defined_value()
	{
		EnterRule_defined_value();
		EnterRule("defined_value", 6);
		TraceIn("defined_value", 6);
		SmiParser.defined_value_return retval = new SmiParser.defined_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken mod = default(IToken);
		IToken v = default(IToken);
		IToken DOT14 = default(IToken);

		CommonTree mod_tree = default(CommonTree);
		CommonTree v_tree = default(CommonTree);
		CommonTree DOT14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "defined_value");
		DebugLocation(631, 1);
		try
		{
			// Smi.g:632:5: ( (mod= UPPER DOT )? v= LOWER )
			DebugEnterAlt(1);
			// Smi.g:632:7: (mod= UPPER DOT )? v= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(632, 7);
			// Smi.g:632:7: (mod= UPPER DOT )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==UPPER))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:632:8: mod= UPPER DOT
				{
				DebugLocation(632, 11);
				mod=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_value2154); if (state.failed) return retval;
				if (state.backtracking == 0) {
				mod_tree = (CommonTree)adaptor.Create(mod);
				adaptor.AddChild(root_0, mod_tree);
				}
				DebugLocation(632, 18);
				DOT14=(IToken)Match(input,DOT,Follow._DOT_in_defined_value2156); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT14_tree = (CommonTree)adaptor.Create(DOT14);
				adaptor.AddChild(root_0, DOT14_tree);
				}
				DebugLocation(632, 22);
				if (state.backtracking == 0)
				{
					 retval.result.Module = (mod!=null?mod.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(633, 3);
			v=(IToken)Match(input,LOWER,Follow._LOWER_in_defined_value2166); if (state.failed) return retval;
			if (state.backtracking == 0) {
			v_tree = (CommonTree)adaptor.Create(v);
			adaptor.AddChild(root_0, v_tree);
			}
			DebugLocation(633, 10);
			if (state.backtracking == 0)
			{
				 retval.result.Value = (v!=null?v.Text:null); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defined_value", 6);
			LeaveRule("defined_value", 6);
			LeaveRule_defined_value();
		}
		DebugLocation(634, 1);
		} finally { DebugExitRule(GrammarFileName, "defined_value"); }
		return retval;

	}
	// $ANTLR end "defined_value"

	private sealed partial class obj_id_component_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IdComponent result = new IdComponent();
		public obj_id_component_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_obj_id_component();
	partial void LeaveRule_obj_id_component();
	// $ANTLR start "obj_id_component"
	// Smi.g:637:1: obj_id_component returns [IdComponent result = new IdComponent()] : (num1= NUMBER |name= LOWER ) ( L_PAREN num2= NUMBER R_PAREN )? ;
	[GrammarRule("obj_id_component")]
	private SmiParser.obj_id_component_return obj_id_component()
	{
		EnterRule_obj_id_component();
		EnterRule("obj_id_component", 7);
		TraceIn("obj_id_component", 7);
		SmiParser.obj_id_component_return retval = new SmiParser.obj_id_component_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken num1 = default(IToken);
		IToken name = default(IToken);
		IToken num2 = default(IToken);
		IToken L_PAREN15 = default(IToken);
		IToken R_PAREN16 = default(IToken);

		CommonTree num1_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree num2_tree = default(CommonTree);
		CommonTree L_PAREN15_tree = default(CommonTree);
		CommonTree R_PAREN16_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "obj_id_component");
		DebugLocation(637, 1);
		try
		{
			// Smi.g:638:5: ( (num1= NUMBER |name= LOWER ) ( L_PAREN num2= NUMBER R_PAREN )? )
			DebugEnterAlt(1);
			// Smi.g:638:7: (num1= NUMBER |name= LOWER ) ( L_PAREN num2= NUMBER R_PAREN )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(638, 7);
			// Smi.g:638:7: (num1= NUMBER |name= LOWER )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==NUMBER))
			{
				alt11 = 1;
			}
			else if ((LA11_1==LOWER))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:638:8: num1= NUMBER
				{
				DebugLocation(638, 12);
				num1=(IToken)Match(input,NUMBER,Follow._NUMBER_in_obj_id_component2191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				num1_tree = (CommonTree)adaptor.Create(num1);
				adaptor.AddChild(root_0, num1_tree);
				}
				DebugLocation(638, 20);
				if (state.backtracking == 0)
				{
					 retval.result.Number = long.Parse((num1!=null?num1.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:639:7: name= LOWER
				{
				DebugLocation(639, 11);
				name=(IToken)Match(input,LOWER,Follow._LOWER_in_obj_id_component2203); if (state.failed) return retval;
				if (state.backtracking == 0) {
				name_tree = (CommonTree)adaptor.Create(name);
				adaptor.AddChild(root_0, name_tree);
				}
				DebugLocation(639, 18);
				if (state.backtracking == 0)
				{
					 retval.result.Name = (name!=null?name.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(640, 2);
			// Smi.g:640:2: ( L_PAREN num2= NUMBER R_PAREN )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==L_PAREN))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:640:3: L_PAREN num2= NUMBER R_PAREN
				{
				DebugLocation(640, 3);
				L_PAREN15=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_obj_id_component2210); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN15_tree = (CommonTree)adaptor.Create(L_PAREN15);
				adaptor.AddChild(root_0, L_PAREN15_tree);
				}
				DebugLocation(640, 15);
				num2=(IToken)Match(input,NUMBER,Follow._NUMBER_in_obj_id_component2214); if (state.failed) return retval;
				if (state.backtracking == 0) {
				num2_tree = (CommonTree)adaptor.Create(num2);
				adaptor.AddChild(root_0, num2_tree);
				}
				DebugLocation(640, 23);
				R_PAREN16=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_obj_id_component2216); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN16_tree = (CommonTree)adaptor.Create(R_PAREN16);
				adaptor.AddChild(root_0, R_PAREN16_tree);
				}
				DebugLocation(640, 31);
				if (state.backtracking == 0)
				{
					 retval.result.Number = long.Parse((num2!=null?num2.Text:null)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("obj_id_component", 7);
			LeaveRule("obj_id_component", 7);
			LeaveRule_obj_id_component();
		}
		DebugLocation(641, 1);
		} finally { DebugExitRule(GrammarFileName, "obj_id_component"); }
		return retval;

	}
	// $ANTLR end "obj_id_component"

	private sealed partial class tag_default_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TagDefault result;
		public tag_default_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_tag_default();
	partial void LeaveRule_tag_default();
	// $ANTLR start "tag_default"
	// Smi.g:647:1: tag_default returns [TagDefault result] : ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW );
	[GrammarRule("tag_default")]
	private SmiParser.tag_default_return tag_default()
	{
		EnterRule_tag_default();
		EnterRule("tag_default", 8);
		TraceIn("tag_default", 8);
		SmiParser.tag_default_return retval = new SmiParser.tag_default_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EXPLICIT_KW17 = default(IToken);
		IToken IMPLICIT_KW18 = default(IToken);
		IToken AUTOMATIC_KW19 = default(IToken);

		CommonTree EXPLICIT_KW17_tree = default(CommonTree);
		CommonTree IMPLICIT_KW18_tree = default(CommonTree);
		CommonTree AUTOMATIC_KW19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tag_default");
		DebugLocation(647, 1);
		try
		{
			// Smi.g:648:5: ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case EXPLICIT_KW:
				{
				alt13 = 1;
				}
				break;
			case IMPLICIT_KW:
				{
				alt13 = 2;
				}
				break;
			case AUTOMATIC_KW:
				{
				alt13 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:648:7: EXPLICIT_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(648, 7);
				EXPLICIT_KW17=(IToken)Match(input,EXPLICIT_KW,Follow._EXPLICIT_KW_in_tag_default2242); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXPLICIT_KW17_tree = (CommonTree)adaptor.Create(EXPLICIT_KW17);
				adaptor.AddChild(root_0, EXPLICIT_KW17_tree);
				}
				DebugLocation(648, 19);
				if (state.backtracking == 0)
				{
					 retval.result = TagDefault.Explicit; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:649:4: IMPLICIT_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 4);
				IMPLICIT_KW18=(IToken)Match(input,IMPLICIT_KW,Follow._IMPLICIT_KW_in_tag_default2249); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IMPLICIT_KW18_tree = (CommonTree)adaptor.Create(IMPLICIT_KW18);
				adaptor.AddChild(root_0, IMPLICIT_KW18_tree);
				}
				DebugLocation(649, 16);
				if (state.backtracking == 0)
				{
					 retval.result = TagDefault.Implicit; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:650:4: AUTOMATIC_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(650, 4);
				AUTOMATIC_KW19=(IToken)Match(input,AUTOMATIC_KW,Follow._AUTOMATIC_KW_in_tag_default2256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AUTOMATIC_KW19_tree = (CommonTree)adaptor.Create(AUTOMATIC_KW19);
				adaptor.AddChild(root_0, AUTOMATIC_KW19_tree);
				}
				DebugLocation(650, 17);
				if (state.backtracking == 0)
				{
					 retval.result = TagDefault.Automatic; 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag_default", 8);
			LeaveRule("tag_default", 8);
			LeaveRule_tag_default();
		}
		DebugLocation(651, 1);
		} finally { DebugExitRule(GrammarFileName, "tag_default"); }
		return retval;

	}
	// $ANTLR end "tag_default"

	private sealed partial class exports_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Exports result = new Exports();
		public exports_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_exports();
	partial void LeaveRule_exports();
	// $ANTLR start "exports"
	// Smi.g:653:1: exports returns [Exports result = new Exports()] : EXPORTS_KW ( (sym= symbol_list )? | ALL_KW ) SEMI ;
	[GrammarRule("exports")]
	private SmiParser.exports_return exports()
	{
		EnterRule_exports();
		EnterRule("exports", 9);
		TraceIn("exports", 9);
		SmiParser.exports_return retval = new SmiParser.exports_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EXPORTS_KW20 = default(IToken);
		IToken ALL_KW21 = default(IToken);
		IToken SEMI22 = default(IToken);
		SmiParser.symbol_list_return sym = default(SmiParser.symbol_list_return);

		CommonTree EXPORTS_KW20_tree = default(CommonTree);
		CommonTree ALL_KW21_tree = default(CommonTree);
		CommonTree SEMI22_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exports");
		DebugLocation(653, 10);
		try
		{
			// Smi.g:654:5: ( EXPORTS_KW ( (sym= symbol_list )? | ALL_KW ) SEMI )
			DebugEnterAlt(1);
			// Smi.g:654:7: EXPORTS_KW ( (sym= symbol_list )? | ALL_KW ) SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(654, 7);
			EXPORTS_KW20=(IToken)Match(input,EXPORTS_KW,Follow._EXPORTS_KW_in_exports2276); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXPORTS_KW20_tree = (CommonTree)adaptor.Create(EXPORTS_KW20);
			adaptor.AddChild(root_0, EXPORTS_KW20_tree);
			}
			DebugLocation(654, 18);
			// Smi.g:654:18: ( (sym= symbol_list )? | ALL_KW )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==ERROR_KW||LA15_1==LOWER||LA15_1==OBJECT_KW||LA15_1==OPERATION_KW||LA15_1==SEMI||LA15_1==UPPER||(LA15_1>=126 && LA15_1<=129)||(LA15_1>=131 && LA15_1<=134)||LA15_1==136||LA15_1==143||(LA15_1>=146 && LA15_1<=148)||(LA15_1>=158 && LA15_1<=161)||(LA15_1>=163 && LA15_1<=165)||LA15_1==174||LA15_1==176||LA15_1==178||(LA15_1>=181 && LA15_1<=183)||(LA15_1>=188 && LA15_1<=192)))
			{
				alt15 = 1;
			}
			else if ((LA15_1==ALL_KW))
			{
				alt15 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:655:6: (sym= symbol_list )?
				{
				DebugLocation(655, 6);
				// Smi.g:655:6: (sym= symbol_list )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==ERROR_KW||LA14_1==LOWER||LA14_1==OBJECT_KW||LA14_1==OPERATION_KW||LA14_1==UPPER||(LA14_1>=126 && LA14_1<=129)||(LA14_1>=131 && LA14_1<=134)||LA14_1==136||LA14_1==143||(LA14_1>=146 && LA14_1<=148)||(LA14_1>=158 && LA14_1<=161)||(LA14_1>=163 && LA14_1<=165)||LA14_1==174||LA14_1==176||LA14_1==178||(LA14_1>=181 && LA14_1<=183)||(LA14_1>=188 && LA14_1<=192)))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:655:7: sym= symbol_list
					{
					DebugLocation(655, 10);
					PushFollow(Follow._symbol_list_in_exports2288);
					sym=symbol_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sym.Tree);
					DebugLocation(655, 23);
					if (state.backtracking == 0)
					{
						 retval.result.Add((sym!=null?input.ToString(sym.Start,sym.Stop):null)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:656:5: ALL_KW
				{
				DebugLocation(656, 5);
				ALL_KW21=(IToken)Match(input,ALL_KW,Follow._ALL_KW_in_exports2299); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ALL_KW21_tree = (CommonTree)adaptor.Create(ALL_KW21);
				adaptor.AddChild(root_0, ALL_KW21_tree);
				}
				DebugLocation(656, 12);
				if (state.backtracking == 0)
				{
					 retval.result.AllExported = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(657, 7);
			SEMI22=(IToken)Match(input,SEMI,Follow._SEMI_in_exports2310); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI22_tree = (CommonTree)adaptor.Create(SEMI22);
			adaptor.AddChild(root_0, SEMI22_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exports", 9);
			LeaveRule("exports", 9);
			LeaveRule_exports();
		}
		DebugLocation(657, 10);
		} finally { DebugExitRule(GrammarFileName, "exports"); }
		return retval;

	}
	// $ANTLR end "exports"

	private sealed partial class imports_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Imports result = new Imports();
		public imports_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_imports();
	partial void LeaveRule_imports();
	// $ANTLR start "imports"
	// Smi.g:659:1: imports returns [Imports result = new Imports()] : IMPORTS_KW (sym= symbols_from_module )* SEMI ;
	[GrammarRule("imports")]
	private SmiParser.imports_return imports()
	{
		EnterRule_imports();
		EnterRule("imports", 10);
		TraceIn("imports", 10);
		SmiParser.imports_return retval = new SmiParser.imports_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IMPORTS_KW23 = default(IToken);
		IToken SEMI24 = default(IToken);
		SmiParser.symbols_from_module_return sym = default(SmiParser.symbols_from_module_return);

		CommonTree IMPORTS_KW23_tree = default(CommonTree);
		CommonTree SEMI24_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(659, 79);
		try
		{
			// Smi.g:660:5: ( IMPORTS_KW (sym= symbols_from_module )* SEMI )
			DebugEnterAlt(1);
			// Smi.g:660:7: IMPORTS_KW (sym= symbols_from_module )* SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(660, 7);
			IMPORTS_KW23=(IToken)Match(input,IMPORTS_KW,Follow._IMPORTS_KW_in_imports2326); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORTS_KW23_tree = (CommonTree)adaptor.Create(IMPORTS_KW23);
			adaptor.AddChild(root_0, IMPORTS_KW23_tree);
			}
			DebugLocation(660, 18);
			// Smi.g:660:18: (sym= symbols_from_module )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==ERROR_KW||LA16_1==LOWER||LA16_1==OBJECT_KW||LA16_1==OPERATION_KW||LA16_1==UPPER||(LA16_1>=126 && LA16_1<=129)||(LA16_1>=131 && LA16_1<=134)||LA16_1==136||LA16_1==143||(LA16_1>=146 && LA16_1<=148)||(LA16_1>=158 && LA16_1<=161)||(LA16_1>=163 && LA16_1<=165)||LA16_1==174||LA16_1==176||LA16_1==178||(LA16_1>=181 && LA16_1<=183)||(LA16_1>=188 && LA16_1<=192)))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:660:19: sym= symbols_from_module
					{
					DebugLocation(660, 22);
					PushFollow(Follow._symbols_from_module_in_imports2331);
					sym=symbols_from_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sym.Tree);
					DebugLocation(660, 43);
					if (state.backtracking == 0)
					{
						 retval.result.Add((sym!=null?sym.result:default(Import))); 
					}

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(660, 75);
			SEMI24=(IToken)Match(input,SEMI,Follow._SEMI_in_imports2337); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI24_tree = (CommonTree)adaptor.Create(SEMI24);
			adaptor.AddChild(root_0, SEMI24_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 10);
			LeaveRule("imports", 10);
			LeaveRule_imports();
		}
		DebugLocation(660, 79);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	private sealed partial class assignment_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IConstruct result;
		public assignment_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// Smi.g:663:1: assignment returns [IConstruct result] : (u= UPPER ASSIGN_OP t= type |l= LOWER t2= type ASSIGN_OP v= value |name= ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW );
	[GrammarRule("assignment")]
	private SmiParser.assignment_return assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 11);
		TraceIn("assignment", 11);
		SmiParser.assignment_return retval = new SmiParser.assignment_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken u = default(IToken);
		IToken l = default(IToken);
		IToken name = default(IToken);
		IToken ASSIGN_OP25 = default(IToken);
		IToken ASSIGN_OP26 = default(IToken);
		IToken UPPER27 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken ASSIGN_OP30 = default(IToken);
		IToken BEGIN_KW31 = default(IToken);
		IToken set32 = default(IToken);
		IToken END_KW33 = default(IToken);
		SmiParser.type_return t = default(SmiParser.type_return);
		SmiParser.type_return t2 = default(SmiParser.type_return);
		SmiParser.value_return v = default(SmiParser.value_return);
		AstParserRuleReturnScope<CommonTree, IToken> macroName28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree u_tree = default(CommonTree);
		CommonTree l_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree ASSIGN_OP25_tree = default(CommonTree);
		CommonTree ASSIGN_OP26_tree = default(CommonTree);
		CommonTree UPPER27_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree ASSIGN_OP30_tree = default(CommonTree);
		CommonTree BEGIN_KW31_tree = default(CommonTree);
		CommonTree set32_tree = default(CommonTree);
		CommonTree END_KW33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(663, 1);
		try
		{
			// Smi.g:664:5: (u= UPPER ASSIGN_OP t= type |l= LOWER t2= type ASSIGN_OP v= value |name= ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case UPPER:
				{
				int LA19_2 = input.LA(2);

				if ((LA19_2==ASSIGN_OP))
				{
					alt19 = 1;
				}
				else if ((LA19_2==153))
				{
					alt19 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOWER:
				{
				alt19 = 2;
				}
				break;
			case ERROR_KW:
			case OBJECT_KW:
			case OPERATION_KW:
			case 126:
			case 127:
			case 128:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 143:
			case 146:
			case 147:
			case 148:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 174:
			case 176:
			case 178:
			case 181:
			case 182:
			case 183:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:665:2: u= UPPER ASSIGN_OP t= type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(665, 3);
				u=(IToken)Match(input,UPPER,Follow._UPPER_in_assignment2360); if (state.failed) return retval;
				if (state.backtracking == 0) {
				u_tree = (CommonTree)adaptor.Create(u);
				adaptor.AddChild(root_0, u_tree);
				}
				DebugLocation(665, 10);
				ASSIGN_OP25=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2362); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP25_tree = (CommonTree)adaptor.Create(ASSIGN_OP25);
				adaptor.AddChild(root_0, ASSIGN_OP25_tree);
				}
				DebugLocation(665, 21);
				PushFollow(Follow._type_in_assignment2366);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(666, 2);
				if (state.backtracking == 0)
				{
					 
						    retval.result = (t!=null?t.result:default(ISmiType)); 
							retval.result.Name = (u!=null?u.Text:null);
					    
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:670:7: l= LOWER t2= type ASSIGN_OP v= value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(670, 8);
				l=(IToken)Match(input,LOWER,Follow._LOWER_in_assignment2380); if (state.failed) return retval;
				if (state.backtracking == 0) {
				l_tree = (CommonTree)adaptor.Create(l);
				adaptor.AddChild(root_0, l_tree);
				}
				DebugLocation(670, 17);
				PushFollow(Follow._type_in_assignment2384);
				t2=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
				DebugLocation(670, 23);
				ASSIGN_OP26=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2386); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP26_tree = (CommonTree)adaptor.Create(ASSIGN_OP26);
				adaptor.AddChild(root_0, ASSIGN_OP26_tree);
				}
				DebugLocation(670, 34);
				PushFollow(Follow._value_in_assignment2390);
				v=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
				DebugLocation(671, 2);
				if (state.backtracking == 0)
				{
					 
						    retval.result = new ValueAssignment((t2!=null?t2.result:default(ISmiType)), (v!=null?v.result:default(ISmiValue)));
							retval.result.Name = (l!=null?l.Text:null);
					    
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:675:7: name= ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(675, 11);
				// Smi.g:675:12: ( UPPER | macroName )
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==UPPER))
				{
					alt17 = 1;
				}
				else if ((LA17_1==ERROR_KW||LA17_1==OBJECT_KW||LA17_1==OPERATION_KW||(LA17_1>=126 && LA17_1<=129)||(LA17_1>=131 && LA17_1<=134)||LA17_1==136||LA17_1==143||(LA17_1>=146 && LA17_1<=148)||(LA17_1>=158 && LA17_1<=161)||(LA17_1>=163 && LA17_1<=165)||LA17_1==174||LA17_1==176||LA17_1==178||(LA17_1>=181 && LA17_1<=183)||(LA17_1>=188 && LA17_1<=192)))
				{
					alt17 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:675:13: UPPER
					{
					DebugLocation(675, 13);
					UPPER27=(IToken)Match(input,UPPER,Follow._UPPER_in_assignment2405); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UPPER27_tree = (CommonTree)adaptor.Create(UPPER27);
					adaptor.AddChild(root_0, UPPER27_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:675:21: macroName
					{
					DebugLocation(675, 21);
					PushFollow(Follow._macroName_in_assignment2409);
					macroName28=macroName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, macroName28.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(675, 32);
				string_literal29=(IToken)Match(input,153,Follow._153_in_assignment2412); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (CommonTree)adaptor.Create(string_literal29);
				adaptor.AddChild(root_0, string_literal29_tree);
				}
				DebugLocation(675, 40);
				ASSIGN_OP30=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP30_tree = (CommonTree)adaptor.Create(ASSIGN_OP30);
				adaptor.AddChild(root_0, ASSIGN_OP30_tree);
				}
				DebugLocation(675, 50);
				BEGIN_KW31=(IToken)Match(input,BEGIN_KW,Follow._BEGIN_KW_in_assignment2416); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BEGIN_KW31_tree = (CommonTree)adaptor.Create(BEGIN_KW31);
				adaptor.AddChild(root_0, BEGIN_KW31_tree);
				}
				DebugLocation(675, 59);
				// Smi.g:675:59: (~ ( END_KW ) )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if (((LA18_1>=ABSENT_KW && LA18_1<=EMBEDDED_KW)||(LA18_1>=ENUMERATED_KW && LA18_1<=197)))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:
						{
						DebugLocation(675, 59);

						set32=(IToken)input.LT(1);
						if ((input.LA(1)>=ABSENT_KW && input.LA(1)<=EMBEDDED_KW)||(input.LA(1)>=ENUMERATED_KW && input.LA(1)<=197))
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set32));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(675, 72);
				END_KW33=(IToken)Match(input,END_KW,Follow._END_KW_in_assignment2426); if (state.failed) return retval;
				if (state.backtracking == 0) {
				END_KW33_tree = (CommonTree)adaptor.Create(END_KW33);
				adaptor.AddChild(root_0, END_KW33_tree);
				}
				DebugLocation(675, 79);
				if (state.backtracking == 0)
				{
					 retval.result = new Macro((name!=null?name.Text:null)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 11);
			LeaveRule("assignment", 11);
			LeaveRule_assignment();
		}
		DebugLocation(676, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	private sealed partial class symbol_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<string> result = new List<string>();
		public symbol_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_symbol_list();
	partial void LeaveRule_symbol_list();
	// $ANTLR start "symbol_list"
	// Smi.g:684:1: symbol_list returns [IList<string> result = new List<string>()] : sym= symbol ( COMMA sym2= symbol )* ;
	[GrammarRule("symbol_list")]
	private SmiParser.symbol_list_return symbol_list()
	{
		EnterRule_symbol_list();
		EnterRule("symbol_list", 12);
		TraceIn("symbol_list", 12);
		SmiParser.symbol_list_return retval = new SmiParser.symbol_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> sym = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> sym2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "symbol_list");
		DebugLocation(684, 52);
		try
		{
			// Smi.g:685:5: (sym= symbol ( COMMA sym2= symbol )* )
			DebugEnterAlt(1);
			// Smi.g:685:7: sym= symbol ( COMMA sym2= symbol )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(685, 10);
			PushFollow(Follow._symbol_in_symbol_list2454);
			sym=symbol();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sym.Tree);
			DebugLocation(685, 18);
			if (state.backtracking == 0)
			{
				 retval.result.Add((sym!=null?input.ToString(sym.Start,sym.Stop):null)); 
			}
			DebugLocation(686, 3);
			// Smi.g:686:3: ( COMMA sym2= symbol )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==COMMA))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:686:4: COMMA sym2= symbol
					{
					DebugLocation(686, 4);
					COMMA34=(IToken)Match(input,COMMA,Follow._COMMA_in_symbol_list2461); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA34_tree = (CommonTree)adaptor.Create(COMMA34);
					adaptor.AddChild(root_0, COMMA34_tree);
					}
					DebugLocation(686, 14);
					PushFollow(Follow._symbol_in_symbol_list2465);
					sym2=symbol();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sym2.Tree);
					DebugLocation(686, 22);
					if (state.backtracking == 0)
					{
						 retval.result.Add((sym2!=null?input.ToString(sym2.Start,sym2.Stop):null)); 
					}

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbol_list", 12);
			LeaveRule("symbol_list", 12);
			LeaveRule_symbol_list();
		}
		DebugLocation(686, 52);
		} finally { DebugExitRule(GrammarFileName, "symbol_list"); }
		return retval;

	}
	// $ANTLR end "symbol_list"

	private sealed partial class symbols_from_module_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Import result = new Import();
		public symbols_from_module_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_symbols_from_module();
	partial void LeaveRule_symbols_from_module();
	// $ANTLR start "symbols_from_module"
	// Smi.g:688:1: symbols_from_module returns [Import result = new Import()] : syms= symbol_list FROM_KW mod= UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )? ;
	[GrammarRule("symbols_from_module")]
	private SmiParser.symbols_from_module_return symbols_from_module()
	{
		EnterRule_symbols_from_module();
		EnterRule("symbols_from_module", 13);
		TraceIn("symbols_from_module", 13);
		SmiParser.symbols_from_module_return retval = new SmiParser.symbols_from_module_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken mod = default(IToken);
		IToken FROM_KW35 = default(IToken);
		SmiParser.symbol_list_return syms = default(SmiParser.symbol_list_return);
		SmiParser.obj_id_comp_lst_return obj_id_comp_lst36 = default(SmiParser.obj_id_comp_lst_return);
		SmiParser.defined_value_return defined_value37 = default(SmiParser.defined_value_return);

		CommonTree mod_tree = default(CommonTree);
		CommonTree FROM_KW35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "symbols_from_module");
		DebugLocation(688, 27);
		try
		{
			// Smi.g:689:5: (syms= symbol_list FROM_KW mod= UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )? )
			DebugEnterAlt(1);
			// Smi.g:689:7: syms= symbol_list FROM_KW mod= UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(689, 11);
			PushFollow(Follow._symbol_list_in_symbols_from_module2488);
			syms=symbol_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, syms.Tree);
			DebugLocation(689, 24);
			if (state.backtracking == 0)
			{
				 retval.result.Symbols = (syms!=null?syms.result:default(IList<string>)); 
			}
			DebugLocation(690, 2);
			FROM_KW35=(IToken)Match(input,FROM_KW,Follow._FROM_KW_in_symbols_from_module2493); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FROM_KW35_tree = (CommonTree)adaptor.Create(FROM_KW35);
			adaptor.AddChild(root_0, FROM_KW35_tree);
			}
			DebugLocation(690, 13);
			mod=(IToken)Match(input,UPPER,Follow._UPPER_in_symbols_from_module2497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			mod_tree = (CommonTree)adaptor.Create(mod);
			adaptor.AddChild(root_0, mod_tree);
			}
			DebugLocation(690, 20);
			if (state.backtracking == 0)
			{
				 retval.result.Module = (mod!=null?mod.Text:null);
			}
			DebugLocation(691, 25);
			// Smi.g:691:25: ( obj_id_comp_lst | ( defined_value )=> defined_value )?
			int alt21=3;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case L_BRACE:
				{
				alt21 = 1;
				}
				break;
			case UPPER:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==DOT) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				}
				break;
			case LOWER:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==SEMI) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==UPPER) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==LOWER) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==OPERATION_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==ERROR_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==136) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==192) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==134) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==133) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==146) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==148) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==147) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==189) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==190) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==181) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==OBJECT_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==174) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==178) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==126) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==129) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==128) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==127) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==132) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==143) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==183) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==182) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==176) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				else if ((LA21_2==131||(LA21_2>=158 && LA21_2<=161)||(LA21_2>=163 && LA21_2<=165)||LA21_2==188||LA21_2==191) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt21 = 2;
				}
				}
				break;
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:691:27: obj_id_comp_lst
				{
				DebugLocation(691, 27);
				PushFollow(Follow._obj_id_comp_lst_in_symbols_from_module2527);
				obj_id_comp_lst36=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_comp_lst36.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:692:29: ( defined_value )=> defined_value
				{
				DebugLocation(692, 48);
				PushFollow(Follow._defined_value_in_symbols_from_module2564);
				defined_value37=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbols_from_module", 13);
			LeaveRule("symbols_from_module", 13);
			LeaveRule_symbols_from_module();
		}
		DebugLocation(693, 27);
		} finally { DebugExitRule(GrammarFileName, "symbols_from_module"); }
		return retval;

	}
	// $ANTLR end "symbols_from_module"

	partial void EnterRule_symbol();
	partial void LeaveRule_symbol();
	// $ANTLR start "symbol"
	// Smi.g:695:1: symbol : ( UPPER | LOWER | macroName );
	[GrammarRule("symbol")]
	private AstParserRuleReturnScope<CommonTree, IToken> symbol()
	{
		EnterRule_symbol();
		EnterRule("symbol", 14);
		TraceIn("symbol", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken UPPER38 = default(IToken);
		IToken LOWER39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> macroName40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree UPPER38_tree = default(CommonTree);
		CommonTree LOWER39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "symbol");
		DebugLocation(695, 33);
		try
		{
			// Smi.g:695:7: ( UPPER | LOWER | macroName )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case UPPER:
				{
				alt22 = 1;
				}
				break;
			case LOWER:
				{
				alt22 = 2;
				}
				break;
			case ERROR_KW:
			case OBJECT_KW:
			case OPERATION_KW:
			case 126:
			case 127:
			case 128:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 143:
			case 146:
			case 147:
			case 148:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 174:
			case 176:
			case 178:
			case 181:
			case 182:
			case 183:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:695:9: UPPER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(695, 9);
				UPPER38=(IToken)Match(input,UPPER,Follow._UPPER_in_symbol2600); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER38_tree = (CommonTree)adaptor.Create(UPPER38);
				adaptor.AddChild(root_0, UPPER38_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:695:17: LOWER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(695, 17);
				LOWER39=(IToken)Match(input,LOWER,Follow._LOWER_in_symbol2604); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER39_tree = (CommonTree)adaptor.Create(LOWER39);
				adaptor.AddChild(root_0, LOWER39_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:695:25: macroName
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(695, 25);
				PushFollow(Follow._macroName_in_symbol2608);
				macroName40=macroName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, macroName40.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbol", 14);
			LeaveRule("symbol", 14);
			LeaveRule_symbol();
		}
		DebugLocation(695, 33);
		} finally { DebugExitRule(GrammarFileName, "symbol"); }
		return retval;

	}
	// $ANTLR end "symbol"

	partial void EnterRule_macroName();
	partial void LeaveRule_macroName();
	// $ANTLR start "macroName"
	// Smi.g:697:1: macroName : ( OPERATION_KW | ERROR_KW | 'BIND' | 'UNBIND' | 'APPLICATION-SERVICE-ELEMENT' | 'APPLICATION-CONTEXT' | 'EXTENSION' | 'EXTENSIONS' | 'EXTENSION-ATTRIBUTE' | 'TOKEN' | 'TOKEN-DATA' | 'SECURITY-CATEGORY' | 'OBJECT' | 'PORT' | 'REFINE' | 'ABSTRACT-BIND' | 'ABSTRACT-UNBIND' | 'ABSTRACT-OPERATION' | 'ABSTRACT-ERROR' | 'ALGORITHM' | 'ENCRYPTED' | 'SIGNED' | 'SIGNATURE' | 'PROTECTED' | smi_macros );
	[GrammarRule("macroName")]
	private AstParserRuleReturnScope<CommonTree, IToken> macroName()
	{
		EnterRule_macroName();
		EnterRule("macroName", 15);
		TraceIn("macroName", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OPERATION_KW41 = default(IToken);
		IToken ERROR_KW42 = default(IToken);
		IToken string_literal43 = default(IToken);
		IToken string_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken string_literal46 = default(IToken);
		IToken string_literal47 = default(IToken);
		IToken string_literal48 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken string_literal50 = default(IToken);
		IToken string_literal51 = default(IToken);
		IToken string_literal52 = default(IToken);
		IToken string_literal53 = default(IToken);
		IToken string_literal54 = default(IToken);
		IToken string_literal55 = default(IToken);
		IToken string_literal56 = default(IToken);
		IToken string_literal57 = default(IToken);
		IToken string_literal58 = default(IToken);
		IToken string_literal59 = default(IToken);
		IToken string_literal60 = default(IToken);
		IToken string_literal61 = default(IToken);
		IToken string_literal62 = default(IToken);
		IToken string_literal63 = default(IToken);
		IToken string_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> smi_macros65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OPERATION_KW41_tree = default(CommonTree);
		CommonTree ERROR_KW42_tree = default(CommonTree);
		CommonTree string_literal43_tree = default(CommonTree);
		CommonTree string_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree string_literal47_tree = default(CommonTree);
		CommonTree string_literal48_tree = default(CommonTree);
		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree string_literal52_tree = default(CommonTree);
		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree string_literal55_tree = default(CommonTree);
		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree string_literal57_tree = default(CommonTree);
		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree string_literal61_tree = default(CommonTree);
		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree string_literal63_tree = default(CommonTree);
		CommonTree string_literal64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "macroName");
		DebugLocation(697, 14);
		try
		{
			// Smi.g:697:10: ( OPERATION_KW | ERROR_KW | 'BIND' | 'UNBIND' | 'APPLICATION-SERVICE-ELEMENT' | 'APPLICATION-CONTEXT' | 'EXTENSION' | 'EXTENSIONS' | 'EXTENSION-ATTRIBUTE' | 'TOKEN' | 'TOKEN-DATA' | 'SECURITY-CATEGORY' | 'OBJECT' | 'PORT' | 'REFINE' | 'ABSTRACT-BIND' | 'ABSTRACT-UNBIND' | 'ABSTRACT-OPERATION' | 'ABSTRACT-ERROR' | 'ALGORITHM' | 'ENCRYPTED' | 'SIGNED' | 'SIGNATURE' | 'PROTECTED' | smi_macros )
			int alt23=25;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case OPERATION_KW:
				{
				alt23 = 1;
				}
				break;
			case ERROR_KW:
				{
				alt23 = 2;
				}
				break;
			case 136:
				{
				alt23 = 3;
				}
				break;
			case 192:
				{
				alt23 = 4;
				}
				break;
			case 134:
				{
				alt23 = 5;
				}
				break;
			case 133:
				{
				alt23 = 6;
				}
				break;
			case 146:
				{
				alt23 = 7;
				}
				break;
			case 148:
				{
				alt23 = 8;
				}
				break;
			case 147:
				{
				alt23 = 9;
				}
				break;
			case 189:
				{
				alt23 = 10;
				}
				break;
			case 190:
				{
				alt23 = 11;
				}
				break;
			case 181:
				{
				alt23 = 12;
				}
				break;
			case OBJECT_KW:
				{
				alt23 = 13;
				}
				break;
			case 174:
				{
				alt23 = 14;
				}
				break;
			case 178:
				{
				alt23 = 15;
				}
				break;
			case 126:
				{
				alt23 = 16;
				}
				break;
			case 129:
				{
				alt23 = 17;
				}
				break;
			case 128:
				{
				alt23 = 18;
				}
				break;
			case 127:
				{
				alt23 = 19;
				}
				break;
			case 132:
				{
				alt23 = 20;
				}
				break;
			case 143:
				{
				alt23 = 21;
				}
				break;
			case 183:
				{
				alt23 = 22;
				}
				break;
			case 182:
				{
				alt23 = 23;
				}
				break;
			case 176:
				{
				alt23 = 24;
				}
				break;
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 188:
			case 191:
				{
				alt23 = 25;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:697:12: OPERATION_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 12);
				OPERATION_KW41=(IToken)Match(input,OPERATION_KW,Follow._OPERATION_KW_in_macroName2615); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPERATION_KW41_tree = (CommonTree)adaptor.Create(OPERATION_KW41);
				adaptor.AddChild(root_0, OPERATION_KW41_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:697:27: ERROR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 27);
				ERROR_KW42=(IToken)Match(input,ERROR_KW,Follow._ERROR_KW_in_macroName2619); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ERROR_KW42_tree = (CommonTree)adaptor.Create(ERROR_KW42);
				adaptor.AddChild(root_0, ERROR_KW42_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:697:39: 'BIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 39);
				string_literal43=(IToken)Match(input,136,Follow._136_in_macroName2624); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal43_tree = (CommonTree)adaptor.Create(string_literal43);
				adaptor.AddChild(root_0, string_literal43_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:697:48: 'UNBIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 48);
				string_literal44=(IToken)Match(input,192,Follow._192_in_macroName2628); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal44_tree = (CommonTree)adaptor.Create(string_literal44);
				adaptor.AddChild(root_0, string_literal44_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:698:12: 'APPLICATION-SERVICE-ELEMENT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(698, 12);
				string_literal45=(IToken)Match(input,134,Follow._134_in_macroName2642); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal45_tree = (CommonTree)adaptor.Create(string_literal45);
				adaptor.AddChild(root_0, string_literal45_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:698:44: 'APPLICATION-CONTEXT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(698, 44);
				string_literal46=(IToken)Match(input,133,Follow._133_in_macroName2646); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal46_tree = (CommonTree)adaptor.Create(string_literal46);
				adaptor.AddChild(root_0, string_literal46_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:698:68: 'EXTENSION'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(698, 68);
				string_literal47=(IToken)Match(input,146,Follow._146_in_macroName2650); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal47_tree = (CommonTree)adaptor.Create(string_literal47);
				adaptor.AddChild(root_0, string_literal47_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:699:12: 'EXTENSIONS'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 12);
				string_literal48=(IToken)Match(input,148,Follow._148_in_macroName2664); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal48_tree = (CommonTree)adaptor.Create(string_literal48);
				adaptor.AddChild(root_0, string_literal48_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:699:27: 'EXTENSION-ATTRIBUTE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 27);
				string_literal49=(IToken)Match(input,147,Follow._147_in_macroName2668); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (CommonTree)adaptor.Create(string_literal49);
				adaptor.AddChild(root_0, string_literal49_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:699:51: 'TOKEN'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 51);
				string_literal50=(IToken)Match(input,189,Follow._189_in_macroName2672); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal50_tree = (CommonTree)adaptor.Create(string_literal50);
				adaptor.AddChild(root_0, string_literal50_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:699:61: 'TOKEN-DATA'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(699, 61);
				string_literal51=(IToken)Match(input,190,Follow._190_in_macroName2676); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal51_tree = (CommonTree)adaptor.Create(string_literal51);
				adaptor.AddChild(root_0, string_literal51_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:700:5: 'SECURITY-CATEGORY'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 5);
				string_literal52=(IToken)Match(input,181,Follow._181_in_macroName2683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal52_tree = (CommonTree)adaptor.Create(string_literal52);
				adaptor.AddChild(root_0, string_literal52_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:700:27: 'OBJECT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 27);
				string_literal53=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_macroName2687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal53_tree = (CommonTree)adaptor.Create(string_literal53);
				adaptor.AddChild(root_0, string_literal53_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Smi.g:700:38: 'PORT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 38);
				string_literal54=(IToken)Match(input,174,Follow._174_in_macroName2691); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal54_tree = (CommonTree)adaptor.Create(string_literal54);
				adaptor.AddChild(root_0, string_literal54_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Smi.g:700:47: 'REFINE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 47);
				string_literal55=(IToken)Match(input,178,Follow._178_in_macroName2695); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal55_tree = (CommonTree)adaptor.Create(string_literal55);
				adaptor.AddChild(root_0, string_literal55_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Smi.g:700:58: 'ABSTRACT-BIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(700, 58);
				string_literal56=(IToken)Match(input,126,Follow._126_in_macroName2699); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal56_tree = (CommonTree)adaptor.Create(string_literal56);
				adaptor.AddChild(root_0, string_literal56_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Smi.g:701:5: 'ABSTRACT-UNBIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(701, 5);
				string_literal57=(IToken)Match(input,129,Follow._129_in_macroName2706); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal57_tree = (CommonTree)adaptor.Create(string_literal57);
				adaptor.AddChild(root_0, string_literal57_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Smi.g:701:25: 'ABSTRACT-OPERATION'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(701, 25);
				string_literal58=(IToken)Match(input,128,Follow._128_in_macroName2710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal58_tree = (CommonTree)adaptor.Create(string_literal58);
				adaptor.AddChild(root_0, string_literal58_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Smi.g:701:48: 'ABSTRACT-ERROR'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(701, 48);
				string_literal59=(IToken)Match(input,127,Follow._127_in_macroName2714); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal59_tree = (CommonTree)adaptor.Create(string_literal59);
				adaptor.AddChild(root_0, string_literal59_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// Smi.g:702:5: 'ALGORITHM'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 5);
				string_literal60=(IToken)Match(input,132,Follow._132_in_macroName2721); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal60_tree = (CommonTree)adaptor.Create(string_literal60);
				adaptor.AddChild(root_0, string_literal60_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// Smi.g:702:19: 'ENCRYPTED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 19);
				string_literal61=(IToken)Match(input,143,Follow._143_in_macroName2725); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal61_tree = (CommonTree)adaptor.Create(string_literal61);
				adaptor.AddChild(root_0, string_literal61_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// Smi.g:702:33: 'SIGNED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 33);
				string_literal62=(IToken)Match(input,183,Follow._183_in_macroName2729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal62_tree = (CommonTree)adaptor.Create(string_literal62);
				adaptor.AddChild(root_0, string_literal62_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// Smi.g:702:44: 'SIGNATURE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 44);
				string_literal63=(IToken)Match(input,182,Follow._182_in_macroName2733); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal63_tree = (CommonTree)adaptor.Create(string_literal63);
				adaptor.AddChild(root_0, string_literal63_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// Smi.g:702:58: 'PROTECTED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(702, 58);
				string_literal64=(IToken)Match(input,176,Follow._176_in_macroName2737); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal64_tree = (CommonTree)adaptor.Create(string_literal64);
				adaptor.AddChild(root_0, string_literal64_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// Smi.g:703:5: smi_macros
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(703, 5);
				PushFollow(Follow._smi_macros_in_macroName2744);
				smi_macros65=smi_macros();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_macros65.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("macroName", 15);
			LeaveRule("macroName", 15);
			LeaveRule_macroName();
		}
		DebugLocation(703, 14);
		} finally { DebugExitRule(GrammarFileName, "macroName"); }
		return retval;

	}
	// $ANTLR end "macroName"

	private sealed partial class type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiType result;
		public type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Smi.g:705:1: type returns [ISmiType result] : (b= built_in_type |d= defined_type |s= selection_type |m= macros_type |sm= smi_type );
	[GrammarRule("type")]
	private SmiParser.type_return type()
	{
		EnterRule_type();
		EnterRule("type", 16);
		TraceIn("type", 16);
		SmiParser.type_return retval = new SmiParser.type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.built_in_type_return b = default(SmiParser.built_in_type_return);
		SmiParser.defined_type_return d = default(SmiParser.defined_type_return);
		SmiParser.selection_type_return s = default(SmiParser.selection_type_return);
		SmiParser.macros_type_return m = default(SmiParser.macros_type_return);
		SmiParser.smi_type_return sm = default(SmiParser.smi_type_return);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(705, 1);
		try
		{
			// Smi.g:706:5: (b= built_in_type |d= defined_type |s= selection_type |m= macros_type |sm= smi_type )
			int alt24=5;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case NUMERIC_STR_KW:
			case PRINTABLE_STR_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
				{
				alt24 = 1;
				}
				break;
			case INTEGER_KW:
			case L_BRACKET:
			case NULL_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case 179:
				{
				alt24 = 1;
				}
				break;
			case OBJECT_KW:
				{
				int LA24_2 = input.LA(2);

				if ((LA24_2==IDENTIFIER_KW))
				{
					alt24 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA24_2 = input.LA(2);

				if ((LA24_2==STRING_KW))
				{
					alt24 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				alt24 = 2;
				}
				break;
			case LOWER:
				{
				alt24 = 3;
				}
				break;
			case ERROR_KW:
			case OPERATION_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 188:
			case 191:
				{
				alt24 = 4;
				}
				break;
			case 137:
				{
				alt24 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:707:2: b= built_in_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(707, 3);
				PushFollow(Follow._built_in_type_in_type2764);
				b=built_in_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, b.Tree);
				DebugLocation(707, 18);
				if (state.backtracking == 0)
				{
					 retval.result = (b!=null?b.result:default(ISmiType)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:708:4: d= defined_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(708, 5);
				PushFollow(Follow._defined_type_in_type2773);
				d=defined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, d.Tree);
				DebugLocation(708, 19);
				if (state.backtracking == 0)
				{
					 retval.result = (d!=null?d.result:default(DefinedType)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:709:4: s= selection_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(709, 5);
				PushFollow(Follow._selection_type_in_type2782);
				s=selection_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
				DebugLocation(709, 21);
				if (state.backtracking == 0)
				{
					 retval.result = (s!=null?s.result:default(SelectionType)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:710:4: m= macros_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(710, 5);
				PushFollow(Follow._macros_type_in_type2791);
				m=macros_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);
				DebugLocation(710, 18);
				if (state.backtracking == 0)
				{
					 retval.result = (m!=null?m.result:default(ISmiType)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:711:4: sm= smi_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(711, 6);
				PushFollow(Follow._smi_type_in_type2800);
				sm=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sm.Tree);
				DebugLocation(711, 16);
				if (state.backtracking == 0)
				{
					 retval.result = (sm!=null?sm.result:default(ISmiType)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 16);
			LeaveRule("type", 16);
			LeaveRule_type();
		}
		DebugLocation(712, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	private sealed partial class value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiValue result;
		public value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_value();
	partial void LeaveRule_value();
	// $ANTLR start "value"
	// Smi.g:714:1: value returns [ISmiValue result] : ( ( TRUE_KW )=> TRUE_KW | ( FALSE_KW )=> FALSE_KW | ( NULL_KW )=> NULL_KW | ( C_STRING )=>s= C_STRING | ( defined_value )=>dv= defined_value | ( signed_number )=>sn= signed_number | ( choice_value )=>cv= choice_value | ( sequence_value )=>sv= sequence_value | ( sequenceof_value )=>sov= sequenceof_value | ( cstr_value )=>csv= cstr_value | ( obj_id_comp_lst )=>oid= obj_id_comp_lst | ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW | ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW );
	[GrammarRule("value")]
	private SmiParser.value_return value()
	{
		EnterRule_value();
		EnterRule("value", 17);
		TraceIn("value", 17);
		SmiParser.value_return retval = new SmiParser.value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken s = default(IToken);
		IToken TRUE_KW66 = default(IToken);
		IToken FALSE_KW67 = default(IToken);
		IToken NULL_KW68 = default(IToken);
		IToken PLUS_INFINITY_KW69 = default(IToken);
		IToken MINUS_INFINITY_KW70 = default(IToken);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);
		SmiParser.signed_number_return sn = default(SmiParser.signed_number_return);
		SmiParser.choice_value_return cv = default(SmiParser.choice_value_return);
		SmiParser.sequence_value_return sv = default(SmiParser.sequence_value_return);
		SmiParser.sequenceof_value_return sov = default(SmiParser.sequenceof_value_return);
		SmiParser.cstr_value_return csv = default(SmiParser.cstr_value_return);
		SmiParser.obj_id_comp_lst_return oid = default(SmiParser.obj_id_comp_lst_return);

		CommonTree s_tree = default(CommonTree);
		CommonTree TRUE_KW66_tree = default(CommonTree);
		CommonTree FALSE_KW67_tree = default(CommonTree);
		CommonTree NULL_KW68_tree = default(CommonTree);
		CommonTree PLUS_INFINITY_KW69_tree = default(CommonTree);
		CommonTree MINUS_INFINITY_KW70_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "value");
		DebugLocation(714, 2);
		try
		{
			// Smi.g:715:5: ( ( TRUE_KW )=> TRUE_KW | ( FALSE_KW )=> FALSE_KW | ( NULL_KW )=> NULL_KW | ( C_STRING )=>s= C_STRING | ( defined_value )=>dv= defined_value | ( signed_number )=>sn= signed_number | ( choice_value )=>cv= choice_value | ( sequence_value )=>sv= sequence_value | ( sequenceof_value )=>sov= sequenceof_value | ( cstr_value )=>csv= cstr_value | ( obj_id_comp_lst )=>oid= obj_id_comp_lst | ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW | ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW )
			int alt25=13;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==TRUE_KW) && (EvaluatePredicate(synpred3_Smi_fragment)))
			{
				alt25 = 1;
			}
			else if ((LA25_1==FALSE_KW) && (EvaluatePredicate(synpred4_Smi_fragment)))
			{
				alt25 = 2;
			}
			else if ((LA25_1==NULL_KW) && (EvaluatePredicate(synpred5_Smi_fragment)))
			{
				alt25 = 3;
			}
			else if ((LA25_1==C_STRING) && (EvaluatePredicate(synpred6_Smi_fragment)))
			{
				alt25 = 4;
			}
			else if ((LA25_1==UPPER) && (EvaluatePredicate(synpred7_Smi_fragment)))
			{
				alt25 = 5;
			}
			else if ((LA25_1==LOWER))
			{
				int LA25_2 = input.LA(2);

				if ((EvaluatePredicate(synpred7_Smi_fragment)))
				{
					alt25 = 5;
				}
				else if ((EvaluatePredicate(synpred9_Smi_fragment)))
				{
					alt25 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA25_1==MINUS) && (EvaluatePredicate(synpred8_Smi_fragment)))
			{
				alt25 = 6;
			}
			else if ((LA25_1==NUMBER) && (EvaluatePredicate(synpred8_Smi_fragment)))
			{
				alt25 = 6;
			}
			else if ((LA25_1==L_BRACE))
			{
				int LA25_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Smi_fragment)))
				{
					alt25 = 8;
				}
				else if ((EvaluatePredicate(synpred11_Smi_fragment)))
				{
					alt25 = 9;
				}
				else if ((EvaluatePredicate(synpred12_Smi_fragment)))
				{
					alt25 = 10;
				}
				else if ((EvaluatePredicate(synpred13_Smi_fragment)))
				{
					alt25 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA25_1==H_STRING) && (EvaluatePredicate(synpred12_Smi_fragment)))
			{
				alt25 = 10;
			}
			else if ((LA25_1==B_STRING) && (EvaluatePredicate(synpred12_Smi_fragment)))
			{
				alt25 = 10;
			}
			else if ((LA25_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred14_Smi_fragment)))
			{
				alt25 = 12;
			}
			else if ((LA25_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred15_Smi_fragment)))
			{
				alt25 = 13;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:715:7: ( TRUE_KW )=> TRUE_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(715, 20);
				TRUE_KW66=(IToken)Match(input,TRUE_KW,Follow._TRUE_KW_in_value2826); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE_KW66_tree = (CommonTree)adaptor.Create(TRUE_KW66);
				adaptor.AddChild(root_0, TRUE_KW66_tree);
				}
				DebugLocation(715, 28);
				if (state.backtracking == 0)
				{
					 retval.result = new TrueLiteralValue(); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:716:8: ( FALSE_KW )=> FALSE_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(716, 22);
				FALSE_KW67=(IToken)Match(input,FALSE_KW,Follow._FALSE_KW_in_value2843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE_KW67_tree = (CommonTree)adaptor.Create(FALSE_KW67);
				adaptor.AddChild(root_0, FALSE_KW67_tree);
				}
				DebugLocation(716, 31);
				if (state.backtracking == 0)
				{
					 retval.result = new FalseLiteralValue(); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:717:8: ( NULL_KW )=> NULL_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(717, 21);
				NULL_KW68=(IToken)Match(input,NULL_KW,Follow._NULL_KW_in_value2860); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NULL_KW68_tree = (CommonTree)adaptor.Create(NULL_KW68);
				adaptor.AddChild(root_0, NULL_KW68_tree);
				}
				DebugLocation(717, 29);
				if (state.backtracking == 0)
				{
					 retval.result = new NullLiteralValue(); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:718:8: ( C_STRING )=>s= C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(718, 23);
				s=(IToken)Match(input,C_STRING,Follow._C_STRING_in_value2879); if (state.failed) return retval;
				if (state.backtracking == 0) {
				s_tree = (CommonTree)adaptor.Create(s);
				adaptor.AddChild(root_0, s_tree);
				}
				DebugLocation(718, 33);
				if (state.backtracking == 0)
				{
					 retval.result = new LiteralValue((s!=null?s.Text:null)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:719:8: ( defined_value )=>dv= defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(719, 29);
				PushFollow(Follow._defined_value_in_value2899);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(719, 44);
				if (state.backtracking == 0)
				{
					 retval.result = (dv!=null?dv.result:default(DefinedValue)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:720:8: ( signed_number )=>sn= signed_number
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(720, 29);
				PushFollow(Follow._signed_number_in_value2918);
				sn=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sn.Tree);
				DebugLocation(720, 44);
				if (state.backtracking == 0)
				{
					 retval.result = (sn!=null?sn.result:default(NumberLiteralValue)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:721:8: ( choice_value )=>cv= choice_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(721, 28);
				PushFollow(Follow._choice_value_in_value2937);
				cv=choice_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cv.Tree);
				DebugLocation(721, 42);
				if (state.backtracking == 0)
				{
					 retval.result = (cv!=null?cv.result:default(ChoiceValue)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:722:8: ( sequence_value )=>sv= sequence_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(722, 30);
				PushFollow(Follow._sequence_value_in_value2956);
				sv=sequence_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sv.Tree);
				DebugLocation(722, 46);
				if (state.backtracking == 0)
				{
					 retval.result = (sv!=null?sv.result:default(SequenceValue)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:723:8: ( sequenceof_value )=>sov= sequenceof_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(723, 33);
				PushFollow(Follow._sequenceof_value_in_value2975);
				sov=sequenceof_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sov.Tree);
				DebugLocation(723, 51);
				if (state.backtracking == 0)
				{
					 retval.result = (sov!=null?sov.result:default(SequenceOfValue)); 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:724:8: ( cstr_value )=>csv= cstr_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(724, 27);
				PushFollow(Follow._cstr_value_in_value2994);
				csv=cstr_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, csv.Tree);
				DebugLocation(724, 39);
				if (state.backtracking == 0)
				{
					 retval.result = (csv!=null?csv.result:default(ISmiValue)); 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:725:8: ( obj_id_comp_lst )=>oid= obj_id_comp_lst
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(725, 32);
				PushFollow(Follow._obj_id_comp_lst_in_value3013);
				oid=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oid.Tree);
				DebugLocation(725, 49);
				if (state.backtracking == 0)
				{
					 retval.result = (oid!=null?oid.result:default(IdComponentList)); 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:726:8: ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(726, 30);
				PLUS_INFINITY_KW69=(IToken)Match(input,PLUS_INFINITY_KW,Follow._PLUS_INFINITY_KW_in_value3030); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PLUS_INFINITY_KW69_tree = (CommonTree)adaptor.Create(PLUS_INFINITY_KW69);
				adaptor.AddChild(root_0, PLUS_INFINITY_KW69_tree);
				}
				DebugLocation(726, 47);
				if (state.backtracking == 0)
				{
					 retval.result = new PlusInfinityLiteralValue(); 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:727:8: ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(727, 31);
				MINUS_INFINITY_KW70=(IToken)Match(input,MINUS_INFINITY_KW,Follow._MINUS_INFINITY_KW_in_value3047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS_INFINITY_KW70_tree = (CommonTree)adaptor.Create(MINUS_INFINITY_KW70);
				adaptor.AddChild(root_0, MINUS_INFINITY_KW70_tree);
				}
				DebugLocation(727, 49);
				if (state.backtracking == 0)
				{
					 retval.result = new MinusInfinityLiteralValue(); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value", 17);
			LeaveRule("value", 17);
			LeaveRule_value();
		}
		DebugLocation(728, 2);
		} finally { DebugExitRule(GrammarFileName, "value"); }
		return retval;

	}
	// $ANTLR end "value"

	private sealed partial class built_in_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiType result;
		public built_in_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_built_in_type();
	partial void LeaveRule_built_in_type();
	// $ANTLR start "built_in_type"
	// Smi.g:730:1: built_in_type returns [ISmiType result] : (a= any_type |bs= bit_string_type |b= boolean_type |cs= character_str_type |c= choice_type |em= embedded_type EMBEDDED_KW PDV_KW |en= enum_type |ex= external_type |i= integer_type |n= null_type |oid= object_identifier_type |oct= octetString_type |real= real_type |r= relativeOid_type |se= sequence_type |so= sequenceof_type |s= set_type |s1= setof_type |t= tagged_type );
	[GrammarRule("built_in_type")]
	private SmiParser.built_in_type_return built_in_type()
	{
		EnterRule_built_in_type();
		EnterRule("built_in_type", 18);
		TraceIn("built_in_type", 18);
		SmiParser.built_in_type_return retval = new SmiParser.built_in_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EMBEDDED_KW71 = default(IToken);
		IToken PDV_KW72 = default(IToken);
		SmiParser.any_type_return a = default(SmiParser.any_type_return);
		SmiParser.bit_string_type_return bs = default(SmiParser.bit_string_type_return);
		SmiParser.boolean_type_return b = default(SmiParser.boolean_type_return);
		SmiParser.character_str_type_return cs = default(SmiParser.character_str_type_return);
		SmiParser.choice_type_return c = default(SmiParser.choice_type_return);
		SmiParser.embedded_type_return em = default(SmiParser.embedded_type_return);
		SmiParser.enum_type_return en = default(SmiParser.enum_type_return);
		SmiParser.external_type_return ex = default(SmiParser.external_type_return);
		SmiParser.integer_type_return i = default(SmiParser.integer_type_return);
		SmiParser.null_type_return n = default(SmiParser.null_type_return);
		SmiParser.object_identifier_type_return oid = default(SmiParser.object_identifier_type_return);
		SmiParser.octetString_type_return oct = default(SmiParser.octetString_type_return);
		SmiParser.real_type_return real = default(SmiParser.real_type_return);
		SmiParser.relativeOid_type_return r = default(SmiParser.relativeOid_type_return);
		SmiParser.sequence_type_return se = default(SmiParser.sequence_type_return);
		SmiParser.sequenceof_type_return so = default(SmiParser.sequenceof_type_return);
		SmiParser.set_type_return s = default(SmiParser.set_type_return);
		SmiParser.setof_type_return s1 = default(SmiParser.setof_type_return);
		SmiParser.tagged_type_return t = default(SmiParser.tagged_type_return);

		CommonTree EMBEDDED_KW71_tree = default(CommonTree);
		CommonTree PDV_KW72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "built_in_type");
		DebugLocation(730, 1);
		try
		{
			// Smi.g:731:5: (a= any_type |bs= bit_string_type |b= boolean_type |cs= character_str_type |c= choice_type |em= embedded_type EMBEDDED_KW PDV_KW |en= enum_type |ex= external_type |i= integer_type |n= null_type |oid= object_identifier_type |oct= octetString_type |real= real_type |r= relativeOid_type |se= sequence_type |so= sequenceof_type |s= set_type |s1= setof_type |t= tagged_type )
			int alt26=19;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case ANY_KW:
				{
				alt26 = 1;
				}
				break;
			case BIT_KW:
				{
				alt26 = 2;
				}
				break;
			case BOOLEAN_KW:
				{
				alt26 = 3;
				}
				break;
			case BMP_STR_KW:
			case CHARACTER_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case NUMERIC_STR_KW:
			case PRINTABLE_STR_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
				{
				alt26 = 4;
				}
				break;
			case CHOICE_KW:
				{
				alt26 = 5;
				}
				break;
			case EMBEDDED_KW:
				{
				alt26 = 6;
				}
				break;
			case ENUMERATED_KW:
				{
				alt26 = 7;
				}
				break;
			case EXTERNAL_KW:
				{
				alt26 = 8;
				}
				break;
			case INTEGER_KW:
				{
				alt26 = 9;
				}
				break;
			case NULL_KW:
				{
				alt26 = 10;
				}
				break;
			case OBJECT_KW:
				{
				alt26 = 11;
				}
				break;
			case OCTET_KW:
				{
				alt26 = 12;
				}
				break;
			case REAL_KW:
				{
				alt26 = 13;
				}
				break;
			case 179:
				{
				alt26 = 14;
				}
				break;
			case SEQUENCE_KW:
				{
				int LA26_2 = input.LA(2);

				if ((LA26_2==L_BRACE))
				{
					alt26 = 15;
				}
				else if ((LA26_2==L_PAREN||LA26_2==OF_KW))
				{
					alt26 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SET_KW:
				{
				int LA26_2 = input.LA(2);

				if ((LA26_2==L_BRACE))
				{
					alt26 = 17;
				}
				else if ((LA26_2==OF_KW||LA26_2==SIZE_KW))
				{
					alt26 = 18;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case L_BRACKET:
				{
				alt26 = 19;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:731:7: a= any_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(731, 8);
				PushFollow(Follow._any_type_in_built_in_type3070);
				a=any_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, a.Tree);
				DebugLocation(731, 18);
				if (state.backtracking == 0)
				{
					 retval.result = (a!=null?a.result:default(AnyType)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:732:7: bs= bit_string_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(732, 9);
				PushFollow(Follow._bit_string_type_in_built_in_type3082);
				bs=bit_string_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bs.Tree);
				DebugLocation(732, 26);
				if (state.backtracking == 0)
				{
					 retval.result = (bs!=null?bs.result:default(BitStringType)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:733:7: b= boolean_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(733, 8);
				PushFollow(Follow._boolean_type_in_built_in_type3094);
				b=boolean_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, b.Tree);
				DebugLocation(733, 22);
				if (state.backtracking == 0)
				{
					 retval.result = (b!=null?b.result:default(BooleanType)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:734:7: cs= character_str_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(734, 9);
				PushFollow(Follow._character_str_type_in_built_in_type3106);
				cs=character_str_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cs.Tree);
				DebugLocation(734, 29);
				if (state.backtracking == 0)
				{
					 retval.result = (cs!=null?cs.result:default(CharacterStringType)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:735:7: c= choice_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(735, 8);
				PushFollow(Follow._choice_type_in_built_in_type3118);
				c=choice_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(735, 21);
				if (state.backtracking == 0)
				{
					 retval.result = (c!=null?c.result:default(ChoiceType)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:736:7: em= embedded_type EMBEDDED_KW PDV_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(736, 9);
				PushFollow(Follow._embedded_type_in_built_in_type3130);
				em=embedded_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, em.Tree);
				DebugLocation(736, 24);
				EMBEDDED_KW71=(IToken)Match(input,EMBEDDED_KW,Follow._EMBEDDED_KW_in_built_in_type3132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EMBEDDED_KW71_tree = (CommonTree)adaptor.Create(EMBEDDED_KW71);
				adaptor.AddChild(root_0, EMBEDDED_KW71_tree);
				}
				DebugLocation(736, 36);
				PDV_KW72=(IToken)Match(input,PDV_KW,Follow._PDV_KW_in_built_in_type3134); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PDV_KW72_tree = (CommonTree)adaptor.Create(PDV_KW72);
				adaptor.AddChild(root_0, PDV_KW72_tree);
				}
				DebugLocation(736, 43);
				if (state.backtracking == 0)
				{
					 retval.result = (em!=null?em.result:default(EmbeddedType)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:737:7: en= enum_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(737, 9);
				PushFollow(Follow._enum_type_in_built_in_type3146);
				en=enum_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, en.Tree);
				DebugLocation(737, 20);
				if (state.backtracking == 0)
				{
					 retval.result = (en!=null?en.result:default(EnumType)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:738:7: ex= external_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(738, 9);
				PushFollow(Follow._external_type_in_built_in_type3158);
				ex=external_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ex.Tree);
				DebugLocation(738, 24);
				if (state.backtracking == 0)
				{
					 retval.result = (ex!=null?ex.result:default(ExternalType)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:739:4: i= integer_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(739, 5);
				PushFollow(Follow._integer_type_in_built_in_type3167);
				i=integer_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i.Tree);
				DebugLocation(739, 19);
				if (state.backtracking == 0)
				{
					 retval.result = (i!=null?i.result:default(IntegerType)); 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:740:4: n= null_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(740, 5);
				PushFollow(Follow._null_type_in_built_in_type3176);
				n=null_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(740, 16);
				if (state.backtracking == 0)
				{
					 retval.result = (n!=null?n.result:default(NullType)); 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:741:4: oid= object_identifier_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(741, 7);
				PushFollow(Follow._object_identifier_type_in_built_in_type3185);
				oid=object_identifier_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oid.Tree);
				DebugLocation(741, 31);
				if (state.backtracking == 0)
				{
					 retval.result = (oid!=null?oid.result:default(ObjectIdentifierType)); 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:742:4: oct= octetString_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(742, 7);
				PushFollow(Follow._octetString_type_in_built_in_type3194);
				oct=octetString_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oct.Tree);
				DebugLocation(742, 25);
				if (state.backtracking == 0)
				{
					 retval.result = (oct!=null?oct.result:default(OctetStringType)); 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:743:4: real= real_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(743, 8);
				PushFollow(Follow._real_type_in_built_in_type3203);
				real=real_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, real.Tree);
				DebugLocation(743, 19);
				if (state.backtracking == 0)
				{
					 retval.result = (real!=null?real.result:default(RealType)); 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Smi.g:744:4: r= relativeOid_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(744, 5);
				PushFollow(Follow._relativeOid_type_in_built_in_type3212);
				r=relativeOid_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, r.Tree);
				DebugLocation(744, 23);
				if (state.backtracking == 0)
				{
					 retval.result = (r!=null?r.result:default(RelativeIdType)); 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Smi.g:745:4: se= sequence_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(745, 6);
				PushFollow(Follow._sequence_type_in_built_in_type3221);
				se=sequence_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, se.Tree);
				DebugLocation(745, 21);
				if (state.backtracking == 0)
				{
					 retval.result = (se!=null?se.result:default(SequenceType)); 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Smi.g:746:4: so= sequenceof_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(746, 6);
				PushFollow(Follow._sequenceof_type_in_built_in_type3230);
				so=sequenceof_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, so.Tree);
				DebugLocation(746, 23);
				if (state.backtracking == 0)
				{
					 retval.result = (so!=null?so.result:default(SequenceOfType)); 
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Smi.g:747:4: s= set_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(747, 5);
				PushFollow(Follow._set_type_in_built_in_type3239);
				s=set_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
				DebugLocation(747, 15);
				if (state.backtracking == 0)
				{
					 retval.result = (s!=null?s.result:default(SetType)); 
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Smi.g:748:4: s1= setof_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(748, 6);
				PushFollow(Follow._setof_type_in_built_in_type3248);
				s1=setof_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s1.Tree);
				DebugLocation(748, 18);
				if (state.backtracking == 0)
				{
					 retval.result = (s1!=null?s1.result:default(SetOfType)); 
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Smi.g:749:4: t= tagged_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(749, 5);
				PushFollow(Follow._tagged_type_in_built_in_type3257);
				t=tagged_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(749, 18);
				if (state.backtracking == 0)
				{
					 retval.result = (t!=null?t.result:default(TaggedType)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("built_in_type", 18);
			LeaveRule("built_in_type", 18);
			LeaveRule_built_in_type();
		}
		DebugLocation(750, 1);
		} finally { DebugExitRule(GrammarFileName, "built_in_type"); }
		return retval;

	}
	// $ANTLR end "built_in_type"

	private sealed partial class defined_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public DefinedType result = new DefinedType();
		public defined_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_defined_type();
	partial void LeaveRule_defined_type();
	// $ANTLR start "defined_type"
	// Smi.g:752:1: defined_type returns [DefinedType result = new DefinedType()] : (mod= UPPER DOT )? name= UPPER (c= constraint )? ;
	[GrammarRule("defined_type")]
	private SmiParser.defined_type_return defined_type()
	{
		EnterRule_defined_type();
		EnterRule("defined_type", 19);
		TraceIn("defined_type", 19);
		SmiParser.defined_type_return retval = new SmiParser.defined_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken mod = default(IToken);
		IToken name = default(IToken);
		IToken DOT73 = default(IToken);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree mod_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree DOT73_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "defined_type");
		DebugLocation(752, 53);
		try
		{
			// Smi.g:753:5: ( (mod= UPPER DOT )? name= UPPER (c= constraint )? )
			DebugEnterAlt(1);
			// Smi.g:753:7: (mod= UPPER DOT )? name= UPPER (c= constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(753, 7);
			// Smi.g:753:7: (mod= UPPER DOT )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==UPPER))
			{
				int LA27_2 = input.LA(2);

				if ((LA27_2==DOT))
				{
					alt27 = 1;
				}
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:753:8: mod= UPPER DOT
				{
				DebugLocation(753, 11);
				mod=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_type3280); if (state.failed) return retval;
				if (state.backtracking == 0) {
				mod_tree = (CommonTree)adaptor.Create(mod);
				adaptor.AddChild(root_0, mod_tree);
				}
				DebugLocation(753, 18);
				DOT73=(IToken)Match(input,DOT,Follow._DOT_in_defined_type3282); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT73_tree = (CommonTree)adaptor.Create(DOT73);
				adaptor.AddChild(root_0, DOT73_tree);
				}
				DebugLocation(753, 22);
				if (state.backtracking == 0)
				{
					 retval.result.Module = (mod!=null?mod.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(754, 6);
			name=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_type3292); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(754, 13);
			if (state.backtracking == 0)
			{
				 retval.result.Name = (name!=null?name.Text:null); 
			}
			DebugLocation(755, 2);
			// Smi.g:755:2: (c= constraint )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==L_PAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:755:3: c= constraint
				{
				DebugLocation(755, 4);
				PushFollow(Follow._constraint_in_defined_type3300);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(755, 16);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defined_type", 19);
			LeaveRule("defined_type", 19);
			LeaveRule_defined_type();
		}
		DebugLocation(755, 53);
		} finally { DebugExitRule(GrammarFileName, "defined_type"); }
		return retval;

	}
	// $ANTLR end "defined_type"

	private sealed partial class selection_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SelectionType result;
		public selection_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_selection_type();
	partial void LeaveRule_selection_type();
	// $ANTLR start "selection_type"
	// Smi.g:757:1: selection_type returns [SelectionType result] : name= LOWER LESS t= type ;
	[GrammarRule("selection_type")]
	private SmiParser.selection_type_return selection_type()
	{
		EnterRule_selection_type();
		EnterRule("selection_type", 20);
		TraceIn("selection_type", 20);
		SmiParser.selection_type_return retval = new SmiParser.selection_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken LESS74 = default(IToken);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree LESS74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "selection_type");
		DebugLocation(757, 1);
		try
		{
			// Smi.g:758:5: (name= LOWER LESS t= type )
			DebugEnterAlt(1);
			// Smi.g:758:7: name= LOWER LESS t= type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(758, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_selection_type3323); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(758, 18);
			LESS74=(IToken)Match(input,LESS,Follow._LESS_in_selection_type3325); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LESS74_tree = (CommonTree)adaptor.Create(LESS74);
			adaptor.AddChild(root_0, LESS74_tree);
			}
			DebugLocation(758, 24);
			PushFollow(Follow._type_in_selection_type3329);
			t=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(758, 30);
			if (state.backtracking == 0)
			{
				 retval.result = new SelectionType((name!=null?name.Text:null), (t!=null?t.result:default(ISmiType))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_type", 20);
			LeaveRule("selection_type", 20);
			LeaveRule_selection_type();
		}
		DebugLocation(759, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_type"); }
		return retval;

	}
	// $ANTLR end "selection_type"

	private sealed partial class any_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public AnyType result = new AnyType();
		public any_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_any_type();
	partial void LeaveRule_any_type();
	// $ANTLR start "any_type"
	// Smi.g:761:1: any_type returns [AnyType result = new AnyType()] : ANY_KW ( DEFINED_KW BY_KW def= LOWER )? ;
	[GrammarRule("any_type")]
	private SmiParser.any_type_return any_type()
	{
		EnterRule_any_type();
		EnterRule("any_type", 21);
		TraceIn("any_type", 21);
		SmiParser.any_type_return retval = new SmiParser.any_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken def = default(IToken);
		IToken ANY_KW75 = default(IToken);
		IToken DEFINED_KW76 = default(IToken);
		IToken BY_KW77 = default(IToken);

		CommonTree def_tree = default(CommonTree);
		CommonTree ANY_KW75_tree = default(CommonTree);
		CommonTree DEFINED_KW76_tree = default(CommonTree);
		CommonTree BY_KW77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "any_type");
		DebugLocation(761, 1);
		try
		{
			// Smi.g:762:5: ( ANY_KW ( DEFINED_KW BY_KW def= LOWER )? )
			DebugEnterAlt(1);
			// Smi.g:762:7: ANY_KW ( DEFINED_KW BY_KW def= LOWER )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(762, 7);
			ANY_KW75=(IToken)Match(input,ANY_KW,Follow._ANY_KW_in_any_type3349); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ANY_KW75_tree = (CommonTree)adaptor.Create(ANY_KW75);
			adaptor.AddChild(root_0, ANY_KW75_tree);
			}
			DebugLocation(762, 14);
			// Smi.g:762:14: ( DEFINED_KW BY_KW def= LOWER )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==DEFINED_KW))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:762:15: DEFINED_KW BY_KW def= LOWER
				{
				DebugLocation(762, 15);
				DEFINED_KW76=(IToken)Match(input,DEFINED_KW,Follow._DEFINED_KW_in_any_type3352); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DEFINED_KW76_tree = (CommonTree)adaptor.Create(DEFINED_KW76);
				adaptor.AddChild(root_0, DEFINED_KW76_tree);
				}
				DebugLocation(762, 26);
				BY_KW77=(IToken)Match(input,BY_KW,Follow._BY_KW_in_any_type3354); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BY_KW77_tree = (CommonTree)adaptor.Create(BY_KW77);
				adaptor.AddChild(root_0, BY_KW77_tree);
				}
				DebugLocation(762, 35);
				def=(IToken)Match(input,LOWER,Follow._LOWER_in_any_type3358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				def_tree = (CommonTree)adaptor.Create(def);
				adaptor.AddChild(root_0, def_tree);
				}
				DebugLocation(762, 42);
				if (state.backtracking == 0)
				{
					 retval.result.DefinedById = (def!=null?def.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("any_type", 21);
			LeaveRule("any_type", 21);
			LeaveRule_any_type();
		}
		DebugLocation(763, 1);
		} finally { DebugExitRule(GrammarFileName, "any_type"); }
		return retval;

	}
	// $ANTLR end "any_type"

	private sealed partial class bit_string_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public BitStringType result = new BitStringType();
		public bit_string_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_bit_string_type();
	partial void LeaveRule_bit_string_type();
	// $ANTLR start "bit_string_type"
	// Smi.g:766:1: bit_string_type returns [BitStringType result = new BitStringType()] : BIT_KW STRING_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list )? (c= constraint )? ;
	[GrammarRule("bit_string_type")]
	private SmiParser.bit_string_type_return bit_string_type()
	{
		EnterRule_bit_string_type();
		EnterRule("bit_string_type", 22);
		TraceIn("bit_string_type", 22);
		SmiParser.bit_string_type_return retval = new SmiParser.bit_string_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken BIT_KW78 = default(IToken);
		IToken STRING_KW79 = default(IToken);
		SmiParser.namedNumber_list_return n = default(SmiParser.namedNumber_list_return);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree BIT_KW78_tree = default(CommonTree);
		CommonTree STRING_KW79_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "bit_string_type");
		DebugLocation(766, 1);
		try
		{
			// Smi.g:767:5: ( BIT_KW STRING_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list )? (c= constraint )? )
			DebugEnterAlt(1);
			// Smi.g:767:7: BIT_KW STRING_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list )? (c= constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(767, 7);
			BIT_KW78=(IToken)Match(input,BIT_KW,Follow._BIT_KW_in_bit_string_type3383); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BIT_KW78_tree = (CommonTree)adaptor.Create(BIT_KW78);
			adaptor.AddChild(root_0, BIT_KW78_tree);
			}
			DebugLocation(767, 14);
			STRING_KW79=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_bit_string_type3385); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_KW79_tree = (CommonTree)adaptor.Create(STRING_KW79);
			adaptor.AddChild(root_0, STRING_KW79_tree);
			}
			DebugLocation(767, 24);
			// Smi.g:767:24: ( ( L_BRACE namedNumber )=>n= namedNumber_list )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==L_BRACE) && (EvaluatePredicate(synpred16_Smi_fragment)))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:767:25: ( L_BRACE namedNumber )=>n= namedNumber_list
				{
				DebugLocation(767, 51);
				PushFollow(Follow._namedNumber_list_in_bit_string_type3398);
				n=namedNumber_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(767, 69);
				if (state.backtracking == 0)
				{
					 retval.result.NamedNumberList = (n!=null?n.result:default(IList<ISmiValue>)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(768, 2);
			// Smi.g:768:2: (c= constraint )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==L_PAREN))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:768:3: c= constraint
				{
				DebugLocation(768, 4);
				PushFollow(Follow._constraint_in_bit_string_type3409);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(768, 16);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_string_type", 22);
			LeaveRule("bit_string_type", 22);
			LeaveRule_bit_string_type();
		}
		DebugLocation(769, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_string_type"); }
		return retval;

	}
	// $ANTLR end "bit_string_type"

	private sealed partial class boolean_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public BooleanType result = new BooleanType();
		public boolean_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_boolean_type();
	partial void LeaveRule_boolean_type();
	// $ANTLR start "boolean_type"
	// Smi.g:773:1: boolean_type returns [BooleanType result = new BooleanType()] : BOOLEAN_KW ;
	[GrammarRule("boolean_type")]
	private SmiParser.boolean_type_return boolean_type()
	{
		EnterRule_boolean_type();
		EnterRule("boolean_type", 23);
		TraceIn("boolean_type", 23);
		SmiParser.boolean_type_return retval = new SmiParser.boolean_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken BOOLEAN_KW80 = default(IToken);

		CommonTree BOOLEAN_KW80_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolean_type");
		DebugLocation(773, 1);
		try
		{
			// Smi.g:774:5: ( BOOLEAN_KW )
			DebugEnterAlt(1);
			// Smi.g:774:7: BOOLEAN_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(774, 7);
			BOOLEAN_KW80=(IToken)Match(input,BOOLEAN_KW,Follow._BOOLEAN_KW_in_boolean_type3434); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BOOLEAN_KW80_tree = (CommonTree)adaptor.Create(BOOLEAN_KW80);
			adaptor.AddChild(root_0, BOOLEAN_KW80_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_type", 23);
			LeaveRule("boolean_type", 23);
			LeaveRule_boolean_type();
		}
		DebugLocation(775, 1);
		} finally { DebugExitRule(GrammarFileName, "boolean_type"); }
		return retval;

	}
	// $ANTLR end "boolean_type"

	private sealed partial class character_str_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public CharacterStringType result = new CharacterStringType();
		public character_str_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_character_str_type();
	partial void LeaveRule_character_str_type();
	// $ANTLR start "character_str_type"
	// Smi.g:777:1: character_str_type returns [CharacterStringType result = new CharacterStringType()] : ( CHARACTER_KW STRING_KW |cs= character_set (c= constraint )? );
	[GrammarRule("character_str_type")]
	private SmiParser.character_str_type_return character_str_type()
	{
		EnterRule_character_str_type();
		EnterRule("character_str_type", 24);
		TraceIn("character_str_type", 24);
		SmiParser.character_str_type_return retval = new SmiParser.character_str_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CHARACTER_KW81 = default(IToken);
		IToken STRING_KW82 = default(IToken);
		SmiParser.character_set_return cs = default(SmiParser.character_set_return);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree CHARACTER_KW81_tree = default(CommonTree);
		CommonTree STRING_KW82_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "character_str_type");
		DebugLocation(777, 2);
		try
		{
			// Smi.g:778:5: ( CHARACTER_KW STRING_KW |cs= character_set (c= constraint )? )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==CHARACTER_KW))
			{
				alt33 = 1;
			}
			else if ((LA33_1==BMP_STR_KW||(LA33_1>=GENERALIZED_TIME_KW && LA33_1<=GRAPHIC_STR_KW)||LA33_1==IA5_STRING_KW||LA33_1==ISO646_STR_KW||LA33_1==NUMERIC_STR_KW||LA33_1==PRINTABLE_STR_KW||LA33_1==T61_STR_KW||LA33_1==TELETEX_STR_KW||LA33_1==UNIVERSAL_STR_KW||(LA33_1>=UTC_TIME_KW && LA33_1<=VISIBLE_STR_KW)))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:778:7: CHARACTER_KW STRING_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(778, 7);
				CHARACTER_KW81=(IToken)Match(input,CHARACTER_KW,Follow._CHARACTER_KW_in_character_str_type3453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARACTER_KW81_tree = (CommonTree)adaptor.Create(CHARACTER_KW81);
				adaptor.AddChild(root_0, CHARACTER_KW81_tree);
				}
				DebugLocation(778, 20);
				STRING_KW82=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_character_str_type3455); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_KW82_tree = (CommonTree)adaptor.Create(STRING_KW82);
				adaptor.AddChild(root_0, STRING_KW82_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:779:5: cs= character_set (c= constraint )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(779, 7);
				PushFollow(Follow._character_set_in_character_str_type3464);
				cs=character_set();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cs.Tree);
				DebugLocation(779, 22);
				if (state.backtracking == 0)
				{
					 retval.result.CharacterSet = (cs!=null?cs.result:default(CharacterSet)); 
				}
				DebugLocation(780, 3);
				// Smi.g:780:3: (c= constraint )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==L_PAREN))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:780:4: c= constraint
					{
					DebugLocation(780, 5);
					PushFollow(Follow._constraint_in_character_str_type3473);
					c=constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
					DebugLocation(780, 17);
					if (state.backtracking == 0)
					{
						 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_str_type", 24);
			LeaveRule("character_str_type", 24);
			LeaveRule_character_str_type();
		}
		DebugLocation(781, 2);
		} finally { DebugExitRule(GrammarFileName, "character_str_type"); }
		return retval;

	}
	// $ANTLR end "character_str_type"

	private sealed partial class choice_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ChoiceType result;
		public choice_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_choice_type();
	partial void LeaveRule_choice_type();
	// $ANTLR start "choice_type"
	// Smi.g:783:1: choice_type returns [ChoiceType result] : CHOICE_KW L_BRACE e= elementType_list R_BRACE ;
	[GrammarRule("choice_type")]
	private SmiParser.choice_type_return choice_type()
	{
		EnterRule_choice_type();
		EnterRule("choice_type", 25);
		TraceIn("choice_type", 25);
		SmiParser.choice_type_return retval = new SmiParser.choice_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CHOICE_KW83 = default(IToken);
		IToken L_BRACE84 = default(IToken);
		IToken R_BRACE85 = default(IToken);
		SmiParser.elementType_list_return e = default(SmiParser.elementType_list_return);

		CommonTree CHOICE_KW83_tree = default(CommonTree);
		CommonTree L_BRACE84_tree = default(CommonTree);
		CommonTree R_BRACE85_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "choice_type");
		DebugLocation(783, 1);
		try
		{
			// Smi.g:784:5: ( CHOICE_KW L_BRACE e= elementType_list R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:784:7: CHOICE_KW L_BRACE e= elementType_list R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(784, 7);
			CHOICE_KW83=(IToken)Match(input,CHOICE_KW,Follow._CHOICE_KW_in_choice_type3497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHOICE_KW83_tree = (CommonTree)adaptor.Create(CHOICE_KW83);
			adaptor.AddChild(root_0, CHOICE_KW83_tree);
			}
			DebugLocation(784, 17);
			L_BRACE84=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_choice_type3499); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE84_tree = (CommonTree)adaptor.Create(L_BRACE84);
			adaptor.AddChild(root_0, L_BRACE84_tree);
			}
			DebugLocation(784, 26);
			PushFollow(Follow._elementType_list_in_choice_type3503);
			e=elementType_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(784, 44);
			R_BRACE85=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_choice_type3505); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE85_tree = (CommonTree)adaptor.Create(R_BRACE85);
			adaptor.AddChild(root_0, R_BRACE85_tree);
			}
			DebugLocation(784, 52);
			if (state.backtracking == 0)
			{
				 retval.result = new ChoiceType((e!=null?e.result:default(IList<ISmiType>))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("choice_type", 25);
			LeaveRule("choice_type", 25);
			LeaveRule_choice_type();
		}
		DebugLocation(785, 1);
		} finally { DebugExitRule(GrammarFileName, "choice_type"); }
		return retval;

	}
	// $ANTLR end "choice_type"

	private sealed partial class embedded_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public EmbeddedType result = new EmbeddedType();
		public embedded_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_embedded_type();
	partial void LeaveRule_embedded_type();
	// $ANTLR start "embedded_type"
	// Smi.g:787:1: embedded_type returns [EmbeddedType result = new EmbeddedType()] : EMBEDDED_KW PDV_KW ;
	[GrammarRule("embedded_type")]
	private SmiParser.embedded_type_return embedded_type()
	{
		EnterRule_embedded_type();
		EnterRule("embedded_type", 26);
		TraceIn("embedded_type", 26);
		SmiParser.embedded_type_return retval = new SmiParser.embedded_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EMBEDDED_KW86 = default(IToken);
		IToken PDV_KW87 = default(IToken);

		CommonTree EMBEDDED_KW86_tree = default(CommonTree);
		CommonTree PDV_KW87_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embedded_type");
		DebugLocation(787, 1);
		try
		{
			// Smi.g:788:5: ( EMBEDDED_KW PDV_KW )
			DebugEnterAlt(1);
			// Smi.g:788:7: EMBEDDED_KW PDV_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(788, 7);
			EMBEDDED_KW86=(IToken)Match(input,EMBEDDED_KW,Follow._EMBEDDED_KW_in_embedded_type3525); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EMBEDDED_KW86_tree = (CommonTree)adaptor.Create(EMBEDDED_KW86);
			adaptor.AddChild(root_0, EMBEDDED_KW86_tree);
			}
			DebugLocation(788, 19);
			PDV_KW87=(IToken)Match(input,PDV_KW,Follow._PDV_KW_in_embedded_type3527); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PDV_KW87_tree = (CommonTree)adaptor.Create(PDV_KW87);
			adaptor.AddChild(root_0, PDV_KW87_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embedded_type", 26);
			LeaveRule("embedded_type", 26);
			LeaveRule_embedded_type();
		}
		DebugLocation(789, 1);
		} finally { DebugExitRule(GrammarFileName, "embedded_type"); }
		return retval;

	}
	// $ANTLR end "embedded_type"

	private sealed partial class enum_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public EnumType result;
		public enum_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_enum_type();
	partial void LeaveRule_enum_type();
	// $ANTLR start "enum_type"
	// Smi.g:791:1: enum_type returns [EnumType result] : ENUMERATED_KW n= namedNumber_list ;
	[GrammarRule("enum_type")]
	private SmiParser.enum_type_return enum_type()
	{
		EnterRule_enum_type();
		EnterRule("enum_type", 27);
		TraceIn("enum_type", 27);
		SmiParser.enum_type_return retval = new SmiParser.enum_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ENUMERATED_KW88 = default(IToken);
		SmiParser.namedNumber_list_return n = default(SmiParser.namedNumber_list_return);

		CommonTree ENUMERATED_KW88_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enum_type");
		DebugLocation(791, 1);
		try
		{
			// Smi.g:792:5: ( ENUMERATED_KW n= namedNumber_list )
			DebugEnterAlt(1);
			// Smi.g:792:7: ENUMERATED_KW n= namedNumber_list
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(792, 7);
			ENUMERATED_KW88=(IToken)Match(input,ENUMERATED_KW,Follow._ENUMERATED_KW_in_enum_type3546); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ENUMERATED_KW88_tree = (CommonTree)adaptor.Create(ENUMERATED_KW88);
			adaptor.AddChild(root_0, ENUMERATED_KW88_tree);
			}
			DebugLocation(792, 22);
			PushFollow(Follow._namedNumber_list_in_enum_type3550);
			n=namedNumber_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
			DebugLocation(792, 40);
			if (state.backtracking == 0)
			{
				 retval.result = new EnumType((n!=null?n.result:default(IList<ISmiValue>))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_type", 27);
			LeaveRule("enum_type", 27);
			LeaveRule_enum_type();
		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_type"); }
		return retval;

	}
	// $ANTLR end "enum_type"

	private sealed partial class external_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ExternalType result = new ExternalType();
		public external_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_external_type();
	partial void LeaveRule_external_type();
	// $ANTLR start "external_type"
	// Smi.g:795:1: external_type returns [ExternalType result = new ExternalType()] : EXTERNAL_KW ;
	[GrammarRule("external_type")]
	private SmiParser.external_type_return external_type()
	{
		EnterRule_external_type();
		EnterRule("external_type", 28);
		TraceIn("external_type", 28);
		SmiParser.external_type_return retval = new SmiParser.external_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EXTERNAL_KW89 = default(IToken);

		CommonTree EXTERNAL_KW89_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "external_type");
		DebugLocation(795, 1);
		try
		{
			// Smi.g:796:5: ( EXTERNAL_KW )
			DebugEnterAlt(1);
			// Smi.g:796:7: EXTERNAL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(796, 7);
			EXTERNAL_KW89=(IToken)Match(input,EXTERNAL_KW,Follow._EXTERNAL_KW_in_external_type3570); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXTERNAL_KW89_tree = (CommonTree)adaptor.Create(EXTERNAL_KW89);
			adaptor.AddChild(root_0, EXTERNAL_KW89_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_type", 28);
			LeaveRule("external_type", 28);
			LeaveRule_external_type();
		}
		DebugLocation(797, 1);
		} finally { DebugExitRule(GrammarFileName, "external_type"); }
		return retval;

	}
	// $ANTLR end "external_type"

	private sealed partial class integer_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IntegerType result = new IntegerType();
		public integer_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_integer_type();
	partial void LeaveRule_integer_type();
	// $ANTLR start "integer_type"
	// Smi.g:800:1: integer_type returns [IntegerType result = new IntegerType()] : INTEGER_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list |c= constraint )? ;
	[GrammarRule("integer_type")]
	private SmiParser.integer_type_return integer_type()
	{
		EnterRule_integer_type();
		EnterRule("integer_type", 29);
		TraceIn("integer_type", 29);
		SmiParser.integer_type_return retval = new SmiParser.integer_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INTEGER_KW90 = default(IToken);
		SmiParser.namedNumber_list_return n = default(SmiParser.namedNumber_list_return);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree INTEGER_KW90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "integer_type");
		DebugLocation(800, 1);
		try
		{
			// Smi.g:801:5: ( INTEGER_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list |c= constraint )? )
			DebugEnterAlt(1);
			// Smi.g:801:7: INTEGER_KW ( ( L_BRACE namedNumber )=>n= namedNumber_list |c= constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(801, 7);
			INTEGER_KW90=(IToken)Match(input,INTEGER_KW,Follow._INTEGER_KW_in_integer_type3591); if (state.failed) return retval;
			if (state.backtracking == 0) {
			INTEGER_KW90_tree = (CommonTree)adaptor.Create(INTEGER_KW90);
			adaptor.AddChild(root_0, INTEGER_KW90_tree);
			}
			DebugLocation(801, 18);
			// Smi.g:801:18: ( ( L_BRACE namedNumber )=>n= namedNumber_list |c= constraint )?
			int alt34=3;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==L_BRACE) && (EvaluatePredicate(synpred17_Smi_fragment)))
			{
				alt34 = 1;
			}
			else if ((LA34_1==L_PAREN))
			{
				alt34 = 2;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:801:19: ( L_BRACE namedNumber )=>n= namedNumber_list
				{
				DebugLocation(801, 45);
				PushFollow(Follow._namedNumber_list_in_integer_type3604);
				n=namedNumber_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(801, 63);
				if (state.backtracking == 0)
				{
					 retval.result.NamedNumberList = (n!=null?n.result:default(IList<ISmiValue>)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:802:4: c= constraint
				{
				DebugLocation(802, 5);
				PushFollow(Follow._constraint_in_integer_type3613);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(802, 17);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("integer_type", 29);
			LeaveRule("integer_type", 29);
			LeaveRule_integer_type();
		}
		DebugLocation(803, 1);
		} finally { DebugExitRule(GrammarFileName, "integer_type"); }
		return retval;

	}
	// $ANTLR end "integer_type"

	private sealed partial class null_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NullType result = new NullType();
		public null_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_null_type();
	partial void LeaveRule_null_type();
	// $ANTLR start "null_type"
	// Smi.g:807:1: null_type returns [NullType result = new NullType()] : NULL_KW ;
	[GrammarRule("null_type")]
	private SmiParser.null_type_return null_type()
	{
		EnterRule_null_type();
		EnterRule("null_type", 30);
		TraceIn("null_type", 30);
		SmiParser.null_type_return retval = new SmiParser.null_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NULL_KW91 = default(IToken);

		CommonTree NULL_KW91_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "null_type");
		DebugLocation(807, 1);
		try
		{
			// Smi.g:808:5: ( NULL_KW )
			DebugEnterAlt(1);
			// Smi.g:808:7: NULL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(808, 7);
			NULL_KW91=(IToken)Match(input,NULL_KW,Follow._NULL_KW_in_null_type3638); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_KW91_tree = (CommonTree)adaptor.Create(NULL_KW91);
			adaptor.AddChild(root_0, NULL_KW91_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("null_type", 30);
			LeaveRule("null_type", 30);
			LeaveRule_null_type();
		}
		DebugLocation(809, 1);
		} finally { DebugExitRule(GrammarFileName, "null_type"); }
		return retval;

	}
	// $ANTLR end "null_type"

	private sealed partial class object_identifier_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ObjectIdentifierType result = new ObjectIdentifierType();
		public object_identifier_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_object_identifier_type();
	partial void LeaveRule_object_identifier_type();
	// $ANTLR start "object_identifier_type"
	// Smi.g:811:1: object_identifier_type returns [ObjectIdentifierType result = new ObjectIdentifierType()] : OBJECT_KW IDENTIFIER_KW ;
	[GrammarRule("object_identifier_type")]
	private SmiParser.object_identifier_type_return object_identifier_type()
	{
		EnterRule_object_identifier_type();
		EnterRule("object_identifier_type", 31);
		TraceIn("object_identifier_type", 31);
		SmiParser.object_identifier_type_return retval = new SmiParser.object_identifier_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OBJECT_KW92 = default(IToken);
		IToken IDENTIFIER_KW93 = default(IToken);

		CommonTree OBJECT_KW92_tree = default(CommonTree);
		CommonTree IDENTIFIER_KW93_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "object_identifier_type");
		DebugLocation(811, 1);
		try
		{
			// Smi.g:812:5: ( OBJECT_KW IDENTIFIER_KW )
			DebugEnterAlt(1);
			// Smi.g:812:7: OBJECT_KW IDENTIFIER_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(812, 7);
			OBJECT_KW92=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_object_identifier_type3657); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OBJECT_KW92_tree = (CommonTree)adaptor.Create(OBJECT_KW92);
			adaptor.AddChild(root_0, OBJECT_KW92_tree);
			}
			DebugLocation(812, 17);
			IDENTIFIER_KW93=(IToken)Match(input,IDENTIFIER_KW,Follow._IDENTIFIER_KW_in_object_identifier_type3659); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER_KW93_tree = (CommonTree)adaptor.Create(IDENTIFIER_KW93);
			adaptor.AddChild(root_0, IDENTIFIER_KW93_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_identifier_type", 31);
			LeaveRule("object_identifier_type", 31);
			LeaveRule_object_identifier_type();
		}
		DebugLocation(813, 1);
		} finally { DebugExitRule(GrammarFileName, "object_identifier_type"); }
		return retval;

	}
	// $ANTLR end "object_identifier_type"

	private sealed partial class octetString_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public OctetStringType result = new OctetStringType();
		public octetString_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_octetString_type();
	partial void LeaveRule_octetString_type();
	// $ANTLR start "octetString_type"
	// Smi.g:815:1: octetString_type returns [OctetStringType result = new OctetStringType()] : OCTET_KW STRING_KW (c= constraint )? ;
	[GrammarRule("octetString_type")]
	private SmiParser.octetString_type_return octetString_type()
	{
		EnterRule_octetString_type();
		EnterRule("octetString_type", 32);
		TraceIn("octetString_type", 32);
		SmiParser.octetString_type_return retval = new SmiParser.octetString_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OCTET_KW94 = default(IToken);
		IToken STRING_KW95 = default(IToken);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree OCTET_KW94_tree = default(CommonTree);
		CommonTree STRING_KW95_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "octetString_type");
		DebugLocation(815, 1);
		try
		{
			// Smi.g:816:5: ( OCTET_KW STRING_KW (c= constraint )? )
			DebugEnterAlt(1);
			// Smi.g:816:7: OCTET_KW STRING_KW (c= constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(816, 7);
			OCTET_KW94=(IToken)Match(input,OCTET_KW,Follow._OCTET_KW_in_octetString_type3678); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTET_KW94_tree = (CommonTree)adaptor.Create(OCTET_KW94);
			adaptor.AddChild(root_0, OCTET_KW94_tree);
			}
			DebugLocation(816, 16);
			STRING_KW95=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_octetString_type3680); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_KW95_tree = (CommonTree)adaptor.Create(STRING_KW95);
			adaptor.AddChild(root_0, STRING_KW95_tree);
			}
			DebugLocation(816, 26);
			// Smi.g:816:26: (c= constraint )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==L_PAREN))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:816:27: c= constraint
				{
				DebugLocation(816, 28);
				PushFollow(Follow._constraint_in_octetString_type3685);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(816, 40);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octetString_type", 32);
			LeaveRule("octetString_type", 32);
			LeaveRule_octetString_type();
		}
		DebugLocation(817, 1);
		} finally { DebugExitRule(GrammarFileName, "octetString_type"); }
		return retval;

	}
	// $ANTLR end "octetString_type"

	private sealed partial class real_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public RealType result = new RealType();
		public real_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_real_type();
	partial void LeaveRule_real_type();
	// $ANTLR start "real_type"
	// Smi.g:819:1: real_type returns [RealType result = new RealType()] : REAL_KW ;
	[GrammarRule("real_type")]
	private SmiParser.real_type_return real_type()
	{
		EnterRule_real_type();
		EnterRule("real_type", 33);
		TraceIn("real_type", 33);
		SmiParser.real_type_return retval = new SmiParser.real_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken REAL_KW96 = default(IToken);

		CommonTree REAL_KW96_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "real_type");
		DebugLocation(819, 1);
		try
		{
			// Smi.g:820:5: ( REAL_KW )
			DebugEnterAlt(1);
			// Smi.g:820:7: REAL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(820, 7);
			REAL_KW96=(IToken)Match(input,REAL_KW,Follow._REAL_KW_in_real_type3708); if (state.failed) return retval;
			if (state.backtracking == 0) {
			REAL_KW96_tree = (CommonTree)adaptor.Create(REAL_KW96);
			adaptor.AddChild(root_0, REAL_KW96_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("real_type", 33);
			LeaveRule("real_type", 33);
			LeaveRule_real_type();
		}
		DebugLocation(821, 1);
		} finally { DebugExitRule(GrammarFileName, "real_type"); }
		return retval;

	}
	// $ANTLR end "real_type"

	private sealed partial class relativeOid_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public RelativeIdType result = new RelativeIdType();
		public relativeOid_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_relativeOid_type();
	partial void LeaveRule_relativeOid_type();
	// $ANTLR start "relativeOid_type"
	// Smi.g:824:1: relativeOid_type returns [RelativeIdType result = new RelativeIdType()] : 'RELATIVE-OID' ;
	[GrammarRule("relativeOid_type")]
	private SmiParser.relativeOid_type_return relativeOid_type()
	{
		EnterRule_relativeOid_type();
		EnterRule("relativeOid_type", 34);
		TraceIn("relativeOid_type", 34);
		SmiParser.relativeOid_type_return retval = new SmiParser.relativeOid_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal97 = default(IToken);

		CommonTree string_literal97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relativeOid_type");
		DebugLocation(824, 1);
		try
		{
			// Smi.g:825:5: ( 'RELATIVE-OID' )
			DebugEnterAlt(1);
			// Smi.g:825:7: 'RELATIVE-OID'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(825, 7);
			string_literal97=(IToken)Match(input,179,Follow._179_in_relativeOid_type3730); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal97_tree = (CommonTree)adaptor.Create(string_literal97);
			adaptor.AddChild(root_0, string_literal97_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relativeOid_type", 34);
			LeaveRule("relativeOid_type", 34);
			LeaveRule_relativeOid_type();
		}
		DebugLocation(826, 1);
		} finally { DebugExitRule(GrammarFileName, "relativeOid_type"); }
		return retval;

	}
	// $ANTLR end "relativeOid_type"

	private sealed partial class sequence_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SequenceType result = new SequenceType();
		public sequence_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_sequence_type();
	partial void LeaveRule_sequence_type();
	// $ANTLR start "sequence_type"
	// Smi.g:830:1: sequence_type returns [SequenceType result = new SequenceType()] : SEQUENCE_KW L_BRACE (e= elementType_list )? R_BRACE ;
	[GrammarRule("sequence_type")]
	private SmiParser.sequence_type_return sequence_type()
	{
		EnterRule_sequence_type();
		EnterRule("sequence_type", 35);
		TraceIn("sequence_type", 35);
		SmiParser.sequence_type_return retval = new SmiParser.sequence_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEQUENCE_KW98 = default(IToken);
		IToken L_BRACE99 = default(IToken);
		IToken R_BRACE100 = default(IToken);
		SmiParser.elementType_list_return e = default(SmiParser.elementType_list_return);

		CommonTree SEQUENCE_KW98_tree = default(CommonTree);
		CommonTree L_BRACE99_tree = default(CommonTree);
		CommonTree R_BRACE100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sequence_type");
		DebugLocation(830, 1);
		try
		{
			// Smi.g:831:5: ( SEQUENCE_KW L_BRACE (e= elementType_list )? R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:831:7: SEQUENCE_KW L_BRACE (e= elementType_list )? R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(831, 7);
			SEQUENCE_KW98=(IToken)Match(input,SEQUENCE_KW,Follow._SEQUENCE_KW_in_sequence_type3751); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEQUENCE_KW98_tree = (CommonTree)adaptor.Create(SEQUENCE_KW98);
			adaptor.AddChild(root_0, SEQUENCE_KW98_tree);
			}
			DebugLocation(831, 19);
			L_BRACE99=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequence_type3753); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE99_tree = (CommonTree)adaptor.Create(L_BRACE99);
			adaptor.AddChild(root_0, L_BRACE99_tree);
			}
			DebugLocation(831, 27);
			// Smi.g:831:27: (e= elementType_list )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==COMPONENTS_KW||LA36_1==LOWER))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:831:28: e= elementType_list
				{
				DebugLocation(831, 29);
				PushFollow(Follow._elementType_list_in_sequence_type3758);
				e=elementType_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(831, 47);
				if (state.backtracking == 0)
				{
					 retval.result.ElementTypeList = (e!=null?e.result:default(IList<ISmiType>)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(831, 90);
			R_BRACE100=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequence_type3764); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE100_tree = (CommonTree)adaptor.Create(R_BRACE100);
			adaptor.AddChild(root_0, R_BRACE100_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequence_type", 35);
			LeaveRule("sequence_type", 35);
			LeaveRule_sequence_type();
		}
		DebugLocation(832, 1);
		} finally { DebugExitRule(GrammarFileName, "sequence_type"); }
		return retval;

	}
	// $ANTLR end "sequence_type"

	private sealed partial class sequenceof_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SequenceOfType result = new SequenceOfType();
		public sequenceof_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_sequenceof_type();
	partial void LeaveRule_sequenceof_type();
	// $ANTLR start "sequenceof_type"
	// Smi.g:834:1: sequenceof_type returns [SequenceOfType result = new SequenceOfType()] : SEQUENCE_KW ( L_PAREN SIZE_KW c= constraint R_PAREN )? OF_KW t= type ;
	[GrammarRule("sequenceof_type")]
	private SmiParser.sequenceof_type_return sequenceof_type()
	{
		EnterRule_sequenceof_type();
		EnterRule("sequenceof_type", 36);
		TraceIn("sequenceof_type", 36);
		SmiParser.sequenceof_type_return retval = new SmiParser.sequenceof_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEQUENCE_KW101 = default(IToken);
		IToken L_PAREN102 = default(IToken);
		IToken SIZE_KW103 = default(IToken);
		IToken R_PAREN104 = default(IToken);
		IToken OF_KW105 = default(IToken);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree SEQUENCE_KW101_tree = default(CommonTree);
		CommonTree L_PAREN102_tree = default(CommonTree);
		CommonTree SIZE_KW103_tree = default(CommonTree);
		CommonTree R_PAREN104_tree = default(CommonTree);
		CommonTree OF_KW105_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sequenceof_type");
		DebugLocation(834, 1);
		try
		{
			// Smi.g:835:5: ( SEQUENCE_KW ( L_PAREN SIZE_KW c= constraint R_PAREN )? OF_KW t= type )
			DebugEnterAlt(1);
			// Smi.g:835:7: SEQUENCE_KW ( L_PAREN SIZE_KW c= constraint R_PAREN )? OF_KW t= type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(835, 7);
			SEQUENCE_KW101=(IToken)Match(input,SEQUENCE_KW,Follow._SEQUENCE_KW_in_sequenceof_type3783); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEQUENCE_KW101_tree = (CommonTree)adaptor.Create(SEQUENCE_KW101);
			adaptor.AddChild(root_0, SEQUENCE_KW101_tree);
			}
			DebugLocation(835, 19);
			// Smi.g:835:19: ( L_PAREN SIZE_KW c= constraint R_PAREN )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==L_PAREN))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:835:20: L_PAREN SIZE_KW c= constraint R_PAREN
				{
				DebugLocation(835, 20);
				L_PAREN102=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_sequenceof_type3786); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN102_tree = (CommonTree)adaptor.Create(L_PAREN102);
				adaptor.AddChild(root_0, L_PAREN102_tree);
				}
				DebugLocation(835, 28);
				SIZE_KW103=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_sequenceof_type3788); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW103_tree = (CommonTree)adaptor.Create(SIZE_KW103);
				adaptor.AddChild(root_0, SIZE_KW103_tree);
				}
				DebugLocation(835, 37);
				PushFollow(Follow._constraint_in_sequenceof_type3792);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(835, 49);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}
				DebugLocation(835, 85);
				R_PAREN104=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_sequenceof_type3796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN104_tree = (CommonTree)adaptor.Create(R_PAREN104);
				adaptor.AddChild(root_0, R_PAREN104_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(836, 2);
			OF_KW105=(IToken)Match(input,OF_KW,Follow._OF_KW_in_sequenceof_type3801); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OF_KW105_tree = (CommonTree)adaptor.Create(OF_KW105);
			adaptor.AddChild(root_0, OF_KW105_tree);
			}
			DebugLocation(836, 9);
			PushFollow(Follow._type_in_sequenceof_type3805);
			t=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(836, 15);
			if (state.backtracking == 0)
			{
				 retval.result.Subtype = (t!=null?t.result:default(ISmiType)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequenceof_type", 36);
			LeaveRule("sequenceof_type", 36);
			LeaveRule_sequenceof_type();
		}
		DebugLocation(837, 1);
		} finally { DebugExitRule(GrammarFileName, "sequenceof_type"); }
		return retval;

	}
	// $ANTLR end "sequenceof_type"

	private sealed partial class set_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SetType result = new SetType();
		public set_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_set_type();
	partial void LeaveRule_set_type();
	// $ANTLR start "set_type"
	// Smi.g:839:1: set_type returns [SetType result = new SetType()] : SET_KW L_BRACE (e= elementType_list )? R_BRACE ;
	[GrammarRule("set_type")]
	private SmiParser.set_type_return set_type()
	{
		EnterRule_set_type();
		EnterRule("set_type", 37);
		TraceIn("set_type", 37);
		SmiParser.set_type_return retval = new SmiParser.set_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SET_KW106 = default(IToken);
		IToken L_BRACE107 = default(IToken);
		IToken R_BRACE108 = default(IToken);
		SmiParser.elementType_list_return e = default(SmiParser.elementType_list_return);

		CommonTree SET_KW106_tree = default(CommonTree);
		CommonTree L_BRACE107_tree = default(CommonTree);
		CommonTree R_BRACE108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "set_type");
		DebugLocation(839, 1);
		try
		{
			// Smi.g:840:5: ( SET_KW L_BRACE (e= elementType_list )? R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:840:7: SET_KW L_BRACE (e= elementType_list )? R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(840, 7);
			SET_KW106=(IToken)Match(input,SET_KW,Follow._SET_KW_in_set_type3825); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SET_KW106_tree = (CommonTree)adaptor.Create(SET_KW106);
			adaptor.AddChild(root_0, SET_KW106_tree);
			}
			DebugLocation(840, 14);
			L_BRACE107=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_set_type3827); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE107_tree = (CommonTree)adaptor.Create(L_BRACE107);
			adaptor.AddChild(root_0, L_BRACE107_tree);
			}
			DebugLocation(840, 22);
			// Smi.g:840:22: (e= elementType_list )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==COMPONENTS_KW||LA38_1==LOWER))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:840:23: e= elementType_list
				{
				DebugLocation(840, 24);
				PushFollow(Follow._elementType_list_in_set_type3832);
				e=elementType_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(840, 42);
				if (state.backtracking == 0)
				{
					 retval.result.ElementTypeList = (e!=null?e.result:default(IList<ISmiType>)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(840, 85);
			R_BRACE108=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_set_type3838); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE108_tree = (CommonTree)adaptor.Create(R_BRACE108);
			adaptor.AddChild(root_0, R_BRACE108_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_type", 37);
			LeaveRule("set_type", 37);
			LeaveRule_set_type();
		}
		DebugLocation(841, 1);
		} finally { DebugExitRule(GrammarFileName, "set_type"); }
		return retval;

	}
	// $ANTLR end "set_type"

	private sealed partial class setof_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SetOfType result = new SetOfType();
		public setof_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_setof_type();
	partial void LeaveRule_setof_type();
	// $ANTLR start "setof_type"
	// Smi.g:843:1: setof_type returns [SetOfType result = new SetOfType()] : SET_KW ( SIZE_KW c= constraint )? OF_KW t= type ;
	[GrammarRule("setof_type")]
	private SmiParser.setof_type_return setof_type()
	{
		EnterRule_setof_type();
		EnterRule("setof_type", 38);
		TraceIn("setof_type", 38);
		SmiParser.setof_type_return retval = new SmiParser.setof_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SET_KW109 = default(IToken);
		IToken SIZE_KW110 = default(IToken);
		IToken OF_KW111 = default(IToken);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree SET_KW109_tree = default(CommonTree);
		CommonTree SIZE_KW110_tree = default(CommonTree);
		CommonTree OF_KW111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "setof_type");
		DebugLocation(843, 1);
		try
		{
			// Smi.g:844:5: ( SET_KW ( SIZE_KW c= constraint )? OF_KW t= type )
			DebugEnterAlt(1);
			// Smi.g:844:7: SET_KW ( SIZE_KW c= constraint )? OF_KW t= type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(844, 7);
			SET_KW109=(IToken)Match(input,SET_KW,Follow._SET_KW_in_setof_type3856); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SET_KW109_tree = (CommonTree)adaptor.Create(SET_KW109);
			adaptor.AddChild(root_0, SET_KW109_tree);
			}
			DebugLocation(844, 14);
			// Smi.g:844:14: ( SIZE_KW c= constraint )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==SIZE_KW))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:844:15: SIZE_KW c= constraint
				{
				DebugLocation(844, 15);
				SIZE_KW110=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_setof_type3859); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW110_tree = (CommonTree)adaptor.Create(SIZE_KW110);
				adaptor.AddChild(root_0, SIZE_KW110_tree);
				}
				DebugLocation(844, 24);
				PushFollow(Follow._constraint_in_setof_type3863);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(844, 36);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(845, 2);
			OF_KW111=(IToken)Match(input,OF_KW,Follow._OF_KW_in_setof_type3870); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OF_KW111_tree = (CommonTree)adaptor.Create(OF_KW111);
			adaptor.AddChild(root_0, OF_KW111_tree);
			}
			DebugLocation(845, 9);
			PushFollow(Follow._type_in_setof_type3874);
			t=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(845, 15);
			if (state.backtracking == 0)
			{
				 retval.result.Subtype = (t!=null?t.result:default(ISmiType)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setof_type", 38);
			LeaveRule("setof_type", 38);
			LeaveRule_setof_type();
		}
		DebugLocation(846, 1);
		} finally { DebugExitRule(GrammarFileName, "setof_type"); }
		return retval;

	}
	// $ANTLR end "setof_type"

	private sealed partial class tagged_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TaggedType result = new TaggedType();
		public tagged_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_tagged_type();
	partial void LeaveRule_tagged_type();
	// $ANTLR start "tagged_type"
	// Smi.g:848:1: tagged_type returns [TaggedType result = new TaggedType()] : t= tag (td= tag_default )? ty= type ;
	[GrammarRule("tagged_type")]
	private SmiParser.tagged_type_return tagged_type()
	{
		EnterRule_tagged_type();
		EnterRule("tagged_type", 39);
		TraceIn("tagged_type", 39);
		SmiParser.tagged_type_return retval = new SmiParser.tagged_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.tag_return t = default(SmiParser.tag_return);
		SmiParser.tag_default_return td = default(SmiParser.tag_default_return);
		SmiParser.type_return ty = default(SmiParser.type_return);

		try { DebugEnterRule(GrammarFileName, "tagged_type");
		DebugLocation(848, 1);
		try
		{
			// Smi.g:849:5: (t= tag (td= tag_default )? ty= type )
			DebugEnterAlt(1);
			// Smi.g:849:7: t= tag (td= tag_default )? ty= type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(849, 8);
			PushFollow(Follow._tag_in_tagged_type3896);
			t=tag();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(849, 13);
			if (state.backtracking == 0)
			{
				 retval.result.Tag = (t!=null?t.result:default(Tag)); 
			}
			DebugLocation(850, 2);
			// Smi.g:850:2: (td= tag_default )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==AUTOMATIC_KW||LA40_1==EXPLICIT_KW||LA40_1==IMPLICIT_KW))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:850:3: td= tag_default
				{
				DebugLocation(850, 5);
				PushFollow(Follow._tag_default_in_tagged_type3904);
				td=tag_default();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, td.Tree);
				DebugLocation(850, 18);
				if (state.backtracking == 0)
				{
					 retval.result.TagDefault = (td!=null?td.result:default(TagDefault)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(851, 4);
			PushFollow(Follow._type_in_tagged_type3914);
			ty=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ty.Tree);
			DebugLocation(851, 10);
			if (state.backtracking == 0)
			{
				 retval.result.Subtype = (ty!=null?ty.result:default(ISmiType)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagged_type", 39);
			LeaveRule("tagged_type", 39);
			LeaveRule_tagged_type();
		}
		DebugLocation(852, 1);
		} finally { DebugExitRule(GrammarFileName, "tagged_type"); }
		return retval;

	}
	// $ANTLR end "tagged_type"

	private sealed partial class namedNumber_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<ISmiValue> result = new List<ISmiValue>();
		public namedNumber_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_namedNumber_list();
	partial void LeaveRule_namedNumber_list();
	// $ANTLR start "namedNumber_list"
	// Smi.g:854:1: namedNumber_list returns [IList<ISmiValue> result = new List<ISmiValue>()] : L_BRACE num1= namedNumber ( COMMA num2= namedNumber )* R_BRACE ;
	[GrammarRule("namedNumber_list")]
	private SmiParser.namedNumber_list_return namedNumber_list()
	{
		EnterRule_namedNumber_list();
		EnterRule("namedNumber_list", 40);
		TraceIn("namedNumber_list", 40);
		SmiParser.namedNumber_list_return retval = new SmiParser.namedNumber_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE112 = default(IToken);
		IToken COMMA113 = default(IToken);
		IToken R_BRACE114 = default(IToken);
		SmiParser.namedNumber_return num1 = default(SmiParser.namedNumber_return);
		SmiParser.namedNumber_return num2 = default(SmiParser.namedNumber_return);

		CommonTree L_BRACE112_tree = default(CommonTree);
		CommonTree COMMA113_tree = default(CommonTree);
		CommonTree R_BRACE114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namedNumber_list");
		DebugLocation(854, 1);
		try
		{
			// Smi.g:855:5: ( L_BRACE num1= namedNumber ( COMMA num2= namedNumber )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:855:7: L_BRACE num1= namedNumber ( COMMA num2= namedNumber )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(855, 7);
			L_BRACE112=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_namedNumber_list3934); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE112_tree = (CommonTree)adaptor.Create(L_BRACE112);
			adaptor.AddChild(root_0, L_BRACE112_tree);
			}
			DebugLocation(855, 19);
			PushFollow(Follow._namedNumber_in_namedNumber_list3938);
			num1=namedNumber();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, num1.Tree);
			DebugLocation(855, 32);
			if (state.backtracking == 0)
			{
				 retval.result.Add((num1!=null?num1.result:default(NamedNumber))); 
			}
			DebugLocation(856, 2);
			// Smi.g:856:2: ( COMMA num2= namedNumber )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==COMMA))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:856:3: COMMA num2= namedNumber
					{
					DebugLocation(856, 3);
					COMMA113=(IToken)Match(input,COMMA,Follow._COMMA_in_namedNumber_list3944); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA113_tree = (CommonTree)adaptor.Create(COMMA113);
					adaptor.AddChild(root_0, COMMA113_tree);
					}
					DebugLocation(856, 13);
					PushFollow(Follow._namedNumber_in_namedNumber_list3948);
					num2=namedNumber();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, num2.Tree);
					DebugLocation(856, 26);
					if (state.backtracking == 0)
					{
						 retval.result.Add((num2!=null?num2.result:default(NamedNumber))); 
					}

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }

			DebugLocation(856, 59);
			R_BRACE114=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_namedNumber_list3954); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE114_tree = (CommonTree)adaptor.Create(R_BRACE114);
			adaptor.AddChild(root_0, R_BRACE114_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namedNumber_list", 40);
			LeaveRule("namedNumber_list", 40);
			LeaveRule_namedNumber_list();
		}
		DebugLocation(857, 1);
		} finally { DebugExitRule(GrammarFileName, "namedNumber_list"); }
		return retval;

	}
	// $ANTLR end "namedNumber_list"

	private sealed partial class constraint_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Constraint result = new Constraint();
		public constraint_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_constraint();
	partial void LeaveRule_constraint();
	// $ANTLR start "constraint"
	// Smi.g:859:1: constraint returns [Constraint result = new Constraint()] : L_PAREN (es= element_set_specs )? (ex= exception_spec )? R_PAREN ;
	[GrammarRule("constraint")]
	private SmiParser.constraint_return constraint()
	{
		EnterRule_constraint();
		EnterRule("constraint", 41);
		TraceIn("constraint", 41);
		SmiParser.constraint_return retval = new SmiParser.constraint_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_PAREN115 = default(IToken);
		IToken R_PAREN116 = default(IToken);
		SmiParser.element_set_specs_return es = default(SmiParser.element_set_specs_return);
		SmiParser.exception_spec_return ex = default(SmiParser.exception_spec_return);

		CommonTree L_PAREN115_tree = default(CommonTree);
		CommonTree R_PAREN116_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraint");
		DebugLocation(859, 1);
		try
		{
			// Smi.g:860:5: ( L_PAREN (es= element_set_specs )? (ex= exception_spec )? R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:860:7: L_PAREN (es= element_set_specs )? (ex= exception_spec )? R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(860, 7);
			L_PAREN115=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_constraint3972); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN115_tree = (CommonTree)adaptor.Create(L_PAREN115);
			adaptor.AddChild(root_0, L_PAREN115_tree);
			}
			DebugLocation(860, 15);
			// Smi.g:860:15: (es= element_set_specs )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if (((LA42_1>=ALL_KW && LA42_1<=ANY_KW)||LA42_1==BIT_KW||(LA42_1>=BMP_STR_KW && LA42_1<=BOOLEAN_KW)||(LA42_1>=B_STRING && LA42_1<=CHARACTER_KW)||LA42_1==CHOICE_KW||LA42_1==C_STRING||LA42_1==EMBEDDED_KW||LA42_1==ENUMERATED_KW||LA42_1==ERROR_KW||(LA42_1>=EXTERNAL_KW && LA42_1<=GRAPHIC_STR_KW)||(LA42_1>=H_STRING && LA42_1<=IA5_STRING_KW)||LA42_1==INCLUDES_KW||LA42_1==INTEGER_KW||LA42_1==ISO646_STR_KW||(LA42_1>=LOWER && LA42_1<=L_PAREN)||(LA42_1>=MINUS && LA42_1<=NUMERIC_STR_KW)||(LA42_1>=OBJECT_KW && LA42_1<=OCTET_KW)||LA42_1==OPERATION_KW||LA42_1==PATTERN_KW||LA42_1==PLUS_INFINITY_KW||LA42_1==PRINTABLE_STR_KW||LA42_1==REAL_KW||(LA42_1>=SEQUENCE_KW && LA42_1<=SET_KW)||LA42_1==SIZE_KW||LA42_1==T61_STR_KW||(LA42_1>=TELETEX_STR_KW && LA42_1<=TRUE_KW)||(LA42_1>=UNIVERSAL_STR_KW && LA42_1<=WITH_KW)||LA42_1==131||LA42_1==137||(LA42_1>=158 && LA42_1<=161)||(LA42_1>=163 && LA42_1<=165)||LA42_1==179||LA42_1==188||LA42_1==191))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:860:16: es= element_set_specs
				{
				DebugLocation(860, 18);
				PushFollow(Follow._element_set_specs_in_constraint3977);
				es=element_set_specs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, es.Tree);
				DebugLocation(860, 37);
				if (state.backtracking == 0)
				{
					 retval.result.ElementSetSpecs = (es!=null?es.result:default(ElementSetRange)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(861, 2);
			// Smi.g:861:2: (ex= exception_spec )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==EXCLAMATION))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:861:3: ex= exception_spec
				{
				DebugLocation(861, 5);
				PushFollow(Follow._exception_spec_in_constraint3988);
				ex=exception_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ex.Tree);
				DebugLocation(861, 21);
				if (state.backtracking == 0)
				{
					 retval.result.ExceptionSpec = (ex!=null?ex.result:default(ExceptionSpec)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(861, 63);
			R_PAREN116=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_constraint3994); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN116_tree = (CommonTree)adaptor.Create(R_PAREN116);
			adaptor.AddChild(root_0, R_PAREN116_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint", 41);
			LeaveRule("constraint", 41);
			LeaveRule_constraint();
		}
		DebugLocation(862, 1);
		} finally { DebugExitRule(GrammarFileName, "constraint"); }
		return retval;

	}
	// $ANTLR end "constraint"

	private sealed partial class character_set_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public CharacterSet result;
		public character_set_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_character_set();
	partial void LeaveRule_character_set();
	// $ANTLR start "character_set"
	// Smi.g:864:1: character_set returns [CharacterSet result] : ( BMP_STR_KW | GENERALIZED_TIME_KW | GENERAL_STR_KW | GRAPHIC_STR_KW | IA5_STRING_KW | ISO646_STR_KW | NUMERIC_STR_KW | PRINTABLE_STR_KW | TELETEX_STR_KW | T61_STR_KW | UNIVERSAL_STR_KW | UTF8_STR_KW | UTC_TIME_KW | VIDEOTEX_STR_KW | VISIBLE_STR_KW );
	[GrammarRule("character_set")]
	private SmiParser.character_set_return character_set()
	{
		EnterRule_character_set();
		EnterRule("character_set", 42);
		TraceIn("character_set", 42);
		SmiParser.character_set_return retval = new SmiParser.character_set_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken BMP_STR_KW117 = default(IToken);
		IToken GENERALIZED_TIME_KW118 = default(IToken);
		IToken GENERAL_STR_KW119 = default(IToken);
		IToken GRAPHIC_STR_KW120 = default(IToken);
		IToken IA5_STRING_KW121 = default(IToken);
		IToken ISO646_STR_KW122 = default(IToken);
		IToken NUMERIC_STR_KW123 = default(IToken);
		IToken PRINTABLE_STR_KW124 = default(IToken);
		IToken TELETEX_STR_KW125 = default(IToken);
		IToken T61_STR_KW126 = default(IToken);
		IToken UNIVERSAL_STR_KW127 = default(IToken);
		IToken UTF8_STR_KW128 = default(IToken);
		IToken UTC_TIME_KW129 = default(IToken);
		IToken VIDEOTEX_STR_KW130 = default(IToken);
		IToken VISIBLE_STR_KW131 = default(IToken);

		CommonTree BMP_STR_KW117_tree = default(CommonTree);
		CommonTree GENERALIZED_TIME_KW118_tree = default(CommonTree);
		CommonTree GENERAL_STR_KW119_tree = default(CommonTree);
		CommonTree GRAPHIC_STR_KW120_tree = default(CommonTree);
		CommonTree IA5_STRING_KW121_tree = default(CommonTree);
		CommonTree ISO646_STR_KW122_tree = default(CommonTree);
		CommonTree NUMERIC_STR_KW123_tree = default(CommonTree);
		CommonTree PRINTABLE_STR_KW124_tree = default(CommonTree);
		CommonTree TELETEX_STR_KW125_tree = default(CommonTree);
		CommonTree T61_STR_KW126_tree = default(CommonTree);
		CommonTree UNIVERSAL_STR_KW127_tree = default(CommonTree);
		CommonTree UTF8_STR_KW128_tree = default(CommonTree);
		CommonTree UTC_TIME_KW129_tree = default(CommonTree);
		CommonTree VIDEOTEX_STR_KW130_tree = default(CommonTree);
		CommonTree VISIBLE_STR_KW131_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "character_set");
		DebugLocation(864, 1);
		try
		{
			// Smi.g:865:5: ( BMP_STR_KW | GENERALIZED_TIME_KW | GENERAL_STR_KW | GRAPHIC_STR_KW | IA5_STRING_KW | ISO646_STR_KW | NUMERIC_STR_KW | PRINTABLE_STR_KW | TELETEX_STR_KW | T61_STR_KW | UNIVERSAL_STR_KW | UTF8_STR_KW | UTC_TIME_KW | VIDEOTEX_STR_KW | VISIBLE_STR_KW )
			int alt44=15;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case BMP_STR_KW:
				{
				alt44 = 1;
				}
				break;
			case GENERALIZED_TIME_KW:
				{
				alt44 = 2;
				}
				break;
			case GENERAL_STR_KW:
				{
				alt44 = 3;
				}
				break;
			case GRAPHIC_STR_KW:
				{
				alt44 = 4;
				}
				break;
			case IA5_STRING_KW:
				{
				alt44 = 5;
				}
				break;
			case ISO646_STR_KW:
				{
				alt44 = 6;
				}
				break;
			case NUMERIC_STR_KW:
				{
				alt44 = 7;
				}
				break;
			case PRINTABLE_STR_KW:
				{
				alt44 = 8;
				}
				break;
			case TELETEX_STR_KW:
				{
				alt44 = 9;
				}
				break;
			case T61_STR_KW:
				{
				alt44 = 10;
				}
				break;
			case UNIVERSAL_STR_KW:
				{
				alt44 = 11;
				}
				break;
			case UTF8_STR_KW:
				{
				alt44 = 12;
				}
				break;
			case UTC_TIME_KW:
				{
				alt44 = 13;
				}
				break;
			case VIDEOTEX_STR_KW:
				{
				alt44 = 14;
				}
				break;
			case VISIBLE_STR_KW:
				{
				alt44 = 15;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:865:7: BMP_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(865, 7);
				BMP_STR_KW117=(IToken)Match(input,BMP_STR_KW,Follow._BMP_STR_KW_in_character_set4012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BMP_STR_KW117_tree = (CommonTree)adaptor.Create(BMP_STR_KW117);
				adaptor.AddChild(root_0, BMP_STR_KW117_tree);
				}
				DebugLocation(865, 18);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Bmp; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:866:4: GENERALIZED_TIME_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(866, 4);
				GENERALIZED_TIME_KW118=(IToken)Match(input,GENERALIZED_TIME_KW,Follow._GENERALIZED_TIME_KW_in_character_set4019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GENERALIZED_TIME_KW118_tree = (CommonTree)adaptor.Create(GENERALIZED_TIME_KW118);
				adaptor.AddChild(root_0, GENERALIZED_TIME_KW118_tree);
				}
				DebugLocation(866, 24);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.GeneralizedTime; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:867:4: GENERAL_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(867, 4);
				GENERAL_STR_KW119=(IToken)Match(input,GENERAL_STR_KW,Follow._GENERAL_STR_KW_in_character_set4026); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GENERAL_STR_KW119_tree = (CommonTree)adaptor.Create(GENERAL_STR_KW119);
				adaptor.AddChild(root_0, GENERAL_STR_KW119_tree);
				}
				DebugLocation(867, 19);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.General; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:868:4: GRAPHIC_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(868, 4);
				GRAPHIC_STR_KW120=(IToken)Match(input,GRAPHIC_STR_KW,Follow._GRAPHIC_STR_KW_in_character_set4033); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GRAPHIC_STR_KW120_tree = (CommonTree)adaptor.Create(GRAPHIC_STR_KW120);
				adaptor.AddChild(root_0, GRAPHIC_STR_KW120_tree);
				}
				DebugLocation(868, 19);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Graphic; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:869:7: IA5_STRING_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(869, 7);
				IA5_STRING_KW121=(IToken)Match(input,IA5_STRING_KW,Follow._IA5_STRING_KW_in_character_set4043); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IA5_STRING_KW121_tree = (CommonTree)adaptor.Create(IA5_STRING_KW121);
				adaptor.AddChild(root_0, IA5_STRING_KW121_tree);
				}
				DebugLocation(869, 21);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.IA5; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:870:4: ISO646_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(870, 4);
				ISO646_STR_KW122=(IToken)Match(input,ISO646_STR_KW,Follow._ISO646_STR_KW_in_character_set4050); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ISO646_STR_KW122_tree = (CommonTree)adaptor.Create(ISO646_STR_KW122);
				adaptor.AddChild(root_0, ISO646_STR_KW122_tree);
				}
				DebugLocation(870, 18);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.ISO646; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:871:4: NUMERIC_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(871, 4);
				NUMERIC_STR_KW123=(IToken)Match(input,NUMERIC_STR_KW,Follow._NUMERIC_STR_KW_in_character_set4057); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMERIC_STR_KW123_tree = (CommonTree)adaptor.Create(NUMERIC_STR_KW123);
				adaptor.AddChild(root_0, NUMERIC_STR_KW123_tree);
				}
				DebugLocation(871, 19);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Numeric; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:872:4: PRINTABLE_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(872, 4);
				PRINTABLE_STR_KW124=(IToken)Match(input,PRINTABLE_STR_KW,Follow._PRINTABLE_STR_KW_in_character_set4064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRINTABLE_STR_KW124_tree = (CommonTree)adaptor.Create(PRINTABLE_STR_KW124);
				adaptor.AddChild(root_0, PRINTABLE_STR_KW124_tree);
				}
				DebugLocation(872, 21);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Printable; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:873:7: TELETEX_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(873, 7);
				TELETEX_STR_KW125=(IToken)Match(input,TELETEX_STR_KW,Follow._TELETEX_STR_KW_in_character_set4074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TELETEX_STR_KW125_tree = (CommonTree)adaptor.Create(TELETEX_STR_KW125);
				adaptor.AddChild(root_0, TELETEX_STR_KW125_tree);
				}
				DebugLocation(873, 22);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.TeleTex; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:874:4: T61_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(874, 4);
				T61_STR_KW126=(IToken)Match(input,T61_STR_KW,Follow._T61_STR_KW_in_character_set4081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				T61_STR_KW126_tree = (CommonTree)adaptor.Create(T61_STR_KW126);
				adaptor.AddChild(root_0, T61_STR_KW126_tree);
				}
				DebugLocation(874, 15);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.T61; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:875:4: UNIVERSAL_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(875, 4);
				UNIVERSAL_STR_KW127=(IToken)Match(input,UNIVERSAL_STR_KW,Follow._UNIVERSAL_STR_KW_in_character_set4088); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UNIVERSAL_STR_KW127_tree = (CommonTree)adaptor.Create(UNIVERSAL_STR_KW127);
				adaptor.AddChild(root_0, UNIVERSAL_STR_KW127_tree);
				}
				DebugLocation(875, 21);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Universal; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:876:4: UTF8_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(876, 4);
				UTF8_STR_KW128=(IToken)Match(input,UTF8_STR_KW,Follow._UTF8_STR_KW_in_character_set4095); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UTF8_STR_KW128_tree = (CommonTree)adaptor.Create(UTF8_STR_KW128);
				adaptor.AddChild(root_0, UTF8_STR_KW128_tree);
				}
				DebugLocation(876, 16);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.UTF8; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:877:7: UTC_TIME_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(877, 7);
				UTC_TIME_KW129=(IToken)Match(input,UTC_TIME_KW,Follow._UTC_TIME_KW_in_character_set4105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UTC_TIME_KW129_tree = (CommonTree)adaptor.Create(UTC_TIME_KW129);
				adaptor.AddChild(root_0, UTC_TIME_KW129_tree);
				}
				DebugLocation(877, 19);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.UTCTime; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Smi.g:878:4: VIDEOTEX_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(878, 4);
				VIDEOTEX_STR_KW130=(IToken)Match(input,VIDEOTEX_STR_KW,Follow._VIDEOTEX_STR_KW_in_character_set4112); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VIDEOTEX_STR_KW130_tree = (CommonTree)adaptor.Create(VIDEOTEX_STR_KW130);
				adaptor.AddChild(root_0, VIDEOTEX_STR_KW130_tree);
				}
				DebugLocation(878, 20);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.VideoTex; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Smi.g:879:4: VISIBLE_STR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(879, 4);
				VISIBLE_STR_KW131=(IToken)Match(input,VISIBLE_STR_KW,Follow._VISIBLE_STR_KW_in_character_set4119); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VISIBLE_STR_KW131_tree = (CommonTree)adaptor.Create(VISIBLE_STR_KW131);
				adaptor.AddChild(root_0, VISIBLE_STR_KW131_tree);
				}
				DebugLocation(879, 19);
				if (state.backtracking == 0)
				{
					 retval.result = CharacterSet.Visible; 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_set", 42);
			LeaveRule("character_set", 42);
			LeaveRule_character_set();
		}
		DebugLocation(880, 1);
		} finally { DebugExitRule(GrammarFileName, "character_set"); }
		return retval;

	}
	// $ANTLR end "character_set"

	private sealed partial class elementType_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<ISmiType> result = new List<ISmiType>();
		public elementType_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_elementType_list();
	partial void LeaveRule_elementType_list();
	// $ANTLR start "elementType_list"
	// Smi.g:882:1: elementType_list returns [IList<ISmiType> result = new List<ISmiType>()] : t1= elementType ( COMMA t2= elementType |c= choice_type )* ;
	[GrammarRule("elementType_list")]
	private SmiParser.elementType_list_return elementType_list()
	{
		EnterRule_elementType_list();
		EnterRule("elementType_list", 43);
		TraceIn("elementType_list", 43);
		SmiParser.elementType_list_return retval = new SmiParser.elementType_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA132 = default(IToken);
		SmiParser.elementType_return t1 = default(SmiParser.elementType_return);
		SmiParser.elementType_return t2 = default(SmiParser.elementType_return);
		SmiParser.choice_type_return c = default(SmiParser.choice_type_return);

		CommonTree COMMA132_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementType_list");
		DebugLocation(882, 1);
		try
		{
			// Smi.g:883:5: (t1= elementType ( COMMA t2= elementType |c= choice_type )* )
			DebugEnterAlt(1);
			// Smi.g:883:7: t1= elementType ( COMMA t2= elementType |c= choice_type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(883, 9);
			PushFollow(Follow._elementType_in_elementType_list4141);
			t1=elementType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t1.Tree);
			DebugLocation(883, 22);
			if (state.backtracking == 0)
			{
				 retval.result.Add((t1!=null?t1.result:default(ElementType))); 
			}
			DebugLocation(884, 2);
			// Smi.g:884:2: ( COMMA t2= elementType |c= choice_type )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=3;
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==COMMA))
				{
					alt45 = 1;
				}
				else if ((LA45_1==CHOICE_KW))
				{
					alt45 = 2;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:884:3: COMMA t2= elementType
					{
					DebugLocation(884, 3);
					COMMA132=(IToken)Match(input,COMMA,Follow._COMMA_in_elementType_list4148); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA132_tree = (CommonTree)adaptor.Create(COMMA132);
					adaptor.AddChild(root_0, COMMA132_tree);
					}
					DebugLocation(884, 11);
					PushFollow(Follow._elementType_in_elementType_list4152);
					t2=elementType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
					DebugLocation(884, 24);
					if (state.backtracking == 0)
					{
						 retval.result.Add((t2!=null?t2.result:default(ElementType))); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:885:4: c= choice_type
					{
					DebugLocation(885, 5);
					PushFollow(Follow._choice_type_in_elementType_list4161);
					c=choice_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
					DebugLocation(885, 18);
					if (state.backtracking == 0)
					{
						 retval.result.Add((c!=null?c.result:default(ChoiceType))); 
					}

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementType_list", 43);
			LeaveRule("elementType_list", 43);
			LeaveRule_elementType_list();
		}
		DebugLocation(886, 1);
		} finally { DebugExitRule(GrammarFileName, "elementType_list"); }
		return retval;

	}
	// $ANTLR end "elementType_list"

	private sealed partial class tag_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Tag result = new Tag();
		public tag_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_tag();
	partial void LeaveRule_tag();
	// $ANTLR start "tag"
	// Smi.g:888:1: tag returns [Tag result = new Tag()] : L_BRACKET (c= clazz )? cl= class_NUMBER R_BRACKET ;
	[GrammarRule("tag")]
	private SmiParser.tag_return tag()
	{
		EnterRule_tag();
		EnterRule("tag", 44);
		TraceIn("tag", 44);
		SmiParser.tag_return retval = new SmiParser.tag_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACKET133 = default(IToken);
		IToken R_BRACKET134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		SmiParser.class_NUMBER_return cl = default(SmiParser.class_NUMBER_return);

		CommonTree L_BRACKET133_tree = default(CommonTree);
		CommonTree R_BRACKET134_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(888, 1);
		try
		{
			// Smi.g:889:5: ( L_BRACKET (c= clazz )? cl= class_NUMBER R_BRACKET )
			DebugEnterAlt(1);
			// Smi.g:889:7: L_BRACKET (c= clazz )? cl= class_NUMBER R_BRACKET
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(889, 7);
			L_BRACKET133=(IToken)Match(input,L_BRACKET,Follow._L_BRACKET_in_tag4185); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACKET133_tree = (CommonTree)adaptor.Create(L_BRACKET133);
			adaptor.AddChild(root_0, L_BRACKET133_tree);
			}
			DebugLocation(889, 17);
			// Smi.g:889:17: (c= clazz )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==APPLICATION_KW||LA46_1==PRIVATE_KW||LA46_1==UNIVERSAL_KW))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:889:18: c= clazz
				{
				DebugLocation(889, 19);
				PushFollow(Follow._clazz_in_tag4190);
				c=clazz();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(889, 26);
				if (state.backtracking == 0)
				{
					 retval.result.TagType = (c!=null?input.ToString(c.Start,c.Stop):null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(890, 4);
			PushFollow(Follow._class_NUMBER_in_tag4200);
			cl=class_NUMBER();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cl.Tree);
			DebugLocation(890, 18);
			R_BRACKET134=(IToken)Match(input,R_BRACKET,Follow._R_BRACKET_in_tag4202); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACKET134_tree = (CommonTree)adaptor.Create(R_BRACKET134);
			adaptor.AddChild(root_0, R_BRACKET134_tree);
			}
			DebugLocation(890, 28);
			if (state.backtracking == 0)
			{
				 retval.result.TagNumber = (cl!=null?cl.result:default(ClassNumber)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 44);
			LeaveRule("tag", 44);
			LeaveRule_tag();
		}
		DebugLocation(891, 1);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"

	partial void EnterRule_clazz();
	partial void LeaveRule_clazz();
	// $ANTLR start "clazz"
	// Smi.g:893:1: clazz : ( UNIVERSAL_KW | APPLICATION_KW | PRIVATE_KW );
	[GrammarRule("clazz")]
	private AstParserRuleReturnScope<CommonTree, IToken> clazz()
	{
		EnterRule_clazz();
		EnterRule("clazz", 45);
		TraceIn("clazz", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set135 = default(IToken);

		CommonTree set135_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "clazz");
		DebugLocation(893, 49);
		try
		{
			// Smi.g:893:6: ( UNIVERSAL_KW | APPLICATION_KW | PRIVATE_KW )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(893, 6);

			set135=(IToken)input.LT(1);
			if (input.LA(1)==APPLICATION_KW||input.LA(1)==PRIVATE_KW||input.LA(1)==UNIVERSAL_KW)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set135));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("clazz", 45);
			LeaveRule("clazz", 45);
			LeaveRule_clazz();
		}
		DebugLocation(893, 49);
		} finally { DebugExitRule(GrammarFileName, "clazz"); }
		return retval;

	}
	// $ANTLR end "clazz"

	private sealed partial class class_NUMBER_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ClassNumber result;
		public class_NUMBER_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_class_NUMBER();
	partial void LeaveRule_class_NUMBER();
	// $ANTLR start "class_NUMBER"
	// Smi.g:896:1: class_NUMBER returns [ClassNumber result] : (num= NUMBER |dv= defined_value );
	[GrammarRule("class_NUMBER")]
	private SmiParser.class_NUMBER_return class_NUMBER()
	{
		EnterRule_class_NUMBER();
		EnterRule("class_NUMBER", 46);
		TraceIn("class_NUMBER", 46);
		SmiParser.class_NUMBER_return retval = new SmiParser.class_NUMBER_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken num = default(IToken);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);

		CommonTree num_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_NUMBER");
		DebugLocation(896, 1);
		try
		{
			// Smi.g:897:5: (num= NUMBER |dv= defined_value )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==NUMBER))
			{
				alt47 = 1;
			}
			else if ((LA47_1==LOWER||LA47_1==UPPER))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:897:7: num= NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(897, 10);
				num=(IToken)Match(input,NUMBER,Follow._NUMBER_in_class_NUMBER4241); if (state.failed) return retval;
				if (state.backtracking == 0) {
				num_tree = (CommonTree)adaptor.Create(num);
				adaptor.AddChild(root_0, num_tree);
				}
				DebugLocation(897, 18);
				if (state.backtracking == 0)
				{
					 retval.result = new ClassNumber((num!=null?num.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:898:4: dv= defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(898, 6);
				PushFollow(Follow._defined_value_in_class_NUMBER4250);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(898, 21);
				if (state.backtracking == 0)
				{
					 retval.result = new ClassNumber((dv!=null?dv.result:default(DefinedValue))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_NUMBER", 46);
			LeaveRule("class_NUMBER", 46);
			LeaveRule_class_NUMBER();
		}
		DebugLocation(899, 1);
		} finally { DebugExitRule(GrammarFileName, "class_NUMBER"); }
		return retval;

	}
	// $ANTLR end "class_NUMBER"

	private sealed partial class operation_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public OperationMacro result = new OperationMacro();
		public operation_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_operation_macro();
	partial void LeaveRule_operation_macro();
	// $ANTLR start "operation_macro"
	// Smi.g:902:1: operation_macro returns [OperationMacro result = new OperationMacro()] : 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=>l1= LOWER )? t1= type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE (o= operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE (l= linkedOp_list )? R_BRACE )? ;
	[GrammarRule("operation_macro")]
	private SmiParser.operation_macro_return operation_macro()
	{
		EnterRule_operation_macro();
		EnterRule("operation_macro", 47);
		TraceIn("operation_macro", 47);
		SmiParser.operation_macro_return retval = new SmiParser.operation_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l1 = default(IToken);
		IToken l2 = default(IToken);
		IToken string_literal136 = default(IToken);
		IToken ARGUMENT_KW137 = default(IToken);
		IToken RESULT_KW138 = default(IToken);
		IToken ERRORS_KW139 = default(IToken);
		IToken L_BRACE140 = default(IToken);
		IToken R_BRACE141 = default(IToken);
		IToken LINKED_KW142 = default(IToken);
		IToken L_BRACE143 = default(IToken);
		IToken R_BRACE144 = default(IToken);
		SmiParser.type_return t1 = default(SmiParser.type_return);
		SmiParser.type_return t2 = default(SmiParser.type_return);
		SmiParser.operation_errorlist_return o = default(SmiParser.operation_errorlist_return);
		SmiParser.linkedOp_list_return l = default(SmiParser.linkedOp_list_return);

		CommonTree l1_tree = default(CommonTree);
		CommonTree l2_tree = default(CommonTree);
		CommonTree string_literal136_tree = default(CommonTree);
		CommonTree ARGUMENT_KW137_tree = default(CommonTree);
		CommonTree RESULT_KW138_tree = default(CommonTree);
		CommonTree ERRORS_KW139_tree = default(CommonTree);
		CommonTree L_BRACE140_tree = default(CommonTree);
		CommonTree R_BRACE141_tree = default(CommonTree);
		CommonTree LINKED_KW142_tree = default(CommonTree);
		CommonTree L_BRACE143_tree = default(CommonTree);
		CommonTree R_BRACE144_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operation_macro");
		DebugLocation(902, 1);
		try
		{
			// Smi.g:903:5: ( 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=>l1= LOWER )? t1= type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE (o= operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE (l= linkedOp_list )? R_BRACE )? )
			DebugEnterAlt(1);
			// Smi.g:903:7: 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=>l1= LOWER )? t1= type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE (o= operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE (l= linkedOp_list )? R_BRACE )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(903, 7);
			string_literal136=(IToken)Match(input,OPERATION_KW,Follow._OPERATION_KW_in_operation_macro4272); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal136_tree = (CommonTree)adaptor.Create(string_literal136);
			adaptor.AddChild(root_0, string_literal136_tree);
			}
			DebugLocation(904, 2);
			// Smi.g:904:2: ( ARGUMENT_KW ( ( LOWER )=>l1= LOWER )? t1= type )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==ARGUMENT_KW))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:904:3: ARGUMENT_KW ( ( LOWER )=>l1= LOWER )? t1= type
				{
				DebugLocation(904, 3);
				ARGUMENT_KW137=(IToken)Match(input,ARGUMENT_KW,Follow._ARGUMENT_KW_in_operation_macro4277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ARGUMENT_KW137_tree = (CommonTree)adaptor.Create(ARGUMENT_KW137);
				adaptor.AddChild(root_0, ARGUMENT_KW137_tree);
				}
				DebugLocation(904, 15);
				// Smi.g:904:15: ( ( LOWER )=>l1= LOWER )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==LOWER))
				{
					int LA48_2 = input.LA(2);

					if ((LA48_2==ANY_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==BIT_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==BOOLEAN_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==CHARACTER_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==BMP_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==GENERALIZED_TIME_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==GENERAL_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==GRAPHIC_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==IA5_STRING_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==ISO646_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==NUMERIC_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==PRINTABLE_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==TELETEX_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==T61_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==UNIVERSAL_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==UTF8_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==UTC_TIME_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==VIDEOTEX_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==VISIBLE_STR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==CHOICE_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==EMBEDDED_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==ENUMERATED_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==EXTERNAL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==INTEGER_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==NULL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==OBJECT_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==OCTET_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==REAL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==179) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==SEQUENCE_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==SET_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==L_BRACKET) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==UPPER) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==LOWER) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==OPERATION_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==ERROR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==165) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==159) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==164) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==161) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==188) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==163) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==160) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==158) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==131) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==191) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
					else if ((LA48_2==137) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt48 = 1;
					}
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:904:16: ( LOWER )=>l1= LOWER
					{
					DebugLocation(904, 29);
					l1=(IToken)Match(input,LOWER,Follow._LOWER_in_operation_macro4288); if (state.failed) return retval;
					if (state.backtracking == 0) {
					l1_tree = (CommonTree)adaptor.Create(l1);
					adaptor.AddChild(root_0, l1_tree);
					}
					DebugLocation(904, 36);
					if (state.backtracking == 0)
					{
						 retval.result.ArgumentIdentifier = (l1!=null?l1.Text:null); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(905, 4);
				PushFollow(Follow._type_in_operation_macro4298);
				t1=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t1.Tree);
				DebugLocation(905, 10);
				if (state.backtracking == 0)
				{
					 retval.result.ArgumentType = (t1!=null?t1.result:default(ISmiType)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(906, 5);
			// Smi.g:906:5: ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )? )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==RESULT_KW))
			{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_Smi_fragment)))
				{
					alt52 = 1;
				}
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:906:7: ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )?
				{
				DebugLocation(906, 22);
				RESULT_KW138=(IToken)Match(input,RESULT_KW,Follow._RESULT_KW_in_operation_macro4317); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RESULT_KW138_tree = (CommonTree)adaptor.Create(RESULT_KW138);
				adaptor.AddChild(root_0, RESULT_KW138_tree);
				}
				DebugLocation(907, 9);
				// Smi.g:907:9: ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				try
				{
					alt51 = dfa51.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:907:10: ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type
					{
					DebugLocation(907, 21);
					// Smi.g:907:21: ( ( LOWER )=>l2= LOWER )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, false);
					int LA50_1 = input.LA(1);

					if ((LA50_1==LOWER))
					{
						int LA50_2 = input.LA(2);

						if ((LA50_2==ANY_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==BIT_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==BOOLEAN_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==CHARACTER_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==BMP_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==GENERALIZED_TIME_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==GENERAL_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==GRAPHIC_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==IA5_STRING_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==ISO646_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==NUMERIC_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==PRINTABLE_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==TELETEX_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==T61_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==UNIVERSAL_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==UTF8_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==UTC_TIME_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==VIDEOTEX_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==VISIBLE_STR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==CHOICE_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==EMBEDDED_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==ENUMERATED_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==EXTERNAL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==INTEGER_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==NULL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==OBJECT_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==OCTET_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==REAL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==179) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==SEQUENCE_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==SET_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==L_BRACKET) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==UPPER) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==LOWER) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==OPERATION_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==ERROR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==165) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==159) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==164) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==161) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==188) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==163) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==160) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==158) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==131) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==191) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
						else if ((LA50_2==137) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt50 = 1;
						}
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:907:22: ( LOWER )=>l2= LOWER
						{
						DebugLocation(907, 35);
						l2=(IToken)Match(input,LOWER,Follow._LOWER_in_operation_macro4344); if (state.failed) return retval;
						if (state.backtracking == 0) {
						l2_tree = (CommonTree)adaptor.Create(l2);
						adaptor.AddChild(root_0, l2_tree);
						}
						DebugLocation(907, 42);
						if (state.backtracking == 0)
						{
							 retval.result.ResultIdentifier = (l2!=null?l2.Text:null); 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(908, 5);
					PushFollow(Follow._type_in_operation_macro4355);
					t2=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
					DebugLocation(908, 11);
					if (state.backtracking == 0)
					{
						 retval.result.ResultType = (t2!=null?t2.result:default(ISmiType)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(910, 5);
			// Smi.g:910:5: ( ( ERRORS_KW )=> ERRORS_KW L_BRACE (o= operation_errorlist )? R_BRACE )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==ERRORS_KW))
			{
				int LA54_2 = input.LA(2);

				if ((EvaluatePredicate(synpred22_Smi_fragment)))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:910:7: ( ERRORS_KW )=> ERRORS_KW L_BRACE (o= operation_errorlist )? R_BRACE
				{
				DebugLocation(910, 22);
				ERRORS_KW139=(IToken)Match(input,ERRORS_KW,Follow._ERRORS_KW_in_operation_macro4378); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ERRORS_KW139_tree = (CommonTree)adaptor.Create(ERRORS_KW139);
				adaptor.AddChild(root_0, ERRORS_KW139_tree);
				}
				DebugLocation(910, 32);
				L_BRACE140=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_operation_macro4380); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE140_tree = (CommonTree)adaptor.Create(L_BRACE140);
				adaptor.AddChild(root_0, L_BRACE140_tree);
				}
				DebugLocation(910, 40);
				// Smi.g:910:40: (o= operation_errorlist )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ANY_KW||LA53_1==BIT_KW||(LA53_1>=BMP_STR_KW && LA53_1<=BOOLEAN_KW)||(LA53_1>=B_STRING && LA53_1<=CHARACTER_KW)||LA53_1==CHOICE_KW||LA53_1==C_STRING||LA53_1==EMBEDDED_KW||LA53_1==ENUMERATED_KW||LA53_1==ERROR_KW||(LA53_1>=EXTERNAL_KW && LA53_1<=FALSE_KW)||(LA53_1>=GENERALIZED_TIME_KW && LA53_1<=GRAPHIC_STR_KW)||(LA53_1>=H_STRING && LA53_1<=IA5_STRING_KW)||LA53_1==INTEGER_KW||LA53_1==ISO646_STR_KW||(LA53_1>=LOWER && LA53_1<=L_BRACKET)||(LA53_1>=MINUS && LA53_1<=MINUS_INFINITY_KW)||(LA53_1>=NULL_KW && LA53_1<=NUMERIC_STR_KW)||(LA53_1>=OBJECT_KW && LA53_1<=OCTET_KW)||LA53_1==OPERATION_KW||LA53_1==PLUS_INFINITY_KW||LA53_1==PRINTABLE_STR_KW||LA53_1==REAL_KW||(LA53_1>=SEQUENCE_KW && LA53_1<=SET_KW)||LA53_1==T61_STR_KW||(LA53_1>=TELETEX_STR_KW && LA53_1<=TRUE_KW)||(LA53_1>=UNIVERSAL_STR_KW && LA53_1<=VISIBLE_STR_KW)||LA53_1==131||LA53_1==137||(LA53_1>=158 && LA53_1<=161)||(LA53_1>=163 && LA53_1<=165)||LA53_1==179||LA53_1==188||LA53_1==191))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:910:41: o= operation_errorlist
					{
					DebugLocation(910, 42);
					PushFollow(Follow._operation_errorlist_in_operation_macro4385);
					o=operation_errorlist();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, o.Tree);
					DebugLocation(910, 63);
					if (state.backtracking == 0)
					{
						 retval.result.ErrorList = (o!=null?o.result:default(IList<TypeOrValue>)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(910, 100);
				R_BRACE141=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_operation_macro4391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE141_tree = (CommonTree)adaptor.Create(R_BRACE141);
				adaptor.AddChild(root_0, R_BRACE141_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(911, 5);
			// Smi.g:911:5: ( ( LINKED_KW )=> LINKED_KW L_BRACE (l= linkedOp_list )? R_BRACE )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==LINKED_KW))
			{
				int LA56_2 = input.LA(2);

				if ((EvaluatePredicate(synpred23_Smi_fragment)))
				{
					alt56 = 1;
				}
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:911:7: ( LINKED_KW )=> LINKED_KW L_BRACE (l= linkedOp_list )? R_BRACE
				{
				DebugLocation(911, 22);
				LINKED_KW142=(IToken)Match(input,LINKED_KW,Follow._LINKED_KW_in_operation_macro4409); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LINKED_KW142_tree = (CommonTree)adaptor.Create(LINKED_KW142);
				adaptor.AddChild(root_0, LINKED_KW142_tree);
				}
				DebugLocation(911, 32);
				L_BRACE143=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_operation_macro4411); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE143_tree = (CommonTree)adaptor.Create(L_BRACE143);
				adaptor.AddChild(root_0, L_BRACE143_tree);
				}
				DebugLocation(911, 40);
				// Smi.g:911:40: (l= linkedOp_list )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==ANY_KW||LA55_1==BIT_KW||(LA55_1>=BMP_STR_KW && LA55_1<=BOOLEAN_KW)||(LA55_1>=B_STRING && LA55_1<=CHARACTER_KW)||LA55_1==CHOICE_KW||LA55_1==C_STRING||LA55_1==EMBEDDED_KW||LA55_1==ENUMERATED_KW||LA55_1==ERROR_KW||(LA55_1>=EXTERNAL_KW && LA55_1<=FALSE_KW)||(LA55_1>=GENERALIZED_TIME_KW && LA55_1<=GRAPHIC_STR_KW)||(LA55_1>=H_STRING && LA55_1<=IA5_STRING_KW)||LA55_1==INTEGER_KW||LA55_1==ISO646_STR_KW||(LA55_1>=LOWER && LA55_1<=L_BRACKET)||(LA55_1>=MINUS && LA55_1<=MINUS_INFINITY_KW)||(LA55_1>=NULL_KW && LA55_1<=NUMERIC_STR_KW)||(LA55_1>=OBJECT_KW && LA55_1<=OCTET_KW)||LA55_1==OPERATION_KW||LA55_1==PLUS_INFINITY_KW||LA55_1==PRINTABLE_STR_KW||LA55_1==REAL_KW||(LA55_1>=SEQUENCE_KW && LA55_1<=SET_KW)||LA55_1==T61_STR_KW||(LA55_1>=TELETEX_STR_KW && LA55_1<=TRUE_KW)||(LA55_1>=UNIVERSAL_STR_KW && LA55_1<=VISIBLE_STR_KW)||LA55_1==131||LA55_1==137||(LA55_1>=158 && LA55_1<=161)||(LA55_1>=163 && LA55_1<=165)||LA55_1==179||LA55_1==188||LA55_1==191))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:911:41: l= linkedOp_list
					{
					DebugLocation(911, 42);
					PushFollow(Follow._linkedOp_list_in_operation_macro4416);
					l=linkedOp_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, l.Tree);
					DebugLocation(911, 57);
					if (state.backtracking == 0)
					{
						 retval.result.LinkedOperationList = (l!=null?l.result:default(IList<TypeOrValue>)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(911, 104);
				R_BRACE144=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_operation_macro4422); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE144_tree = (CommonTree)adaptor.Create(R_BRACE144);
				adaptor.AddChild(root_0, R_BRACE144_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation_macro", 47);
			LeaveRule("operation_macro", 47);
			LeaveRule_operation_macro();
		}
		DebugLocation(912, 1);
		} finally { DebugExitRule(GrammarFileName, "operation_macro"); }
		return retval;

	}
	// $ANTLR end "operation_macro"

	private sealed partial class error_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ErrorMacro result = new ErrorMacro();
		public error_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_error_macro();
	partial void LeaveRule_error_macro();
	// $ANTLR start "error_macro"
	// Smi.g:923:1: error_macro returns [ErrorMacro result = new ErrorMacro()] : ERROR_KW ( PARAMETER_KW ( ( LOWER )=>id= LOWER )? t= type )? ;
	[GrammarRule("error_macro")]
	private SmiParser.error_macro_return error_macro()
	{
		EnterRule_error_macro();
		EnterRule("error_macro", 48);
		TraceIn("error_macro", 48);
		SmiParser.error_macro_return retval = new SmiParser.error_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken ERROR_KW145 = default(IToken);
		IToken PARAMETER_KW146 = default(IToken);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree id_tree = default(CommonTree);
		CommonTree ERROR_KW145_tree = default(CommonTree);
		CommonTree PARAMETER_KW146_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "error_macro");
		DebugLocation(923, 43);
		try
		{
			// Smi.g:924:5: ( ERROR_KW ( PARAMETER_KW ( ( LOWER )=>id= LOWER )? t= type )? )
			DebugEnterAlt(1);
			// Smi.g:924:7: ERROR_KW ( PARAMETER_KW ( ( LOWER )=>id= LOWER )? t= type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(924, 7);
			ERROR_KW145=(IToken)Match(input,ERROR_KW,Follow._ERROR_KW_in_error_macro4454); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ERROR_KW145_tree = (CommonTree)adaptor.Create(ERROR_KW145);
			adaptor.AddChild(root_0, ERROR_KW145_tree);
			}
			DebugLocation(925, 2);
			// Smi.g:925:2: ( PARAMETER_KW ( ( LOWER )=>id= LOWER )? t= type )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==PARAMETER_KW))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:925:4: PARAMETER_KW ( ( LOWER )=>id= LOWER )? t= type
				{
				DebugLocation(925, 4);
				PARAMETER_KW146=(IToken)Match(input,PARAMETER_KW,Follow._PARAMETER_KW_in_error_macro4460); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PARAMETER_KW146_tree = (CommonTree)adaptor.Create(PARAMETER_KW146);
				adaptor.AddChild(root_0, PARAMETER_KW146_tree);
				}
				DebugLocation(925, 17);
				// Smi.g:925:17: ( ( LOWER )=>id= LOWER )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==LOWER))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==ANY_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==BIT_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==BOOLEAN_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==CHARACTER_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==BMP_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==GENERALIZED_TIME_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==GENERAL_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==GRAPHIC_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==IA5_STRING_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==ISO646_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==NUMERIC_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==PRINTABLE_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==TELETEX_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==T61_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==UNIVERSAL_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==UTF8_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==UTC_TIME_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==VIDEOTEX_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==VISIBLE_STR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==CHOICE_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==EMBEDDED_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==ENUMERATED_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==EXTERNAL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==INTEGER_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==NULL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==OBJECT_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==OCTET_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==REAL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==179) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==SEQUENCE_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==SET_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==L_BRACKET) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==UPPER) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==LOWER) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==OPERATION_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==ERROR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==165) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==159) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==164) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==161) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==188) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==163) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==160) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==158) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==131) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==191) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
					else if ((LA57_2==137) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt57 = 1;
					}
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:925:18: ( LOWER )=>id= LOWER
					{
					DebugLocation(925, 31);
					id=(IToken)Match(input,LOWER,Follow._LOWER_in_error_macro4471); if (state.failed) return retval;
					if (state.backtracking == 0) {
					id_tree = (CommonTree)adaptor.Create(id);
					adaptor.AddChild(root_0, id_tree);
					}
					DebugLocation(925, 38);
					if (state.backtracking == 0)
					{
						 retval.result.Identifier = (id!=null?id.Text:null); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(926, 3);
				PushFollow(Follow._type_in_error_macro4481);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(926, 9);
				if (state.backtracking == 0)
				{
					 retval.result.Subtype = (t!=null?t.result:default(ISmiType)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("error_macro", 48);
			LeaveRule("error_macro", 48);
			LeaveRule_error_macro();
		}
		DebugLocation(926, 43);
		} finally { DebugExitRule(GrammarFileName, "error_macro"); }
		return retval;

	}
	// $ANTLR end "error_macro"

	private sealed partial class macros_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiType result;
		public macros_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_macros_type();
	partial void LeaveRule_macros_type();
	// $ANTLR start "macros_type"
	// Smi.g:933:1: macros_type returns [ISmiType result] : (om= operation_macro |em= error_macro |otm= objecttype_macro |mm= moduleidentity_macro |oim= objectidentity_macro |ntm= notificationtype_macro |tcm= textualconvention_macro |ogm= objectgroup_macro |ngm= notificationgroup_macro |mcm= modulecompliance_macro |acm= agentcapabilities_macro |ttm= traptype_macro );
	[GrammarRule("macros_type")]
	private SmiParser.macros_type_return macros_type()
	{
		EnterRule_macros_type();
		EnterRule("macros_type", 49);
		TraceIn("macros_type", 49);
		SmiParser.macros_type_return retval = new SmiParser.macros_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.operation_macro_return om = default(SmiParser.operation_macro_return);
		SmiParser.error_macro_return em = default(SmiParser.error_macro_return);
		SmiParser.objecttype_macro_return otm = default(SmiParser.objecttype_macro_return);
		SmiParser.moduleidentity_macro_return mm = default(SmiParser.moduleidentity_macro_return);
		SmiParser.objectidentity_macro_return oim = default(SmiParser.objectidentity_macro_return);
		SmiParser.notificationtype_macro_return ntm = default(SmiParser.notificationtype_macro_return);
		SmiParser.textualconvention_macro_return tcm = default(SmiParser.textualconvention_macro_return);
		SmiParser.objectgroup_macro_return ogm = default(SmiParser.objectgroup_macro_return);
		SmiParser.notificationgroup_macro_return ngm = default(SmiParser.notificationgroup_macro_return);
		SmiParser.modulecompliance_macro_return mcm = default(SmiParser.modulecompliance_macro_return);
		SmiParser.agentcapabilities_macro_return acm = default(SmiParser.agentcapabilities_macro_return);
		SmiParser.traptype_macro_return ttm = default(SmiParser.traptype_macro_return);

		try { DebugEnterRule(GrammarFileName, "macros_type");
		DebugLocation(933, 48);
		try
		{
			// Smi.g:934:5: (om= operation_macro |em= error_macro |otm= objecttype_macro |mm= moduleidentity_macro |oim= objectidentity_macro |ntm= notificationtype_macro |tcm= textualconvention_macro |ogm= objectgroup_macro |ngm= notificationgroup_macro |mcm= modulecompliance_macro |acm= agentcapabilities_macro |ttm= traptype_macro )
			int alt59=12;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case OPERATION_KW:
				{
				alt59 = 1;
				}
				break;
			case ERROR_KW:
				{
				alt59 = 2;
				}
				break;
			case 165:
				{
				alt59 = 3;
				}
				break;
			case 159:
				{
				alt59 = 4;
				}
				break;
			case 164:
				{
				alt59 = 5;
				}
				break;
			case 161:
				{
				alt59 = 6;
				}
				break;
			case 188:
				{
				alt59 = 7;
				}
				break;
			case 163:
				{
				alt59 = 8;
				}
				break;
			case 160:
				{
				alt59 = 9;
				}
				break;
			case 158:
				{
				alt59 = 10;
				}
				break;
			case 131:
				{
				alt59 = 11;
				}
				break;
			case 191:
				{
				alt59 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:934:7: om= operation_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(934, 9);
				PushFollow(Follow._operation_macro_in_macros_type4511);
				om=operation_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, om.Tree);
				DebugLocation(934, 26);
				if (state.backtracking == 0)
				{
					 retval.result = (om!=null?om.result:default(OperationMacro)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:935:4: em= error_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(935, 6);
				PushFollow(Follow._error_macro_in_macros_type4520);
				em=error_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, em.Tree);
				DebugLocation(935, 19);
				if (state.backtracking == 0)
				{
					 retval.result = (em!=null?em.result:default(ErrorMacro)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:936:4: otm= objecttype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(936, 7);
				PushFollow(Follow._objecttype_macro_in_macros_type4529);
				otm=objecttype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, otm.Tree);
				DebugLocation(936, 25);
				if (state.backtracking == 0)
				{
					 retval.result = (otm!=null?otm.result:default(ObjectTypeMacro)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:937:4: mm= moduleidentity_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(937, 6);
				PushFollow(Follow._moduleidentity_macro_in_macros_type4538);
				mm=moduleidentity_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mm.Tree);
				DebugLocation(937, 28);
				if (state.backtracking == 0)
				{
					 retval.result = (mm!=null?mm.result:default(ModuleIdentityMacro)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:938:7: oim= objectidentity_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(938, 10);
				PushFollow(Follow._objectidentity_macro_in_macros_type4550);
				oim=objectidentity_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oim.Tree);
				DebugLocation(938, 32);
				if (state.backtracking == 0)
				{
					 retval.result = (oim!=null?oim.result:default(ObjectIdentityMacro)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:939:4: ntm= notificationtype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(939, 7);
				PushFollow(Follow._notificationtype_macro_in_macros_type4559);
				ntm=notificationtype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ntm.Tree);
				DebugLocation(939, 31);
				if (state.backtracking == 0)
				{
					 retval.result = (ntm!=null?ntm.result:default(NotificationTypeMacro)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:940:4: tcm= textualconvention_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(940, 7);
				PushFollow(Follow._textualconvention_macro_in_macros_type4568);
				tcm=textualconvention_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tcm.Tree);
				DebugLocation(940, 32);
				if (state.backtracking == 0)
				{
					 retval.result = (tcm!=null?tcm.result:default(TextualConventionMacro)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:941:7: ogm= objectgroup_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(941, 10);
				PushFollow(Follow._objectgroup_macro_in_macros_type4580);
				ogm=objectgroup_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ogm.Tree);
				DebugLocation(941, 29);
				if (state.backtracking == 0)
				{
					 retval.result = (ogm!=null?ogm.result:default(ObjectGroupMacro)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:942:4: ngm= notificationgroup_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(942, 7);
				PushFollow(Follow._notificationgroup_macro_in_macros_type4589);
				ngm=notificationgroup_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ngm.Tree);
				DebugLocation(942, 32);
				if (state.backtracking == 0)
				{
					 retval.result = (ngm!=null?ngm.result:default(NotificationGroupMacro)); 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:943:4: mcm= modulecompliance_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(943, 7);
				PushFollow(Follow._modulecompliance_macro_in_macros_type4598);
				mcm=modulecompliance_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mcm.Tree);
				DebugLocation(943, 31);
				if (state.backtracking == 0)
				{
					 retval.result = (mcm!=null?mcm.result:default(ModuleComplianceMacro)); 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:944:7: acm= agentcapabilities_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(944, 10);
				PushFollow(Follow._agentcapabilities_macro_in_macros_type4610);
				acm=agentcapabilities_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, acm.Tree);
				DebugLocation(944, 35);
				if (state.backtracking == 0)
				{
					 retval.result = (acm!=null?acm.result:default(AgentCapabilitiesMacro)); 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:945:4: ttm= traptype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(945, 7);
				PushFollow(Follow._traptype_macro_in_macros_type4619);
				ttm=traptype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ttm.Tree);
				DebugLocation(945, 23);
				if (state.backtracking == 0)
				{
					 retval.result = (ttm!=null?ttm.result:default(TrapTypeMacro)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("macros_type", 49);
			LeaveRule("macros_type", 49);
			LeaveRule_macros_type();
		}
		DebugLocation(945, 48);
		} finally { DebugExitRule(GrammarFileName, "macros_type"); }
		return retval;

	}
	// $ANTLR end "macros_type"

	partial void EnterRule_smi_macros();
	partial void LeaveRule_smi_macros();
	// $ANTLR start "smi_macros"
	// Smi.g:947:1: smi_macros : ( 'OBJECT-TYPE' | 'MODULE-IDENTITY' | 'OBJECT-IDENTITY' | 'NOTIFICATION-TYPE' | 'TEXTUAL-CONVENTION' | 'OBJECT-GROUP' | 'NOTIFICATION-GROUP' | 'MODULE-COMPLIANCE' | 'AGENT-CAPABILITIES' | 'TRAP-TYPE' );
	[GrammarRule("smi_macros")]
	private AstParserRuleReturnScope<CommonTree, IToken> smi_macros()
	{
		EnterRule_smi_macros();
		EnterRule("smi_macros", 50);
		TraceIn("smi_macros", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set147 = default(IToken);

		CommonTree set147_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "smi_macros");
		DebugLocation(947, 45);
		try
		{
			// Smi.g:947:11: ( 'OBJECT-TYPE' | 'MODULE-IDENTITY' | 'OBJECT-IDENTITY' | 'NOTIFICATION-TYPE' | 'TEXTUAL-CONVENTION' | 'OBJECT-GROUP' | 'NOTIFICATION-GROUP' | 'MODULE-COMPLIANCE' | 'AGENT-CAPABILITIES' | 'TRAP-TYPE' )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(947, 11);

			set147=(IToken)input.LT(1);
			if (input.LA(1)==131||(input.LA(1)>=158 && input.LA(1)<=161)||(input.LA(1)>=163 && input.LA(1)<=165)||input.LA(1)==188||input.LA(1)==191)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set147));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_macros", 50);
			LeaveRule("smi_macros", 50);
			LeaveRule_smi_macros();
		}
		DebugLocation(949, 45);
		} finally { DebugExitRule(GrammarFileName, "smi_macros"); }
		return retval;

	}
	// $ANTLR end "smi_macros"

	private sealed partial class smi_type_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiType result;
		public smi_type_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_smi_type();
	partial void LeaveRule_smi_type();
	// $ANTLR start "smi_type"
	// Smi.g:953:1: smi_type returns [ISmiType result] : ( 'BITS' | INTEGER_KW | OCTET_KW STRING_KW | OBJECT_KW IDENTIFIER_KW |name= UPPER );
	[GrammarRule("smi_type")]
	private SmiParser.smi_type_return smi_type()
	{
		EnterRule_smi_type();
		EnterRule("smi_type", 51);
		TraceIn("smi_type", 51);
		SmiParser.smi_type_return retval = new SmiParser.smi_type_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken string_literal148 = default(IToken);
		IToken INTEGER_KW149 = default(IToken);
		IToken OCTET_KW150 = default(IToken);
		IToken STRING_KW151 = default(IToken);
		IToken OBJECT_KW152 = default(IToken);
		IToken IDENTIFIER_KW153 = default(IToken);

		CommonTree name_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree INTEGER_KW149_tree = default(CommonTree);
		CommonTree OCTET_KW150_tree = default(CommonTree);
		CommonTree STRING_KW151_tree = default(CommonTree);
		CommonTree OBJECT_KW152_tree = default(CommonTree);
		CommonTree IDENTIFIER_KW153_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "smi_type");
		DebugLocation(953, 1);
		try
		{
			// Smi.g:954:5: ( 'BITS' | INTEGER_KW | OCTET_KW STRING_KW | OBJECT_KW IDENTIFIER_KW |name= UPPER )
			int alt60=5;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 137:
				{
				alt60 = 1;
				}
				break;
			case INTEGER_KW:
				{
				alt60 = 2;
				}
				break;
			case OCTET_KW:
				{
				alt60 = 3;
				}
				break;
			case OBJECT_KW:
				{
				alt60 = 4;
				}
				break;
			case UPPER:
				{
				alt60 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:954:7: 'BITS'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(954, 7);
				string_literal148=(IToken)Match(input,137,Follow._137_in_smi_type4704); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal148_tree = (CommonTree)adaptor.Create(string_literal148);
				adaptor.AddChild(root_0, string_literal148_tree);
				}
				DebugLocation(954, 14);
				if (state.backtracking == 0)
				{
					 retval.result = new BitsType(); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:955:4: INTEGER_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(955, 4);
				INTEGER_KW149=(IToken)Match(input,INTEGER_KW,Follow._INTEGER_KW_in_smi_type4711); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INTEGER_KW149_tree = (CommonTree)adaptor.Create(INTEGER_KW149);
				adaptor.AddChild(root_0, INTEGER_KW149_tree);
				}
				DebugLocation(955, 15);
				if (state.backtracking == 0)
				{
					 retval.result = new IntegerType(); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:956:4: OCTET_KW STRING_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(956, 4);
				OCTET_KW150=(IToken)Match(input,OCTET_KW,Follow._OCTET_KW_in_smi_type4718); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OCTET_KW150_tree = (CommonTree)adaptor.Create(OCTET_KW150);
				adaptor.AddChild(root_0, OCTET_KW150_tree);
				}
				DebugLocation(956, 13);
				STRING_KW151=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_smi_type4720); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_KW151_tree = (CommonTree)adaptor.Create(STRING_KW151);
				adaptor.AddChild(root_0, STRING_KW151_tree);
				}
				DebugLocation(956, 23);
				if (state.backtracking == 0)
				{
					 retval.result = new OctetStringType(); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:957:4: OBJECT_KW IDENTIFIER_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(957, 4);
				OBJECT_KW152=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_smi_type4727); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OBJECT_KW152_tree = (CommonTree)adaptor.Create(OBJECT_KW152);
				adaptor.AddChild(root_0, OBJECT_KW152_tree);
				}
				DebugLocation(957, 14);
				IDENTIFIER_KW153=(IToken)Match(input,IDENTIFIER_KW,Follow._IDENTIFIER_KW_in_smi_type4729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER_KW153_tree = (CommonTree)adaptor.Create(IDENTIFIER_KW153);
				adaptor.AddChild(root_0, IDENTIFIER_KW153_tree);
				}
				DebugLocation(957, 28);
				if (state.backtracking == 0)
				{
					 retval.result = new ObjectIdentifierType(); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:958:4: name= UPPER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(958, 8);
				name=(IToken)Match(input,UPPER,Follow._UPPER_in_smi_type4739); if (state.failed) return retval;
				if (state.backtracking == 0) {
				name_tree = (CommonTree)adaptor.Create(name);
				adaptor.AddChild(root_0, name_tree);
				}
				DebugLocation(958, 15);
				if (state.backtracking == 0)
				{
					 retval.result = new UnknownType((name!=null?name.Text:null)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_type", 51);
			LeaveRule("smi_type", 51);
			LeaveRule_smi_type();
		}
		DebugLocation(959, 1);
		} finally { DebugExitRule(GrammarFileName, "smi_type"); }
		return retval;

	}
	// $ANTLR end "smi_type"

	partial void EnterRule_smi_subtyping();
	partial void LeaveRule_smi_subtyping();
	// $ANTLR start "smi_subtyping"
	// Smi.g:965:1: smi_subtyping : ( L_PAREN subtype_range ( BAR subtype_range )* R_PAREN | L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN );
	[GrammarRule("smi_subtyping")]
	private AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping()
	{
		EnterRule_smi_subtyping();
		EnterRule("smi_subtyping", 52);
		TraceIn("smi_subtyping", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_PAREN154 = default(IToken);
		IToken BAR156 = default(IToken);
		IToken R_PAREN158 = default(IToken);
		IToken L_PAREN159 = default(IToken);
		IToken string_literal160 = default(IToken);
		IToken L_PAREN161 = default(IToken);
		IToken BAR163 = default(IToken);
		IToken R_PAREN165 = default(IToken);
		IToken R_PAREN166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_range155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_range157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_range162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_range164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree L_PAREN154_tree = default(CommonTree);
		CommonTree BAR156_tree = default(CommonTree);
		CommonTree R_PAREN158_tree = default(CommonTree);
		CommonTree L_PAREN159_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		CommonTree L_PAREN161_tree = default(CommonTree);
		CommonTree BAR163_tree = default(CommonTree);
		CommonTree R_PAREN165_tree = default(CommonTree);
		CommonTree R_PAREN166_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "smi_subtyping");
		DebugLocation(965, 88);
		try
		{
			// Smi.g:965:14: ( L_PAREN subtype_range ( BAR subtype_range )* R_PAREN | L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==L_PAREN))
			{
				int LA63_2 = input.LA(2);

				if ((LA63_2==SIZE_KW))
				{
					alt63 = 2;
				}
				else if ((LA63_2==B_STRING||LA63_2==H_STRING||LA63_2==MINUS||LA63_2==NUMBER))
				{
					alt63 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:965:16: L_PAREN subtype_range ( BAR subtype_range )* R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(965, 16);
				L_PAREN154=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping4757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN154_tree = (CommonTree)adaptor.Create(L_PAREN154);
				adaptor.AddChild(root_0, L_PAREN154_tree);
				}
				DebugLocation(965, 24);
				PushFollow(Follow._subtype_range_in_smi_subtyping4759);
				subtype_range155=subtype_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range155.Tree);
				DebugLocation(965, 38);
				// Smi.g:965:38: ( BAR subtype_range )*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_1 = input.LA(1);

					if ((LA61_1==BAR))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:965:39: BAR subtype_range
						{
						DebugLocation(965, 39);
						BAR156=(IToken)Match(input,BAR,Follow._BAR_in_smi_subtyping4762); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BAR156_tree = (CommonTree)adaptor.Create(BAR156);
						adaptor.AddChild(root_0, BAR156_tree);
						}
						DebugLocation(965, 43);
						PushFollow(Follow._subtype_range_in_smi_subtyping4764);
						subtype_range157=subtype_range();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range157.Tree);

						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }

				DebugLocation(965, 59);
				R_PAREN158=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping4768); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN158_tree = (CommonTree)adaptor.Create(R_PAREN158);
				adaptor.AddChild(root_0, R_PAREN158_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:966:16: L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(966, 16);
				L_PAREN159=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping4785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN159_tree = (CommonTree)adaptor.Create(L_PAREN159);
				adaptor.AddChild(root_0, L_PAREN159_tree);
				}
				DebugLocation(966, 24);
				string_literal160=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_smi_subtyping4787); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal160_tree = (CommonTree)adaptor.Create(string_literal160);
				adaptor.AddChild(root_0, string_literal160_tree);
				}
				DebugLocation(966, 31);
				L_PAREN161=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping4789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN161_tree = (CommonTree)adaptor.Create(L_PAREN161);
				adaptor.AddChild(root_0, L_PAREN161_tree);
				}
				DebugLocation(966, 39);
				PushFollow(Follow._subtype_range_in_smi_subtyping4791);
				subtype_range162=subtype_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range162.Tree);
				DebugLocation(966, 53);
				// Smi.g:966:53: ( BAR subtype_range )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_1 = input.LA(1);

					if ((LA62_1==BAR))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:966:54: BAR subtype_range
						{
						DebugLocation(966, 54);
						BAR163=(IToken)Match(input,BAR,Follow._BAR_in_smi_subtyping4794); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BAR163_tree = (CommonTree)adaptor.Create(BAR163);
						adaptor.AddChild(root_0, BAR163_tree);
						}
						DebugLocation(966, 58);
						PushFollow(Follow._subtype_range_in_smi_subtyping4796);
						subtype_range164=subtype_range();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range164.Tree);

						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }

				DebugLocation(966, 74);
				R_PAREN165=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping4800); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN165_tree = (CommonTree)adaptor.Create(R_PAREN165);
				adaptor.AddChild(root_0, R_PAREN165_tree);
				}
				DebugLocation(966, 82);
				R_PAREN166=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping4802); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN166_tree = (CommonTree)adaptor.Create(R_PAREN166);
				adaptor.AddChild(root_0, R_PAREN166_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_subtyping", 52);
			LeaveRule("smi_subtyping", 52);
			LeaveRule_smi_subtyping();
		}
		DebugLocation(966, 88);
		} finally { DebugExitRule(GrammarFileName, "smi_subtyping"); }
		return retval;

	}
	// $ANTLR end "smi_subtyping"

	partial void EnterRule_subtype_range();
	partial void LeaveRule_subtype_range();
	// $ANTLR start "subtype_range"
	// Smi.g:967:1: subtype_range : subtype_value ( DOTDOT subtype_value )? ;
	[GrammarRule("subtype_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> subtype_range()
	{
		EnterRule_subtype_range();
		EnterRule("subtype_range", 53);
		TraceIn("subtype_range", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DOTDOT168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_value167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subtype_value169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOTDOT168_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subtype_range");
		DebugLocation(967, 53);
		try
		{
			// Smi.g:967:14: ( subtype_value ( DOTDOT subtype_value )? )
			DebugEnterAlt(1);
			// Smi.g:967:16: subtype_value ( DOTDOT subtype_value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(967, 16);
			PushFollow(Follow._subtype_value_in_subtype_range4808);
			subtype_value167=subtype_value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_value167.Tree);
			DebugLocation(967, 30);
			// Smi.g:967:30: ( DOTDOT subtype_value )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==DOTDOT))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:967:31: DOTDOT subtype_value
				{
				DebugLocation(967, 31);
				DOTDOT168=(IToken)Match(input,DOTDOT,Follow._DOTDOT_in_subtype_range4811); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTDOT168_tree = (CommonTree)adaptor.Create(DOTDOT168);
				adaptor.AddChild(root_0, DOTDOT168_tree);
				}
				DebugLocation(967, 38);
				PushFollow(Follow._subtype_value_in_subtype_range4813);
				subtype_value169=subtype_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_value169.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subtype_range", 53);
			LeaveRule("subtype_range", 53);
			LeaveRule_subtype_range();
		}
		DebugLocation(967, 53);
		} finally { DebugExitRule(GrammarFileName, "subtype_range"); }
		return retval;

	}
	// $ANTLR end "subtype_range"

	partial void EnterRule_subtype_value();
	partial void LeaveRule_subtype_value();
	// $ANTLR start "subtype_value"
	// Smi.g:968:1: subtype_value : ( ( MINUS )? NUMBER | B_STRING | H_STRING );
	[GrammarRule("subtype_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> subtype_value()
	{
		EnterRule_subtype_value();
		EnterRule("subtype_value", 54);
		TraceIn("subtype_value", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken MINUS170 = default(IToken);
		IToken NUMBER171 = default(IToken);
		IToken B_STRING172 = default(IToken);
		IToken H_STRING173 = default(IToken);

		CommonTree MINUS170_tree = default(CommonTree);
		CommonTree NUMBER171_tree = default(CommonTree);
		CommonTree B_STRING172_tree = default(CommonTree);
		CommonTree H_STRING173_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subtype_value");
		DebugLocation(968, 52);
		try
		{
			// Smi.g:968:14: ( ( MINUS )? NUMBER | B_STRING | H_STRING )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case MINUS:
			case NUMBER:
				{
				alt66 = 1;
				}
				break;
			case B_STRING:
				{
				alt66 = 2;
				}
				break;
			case H_STRING:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:968:16: ( MINUS )? NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(968, 16);
				// Smi.g:968:16: ( MINUS )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==MINUS))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:968:17: MINUS
					{
					DebugLocation(968, 17);
					MINUS170=(IToken)Match(input,MINUS,Follow._MINUS_in_subtype_value4823); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS170_tree = (CommonTree)adaptor.Create(MINUS170);
					adaptor.AddChild(root_0, MINUS170_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(968, 25);
				NUMBER171=(IToken)Match(input,NUMBER,Follow._NUMBER_in_subtype_value4827); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER171_tree = (CommonTree)adaptor.Create(NUMBER171);
				adaptor.AddChild(root_0, NUMBER171_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:968:34: B_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(968, 34);
				B_STRING172=(IToken)Match(input,B_STRING,Follow._B_STRING_in_subtype_value4831); if (state.failed) return retval;
				if (state.backtracking == 0) {
				B_STRING172_tree = (CommonTree)adaptor.Create(B_STRING172);
				adaptor.AddChild(root_0, B_STRING172_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:968:45: H_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(968, 45);
				H_STRING173=(IToken)Match(input,H_STRING,Follow._H_STRING_in_subtype_value4835); if (state.failed) return retval;
				if (state.backtracking == 0) {
				H_STRING173_tree = (CommonTree)adaptor.Create(H_STRING173);
				adaptor.AddChild(root_0, H_STRING173_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subtype_value", 54);
			LeaveRule("subtype_value", 54);
			LeaveRule_subtype_value();
		}
		DebugLocation(968, 52);
		} finally { DebugExitRule(GrammarFileName, "subtype_value"); }
		return retval;

	}
	// $ANTLR end "subtype_value"

	private sealed partial class objecttype_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ObjectTypeMacro result = new ObjectTypeMacro();
		public objecttype_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro();
	partial void LeaveRule_objecttype_macro();
	// $ANTLR start "objecttype_macro"
	// Smi.g:971:1: objecttype_macro returns [ObjectTypeMacro result = new ObjectTypeMacro()] : 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=>t1= smi_type nb1= objecttype_macro_namedbits | ( smi_type )=>t2= smi_type ( smi_subtyping )? |t3= type ) ( 'UNITS' u1= C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) ma= objecttype_macro_accesstypes | 'PIB-ACCESS' pa= objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE v1= value R_BRACE )? ( 'PIB-TAG' L_BRACE v2= value R_BRACE )? 'STATUS' s= objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' c1= C_STRING )? ( 'INSTALL-ERRORS' L_BRACE e1= objecttype_macro_error ( COMMA e2= objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' c2= C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index | 'AUGMENTS' i4= objecttype_macro_augments | 'PIB-INDEX' L_BRACE v3= value R_BRACE | 'EXTENDS' L_BRACE v4= value R_BRACE )? ( 'INDEX' i5= objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE (v5= value ( COMMA v6= value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value ) R_BRACE )? ;
	[GrammarRule("objecttype_macro")]
	private SmiParser.objecttype_macro_return objecttype_macro()
	{
		EnterRule_objecttype_macro();
		EnterRule("objecttype_macro", 55);
		TraceIn("objecttype_macro", 55);
		SmiParser.objecttype_macro_return retval = new SmiParser.objecttype_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken u1 = default(IToken);
		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal175 = default(IToken);
		IToken string_literal177 = default(IToken);
		IToken string_literal178 = default(IToken);
		IToken string_literal179 = default(IToken);
		IToken string_literal180 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken L_BRACE182 = default(IToken);
		IToken R_BRACE183 = default(IToken);
		IToken string_literal184 = default(IToken);
		IToken L_BRACE185 = default(IToken);
		IToken R_BRACE186 = default(IToken);
		IToken string_literal187 = default(IToken);
		IToken string_literal188 = default(IToken);
		IToken string_literal189 = default(IToken);
		IToken L_BRACE190 = default(IToken);
		IToken COMMA191 = default(IToken);
		IToken R_BRACE192 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken string_literal195 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken L_BRACE197 = default(IToken);
		IToken R_BRACE198 = default(IToken);
		IToken string_literal199 = default(IToken);
		IToken L_BRACE200 = default(IToken);
		IToken R_BRACE201 = default(IToken);
		IToken string_literal202 = default(IToken);
		IToken string_literal203 = default(IToken);
		IToken L_BRACE204 = default(IToken);
		IToken COMMA205 = default(IToken);
		IToken R_BRACE206 = default(IToken);
		IToken string_literal207 = default(IToken);
		IToken L_BRACE208 = default(IToken);
		IToken R_BRACE209 = default(IToken);
		SmiParser.smi_type_return t1 = default(SmiParser.smi_type_return);
		SmiParser.objecttype_macro_namedbits_return nb1 = default(SmiParser.objecttype_macro_namedbits_return);
		SmiParser.smi_type_return t2 = default(SmiParser.smi_type_return);
		SmiParser.type_return t3 = default(SmiParser.type_return);
		SmiParser.objecttype_macro_accesstypes_return ma = default(SmiParser.objecttype_macro_accesstypes_return);
		SmiParser.objecttype_macro_pibaccess_return pa = default(SmiParser.objecttype_macro_pibaccess_return);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.objecttype_macro_statustypes_return s = default(SmiParser.objecttype_macro_statustypes_return);
		SmiParser.objecttype_macro_error_return e1 = default(SmiParser.objecttype_macro_error_return);
		SmiParser.objecttype_macro_error_return e2 = default(SmiParser.objecttype_macro_error_return);
		SmiParser.objecttype_macro_index_return i3 = default(SmiParser.objecttype_macro_index_return);
		SmiParser.objecttype_macro_augments_return i4 = default(SmiParser.objecttype_macro_augments_return);
		SmiParser.value_return v3 = default(SmiParser.value_return);
		SmiParser.value_return v4 = default(SmiParser.value_return);
		SmiParser.objecttype_macro_index_return i5 = default(SmiParser.objecttype_macro_index_return);
		SmiParser.value_return v5 = default(SmiParser.value_return);
		SmiParser.value_return v6 = default(SmiParser.value_return);
		SmiParser.objecttype_macro_bitsvalue_return b = default(SmiParser.objecttype_macro_bitsvalue_return);
		SmiParser.value_return v7 = default(SmiParser.value_return);
		AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree u1_tree = default(CommonTree);
		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal175_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree L_BRACE182_tree = default(CommonTree);
		CommonTree R_BRACE183_tree = default(CommonTree);
		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree L_BRACE185_tree = default(CommonTree);
		CommonTree R_BRACE186_tree = default(CommonTree);
		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree L_BRACE190_tree = default(CommonTree);
		CommonTree COMMA191_tree = default(CommonTree);
		CommonTree R_BRACE192_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree L_BRACE197_tree = default(CommonTree);
		CommonTree R_BRACE198_tree = default(CommonTree);
		CommonTree string_literal199_tree = default(CommonTree);
		CommonTree L_BRACE200_tree = default(CommonTree);
		CommonTree R_BRACE201_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree string_literal203_tree = default(CommonTree);
		CommonTree L_BRACE204_tree = default(CommonTree);
		CommonTree COMMA205_tree = default(CommonTree);
		CommonTree R_BRACE206_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree L_BRACE208_tree = default(CommonTree);
		CommonTree R_BRACE209_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro");
		DebugLocation(971, 31);
		try
		{
			// Smi.g:972:5: ( 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=>t1= smi_type nb1= objecttype_macro_namedbits | ( smi_type )=>t2= smi_type ( smi_subtyping )? |t3= type ) ( 'UNITS' u1= C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) ma= objecttype_macro_accesstypes | 'PIB-ACCESS' pa= objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE v1= value R_BRACE )? ( 'PIB-TAG' L_BRACE v2= value R_BRACE )? 'STATUS' s= objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' c1= C_STRING )? ( 'INSTALL-ERRORS' L_BRACE e1= objecttype_macro_error ( COMMA e2= objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' c2= C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index | 'AUGMENTS' i4= objecttype_macro_augments | 'PIB-INDEX' L_BRACE v3= value R_BRACE | 'EXTENDS' L_BRACE v4= value R_BRACE )? ( 'INDEX' i5= objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE (v5= value ( COMMA v6= value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value ) R_BRACE )? )
			DebugEnterAlt(1);
			// Smi.g:972:7: 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=>t1= smi_type nb1= objecttype_macro_namedbits | ( smi_type )=>t2= smi_type ( smi_subtyping )? |t3= type ) ( 'UNITS' u1= C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) ma= objecttype_macro_accesstypes | 'PIB-ACCESS' pa= objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE v1= value R_BRACE )? ( 'PIB-TAG' L_BRACE v2= value R_BRACE )? 'STATUS' s= objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' c1= C_STRING )? ( 'INSTALL-ERRORS' L_BRACE e1= objecttype_macro_error ( COMMA e2= objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' c2= C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index | 'AUGMENTS' i4= objecttype_macro_augments | 'PIB-INDEX' L_BRACE v3= value R_BRACE | 'EXTENDS' L_BRACE v4= value R_BRACE )? ( 'INDEX' i5= objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE (v5= value ( COMMA v6= value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value ) R_BRACE )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(972, 7);
			string_literal174=(IToken)Match(input,165,Follow._165_in_objecttype_macro4853); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal174_tree = (CommonTree)adaptor.Create(string_literal174);
			adaptor.AddChild(root_0, string_literal174_tree);
			}
			DebugLocation(972, 21);
			string_literal175=(IToken)Match(input,187,Follow._187_in_objecttype_macro4855); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal175_tree = (CommonTree)adaptor.Create(string_literal175);
			adaptor.AddChild(root_0, string_literal175_tree);
			}
			DebugLocation(973, 21);
			// Smi.g:973:21: ( ( smi_type L_BRACE )=>t1= smi_type nb1= objecttype_macro_namedbits | ( smi_type )=>t2= smi_type ( smi_subtyping )? |t3= type )
			int alt68=3;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case 137:
				{
				int LA68_2 = input.LA(2);

				if ((LA68_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt68 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt68 = 2;
				}
				else if ((true))
				{
					alt68 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER_KW:
				{
				int LA68_2 = input.LA(2);

				if ((LA68_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt68 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt68 = 2;
				}
				else if ((true))
				{
					alt68 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA68_2 = input.LA(2);

				if ((LA68_2==STRING_KW))
				{
					int LA68_3 = input.LA(3);

					if ((LA68_3==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
					{
						alt68 = 1;
					}
					else if ((EvaluatePredicate(synpred26_Smi_fragment)))
					{
						alt68 = 2;
					}
					else if ((true))
					{
						alt68 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 68, 9, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OBJECT_KW:
				{
				int LA68_2 = input.LA(2);

				if ((LA68_2==IDENTIFIER_KW))
				{
					int LA68_3 = input.LA(3);

					if ((LA68_3==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
					{
						alt68 = 1;
					}
					else if ((EvaluatePredicate(synpred26_Smi_fragment)))
					{
						alt68 = 2;
					}
					else if ((true))
					{
						alt68 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 68, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				int LA68_2 = input.LA(2);

				if ((LA68_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt68 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt68 = 2;
				}
				else if ((true))
				{
					alt68 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case ERROR_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case LOWER:
			case L_BRACKET:
			case NULL_KW:
			case NUMERIC_STR_KW:
			case OPERATION_KW:
			case PRINTABLE_STR_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 179:
			case 188:
			case 191:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:973:23: ( smi_type L_BRACE )=>t1= smi_type nb1= objecttype_macro_namedbits
				{
				DebugLocation(973, 47);
				PushFollow(Follow._smi_type_in_objecttype_macro4890);
				t1=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t1.Tree);
				DebugLocation(973, 60);
				PushFollow(Follow._objecttype_macro_namedbits_in_objecttype_macro4894);
				nb1=objecttype_macro_namedbits();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nb1.Tree);
				DebugLocation(974, 6);
				if (state.backtracking == 0)
				{
					  
										    retval.result.Syntax = (t1!=null?t1.result:default(ISmiType));
											retval.result.NamedBits = (nb1!=null?nb1.result:default(IList<NamedBit>));
										
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:978:24: ( smi_type )=>t2= smi_type ( smi_subtyping )?
				{
				DebugLocation(978, 40);
				PushFollow(Follow._smi_type_in_objecttype_macro4935);
				t2=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
				DebugLocation(978, 50);
				// Smi.g:978:50: ( smi_subtyping )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==L_PAREN))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:978:51: smi_subtyping
					{
					DebugLocation(978, 51);
					PushFollow(Follow._smi_subtyping_in_objecttype_macro4938);
					smi_subtyping176=smi_subtyping();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, smi_subtyping176.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(978, 67);
				if (state.backtracking == 0)
				{
					 retval.result.Syntax = (t2!=null?t2.result:default(ISmiType)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:979:24: t3= type
				{
				DebugLocation(979, 26);
				PushFollow(Follow._type_in_objecttype_macro4969);
				t3=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t3.Tree);
				DebugLocation(979, 32);
				if (state.backtracking == 0)
				{
					 retval.result.Syntax = (t3!=null?t3.result:default(ISmiType)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(981, 19);
			// Smi.g:981:19: ( 'UNITS' u1= C_STRING )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==194))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:981:20: 'UNITS' u1= C_STRING
				{
				DebugLocation(981, 20);
				string_literal177=(IToken)Match(input,194,Follow._194_in_objecttype_macro5015); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal177_tree = (CommonTree)adaptor.Create(string_literal177);
				adaptor.AddChild(root_0, string_literal177_tree);
				}
				DebugLocation(981, 30);
				u1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro5019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				u1_tree = (CommonTree)adaptor.Create(u1);
				adaptor.AddChild(root_0, u1_tree);
				}
				DebugLocation(981, 40);
				if (state.backtracking == 0)
				{
					 retval.result.Units = (u1!=null?u1.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(982, 19);
			// Smi.g:982:19: ( ( 'MAX-ACCESS' | 'ACCESS' ) ma= objecttype_macro_accesstypes | 'PIB-ACCESS' pa= objecttype_macro_pibaccess )?
			int alt71=3;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==130||LA71_1==155))
			{
				alt71 = 1;
			}
			else if ((LA71_1==168))
			{
				alt71 = 2;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:982:21: ( 'MAX-ACCESS' | 'ACCESS' ) ma= objecttype_macro_accesstypes
				{
				DebugLocation(982, 21);
				// Smi.g:982:21: ( 'MAX-ACCESS' | 'ACCESS' )
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==155))
				{
					alt70 = 1;
				}
				else if ((LA70_1==130))
				{
					alt70 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 70, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:982:22: 'MAX-ACCESS'
					{
					DebugLocation(982, 22);
					string_literal178=(IToken)Match(input,155,Follow._155_in_objecttype_macro5047); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal178_tree = (CommonTree)adaptor.Create(string_literal178);
					adaptor.AddChild(root_0, string_literal178_tree);
					}
					DebugLocation(982, 35);
					if (state.backtracking == 0)
					{
						 retval.result.AccessType = AccessType.MaxAccess; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:983:10: 'ACCESS'
					{
					DebugLocation(983, 10);
					string_literal179=(IToken)Match(input,130,Follow._130_in_objecttype_macro5060); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal179_tree = (CommonTree)adaptor.Create(string_literal179);
					adaptor.AddChild(root_0, string_literal179_tree);
					}
					DebugLocation(983, 19);
					if (state.backtracking == 0)
					{
						 retval.result.AccessType = AccessType.Access; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(984, 10);
				PushFollow(Follow._objecttype_macro_accesstypes_in_objecttype_macro5075);
				ma=objecttype_macro_accesstypes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ma.Tree);
				DebugLocation(984, 40);
				if (state.backtracking == 0)
				{
					 retval.result.MibAccess = (ma!=null?ma.result:default(Access)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:985:22: 'PIB-ACCESS' pa= objecttype_macro_pibaccess
				{
				DebugLocation(985, 22);
				string_literal180=(IToken)Match(input,168,Follow._168_in_objecttype_macro5100); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal180_tree = (CommonTree)adaptor.Create(string_literal180);
				adaptor.AddChild(root_0, string_literal180_tree);
				}
				DebugLocation(985, 37);
				PushFollow(Follow._objecttype_macro_pibaccess_in_objecttype_macro5104);
				pa=objecttype_macro_pibaccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pa.Tree);
				DebugLocation(985, 65);
				if (state.backtracking == 0)
				{
					 retval.result.PibAccess = (pa!=null?pa.result:default(PibAccess)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(986, 19);
			// Smi.g:986:19: ( 'PIB-REFERENCES' L_BRACE v1= value R_BRACE )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==172))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:986:20: 'PIB-REFERENCES' L_BRACE v1= value R_BRACE
				{
				DebugLocation(986, 20);
				string_literal181=(IToken)Match(input,172,Follow._172_in_objecttype_macro5144); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal181_tree = (CommonTree)adaptor.Create(string_literal181);
				adaptor.AddChild(root_0, string_literal181_tree);
				}
				DebugLocation(986, 37);
				L_BRACE182=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5146); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE182_tree = (CommonTree)adaptor.Create(L_BRACE182);
				adaptor.AddChild(root_0, L_BRACE182_tree);
				}
				DebugLocation(986, 47);
				PushFollow(Follow._value_in_objecttype_macro5150);
				v1=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
				DebugLocation(986, 54);
				R_BRACE183=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5152); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE183_tree = (CommonTree)adaptor.Create(R_BRACE183);
				adaptor.AddChild(root_0, R_BRACE183_tree);
				}
				DebugLocation(986, 62);
				if (state.backtracking == 0)
				{
					 retval.result.PibReference = (v1!=null?v1.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(987, 19);
			// Smi.g:987:19: ( 'PIB-TAG' L_BRACE v2= value R_BRACE )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==173))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:987:20: 'PIB-TAG' L_BRACE v2= value R_BRACE
				{
				DebugLocation(987, 20);
				string_literal184=(IToken)Match(input,173,Follow._173_in_objecttype_macro5195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal184_tree = (CommonTree)adaptor.Create(string_literal184);
				adaptor.AddChild(root_0, string_literal184_tree);
				}
				DebugLocation(987, 30);
				L_BRACE185=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE185_tree = (CommonTree)adaptor.Create(L_BRACE185);
				adaptor.AddChild(root_0, L_BRACE185_tree);
				}
				DebugLocation(987, 40);
				PushFollow(Follow._value_in_objecttype_macro5201);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(987, 47);
				R_BRACE186=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5203); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE186_tree = (CommonTree)adaptor.Create(R_BRACE186);
				adaptor.AddChild(root_0, R_BRACE186_tree);
				}
				DebugLocation(987, 55);
				if (state.backtracking == 0)
				{
					 retval.result.PibTag = (v2!=null?v2.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(988, 19);
			string_literal187=(IToken)Match(input,184,Follow._184_in_objecttype_macro5252); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal187_tree = (CommonTree)adaptor.Create(string_literal187);
			adaptor.AddChild(root_0, string_literal187_tree);
			}
			DebugLocation(988, 29);
			PushFollow(Follow._objecttype_macro_statustypes_in_objecttype_macro5256);
			s=objecttype_macro_statustypes();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(988, 59);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(989, 19);
			// Smi.g:989:19: ( ( 'DESCRIPTION' )=> 'DESCRIPTION' c1= C_STRING )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==141))
			{
				int LA74_2 = input.LA(2);

				if ((LA74_2==C_STRING))
				{
					int LA74_3 = input.LA(3);

					if ((EvaluatePredicate(synpred27_Smi_fragment)))
					{
						alt74 = 1;
					}
				}
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:989:21: ( 'DESCRIPTION' )=> 'DESCRIPTION' c1= C_STRING
				{
				DebugLocation(989, 40);
				string_literal188=(IToken)Match(input,141,Follow._141_in_objecttype_macro5286); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal188_tree = (CommonTree)adaptor.Create(string_literal188);
				adaptor.AddChild(root_0, string_literal188_tree);
				}
				DebugLocation(989, 56);
				c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro5290); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c1_tree = (CommonTree)adaptor.Create(c1);
				adaptor.AddChild(root_0, c1_tree);
				}
				DebugLocation(989, 66);
				if (state.backtracking == 0)
				{
					 retval.result.Description = (c1!=null?c1.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(990, 19);
			// Smi.g:990:19: ( 'INSTALL-ERRORS' L_BRACE e1= objecttype_macro_error ( COMMA e2= objecttype_macro_error )* R_BRACE )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==151))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:990:20: 'INSTALL-ERRORS' L_BRACE e1= objecttype_macro_error ( COMMA e2= objecttype_macro_error )* R_BRACE
				{
				DebugLocation(990, 20);
				string_literal189=(IToken)Match(input,151,Follow._151_in_objecttype_macro5347); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal189_tree = (CommonTree)adaptor.Create(string_literal189);
				adaptor.AddChild(root_0, string_literal189_tree);
				}
				DebugLocation(990, 37);
				L_BRACE190=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5349); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE190_tree = (CommonTree)adaptor.Create(L_BRACE190);
				adaptor.AddChild(root_0, L_BRACE190_tree);
				}
				DebugLocation(990, 47);
				PushFollow(Follow._objecttype_macro_error_in_objecttype_macro5353);
				e1=objecttype_macro_error();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e1.Tree);
				DebugLocation(990, 71);
				if (state.backtracking == 0)
				{
					 retval.result.InstallErrors.Add((e1!=null?e1.result:default(NamedBit))); 
				}
				DebugLocation(991, 7);
				// Smi.g:991:7: ( COMMA e2= objecttype_macro_error )*
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_1 = input.LA(1);

					if ((LA75_1==COMMA))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch ( alt75 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:991:8: COMMA e2= objecttype_macro_error
						{
						DebugLocation(991, 8);
						COMMA191=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro5364); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA191_tree = (CommonTree)adaptor.Create(COMMA191);
						adaptor.AddChild(root_0, COMMA191_tree);
						}
						DebugLocation(991, 16);
						PushFollow(Follow._objecttype_macro_error_in_objecttype_macro5368);
						e2=objecttype_macro_error();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e2.Tree);
						DebugLocation(991, 40);
						if (state.backtracking == 0)
						{
							 retval.result.InstallErrors.Add((e2!=null?e2.result:default(NamedBit))); 
						}

						}
						break;

					default:
						goto loop75;
					}
				}

				loop75:
					;

				} finally { DebugExitSubRule(75); }

				DebugLocation(991, 85);
				R_BRACE192=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5374); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE192_tree = (CommonTree)adaptor.Create(R_BRACE192);
				adaptor.AddChild(root_0, R_BRACE192_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(992, 5);
			// Smi.g:992:5: ( 'REFERENCE' c2= C_STRING )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==177))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:992:7: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(992, 7);
				string_literal193=(IToken)Match(input,177,Follow._177_in_objecttype_macro5389); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal193_tree = (CommonTree)adaptor.Create(string_literal193);
				adaptor.AddChild(root_0, string_literal193_tree);
				}
				DebugLocation(992, 21);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro5393); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(992, 31);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(993, 5);
			// Smi.g:993:5: ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index | 'AUGMENTS' i4= objecttype_macro_augments | 'PIB-INDEX' L_BRACE v3= value R_BRACE | 'EXTENDS' L_BRACE v4= value R_BRACE )?
			int alt78=5;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			try
			{
				alt78 = dfa78.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:993:7: (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index
				{
				DebugLocation(993, 27);
				string_literal194=(IToken)Match(input,150,Follow._150_in_objecttype_macro5415); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal194_tree = (CommonTree)adaptor.Create(string_literal194);
				adaptor.AddChild(root_0, string_literal194_tree);
				}
				DebugLocation(993, 37);
				PushFollow(Follow._objecttype_macro_index_in_objecttype_macro5419);
				i3=objecttype_macro_index();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i3.Tree);
				DebugLocation(993, 61);
				if (state.backtracking == 0)
				{
					 retval.result.MibIndex = (i3!=null?i3.result:default(IList<ISmiValue>)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:994:23: 'AUGMENTS' i4= objecttype_macro_augments
				{
				DebugLocation(994, 23);
				string_literal195=(IToken)Match(input,135,Follow._135_in_objecttype_macro5445); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal195_tree = (CommonTree)adaptor.Create(string_literal195);
				adaptor.AddChild(root_0, string_literal195_tree);
				}
				DebugLocation(994, 36);
				PushFollow(Follow._objecttype_macro_augments_in_objecttype_macro5449);
				i4=objecttype_macro_augments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i4.Tree);
				DebugLocation(994, 63);
				if (state.backtracking == 0)
				{
					 retval.result.MibArguments = (i4!=null?i4.result:default(ISmiValue)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:995:23: 'PIB-INDEX' L_BRACE v3= value R_BRACE
				{
				DebugLocation(995, 23);
				string_literal196=(IToken)Match(input,170,Follow._170_in_objecttype_macro5475); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal196_tree = (CommonTree)adaptor.Create(string_literal196);
				adaptor.AddChild(root_0, string_literal196_tree);
				}
				DebugLocation(995, 35);
				L_BRACE197=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5477); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE197_tree = (CommonTree)adaptor.Create(L_BRACE197);
				adaptor.AddChild(root_0, L_BRACE197_tree);
				}
				DebugLocation(995, 45);
				PushFollow(Follow._value_in_objecttype_macro5481);
				v3=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v3.Tree);
				DebugLocation(995, 52);
				R_BRACE198=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE198_tree = (CommonTree)adaptor.Create(R_BRACE198);
				adaptor.AddChild(root_0, R_BRACE198_tree);
				}
				DebugLocation(995, 60);
				if (state.backtracking == 0)
				{
					 retval.result.PibIndex = (v3!=null?v3.result:default(ISmiValue)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:996:23: 'EXTENDS' L_BRACE v4= value R_BRACE
				{
				DebugLocation(996, 23);
				string_literal199=(IToken)Match(input,145,Follow._145_in_objecttype_macro5530); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal199_tree = (CommonTree)adaptor.Create(string_literal199);
				adaptor.AddChild(root_0, string_literal199_tree);
				}
				DebugLocation(996, 33);
				L_BRACE200=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5532); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE200_tree = (CommonTree)adaptor.Create(L_BRACE200);
				adaptor.AddChild(root_0, L_BRACE200_tree);
				}
				DebugLocation(996, 43);
				PushFollow(Follow._value_in_objecttype_macro5536);
				v4=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v4.Tree);
				DebugLocation(996, 50);
				R_BRACE201=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5538); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE201_tree = (CommonTree)adaptor.Create(R_BRACE201);
				adaptor.AddChild(root_0, R_BRACE201_tree);
				}
				DebugLocation(996, 58);
				if (state.backtracking == 0)
				{
					 retval.result.PibExtends = (v4!=null?v4.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(998, 19);
			// Smi.g:998:19: ( 'INDEX' i5= objecttype_macro_index )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_1 = input.LA(1);

			if ((LA79_1==150))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:998:21: 'INDEX' i5= objecttype_macro_index
				{
				DebugLocation(998, 21);
				string_literal202=(IToken)Match(input,150,Follow._150_in_objecttype_macro5608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal202_tree = (CommonTree)adaptor.Create(string_literal202);
				adaptor.AddChild(root_0, string_literal202_tree);
				}
				DebugLocation(998, 31);
				PushFollow(Follow._objecttype_macro_index_in_objecttype_macro5612);
				i5=objecttype_macro_index();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i5.Tree);
				DebugLocation(998, 55);
				if (state.backtracking == 0)
				{
					 retval.result.MibIndex = (i5!=null?i5.result:default(IList<ISmiValue>)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(999, 19);
			// Smi.g:999:19: ( 'UNIQUENESS' L_BRACE (v5= value ( COMMA v6= value )* )? R_BRACE )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if ((LA82_1==193))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:999:21: 'UNIQUENESS' L_BRACE (v5= value ( COMMA v6= value )* )? R_BRACE
				{
				DebugLocation(999, 21);
				string_literal203=(IToken)Match(input,193,Follow._193_in_objecttype_macro5662); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal203_tree = (CommonTree)adaptor.Create(string_literal203);
				adaptor.AddChild(root_0, string_literal203_tree);
				}
				DebugLocation(999, 34);
				L_BRACE204=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5664); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE204_tree = (CommonTree)adaptor.Create(L_BRACE204);
				adaptor.AddChild(root_0, L_BRACE204_tree);
				}
				DebugLocation(999, 42);
				// Smi.g:999:42: (v5= value ( COMMA v6= value )* )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==B_STRING||LA81_1==C_STRING||LA81_1==FALSE_KW||LA81_1==H_STRING||(LA81_1>=LOWER && LA81_1<=L_BRACE)||(LA81_1>=MINUS && LA81_1<=MINUS_INFINITY_KW)||(LA81_1>=NULL_KW && LA81_1<=NUMBER)||LA81_1==PLUS_INFINITY_KW||LA81_1==TRUE_KW||LA81_1==UPPER))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:999:43: v5= value ( COMMA v6= value )*
					{
					DebugLocation(999, 45);
					PushFollow(Follow._value_in_objecttype_macro5669);
					v5=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v5.Tree);
					DebugLocation(999, 52);
					if (state.backtracking == 0)
					{
						 retval.result.UniquenessValues.Add((v5!=null?v5.result:default(ISmiValue))); 
					}
					DebugLocation(1000, 7);
					// Smi.g:1000:7: ( COMMA v6= value )*
					try { DebugEnterSubRule(80);
					while (true)
					{
						int alt80=2;
						try { DebugEnterDecision(80, false);
						int LA80_1 = input.LA(1);

						if ((LA80_1==COMMA))
						{
							alt80 = 1;
						}


						} finally { DebugExitDecision(80); }
						switch ( alt80 )
						{
						case 1:
							DebugEnterAlt(1);
							// Smi.g:1000:8: COMMA v6= value
							{
							DebugLocation(1000, 8);
							COMMA205=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro5680); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA205_tree = (CommonTree)adaptor.Create(COMMA205);
							adaptor.AddChild(root_0, COMMA205_tree);
							}
							DebugLocation(1000, 16);
							PushFollow(Follow._value_in_objecttype_macro5684);
							v6=value();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, v6.Tree);
							DebugLocation(1000, 23);
							if (state.backtracking == 0)
							{
								 retval.result.UniquenessValues.Add((v6!=null?v6.result:default(ISmiValue))); 
							}

							}
							break;

						default:
							goto loop80;
						}
					}

					loop80:
						;

					} finally { DebugExitSubRule(80); }


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(1000, 74);
				R_BRACE206=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE206_tree = (CommonTree)adaptor.Create(R_BRACE206);
				adaptor.AddChild(root_0, R_BRACE206_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(1001, 5);
			// Smi.g:1001:5: ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value ) R_BRACE )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==140))
			{
				int LA84_2 = input.LA(2);

				if ((EvaluatePredicate(synpred29_Smi_fragment)))
				{
					alt84 = 1;
				}
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1001:7: ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value ) R_BRACE
				{
				DebugLocation(1001, 21);
				string_literal207=(IToken)Match(input,140,Follow._140_in_objecttype_macro5732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal207_tree = (CommonTree)adaptor.Create(string_literal207);
				adaptor.AddChild(root_0, string_literal207_tree);
				}
				DebugLocation(1001, 30);
				L_BRACE208=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro5734); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE208_tree = (CommonTree)adaptor.Create(L_BRACE208);
				adaptor.AddChild(root_0, L_BRACE208_tree);
				}
				DebugLocation(1002, 21);
				// Smi.g:1002:21: ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				try
				{
					alt83 = dfa83.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1002:23: ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue
					{
					DebugLocation(1002, 61);
					PushFollow(Follow._objecttype_macro_bitsvalue_in_objecttype_macro5777);
					b=objecttype_macro_bitsvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, b.Tree);
					DebugLocation(1002, 89);
					if (state.backtracking == 0)
					{
						 retval.result.DefaultValueBits = (b!=null?b.result:default(IList<string>)); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1003:26: v7= value
					{
					DebugLocation(1003, 28);
					PushFollow(Follow._value_in_objecttype_macro5808);
					v7=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v7.Tree);
					DebugLocation(1003, 35);
					if (state.backtracking == 0)
					{
						 retval.result.DefaultValue = (v7!=null?v7.result:default(ISmiValue)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(1004, 21);
				R_BRACE209=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro5834); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE209_tree = (CommonTree)adaptor.Create(R_BRACE209);
				adaptor.AddChild(root_0, R_BRACE209_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro", 55);
			LeaveRule("objecttype_macro", 55);
			LeaveRule_objecttype_macro();
		}
		DebugLocation(1004, 31);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro"

	protected sealed partial class objecttype_macro_accesstypes_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Access result;
		public objecttype_macro_accesstypes_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_accesstypes();
	partial void LeaveRule_objecttype_macro_accesstypes();
	// $ANTLR start "objecttype_macro_accesstypes"
	// Smi.g:1006:11: protected objecttype_macro_accesstypes returns [Access result] : l= LOWER ;
	[GrammarRule("objecttype_macro_accesstypes")]
	protected SmiParser.objecttype_macro_accesstypes_return objecttype_macro_accesstypes()
	{
		EnterRule_objecttype_macro_accesstypes();
		EnterRule("objecttype_macro_accesstypes", 56);
		TraceIn("objecttype_macro_accesstypes", 56);
		SmiParser.objecttype_macro_accesstypes_return retval = new SmiParser.objecttype_macro_accesstypes_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_accesstypes");
		DebugLocation(1006, 4);
		try
		{
			// Smi.g:1007:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1007:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1007, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_accesstypes5858); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1007, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("read-only")) retval.result = Access.ReadOnly;
					           else if (l.Text == ("read-write")) retval.result = Access.ReadWrite;
				               else if (l.Text == ("write-only")) retval.result = Access.WriteOnly;
							   else if (l.Text == ("read-create")) retval.result = Access.ReadCreate; 
				               else if (l.Text == ("not-accessible")) retval.result = Access.NotAccessible;
							   else if (l.Text == ("accessible-for-notify")) retval.result = Access.AccessibleForNotify;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_accesstypes", 56);
			LeaveRule("objecttype_macro_accesstypes", 56);
			LeaveRule_objecttype_macro_accesstypes();
		}
		DebugLocation(1014, 4);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_accesstypes"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_accesstypes"

	protected sealed partial class objecttype_macro_pibaccess_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public PibAccess result;
		public objecttype_macro_pibaccess_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_pibaccess();
	partial void LeaveRule_objecttype_macro_pibaccess();
	// $ANTLR start "objecttype_macro_pibaccess"
	// Smi.g:1016:11: protected objecttype_macro_pibaccess returns [PibAccess result] : l= LOWER ;
	[GrammarRule("objecttype_macro_pibaccess")]
	protected SmiParser.objecttype_macro_pibaccess_return objecttype_macro_pibaccess()
	{
		EnterRule_objecttype_macro_pibaccess();
		EnterRule("objecttype_macro_pibaccess", 57);
		TraceIn("objecttype_macro_pibaccess", 57);
		SmiParser.objecttype_macro_pibaccess_return retval = new SmiParser.objecttype_macro_pibaccess_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_pibaccess");
		DebugLocation(1016, 1);
		try
		{
			// Smi.g:1017:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1017:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1017, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_pibaccess5885); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1017, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("install")) retval.result = PibAccess.Install; 
				               else if (l.Text == ("notify")) retval.result = PibAccess.Notify;
				               else if (l.Text == ("install-notify")) retval.result = PibAccess.InstallNotify;
				               else if (l.Text == ("report-only")) retval.result = PibAccess.ReportOnly;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_pibaccess", 57);
			LeaveRule("objecttype_macro_pibaccess", 57);
			LeaveRule_objecttype_macro_pibaccess();
		}
		DebugLocation(1022, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_pibaccess"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_pibaccess"

	protected sealed partial class objecttype_macro_statustypes_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public EntityStatus result;
		public objecttype_macro_statustypes_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_statustypes();
	partial void LeaveRule_objecttype_macro_statustypes();
	// $ANTLR start "objecttype_macro_statustypes"
	// Smi.g:1024:11: protected objecttype_macro_statustypes returns [EntityStatus result] : l= LOWER ;
	[GrammarRule("objecttype_macro_statustypes")]
	protected SmiParser.objecttype_macro_statustypes_return objecttype_macro_statustypes()
	{
		EnterRule_objecttype_macro_statustypes();
		EnterRule("objecttype_macro_statustypes", 58);
		TraceIn("objecttype_macro_statustypes", 58);
		SmiParser.objecttype_macro_statustypes_return retval = new SmiParser.objecttype_macro_statustypes_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_statustypes");
		DebugLocation(1024, 1);
		try
		{
			// Smi.g:1025:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1025:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1025, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_statustypes5909); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1025, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("mandatory")) retval.result = EntityStatus.Mandatory; 
				               else if (l.Text == ("optional")) retval.result = EntityStatus.Optional; 
				               else if (l.Text == ("obsolete")) retval.result = EntityStatus.Obsolete;
				               else if (l.Text == ("current")) retval.result = EntityStatus.Current;
				               else if (l.Text == ("deprecated")) retval.result = EntityStatus.Deprecated;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_statustypes", 58);
			LeaveRule("objecttype_macro_statustypes", 58);
			LeaveRule_objecttype_macro_statustypes();
		}
		DebugLocation(1031, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_statustypes"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_statustypes"

	private sealed partial class objecttype_macro_index_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<ISmiValue> result = new List<ISmiValue>();
		public objecttype_macro_index_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_index();
	partial void LeaveRule_objecttype_macro_index();
	// $ANTLR start "objecttype_macro_index"
	// Smi.g:1035:1: objecttype_macro_index returns [IList<ISmiValue> result = new List<ISmiValue>()] : L_BRACE t= objecttype_macro_indextype ( COMMA t2= objecttype_macro_indextype )* R_BRACE ;
	[GrammarRule("objecttype_macro_index")]
	private SmiParser.objecttype_macro_index_return objecttype_macro_index()
	{
		EnterRule_objecttype_macro_index();
		EnterRule("objecttype_macro_index", 59);
		TraceIn("objecttype_macro_index", 59);
		SmiParser.objecttype_macro_index_return retval = new SmiParser.objecttype_macro_index_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE210 = default(IToken);
		IToken COMMA211 = default(IToken);
		IToken R_BRACE212 = default(IToken);
		SmiParser.objecttype_macro_indextype_return t = default(SmiParser.objecttype_macro_indextype_return);
		SmiParser.objecttype_macro_indextype_return t2 = default(SmiParser.objecttype_macro_indextype_return);

		CommonTree L_BRACE210_tree = default(CommonTree);
		CommonTree COMMA211_tree = default(CommonTree);
		CommonTree R_BRACE212_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_index");
		DebugLocation(1035, 1);
		try
		{
			// Smi.g:1036:5: ( L_BRACE t= objecttype_macro_indextype ( COMMA t2= objecttype_macro_indextype )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1036:7: L_BRACE t= objecttype_macro_indextype ( COMMA t2= objecttype_macro_indextype )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1036, 7);
			L_BRACE210=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_index5931); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE210_tree = (CommonTree)adaptor.Create(L_BRACE210);
			adaptor.AddChild(root_0, L_BRACE210_tree);
			}
			DebugLocation(1036, 16);
			PushFollow(Follow._objecttype_macro_indextype_in_objecttype_macro_index5935);
			t=objecttype_macro_indextype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(1036, 44);
			if (state.backtracking == 0)
			{
				 retval.result.Add((t!=null?t.result:default(ISmiValue))); 
			}
			DebugLocation(1037, 2);
			// Smi.g:1037:2: ( COMMA t2= objecttype_macro_indextype )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==COMMA))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1037:3: COMMA t2= objecttype_macro_indextype
					{
					DebugLocation(1037, 3);
					COMMA211=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_index5942); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA211_tree = (CommonTree)adaptor.Create(COMMA211);
					adaptor.AddChild(root_0, COMMA211_tree);
					}
					DebugLocation(1037, 11);
					PushFollow(Follow._objecttype_macro_indextype_in_objecttype_macro_index5946);
					t2=objecttype_macro_indextype();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
					DebugLocation(1037, 39);
					if (state.backtracking == 0)
					{
						 retval.result.Add((t2!=null?t2.result:default(ISmiValue))); 
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(1037, 70);
			R_BRACE212=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_index5952); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE212_tree = (CommonTree)adaptor.Create(R_BRACE212);
			adaptor.AddChild(root_0, R_BRACE212_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_index", 59);
			LeaveRule("objecttype_macro_index", 59);
			LeaveRule_objecttype_macro_index();
		}
		DebugLocation(1038, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_index"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_index"

	private sealed partial class objecttype_macro_indextype_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiValue result;
		public objecttype_macro_indextype_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_indextype();
	partial void LeaveRule_objecttype_macro_indextype();
	// $ANTLR start "objecttype_macro_indextype"
	// Smi.g:1040:1: objecttype_macro_indextype returns [ISmiValue result] : ( 'IMPLIED' )? v= value ;
	[GrammarRule("objecttype_macro_indextype")]
	private SmiParser.objecttype_macro_indextype_return objecttype_macro_indextype()
	{
		EnterRule_objecttype_macro_indextype();
		EnterRule("objecttype_macro_indextype", 60);
		TraceIn("objecttype_macro_indextype", 60);
		SmiParser.objecttype_macro_indextype_return retval = new SmiParser.objecttype_macro_indextype_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal213 = default(IToken);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree string_literal213_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_indextype");
		DebugLocation(1040, 1);
		try
		{
			// Smi.g:1041:5: ( ( 'IMPLIED' )? v= value )
			DebugEnterAlt(1);
			// Smi.g:1041:7: ( 'IMPLIED' )? v= value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1041, 7);
			// Smi.g:1041:7: ( 'IMPLIED' )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==IMPLIED_KW))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1041:8: 'IMPLIED'
				{
				DebugLocation(1041, 8);
				string_literal213=(IToken)Match(input,IMPLIED_KW,Follow._IMPLIED_KW_in_objecttype_macro_indextype5978); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal213_tree = (CommonTree)adaptor.Create(string_literal213);
				adaptor.AddChild(root_0, string_literal213_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(1041, 21);
			PushFollow(Follow._value_in_objecttype_macro_indextype5984);
			v=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
			DebugLocation(1041, 28);
			if (state.backtracking == 0)
			{
				 retval.result = (v!=null?v.result:default(ISmiValue)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_indextype", 60);
			LeaveRule("objecttype_macro_indextype", 60);
			LeaveRule_objecttype_macro_indextype();
		}
		DebugLocation(1042, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_indextype"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_indextype"

	private sealed partial class objecttype_macro_augments_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiValue result;
		public objecttype_macro_augments_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_augments();
	partial void LeaveRule_objecttype_macro_augments();
	// $ANTLR start "objecttype_macro_augments"
	// Smi.g:1044:1: objecttype_macro_augments returns [ISmiValue result] : L_BRACE v= value R_BRACE ;
	[GrammarRule("objecttype_macro_augments")]
	private SmiParser.objecttype_macro_augments_return objecttype_macro_augments()
	{
		EnterRule_objecttype_macro_augments();
		EnterRule("objecttype_macro_augments", 61);
		TraceIn("objecttype_macro_augments", 61);
		SmiParser.objecttype_macro_augments_return retval = new SmiParser.objecttype_macro_augments_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE214 = default(IToken);
		IToken R_BRACE215 = default(IToken);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree L_BRACE214_tree = default(CommonTree);
		CommonTree R_BRACE215_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_augments");
		DebugLocation(1044, 1);
		try
		{
			// Smi.g:1045:5: ( L_BRACE v= value R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1045:7: L_BRACE v= value R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1045, 7);
			L_BRACE214=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_augments6004); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE214_tree = (CommonTree)adaptor.Create(L_BRACE214);
			adaptor.AddChild(root_0, L_BRACE214_tree);
			}
			DebugLocation(1045, 16);
			PushFollow(Follow._value_in_objecttype_macro_augments6008);
			v=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
			DebugLocation(1045, 23);
			R_BRACE215=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_augments6010); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE215_tree = (CommonTree)adaptor.Create(R_BRACE215);
			adaptor.AddChild(root_0, R_BRACE215_tree);
			}
			DebugLocation(1045, 31);
			if (state.backtracking == 0)
			{
				 retval.result = (v!=null?v.result:default(ISmiValue)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_augments", 61);
			LeaveRule("objecttype_macro_augments", 61);
			LeaveRule_objecttype_macro_augments();
		}
		DebugLocation(1046, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_augments"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_augments"

	private sealed partial class objecttype_macro_namedbits_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<NamedBit> result = new List<NamedBit>();
		public objecttype_macro_namedbits_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_namedbits();
	partial void LeaveRule_objecttype_macro_namedbits();
	// $ANTLR start "objecttype_macro_namedbits"
	// Smi.g:1049:1: objecttype_macro_namedbits returns [IList<NamedBit> result = new List<NamedBit>()] : L_BRACE n= namedbit ( COMMA n2= namedbit )* R_BRACE ;
	[GrammarRule("objecttype_macro_namedbits")]
	private SmiParser.objecttype_macro_namedbits_return objecttype_macro_namedbits()
	{
		EnterRule_objecttype_macro_namedbits();
		EnterRule("objecttype_macro_namedbits", 62);
		TraceIn("objecttype_macro_namedbits", 62);
		SmiParser.objecttype_macro_namedbits_return retval = new SmiParser.objecttype_macro_namedbits_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE216 = default(IToken);
		IToken COMMA217 = default(IToken);
		IToken R_BRACE218 = default(IToken);
		SmiParser.namedbit_return n = default(SmiParser.namedbit_return);
		SmiParser.namedbit_return n2 = default(SmiParser.namedbit_return);

		CommonTree L_BRACE216_tree = default(CommonTree);
		CommonTree COMMA217_tree = default(CommonTree);
		CommonTree R_BRACE218_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_namedbits");
		DebugLocation(1049, 1);
		try
		{
			// Smi.g:1050:5: ( L_BRACE n= namedbit ( COMMA n2= namedbit )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1050:7: L_BRACE n= namedbit ( COMMA n2= namedbit )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1050, 7);
			L_BRACE216=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_namedbits6034); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE216_tree = (CommonTree)adaptor.Create(L_BRACE216);
			adaptor.AddChild(root_0, L_BRACE216_tree);
			}
			DebugLocation(1050, 16);
			PushFollow(Follow._namedbit_in_objecttype_macro_namedbits6038);
			n=namedbit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
			DebugLocation(1050, 26);
			if (state.backtracking == 0)
			{
				 retval.result.Add((n!=null?n.result:default(NamedBit))); 
			}
			DebugLocation(1051, 2);
			// Smi.g:1051:2: ( COMMA n2= namedbit )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==COMMA))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1051:3: COMMA n2= namedbit
					{
					DebugLocation(1051, 3);
					COMMA217=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_namedbits6045); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA217_tree = (CommonTree)adaptor.Create(COMMA217);
					adaptor.AddChild(root_0, COMMA217_tree);
					}
					DebugLocation(1051, 11);
					PushFollow(Follow._namedbit_in_objecttype_macro_namedbits6049);
					n2=namedbit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, n2.Tree);
					DebugLocation(1051, 21);
					if (state.backtracking == 0)
					{
						 retval.result.Add((n2!=null?n2.result:default(NamedBit))); 
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(1051, 52);
			R_BRACE218=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_namedbits6055); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE218_tree = (CommonTree)adaptor.Create(R_BRACE218);
			adaptor.AddChild(root_0, R_BRACE218_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_namedbits", 62);
			LeaveRule("objecttype_macro_namedbits", 62);
			LeaveRule_objecttype_macro_namedbits();
		}
		DebugLocation(1052, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_namedbits"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_namedbits"

	private sealed partial class objecttype_macro_bitsvalue_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<string> result = new List<string>();
		public objecttype_macro_bitsvalue_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_bitsvalue();
	partial void LeaveRule_objecttype_macro_bitsvalue();
	// $ANTLR start "objecttype_macro_bitsvalue"
	// Smi.g:1054:1: objecttype_macro_bitsvalue returns [IList<string> result = new List<string>()] : L_BRACE l= LOWER ( COMMA l2= LOWER )* R_BRACE ;
	[GrammarRule("objecttype_macro_bitsvalue")]
	private SmiParser.objecttype_macro_bitsvalue_return objecttype_macro_bitsvalue()
	{
		EnterRule_objecttype_macro_bitsvalue();
		EnterRule("objecttype_macro_bitsvalue", 63);
		TraceIn("objecttype_macro_bitsvalue", 63);
		SmiParser.objecttype_macro_bitsvalue_return retval = new SmiParser.objecttype_macro_bitsvalue_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);
		IToken l2 = default(IToken);
		IToken L_BRACE219 = default(IToken);
		IToken COMMA220 = default(IToken);
		IToken R_BRACE221 = default(IToken);

		CommonTree l_tree = default(CommonTree);
		CommonTree l2_tree = default(CommonTree);
		CommonTree L_BRACE219_tree = default(CommonTree);
		CommonTree COMMA220_tree = default(CommonTree);
		CommonTree R_BRACE221_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objecttype_macro_bitsvalue");
		DebugLocation(1054, 1);
		try
		{
			// Smi.g:1055:5: ( L_BRACE l= LOWER ( COMMA l2= LOWER )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1055:7: L_BRACE l= LOWER ( COMMA l2= LOWER )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1055, 7);
			L_BRACE219=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_bitsvalue6078); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE219_tree = (CommonTree)adaptor.Create(L_BRACE219);
			adaptor.AddChild(root_0, L_BRACE219_tree);
			}
			DebugLocation(1055, 16);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_bitsvalue6082); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1055, 23);
			if (state.backtracking == 0)
			{
				 retval.result.Add((l!=null?l.Text:null)); 
			}
			DebugLocation(1056, 2);
			// Smi.g:1056:2: ( COMMA l2= LOWER )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==COMMA))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1056:3: COMMA l2= LOWER
					{
					DebugLocation(1056, 3);
					COMMA220=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_bitsvalue6089); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA220_tree = (CommonTree)adaptor.Create(COMMA220);
					adaptor.AddChild(root_0, COMMA220_tree);
					}
					DebugLocation(1056, 11);
					l2=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_bitsvalue6093); if (state.failed) return retval;
					if (state.backtracking == 0) {
					l2_tree = (CommonTree)adaptor.Create(l2);
					adaptor.AddChild(root_0, l2_tree);
					}
					DebugLocation(1056, 18);
					if (state.backtracking == 0)
					{
						 retval.result.Add((l2!=null?l2.Text:null)); 
					}

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(1056, 47);
			R_BRACE221=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_bitsvalue6099); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE221_tree = (CommonTree)adaptor.Create(R_BRACE221);
			adaptor.AddChild(root_0, R_BRACE221_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_bitsvalue", 63);
			LeaveRule("objecttype_macro_bitsvalue", 63);
			LeaveRule_objecttype_macro_bitsvalue();
		}
		DebugLocation(1057, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_bitsvalue"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_bitsvalue"

	private sealed partial class objecttype_macro_error_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedBit result;
		public objecttype_macro_error_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objecttype_macro_error();
	partial void LeaveRule_objecttype_macro_error();
	// $ANTLR start "objecttype_macro_error"
	// Smi.g:1059:1: objecttype_macro_error returns [NamedBit result] : n= namedbit ;
	[GrammarRule("objecttype_macro_error")]
	private SmiParser.objecttype_macro_error_return objecttype_macro_error()
	{
		EnterRule_objecttype_macro_error();
		EnterRule("objecttype_macro_error", 64);
		TraceIn("objecttype_macro_error", 64);
		SmiParser.objecttype_macro_error_return retval = new SmiParser.objecttype_macro_error_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.namedbit_return n = default(SmiParser.namedbit_return);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_error");
		DebugLocation(1059, 1);
		try
		{
			// Smi.g:1060:5: (n= namedbit )
			DebugEnterAlt(1);
			// Smi.g:1060:7: n= namedbit
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1060, 8);
			PushFollow(Follow._namedbit_in_objecttype_macro_error6125);
			n=namedbit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
			DebugLocation(1060, 18);
			if (state.backtracking == 0)
			{
				 retval.result = (n!=null?n.result:default(NamedBit)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_error", 64);
			LeaveRule("objecttype_macro_error", 64);
			LeaveRule_objecttype_macro_error();
		}
		DebugLocation(1061, 1);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_error"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_error"

	private sealed partial class moduleidentity_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ModuleIdentityMacro result = new ModuleIdentityMacro();
		public moduleidentity_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_moduleidentity_macro();
	partial void LeaveRule_moduleidentity_macro();
	// $ANTLR start "moduleidentity_macro"
	// Smi.g:1064:1: moduleidentity_macro returns [ModuleIdentityMacro result = new ModuleIdentityMacro()] : 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE c= moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' c1= C_STRING 'ORGANIZATION' c2= C_STRING 'CONTACT-INFO' c3= C_STRING 'DESCRIPTION' c4= C_STRING (m= moduleidentity_macro_revision )* ;
	[GrammarRule("moduleidentity_macro")]
	private SmiParser.moduleidentity_macro_return moduleidentity_macro()
	{
		EnterRule_moduleidentity_macro();
		EnterRule("moduleidentity_macro", 65);
		TraceIn("moduleidentity_macro", 65);
		SmiParser.moduleidentity_macro_return retval = new SmiParser.moduleidentity_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken c3 = default(IToken);
		IToken c4 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken string_literal223 = default(IToken);
		IToken L_BRACE224 = default(IToken);
		IToken R_BRACE225 = default(IToken);
		IToken string_literal226 = default(IToken);
		IToken string_literal227 = default(IToken);
		IToken string_literal228 = default(IToken);
		IToken string_literal229 = default(IToken);
		SmiParser.moduleidentity_macro_categories_return c = default(SmiParser.moduleidentity_macro_categories_return);
		SmiParser.moduleidentity_macro_revision_return m = default(SmiParser.moduleidentity_macro_revision_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree c3_tree = default(CommonTree);
		CommonTree c4_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree L_BRACE224_tree = default(CommonTree);
		CommonTree R_BRACE225_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree string_literal229_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro");
		DebugLocation(1064, 74);
		try
		{
			// Smi.g:1065:5: ( 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE c= moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' c1= C_STRING 'ORGANIZATION' c2= C_STRING 'CONTACT-INFO' c3= C_STRING 'DESCRIPTION' c4= C_STRING (m= moduleidentity_macro_revision )* )
			DebugEnterAlt(1);
			// Smi.g:1065:7: 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE c= moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' c1= C_STRING 'ORGANIZATION' c2= C_STRING 'CONTACT-INFO' c3= C_STRING 'DESCRIPTION' c4= C_STRING (m= moduleidentity_macro_revision )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1065, 7);
			string_literal222=(IToken)Match(input,159,Follow._159_in_moduleidentity_macro6147); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal222_tree = (CommonTree)adaptor.Create(string_literal222);
			adaptor.AddChild(root_0, string_literal222_tree);
			}
			DebugLocation(1065, 25);
			// Smi.g:1065:25: ( 'SUBJECT-CATEGORIES' L_BRACE c= moduleidentity_macro_categories R_BRACE )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_1 = input.LA(1);

			if ((LA89_1==185))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1065:26: 'SUBJECT-CATEGORIES' L_BRACE c= moduleidentity_macro_categories R_BRACE
				{
				DebugLocation(1065, 26);
				string_literal223=(IToken)Match(input,185,Follow._185_in_moduleidentity_macro6150); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal223_tree = (CommonTree)adaptor.Create(string_literal223);
				adaptor.AddChild(root_0, string_literal223_tree);
				}
				DebugLocation(1065, 47);
				L_BRACE224=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_moduleidentity_macro6152); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE224_tree = (CommonTree)adaptor.Create(L_BRACE224);
				adaptor.AddChild(root_0, L_BRACE224_tree);
				}
				DebugLocation(1065, 56);
				PushFollow(Follow._moduleidentity_macro_categories_in_moduleidentity_macro6156);
				c=moduleidentity_macro_categories();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1065, 89);
				R_BRACE225=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_moduleidentity_macro6158); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE225_tree = (CommonTree)adaptor.Create(R_BRACE225);
				adaptor.AddChild(root_0, R_BRACE225_tree);
				}
				DebugLocation(1065, 97);
				if (state.backtracking == 0)
				{
					 retval.result.Categories = (c!=null?c.result:default(Categories)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(89); }

			DebugLocation(1066, 5);
			string_literal226=(IToken)Match(input,152,Follow._152_in_moduleidentity_macro6170); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal226_tree = (CommonTree)adaptor.Create(string_literal226);
			adaptor.AddChild(root_0, string_literal226_tree);
			}
			DebugLocation(1066, 22);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro6174); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1066, 32);
			if (state.backtracking == 0)
			{
				 retval.result.LastUpdate = (c1!=null?c1.Text:null); 
			}
			DebugLocation(1067, 2);
			string_literal227=(IToken)Match(input,167,Follow._167_in_moduleidentity_macro6179); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal227_tree = (CommonTree)adaptor.Create(string_literal227);
			adaptor.AddChild(root_0, string_literal227_tree);
			}
			DebugLocation(1067, 19);
			c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro6183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c2_tree = (CommonTree)adaptor.Create(c2);
			adaptor.AddChild(root_0, c2_tree);
			}
			DebugLocation(1067, 29);
			if (state.backtracking == 0)
			{
				 retval.result.Organization = (c2!=null?c2.Text:null); 
			}
			DebugLocation(1068, 2);
			string_literal228=(IToken)Match(input,138,Follow._138_in_moduleidentity_macro6188); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal228_tree = (CommonTree)adaptor.Create(string_literal228);
			adaptor.AddChild(root_0, string_literal228_tree);
			}
			DebugLocation(1068, 19);
			c3=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro6192); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c3_tree = (CommonTree)adaptor.Create(c3);
			adaptor.AddChild(root_0, c3_tree);
			}
			DebugLocation(1068, 29);
			if (state.backtracking == 0)
			{
				 retval.result.ContactInfo = (c3!=null?c3.Text:null); 
			}
			DebugLocation(1069, 5);
			string_literal229=(IToken)Match(input,141,Follow._141_in_moduleidentity_macro6200); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal229_tree = (CommonTree)adaptor.Create(string_literal229);
			adaptor.AddChild(root_0, string_literal229_tree);
			}
			DebugLocation(1069, 21);
			c4=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro6204); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c4_tree = (CommonTree)adaptor.Create(c4);
			adaptor.AddChild(root_0, c4_tree);
			}
			DebugLocation(1069, 31);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c4!=null?c4.Text:null); 
			}
			DebugLocation(1070, 2);
			// Smi.g:1070:2: (m= moduleidentity_macro_revision )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==180))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1070:3: m= moduleidentity_macro_revision
					{
					DebugLocation(1070, 4);
					PushFollow(Follow._moduleidentity_macro_revision_in_moduleidentity_macro6212);
					m=moduleidentity_macro_revision();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);
					DebugLocation(1070, 35);
					if (state.backtracking == 0)
					{
						 retval.result.Revisions.Add((m!=null?m.result:default(Revision))); 
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro", 65);
			LeaveRule("moduleidentity_macro", 65);
			LeaveRule_moduleidentity_macro();
		}
		DebugLocation(1070, 74);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro"

	private sealed partial class moduleidentity_macro_revision_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Revision result;
		public moduleidentity_macro_revision_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_moduleidentity_macro_revision();
	partial void LeaveRule_moduleidentity_macro_revision();
	// $ANTLR start "moduleidentity_macro_revision"
	// Smi.g:1072:1: moduleidentity_macro_revision returns [Revision result] : 'REVISION' c1= C_STRING 'DESCRIPTION' c2= C_STRING ;
	[GrammarRule("moduleidentity_macro_revision")]
	private SmiParser.moduleidentity_macro_revision_return moduleidentity_macro_revision()
	{
		EnterRule_moduleidentity_macro_revision();
		EnterRule("moduleidentity_macro_revision", 66);
		TraceIn("moduleidentity_macro_revision", 66);
		SmiParser.moduleidentity_macro_revision_return retval = new SmiParser.moduleidentity_macro_revision_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken string_literal231 = default(IToken);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_revision");
		DebugLocation(1072, 1);
		try
		{
			// Smi.g:1073:5: ( 'REVISION' c1= C_STRING 'DESCRIPTION' c2= C_STRING )
			DebugEnterAlt(1);
			// Smi.g:1073:7: 'REVISION' c1= C_STRING 'DESCRIPTION' c2= C_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1073, 7);
			string_literal230=(IToken)Match(input,180,Follow._180_in_moduleidentity_macro_revision6233); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal230_tree = (CommonTree)adaptor.Create(string_literal230);
			adaptor.AddChild(root_0, string_literal230_tree);
			}
			DebugLocation(1073, 20);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro_revision6237); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1073, 30);
			string_literal231=(IToken)Match(input,141,Follow._141_in_moduleidentity_macro_revision6239); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal231_tree = (CommonTree)adaptor.Create(string_literal231);
			adaptor.AddChild(root_0, string_literal231_tree);
			}
			DebugLocation(1073, 46);
			c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro_revision6243); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c2_tree = (CommonTree)adaptor.Create(c2);
			adaptor.AddChild(root_0, c2_tree);
			}
			DebugLocation(1073, 56);
			if (state.backtracking == 0)
			{
				 retval.result = new Revision((c1!=null?c1.Text:null), (c2!=null?c2.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_revision", 66);
			LeaveRule("moduleidentity_macro_revision", 66);
			LeaveRule_moduleidentity_macro_revision();
		}
		DebugLocation(1074, 1);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_revision"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_revision"

	private sealed partial class moduleidentity_macro_categories_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Categories result = new Categories();
		public moduleidentity_macro_categories_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_moduleidentity_macro_categories();
	partial void LeaveRule_moduleidentity_macro_categories();
	// $ANTLR start "moduleidentity_macro_categories"
	// Smi.g:1076:1: moduleidentity_macro_categories returns [Categories result = new Categories()] : (l= LOWER |m1= moduleidentity_macro_categoryid ( COMMA m2= moduleidentity_macro_categoryid )* );
	[GrammarRule("moduleidentity_macro_categories")]
	private SmiParser.moduleidentity_macro_categories_return moduleidentity_macro_categories()
	{
		EnterRule_moduleidentity_macro_categories();
		EnterRule("moduleidentity_macro_categories", 67);
		TraceIn("moduleidentity_macro_categories", 67);
		SmiParser.moduleidentity_macro_categories_return retval = new SmiParser.moduleidentity_macro_categories_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);
		IToken COMMA232 = default(IToken);
		SmiParser.moduleidentity_macro_categoryid_return m1 = default(SmiParser.moduleidentity_macro_categoryid_return);
		SmiParser.moduleidentity_macro_categoryid_return m2 = default(SmiParser.moduleidentity_macro_categoryid_return);

		CommonTree l_tree = default(CommonTree);
		CommonTree COMMA232_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_categories");
		DebugLocation(1076, 1);
		try
		{
			// Smi.g:1077:5: (l= LOWER |m1= moduleidentity_macro_categoryid ( COMMA m2= moduleidentity_macro_categoryid )* )
			int alt92=2;
			try { DebugEnterDecision(92, false);
			int LA92_1 = input.LA(1);

			if ((LA92_1==LOWER))
			{
				int LA92_2 = input.LA(2);

				if ((LA92_2==L_PAREN))
				{
					alt92 = 2;
				}
				else if ((LA92_2==R_BRACE))
				{
					alt92 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1077:7: l= LOWER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1077, 8);
				l=(IToken)Match(input,LOWER,Follow._LOWER_in_moduleidentity_macro_categories6266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				l_tree = (CommonTree)adaptor.Create(l);
				adaptor.AddChild(root_0, l_tree);
				}
				DebugLocation(1077, 15);
				if (state.backtracking == 0)
				{
					if (l.Text ==  ("all")) retval.result.AllCategories = true;
						         else { throw new SemanticException ("(invalid)"); }
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1080:7: m1= moduleidentity_macro_categoryid ( COMMA m2= moduleidentity_macro_categoryid )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1080, 9);
				PushFollow(Follow._moduleidentity_macro_categoryid_in_moduleidentity_macro_categories6279);
				m1=moduleidentity_macro_categoryid();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m1.Tree);
				DebugLocation(1080, 42);
				if (state.backtracking == 0)
				{
					 retval.result.CategoryIds.Add((m1!=null?m1.result:default(NamedBit))); 
				}
				DebugLocation(1081, 2);
				// Smi.g:1081:2: ( COMMA m2= moduleidentity_macro_categoryid )*
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, false);
					int LA91_1 = input.LA(1);

					if ((LA91_1==COMMA))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch ( alt91 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1081:3: COMMA m2= moduleidentity_macro_categoryid
						{
						DebugLocation(1081, 3);
						COMMA232=(IToken)Match(input,COMMA,Follow._COMMA_in_moduleidentity_macro_categories6286); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA232_tree = (CommonTree)adaptor.Create(COMMA232);
						adaptor.AddChild(root_0, COMMA232_tree);
						}
						DebugLocation(1081, 11);
						PushFollow(Follow._moduleidentity_macro_categoryid_in_moduleidentity_macro_categories6290);
						m2=moduleidentity_macro_categoryid();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, m2.Tree);
						DebugLocation(1081, 44);
						if (state.backtracking == 0)
						{
							 retval.result.CategoryIds.Add((m2!=null?m2.result:default(NamedBit))); 
						}

						}
						break;

					default:
						goto loop91;
					}
				}

				loop91:
					;

				} finally { DebugExitSubRule(91); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_categories", 67);
			LeaveRule("moduleidentity_macro_categories", 67);
			LeaveRule_moduleidentity_macro_categories();
		}
		DebugLocation(1082, 1);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_categories"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_categories"

	private sealed partial class moduleidentity_macro_categoryid_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedBit result;
		public moduleidentity_macro_categoryid_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_moduleidentity_macro_categoryid();
	partial void LeaveRule_moduleidentity_macro_categoryid();
	// $ANTLR start "moduleidentity_macro_categoryid"
	// Smi.g:1084:1: moduleidentity_macro_categoryid returns [NamedBit result] : n= namedbit ;
	[GrammarRule("moduleidentity_macro_categoryid")]
	private SmiParser.moduleidentity_macro_categoryid_return moduleidentity_macro_categoryid()
	{
		EnterRule_moduleidentity_macro_categoryid();
		EnterRule("moduleidentity_macro_categoryid", 68);
		TraceIn("moduleidentity_macro_categoryid", 68);
		SmiParser.moduleidentity_macro_categoryid_return retval = new SmiParser.moduleidentity_macro_categoryid_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.namedbit_return n = default(SmiParser.namedbit_return);

		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_categoryid");
		DebugLocation(1084, 1);
		try
		{
			// Smi.g:1085:5: (n= namedbit )
			DebugEnterAlt(1);
			// Smi.g:1085:7: n= namedbit
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1085, 8);
			PushFollow(Follow._namedbit_in_moduleidentity_macro_categoryid6314);
			n=namedbit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
			DebugLocation(1085, 18);
			if (state.backtracking == 0)
			{
				 retval.result = (n!=null?n.result:default(NamedBit)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_categoryid", 68);
			LeaveRule("moduleidentity_macro_categoryid", 68);
			LeaveRule_moduleidentity_macro_categoryid();
		}
		DebugLocation(1086, 1);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_categoryid"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_categoryid"

	private sealed partial class objectidentity_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ObjectIdentityMacro result;
		public objectidentity_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objectidentity_macro();
	partial void LeaveRule_objectidentity_macro();
	// $ANTLR start "objectidentity_macro"
	// Smi.g:1089:1: objectidentity_macro returns [ObjectIdentityMacro result] : 'OBJECT-IDENTITY' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? ;
	[GrammarRule("objectidentity_macro")]
	private SmiParser.objectidentity_macro_return objectidentity_macro()
	{
		EnterRule_objectidentity_macro();
		EnterRule("objectidentity_macro", 69);
		TraceIn("objectidentity_macro", 69);
		SmiParser.objectidentity_macro_return retval = new SmiParser.objectidentity_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken string_literal235 = default(IToken);
		IToken string_literal236 = default(IToken);
		SmiParser.status_return s = default(SmiParser.status_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objectidentity_macro");
		DebugLocation(1089, 62);
		try
		{
			// Smi.g:1090:5: ( 'OBJECT-IDENTITY' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:1090:7: 'OBJECT-IDENTITY' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1090, 7);
			string_literal233=(IToken)Match(input,164,Follow._164_in_objectidentity_macro6337); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal233_tree = (CommonTree)adaptor.Create(string_literal233);
			adaptor.AddChild(root_0, string_literal233_tree);
			}
			DebugLocation(1090, 25);
			string_literal234=(IToken)Match(input,184,Follow._184_in_objectidentity_macro6339); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal234_tree = (CommonTree)adaptor.Create(string_literal234);
			adaptor.AddChild(root_0, string_literal234_tree);
			}
			DebugLocation(1090, 35);
			PushFollow(Follow._status_in_objectidentity_macro6343);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1091, 2);
			string_literal235=(IToken)Match(input,141,Follow._141_in_objectidentity_macro6347); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal235_tree = (CommonTree)adaptor.Create(string_literal235);
			adaptor.AddChild(root_0, string_literal235_tree);
			}
			DebugLocation(1091, 18);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectidentity_macro6351); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1091, 28);
			if (state.backtracking == 0)
			{
				 retval.result = new ObjectIdentityMacro((s!=null?s.result:default(EntityStatus)), (c1!=null?c1.Text:null)); 
			}
			DebugLocation(1092, 2);
			// Smi.g:1092:2: ( 'REFERENCE' c2= C_STRING )?
			int alt93=2;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			int LA93_1 = input.LA(1);

			if ((LA93_1==177))
			{
				alt93 = 1;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1092:3: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(1092, 3);
				string_literal236=(IToken)Match(input,177,Follow._177_in_objectidentity_macro6358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal236_tree = (CommonTree)adaptor.Create(string_literal236);
				adaptor.AddChild(root_0, string_literal236_tree);
				}
				DebugLocation(1092, 17);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectidentity_macro6362); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1092, 27);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectidentity_macro", 69);
			LeaveRule("objectidentity_macro", 69);
			LeaveRule_objectidentity_macro();
		}
		DebugLocation(1092, 62);
		} finally { DebugExitRule(GrammarFileName, "objectidentity_macro"); }
		return retval;

	}
	// $ANTLR end "objectidentity_macro"

	private sealed partial class notificationtype_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NotificationTypeMacro result = new NotificationTypeMacro();
		public notificationtype_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_notificationtype_macro();
	partial void LeaveRule_notificationtype_macro();
	// $ANTLR start "notificationtype_macro"
	// Smi.g:1095:1: notificationtype_macro returns [NotificationTypeMacro result = new NotificationTypeMacro()] : 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE )? 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? ;
	[GrammarRule("notificationtype_macro")]
	private SmiParser.notificationtype_macro_return notificationtype_macro()
	{
		EnterRule_notificationtype_macro();
		EnterRule("notificationtype_macro", 70);
		TraceIn("notificationtype_macro", 70);
		SmiParser.notificationtype_macro_return retval = new SmiParser.notificationtype_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal237 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken L_BRACE239 = default(IToken);
		IToken COMMA240 = default(IToken);
		IToken R_BRACE241 = default(IToken);
		IToken string_literal242 = default(IToken);
		IToken string_literal243 = default(IToken);
		IToken string_literal244 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.status_return s = default(SmiParser.status_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree L_BRACE239_tree = default(CommonTree);
		CommonTree COMMA240_tree = default(CommonTree);
		CommonTree R_BRACE241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "notificationtype_macro");
		DebugLocation(1095, 4);
		try
		{
			// Smi.g:1096:5: ( 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE )? 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:1096:7: 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE )? 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1096, 7);
			string_literal237=(IToken)Match(input,161,Follow._161_in_notificationtype_macro6385); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal237_tree = (CommonTree)adaptor.Create(string_literal237);
			adaptor.AddChild(root_0, string_literal237_tree);
			}
			DebugLocation(1096, 27);
			// Smi.g:1096:27: ( 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE )?
			int alt95=2;
			try { DebugEnterSubRule(95);
			try { DebugEnterDecision(95, false);
			int LA95_1 = input.LA(1);

			if ((LA95_1==166))
			{
				alt95 = 1;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1096:28: 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE
				{
				DebugLocation(1096, 28);
				string_literal238=(IToken)Match(input,166,Follow._166_in_notificationtype_macro6388); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal238_tree = (CommonTree)adaptor.Create(string_literal238);
				adaptor.AddChild(root_0, string_literal238_tree);
				}
				DebugLocation(1096, 38);
				L_BRACE239=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_notificationtype_macro6390); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE239_tree = (CommonTree)adaptor.Create(L_BRACE239);
				adaptor.AddChild(root_0, L_BRACE239_tree);
				}
				DebugLocation(1096, 48);
				PushFollow(Follow._value_in_notificationtype_macro6394);
				v1=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
				DebugLocation(1096, 55);
				if (state.backtracking == 0)
				{
					 retval.result.Objects.Add((v1!=null?v1.result:default(ISmiValue))); 
				}
				DebugLocation(1097, 5);
				// Smi.g:1097:5: ( COMMA v2= value )*
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_1 = input.LA(1);

					if ((LA94_1==COMMA))
					{
						alt94 = 1;
					}


					} finally { DebugExitDecision(94); }
					switch ( alt94 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1097:6: COMMA v2= value
						{
						DebugLocation(1097, 6);
						COMMA240=(IToken)Match(input,COMMA,Follow._COMMA_in_notificationtype_macro6404); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA240_tree = (CommonTree)adaptor.Create(COMMA240);
						adaptor.AddChild(root_0, COMMA240_tree);
						}
						DebugLocation(1097, 14);
						PushFollow(Follow._value_in_notificationtype_macro6408);
						v2=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
						DebugLocation(1097, 21);
						if (state.backtracking == 0)
						{
							 retval.result.Objects.Add((v2!=null?v2.result:default(ISmiValue))); 
						}

						}
						break;

					default:
						goto loop94;
					}
				}

				loop94:
					;

				} finally { DebugExitSubRule(94); }

				DebugLocation(1097, 60);
				R_BRACE241=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_notificationtype_macro6414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE241_tree = (CommonTree)adaptor.Create(R_BRACE241);
				adaptor.AddChild(root_0, R_BRACE241_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(95); }

			DebugLocation(1098, 5);
			string_literal242=(IToken)Match(input,184,Follow._184_in_notificationtype_macro6423); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal242_tree = (CommonTree)adaptor.Create(string_literal242);
			adaptor.AddChild(root_0, string_literal242_tree);
			}
			DebugLocation(1098, 15);
			PushFollow(Follow._status_in_notificationtype_macro6427);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1098, 23);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(1099, 5);
			string_literal243=(IToken)Match(input,141,Follow._141_in_notificationtype_macro6435); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal243_tree = (CommonTree)adaptor.Create(string_literal243);
			adaptor.AddChild(root_0, string_literal243_tree);
			}
			DebugLocation(1099, 21);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationtype_macro6439); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1099, 31);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c1!=null?c1.Text:null); 
			}
			DebugLocation(1100, 5);
			// Smi.g:1100:5: ( 'REFERENCE' c2= C_STRING )?
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_1 = input.LA(1);

			if ((LA96_1==177))
			{
				alt96 = 1;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1100:6: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(1100, 6);
				string_literal244=(IToken)Match(input,177,Follow._177_in_notificationtype_macro6448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal244_tree = (CommonTree)adaptor.Create(string_literal244);
				adaptor.AddChild(root_0, string_literal244_tree);
				}
				DebugLocation(1100, 20);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationtype_macro6452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1100, 30);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationtype_macro", 70);
			LeaveRule("notificationtype_macro", 70);
			LeaveRule_notificationtype_macro();
		}
		DebugLocation(1101, 4);
		} finally { DebugExitRule(GrammarFileName, "notificationtype_macro"); }
		return retval;

	}
	// $ANTLR end "notificationtype_macro"

	private sealed partial class textualconvention_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TextualConventionMacro result = new TextualConventionMacro();
		public textualconvention_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_textualconvention_macro();
	partial void LeaveRule_textualconvention_macro();
	// $ANTLR start "textualconvention_macro"
	// Smi.g:1104:1: textualconvention_macro returns [TextualConventionMacro result = new TextualConventionMacro()] : 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' c1= C_STRING )? 'STATUS' s= status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE |t= type ) ;
	[GrammarRule("textualconvention_macro")]
	private SmiParser.textualconvention_macro_return textualconvention_macro()
	{
		EnterRule_textualconvention_macro();
		EnterRule("textualconvention_macro", 71);
		TraceIn("textualconvention_macro", 71);
		SmiParser.textualconvention_macro_return retval = new SmiParser.textualconvention_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken c3 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken string_literal248 = default(IToken);
		IToken string_literal249 = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken L_BRACE251 = default(IToken);
		IToken COMMA252 = default(IToken);
		IToken R_BRACE253 = default(IToken);
		SmiParser.status_return s = default(SmiParser.status_return);
		SmiParser.smi_type_return s2 = default(SmiParser.smi_type_return);
		SmiParser.textualconvention_macro_namedbit_return nb1 = default(SmiParser.textualconvention_macro_namedbit_return);
		SmiParser.textualconvention_macro_namedbit_return nb2 = default(SmiParser.textualconvention_macro_namedbit_return);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree c3_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree L_BRACE251_tree = default(CommonTree);
		CommonTree COMMA252_tree = default(CommonTree);
		CommonTree R_BRACE253_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "textualconvention_macro");
		DebugLocation(1104, 1);
		try
		{
			// Smi.g:1105:5: ( 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' c1= C_STRING )? 'STATUS' s= status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE |t= type ) )
			DebugEnterAlt(1);
			// Smi.g:1105:7: 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' c1= C_STRING )? 'STATUS' s= status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE |t= type )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1105, 7);
			string_literal245=(IToken)Match(input,188,Follow._188_in_textualconvention_macro6480); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal245_tree = (CommonTree)adaptor.Create(string_literal245);
			adaptor.AddChild(root_0, string_literal245_tree);
			}
			DebugLocation(1105, 28);
			// Smi.g:1105:28: ( 'DISPLAY-HINT' c1= C_STRING )?
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_1 = input.LA(1);

			if ((LA97_1==142))
			{
				alt97 = 1;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1105:29: 'DISPLAY-HINT' c1= C_STRING
				{
				DebugLocation(1105, 29);
				string_literal246=(IToken)Match(input,142,Follow._142_in_textualconvention_macro6483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal246_tree = (CommonTree)adaptor.Create(string_literal246);
				adaptor.AddChild(root_0, string_literal246_tree);
				}
				DebugLocation(1105, 46);
				c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro6487); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c1_tree = (CommonTree)adaptor.Create(c1);
				adaptor.AddChild(root_0, c1_tree);
				}
				DebugLocation(1105, 56);
				if (state.backtracking == 0)
				{
					 retval.result.DisplayHint = (c1!=null?c1.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(97); }

			DebugLocation(1106, 5);
			string_literal247=(IToken)Match(input,184,Follow._184_in_textualconvention_macro6497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal247_tree = (CommonTree)adaptor.Create(string_literal247);
			adaptor.AddChild(root_0, string_literal247_tree);
			}
			DebugLocation(1106, 15);
			PushFollow(Follow._status_in_textualconvention_macro6501);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1106, 23);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(1107, 5);
			string_literal248=(IToken)Match(input,141,Follow._141_in_textualconvention_macro6509); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal248_tree = (CommonTree)adaptor.Create(string_literal248);
			adaptor.AddChild(root_0, string_literal248_tree);
			}
			DebugLocation(1107, 21);
			c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro6513); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c2_tree = (CommonTree)adaptor.Create(c2);
			adaptor.AddChild(root_0, c2_tree);
			}
			DebugLocation(1107, 31);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c2!=null?c2.Text:null); 
			}
			DebugLocation(1108, 5);
			// Smi.g:1108:5: ( 'REFERENCE' c3= C_STRING )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_1 = input.LA(1);

			if ((LA98_1==177))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1108:6: 'REFERENCE' c3= C_STRING
				{
				DebugLocation(1108, 6);
				string_literal249=(IToken)Match(input,177,Follow._177_in_textualconvention_macro6522); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal249_tree = (CommonTree)adaptor.Create(string_literal249);
				adaptor.AddChild(root_0, string_literal249_tree);
				}
				DebugLocation(1108, 20);
				c3=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro6526); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c3_tree = (CommonTree)adaptor.Create(c3);
				adaptor.AddChild(root_0, c3_tree);
				}
				DebugLocation(1108, 30);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c3!=null?c3.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(1109, 5);
			string_literal250=(IToken)Match(input,187,Follow._187_in_textualconvention_macro6537); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal250_tree = (CommonTree)adaptor.Create(string_literal250);
			adaptor.AddChild(root_0, string_literal250_tree);
			}
			DebugLocation(1109, 14);
			// Smi.g:1109:14: ( ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE |t= type )
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			try
			{
				alt100 = dfa100.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1109:16: ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE
				{
				DebugLocation(1109, 40);
				PushFollow(Follow._smi_type_in_textualconvention_macro6551);
				s2=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s2.Tree);
				DebugLocation(1109, 50);
				if (state.backtracking == 0)
				{
					 retval.result.Syntax = (s2!=null?s2.result:default(ISmiType)); 
				}
				DebugLocation(1110, 2);
				L_BRACE251=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_textualconvention_macro6556); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE251_tree = (CommonTree)adaptor.Create(L_BRACE251);
				adaptor.AddChild(root_0, L_BRACE251_tree);
				}
				DebugLocation(1110, 13);
				PushFollow(Follow._textualconvention_macro_namedbit_in_textualconvention_macro6560);
				nb1=textualconvention_macro_namedbit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nb1.Tree);
				DebugLocation(1110, 47);
				if (state.backtracking == 0)
				{
					 retval.result.SyntaxNamedBits.Add((nb1!=null?nb1.result:default(NamedBit))); 
				}
				DebugLocation(1111, 13);
				// Smi.g:1111:13: ( COMMA nb2= textualconvention_macro_namedbit )*
				try { DebugEnterSubRule(99);
				while (true)
				{
					int alt99=2;
					try { DebugEnterDecision(99, false);
					int LA99_1 = input.LA(1);

					if ((LA99_1==COMMA))
					{
						alt99 = 1;
					}


					} finally { DebugExitDecision(99); }
					switch ( alt99 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1111:14: COMMA nb2= textualconvention_macro_namedbit
						{
						DebugLocation(1111, 14);
						COMMA252=(IToken)Match(input,COMMA,Follow._COMMA_in_textualconvention_macro6577); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA252_tree = (CommonTree)adaptor.Create(COMMA252);
						adaptor.AddChild(root_0, COMMA252_tree);
						}
						DebugLocation(1111, 23);
						PushFollow(Follow._textualconvention_macro_namedbit_in_textualconvention_macro6581);
						nb2=textualconvention_macro_namedbit();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, nb2.Tree);
						DebugLocation(1111, 57);
						if (state.backtracking == 0)
						{
							 retval.result.SyntaxNamedBits.Add((nb2!=null?nb2.result:default(NamedBit))); 
						}

						}
						break;

					default:
						goto loop99;
					}
				}

				loop99:
					;

				} finally { DebugExitSubRule(99); }

				DebugLocation(1111, 105);
				R_BRACE253=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_textualconvention_macro6587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE253_tree = (CommonTree)adaptor.Create(R_BRACE253);
				adaptor.AddChild(root_0, R_BRACE253_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1112:6: t= type
				{
				DebugLocation(1112, 7);
				PushFollow(Follow._type_in_textualconvention_macro6597);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textualconvention_macro", 71);
			LeaveRule("textualconvention_macro", 71);
			LeaveRule_textualconvention_macro();
		}
		DebugLocation(1113, 1);
		} finally { DebugExitRule(GrammarFileName, "textualconvention_macro"); }
		return retval;

	}
	// $ANTLR end "textualconvention_macro"

	private sealed partial class textualconvention_macro_namedbit_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedBit result;
		public textualconvention_macro_namedbit_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_textualconvention_macro_namedbit();
	partial void LeaveRule_textualconvention_macro_namedbit();
	// $ANTLR start "textualconvention_macro_namedbit"
	// Smi.g:1115:1: textualconvention_macro_namedbit returns [NamedBit result] : name= LOWER L_PAREN ( MINUS )? num= NUMBER R_PAREN ;
	[GrammarRule("textualconvention_macro_namedbit")]
	private SmiParser.textualconvention_macro_namedbit_return textualconvention_macro_namedbit()
	{
		EnterRule_textualconvention_macro_namedbit();
		EnterRule("textualconvention_macro_namedbit", 72);
		TraceIn("textualconvention_macro_namedbit", 72);
		SmiParser.textualconvention_macro_namedbit_return retval = new SmiParser.textualconvention_macro_namedbit_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken num = default(IToken);
		IToken L_PAREN254 = default(IToken);
		IToken MINUS255 = default(IToken);
		IToken R_PAREN256 = default(IToken);

		CommonTree name_tree = default(CommonTree);
		CommonTree num_tree = default(CommonTree);
		CommonTree L_PAREN254_tree = default(CommonTree);
		CommonTree MINUS255_tree = default(CommonTree);
		CommonTree R_PAREN256_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "textualconvention_macro_namedbit");
		DebugLocation(1115, 1);
		try
		{
			// Smi.g:1116:5: (name= LOWER L_PAREN ( MINUS )? num= NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:1116:7: name= LOWER L_PAREN ( MINUS )? num= NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1116, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_textualconvention_macro_namedbit6618); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1116, 18);
			if (state.backtracking == 0)
			{
				 retval.result = new NamedBit((name!=null?name.Text:null)); 
			}
			DebugLocation(1117, 2);
			L_PAREN254=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_textualconvention_macro_namedbit6623); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN254_tree = (CommonTree)adaptor.Create(L_PAREN254);
			adaptor.AddChild(root_0, L_PAREN254_tree);
			}
			DebugLocation(1117, 10);
			// Smi.g:1117:10: ( MINUS )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_1 = input.LA(1);

			if ((LA101_1==MINUS))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1117:11: MINUS
				{
				DebugLocation(1117, 11);
				MINUS255=(IToken)Match(input,MINUS,Follow._MINUS_in_textualconvention_macro_namedbit6626); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS255_tree = (CommonTree)adaptor.Create(MINUS255);
				adaptor.AddChild(root_0, MINUS255_tree);
				}
				DebugLocation(1117, 17);
				if (state.backtracking == 0)
				{
					 retval.result.Minus = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(1118, 5);
			num=(IToken)Match(input,NUMBER,Follow._NUMBER_in_textualconvention_macro_namedbit6636); if (state.failed) return retval;
			if (state.backtracking == 0) {
			num_tree = (CommonTree)adaptor.Create(num);
			adaptor.AddChild(root_0, num_tree);
			}
			DebugLocation(1118, 13);
			R_PAREN256=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_textualconvention_macro_namedbit6638); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN256_tree = (CommonTree)adaptor.Create(R_PAREN256);
			adaptor.AddChild(root_0, R_PAREN256_tree);
			}
			DebugLocation(1118, 21);
			if (state.backtracking == 0)
			{
				 retval.result.Number = long.Parse((num!=null?num.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textualconvention_macro_namedbit", 72);
			LeaveRule("textualconvention_macro_namedbit", 72);
			LeaveRule_textualconvention_macro_namedbit();
		}
		DebugLocation(1119, 1);
		} finally { DebugExitRule(GrammarFileName, "textualconvention_macro_namedbit"); }
		return retval;

	}
	// $ANTLR end "textualconvention_macro_namedbit"

	private sealed partial class objectgroup_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ObjectGroupMacro result;
		public objectgroup_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_objectgroup_macro();
	partial void LeaveRule_objectgroup_macro();
	// $ANTLR start "objectgroup_macro"
	// Smi.g:1122:1: objectgroup_macro returns [ObjectGroupMacro result] : 'OBJECT-GROUP' 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? ;
	[GrammarRule("objectgroup_macro")]
	private SmiParser.objectgroup_macro_return objectgroup_macro()
	{
		EnterRule_objectgroup_macro();
		EnterRule("objectgroup_macro", 73);
		TraceIn("objectgroup_macro", 73);
		SmiParser.objectgroup_macro_return retval = new SmiParser.objectgroup_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal257 = default(IToken);
		IToken string_literal258 = default(IToken);
		IToken L_BRACE259 = default(IToken);
		IToken COMMA260 = default(IToken);
		IToken R_BRACE261 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken string_literal264 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.status_return s = default(SmiParser.status_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree L_BRACE259_tree = default(CommonTree);
		CommonTree COMMA260_tree = default(CommonTree);
		CommonTree R_BRACE261_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "objectgroup_macro");
		DebugLocation(1122, 1);
		try
		{
			// Smi.g:1123:5: ( 'OBJECT-GROUP' 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:1123:7: 'OBJECT-GROUP' 'OBJECTS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1123, 7);
			string_literal257=(IToken)Match(input,163,Follow._163_in_objectgroup_macro6660); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal257_tree = (CommonTree)adaptor.Create(string_literal257);
			adaptor.AddChild(root_0, string_literal257_tree);
			}
			DebugLocation(1123, 22);
			string_literal258=(IToken)Match(input,166,Follow._166_in_objectgroup_macro6662); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal258_tree = (CommonTree)adaptor.Create(string_literal258);
			adaptor.AddChild(root_0, string_literal258_tree);
			}
			DebugLocation(1123, 32);
			L_BRACE259=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objectgroup_macro6664); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE259_tree = (CommonTree)adaptor.Create(L_BRACE259);
			adaptor.AddChild(root_0, L_BRACE259_tree);
			}
			DebugLocation(1123, 42);
			PushFollow(Follow._value_in_objectgroup_macro6668);
			v1=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
			DebugLocation(1123, 49);
			if (state.backtracking == 0)
			{
				 retval.result = new ObjectGroupMacro((v1!=null?v1.result:default(ISmiValue))); 
			}
			DebugLocation(1124, 2);
			// Smi.g:1124:2: ( COMMA v2= value )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==COMMA))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1124:3: COMMA v2= value
					{
					DebugLocation(1124, 3);
					COMMA260=(IToken)Match(input,COMMA,Follow._COMMA_in_objectgroup_macro6674); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA260_tree = (CommonTree)adaptor.Create(COMMA260);
					adaptor.AddChild(root_0, COMMA260_tree);
					}
					DebugLocation(1124, 11);
					PushFollow(Follow._value_in_objectgroup_macro6678);
					v2=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
					DebugLocation(1124, 18);
					if (state.backtracking == 0)
					{
						 retval.result.Objects.Add((v2!=null?v2.result:default(ISmiValue))); 
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }

			DebugLocation(1124, 57);
			R_BRACE261=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objectgroup_macro6684); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE261_tree = (CommonTree)adaptor.Create(R_BRACE261);
			adaptor.AddChild(root_0, R_BRACE261_tree);
			}
			DebugLocation(1125, 5);
			string_literal262=(IToken)Match(input,184,Follow._184_in_objectgroup_macro6691); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal262_tree = (CommonTree)adaptor.Create(string_literal262);
			adaptor.AddChild(root_0, string_literal262_tree);
			}
			DebugLocation(1125, 15);
			PushFollow(Follow._status_in_objectgroup_macro6695);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1125, 23);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(1126, 2);
			string_literal263=(IToken)Match(input,141,Follow._141_in_objectgroup_macro6700); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal263_tree = (CommonTree)adaptor.Create(string_literal263);
			adaptor.AddChild(root_0, string_literal263_tree);
			}
			DebugLocation(1126, 18);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectgroup_macro6704); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1126, 28);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c1!=null?c1.Text:null); 
			}
			DebugLocation(1127, 2);
			// Smi.g:1127:2: ( 'REFERENCE' c2= C_STRING )?
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, false);
			int LA103_1 = input.LA(1);

			if ((LA103_1==177))
			{
				alt103 = 1;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1127:3: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(1127, 3);
				string_literal264=(IToken)Match(input,177,Follow._177_in_objectgroup_macro6710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (CommonTree)adaptor.Create(string_literal264);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(1127, 17);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectgroup_macro6714); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1127, 27);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectgroup_macro", 73);
			LeaveRule("objectgroup_macro", 73);
			LeaveRule_objectgroup_macro();
		}
		DebugLocation(1128, 1);
		} finally { DebugExitRule(GrammarFileName, "objectgroup_macro"); }
		return retval;

	}
	// $ANTLR end "objectgroup_macro"

	private sealed partial class notificationgroup_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NotificationGroupMacro result;
		public notificationgroup_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_notificationgroup_macro();
	partial void LeaveRule_notificationgroup_macro();
	// $ANTLR start "notificationgroup_macro"
	// Smi.g:1131:1: notificationgroup_macro returns [NotificationGroupMacro result] : 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? ;
	[GrammarRule("notificationgroup_macro")]
	private SmiParser.notificationgroup_macro_return notificationgroup_macro()
	{
		EnterRule_notificationgroup_macro();
		EnterRule("notificationgroup_macro", 74);
		TraceIn("notificationgroup_macro", 74);
		SmiParser.notificationgroup_macro_return retval = new SmiParser.notificationgroup_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken L_BRACE267 = default(IToken);
		IToken COMMA268 = default(IToken);
		IToken R_BRACE269 = default(IToken);
		IToken string_literal270 = default(IToken);
		IToken string_literal271 = default(IToken);
		IToken string_literal272 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.status_return s = default(SmiParser.status_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree L_BRACE267_tree = default(CommonTree);
		CommonTree COMMA268_tree = default(CommonTree);
		CommonTree R_BRACE269_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "notificationgroup_macro");
		DebugLocation(1131, 1);
		try
		{
			// Smi.g:1132:5: ( 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:1132:7: 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE v1= value ( COMMA v2= value )* R_BRACE 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1132, 7);
			string_literal265=(IToken)Match(input,160,Follow._160_in_notificationgroup_macro6739); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal265_tree = (CommonTree)adaptor.Create(string_literal265);
			adaptor.AddChild(root_0, string_literal265_tree);
			}
			DebugLocation(1132, 28);
			string_literal266=(IToken)Match(input,162,Follow._162_in_notificationgroup_macro6741); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal266_tree = (CommonTree)adaptor.Create(string_literal266);
			adaptor.AddChild(root_0, string_literal266_tree);
			}
			DebugLocation(1132, 44);
			L_BRACE267=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_notificationgroup_macro6743); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE267_tree = (CommonTree)adaptor.Create(L_BRACE267);
			adaptor.AddChild(root_0, L_BRACE267_tree);
			}
			DebugLocation(1132, 54);
			PushFollow(Follow._value_in_notificationgroup_macro6747);
			v1=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
			DebugLocation(1132, 61);
			if (state.backtracking == 0)
			{
				 retval.result = new NotificationGroupMacro((v1!=null?v1.result:default(ISmiValue)));
			}
			DebugLocation(1133, 2);
			// Smi.g:1133:2: ( COMMA v2= value )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==COMMA))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1133:3: COMMA v2= value
					{
					DebugLocation(1133, 3);
					COMMA268=(IToken)Match(input,COMMA,Follow._COMMA_in_notificationgroup_macro6753); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA268_tree = (CommonTree)adaptor.Create(COMMA268);
					adaptor.AddChild(root_0, COMMA268_tree);
					}
					DebugLocation(1133, 11);
					PushFollow(Follow._value_in_notificationgroup_macro6757);
					v2=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
					DebugLocation(1133, 18);
					if (state.backtracking == 0)
					{
						 retval.result.Notifications.Add((v2!=null?v2.result:default(ISmiValue))); 
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(1133, 63);
			R_BRACE269=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_notificationgroup_macro6763); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE269_tree = (CommonTree)adaptor.Create(R_BRACE269);
			adaptor.AddChild(root_0, R_BRACE269_tree);
			}
			DebugLocation(1134, 5);
			string_literal270=(IToken)Match(input,184,Follow._184_in_notificationgroup_macro6770); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal270_tree = (CommonTree)adaptor.Create(string_literal270);
			adaptor.AddChild(root_0, string_literal270_tree);
			}
			DebugLocation(1134, 15);
			PushFollow(Follow._status_in_notificationgroup_macro6774);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1134, 23);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(1135, 2);
			string_literal271=(IToken)Match(input,141,Follow._141_in_notificationgroup_macro6779); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal271_tree = (CommonTree)adaptor.Create(string_literal271);
			adaptor.AddChild(root_0, string_literal271_tree);
			}
			DebugLocation(1135, 18);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationgroup_macro6783); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1135, 28);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c1!=null?c1.Text:null); 
			}
			DebugLocation(1136, 2);
			// Smi.g:1136:2: ( 'REFERENCE' c2= C_STRING )?
			int alt105=2;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			int LA105_1 = input.LA(1);

			if ((LA105_1==177))
			{
				alt105 = 1;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1136:3: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(1136, 3);
				string_literal272=(IToken)Match(input,177,Follow._177_in_notificationgroup_macro6789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal272_tree = (CommonTree)adaptor.Create(string_literal272);
				adaptor.AddChild(root_0, string_literal272_tree);
				}
				DebugLocation(1136, 17);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationgroup_macro6793); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1136, 27);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationgroup_macro", 74);
			LeaveRule("notificationgroup_macro", 74);
			LeaveRule_notificationgroup_macro();
		}
		DebugLocation(1137, 1);
		} finally { DebugExitRule(GrammarFileName, "notificationgroup_macro"); }
		return retval;

	}
	// $ANTLR end "notificationgroup_macro"

	private sealed partial class modulecompliance_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ModuleComplianceMacro result;
		public modulecompliance_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_modulecompliance_macro();
	partial void LeaveRule_modulecompliance_macro();
	// $ANTLR start "modulecompliance_macro"
	// Smi.g:1140:1: modulecompliance_macro returns [ModuleComplianceMacro result] : 'MODULE-COMPLIANCE' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? (m= modulecompliance_macro_module )+ ;
	[GrammarRule("modulecompliance_macro")]
	private SmiParser.modulecompliance_macro_return modulecompliance_macro()
	{
		EnterRule_modulecompliance_macro();
		EnterRule("modulecompliance_macro", 75);
		TraceIn("modulecompliance_macro", 75);
		SmiParser.modulecompliance_macro_return retval = new SmiParser.modulecompliance_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken string_literal276 = default(IToken);
		SmiParser.status_return s = default(SmiParser.status_return);
		SmiParser.modulecompliance_macro_module_return m = default(SmiParser.modulecompliance_macro_module_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro");
		DebugLocation(1140, 1);
		try
		{
			// Smi.g:1141:5: ( 'MODULE-COMPLIANCE' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? (m= modulecompliance_macro_module )+ )
			DebugEnterAlt(1);
			// Smi.g:1141:7: 'MODULE-COMPLIANCE' 'STATUS' s= status 'DESCRIPTION' c1= C_STRING ( 'REFERENCE' c2= C_STRING )? (m= modulecompliance_macro_module )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1141, 7);
			string_literal273=(IToken)Match(input,158,Follow._158_in_modulecompliance_macro6818); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal273_tree = (CommonTree)adaptor.Create(string_literal273);
			adaptor.AddChild(root_0, string_literal273_tree);
			}
			DebugLocation(1141, 27);
			string_literal274=(IToken)Match(input,184,Follow._184_in_modulecompliance_macro6820); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal274_tree = (CommonTree)adaptor.Create(string_literal274);
			adaptor.AddChild(root_0, string_literal274_tree);
			}
			DebugLocation(1141, 37);
			PushFollow(Follow._status_in_modulecompliance_macro6824);
			s=status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1142, 5);
			string_literal275=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro6830); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal275_tree = (CommonTree)adaptor.Create(string_literal275);
			adaptor.AddChild(root_0, string_literal275_tree);
			}
			DebugLocation(1142, 21);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro6834); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1142, 31);
			if (state.backtracking == 0)
			{
				 retval.result = new ModuleComplianceMacro((s!=null?s.result:default(EntityStatus)), (c1!=null?c1.Text:null)); 
			}
			DebugLocation(1143, 2);
			// Smi.g:1143:2: ( 'REFERENCE' c2= C_STRING )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			int LA106_1 = input.LA(1);

			if ((LA106_1==177))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1143:3: 'REFERENCE' c2= C_STRING
				{
				DebugLocation(1143, 3);
				string_literal276=(IToken)Match(input,177,Follow._177_in_modulecompliance_macro6840); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal276_tree = (CommonTree)adaptor.Create(string_literal276);
				adaptor.AddChild(root_0, string_literal276_tree);
				}
				DebugLocation(1143, 17);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro6844); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1143, 27);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(1144, 2);
			// Smi.g:1144:2: (m= modulecompliance_macro_module )+
			int cnt107=0;
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==157))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1144:3: m= modulecompliance_macro_module
					{
					DebugLocation(1144, 4);
					PushFollow(Follow._modulecompliance_macro_module_in_modulecompliance_macro6855);
					m=modulecompliance_macro_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);
					DebugLocation(1144, 35);
					if (state.backtracking == 0)
					{
						 retval.result.Modules.Add((m!=null?m.result:default(ModuleCompliance))); 
					}

					}
					break;

				default:
					if (cnt107 >= 1)
						goto loop107;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee107 = new EarlyExitException( 107, input );
					DebugRecognitionException(eee107);
					throw eee107;
				}
				cnt107++;
			}
			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro", 75);
			LeaveRule("modulecompliance_macro", 75);
			LeaveRule_modulecompliance_macro();
		}
		DebugLocation(1145, 1);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro"

	private sealed partial class status_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public EntityStatus result;
		public status_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_status();
	partial void LeaveRule_status();
	// $ANTLR start "status"
	// Smi.g:1147:1: status returns [EntityStatus result] : l= LOWER ;
	[GrammarRule("status")]
	private SmiParser.status_return status()
	{
		EnterRule_status();
		EnterRule("status", 76);
		TraceIn("status", 76);
		SmiParser.status_return retval = new SmiParser.status_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "status");
		DebugLocation(1147, 4);
		try
		{
			// Smi.g:1148:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1148:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1148, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_status6880); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1148, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current")) retval.result = EntityStatus.Current;
				               else if (l.Text == ("deprecated")) retval.result = EntityStatus.Deprecated;
				               else if (l.Text == ("obsolete")) retval.result = EntityStatus.Obsolete;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("status", 76);
			LeaveRule("status", 76);
			LeaveRule_status();
		}
		DebugLocation(1152, 4);
		} finally { DebugExitRule(GrammarFileName, "status"); }
		return retval;

	}
	// $ANTLR end "status"

	private sealed partial class modulecompliance_macro_module_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ModuleCompliance result = new ModuleCompliance();
		public modulecompliance_macro_module_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_modulecompliance_macro_module();
	partial void LeaveRule_modulecompliance_macro_module();
	// $ANTLR start "modulecompliance_macro_module"
	// Smi.g:1154:1: modulecompliance_macro_module returns [ModuleCompliance result = new ModuleCompliance()] : 'MODULE' ( ( UPPER )=>name= UPPER ( ( value )=>v1= value )? )? ( 'MANDATORY-GROUPS' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? (c= modulecompliance_macro_compliance )* ;
	[GrammarRule("modulecompliance_macro_module")]
	private SmiParser.modulecompliance_macro_module_return modulecompliance_macro_module()
	{
		EnterRule_modulecompliance_macro_module();
		EnterRule("modulecompliance_macro_module", 77);
		TraceIn("modulecompliance_macro_module", 77);
		SmiParser.modulecompliance_macro_module_return retval = new SmiParser.modulecompliance_macro_module_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken string_literal277 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken L_BRACE279 = default(IToken);
		IToken COMMA280 = default(IToken);
		IToken R_BRACE281 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.value_return v3 = default(SmiParser.value_return);
		SmiParser.modulecompliance_macro_compliance_return c = default(SmiParser.modulecompliance_macro_compliance_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree string_literal277_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree L_BRACE279_tree = default(CommonTree);
		CommonTree COMMA280_tree = default(CommonTree);
		CommonTree R_BRACE281_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_module");
		DebugLocation(1154, 1);
		try
		{
			// Smi.g:1155:5: ( 'MODULE' ( ( UPPER )=>name= UPPER ( ( value )=>v1= value )? )? ( 'MANDATORY-GROUPS' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? (c= modulecompliance_macro_compliance )* )
			DebugEnterAlt(1);
			// Smi.g:1155:7: 'MODULE' ( ( UPPER )=>name= UPPER ( ( value )=>v1= value )? )? ( 'MANDATORY-GROUPS' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? (c= modulecompliance_macro_compliance )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1155, 7);
			string_literal277=(IToken)Match(input,157,Follow._157_in_modulecompliance_macro_module6903); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal277_tree = (CommonTree)adaptor.Create(string_literal277);
			adaptor.AddChild(root_0, string_literal277_tree);
			}
			DebugLocation(1155, 16);
			// Smi.g:1155:16: ( ( UPPER )=>name= UPPER ( ( value )=>v1= value )? )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			try
			{
				alt109 = dfa109.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1155:17: ( UPPER )=>name= UPPER ( ( value )=>v1= value )?
				{
				DebugLocation(1155, 32);
				name=(IToken)Match(input,UPPER,Follow._UPPER_in_modulecompliance_macro_module6914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				name_tree = (CommonTree)adaptor.Create(name);
				adaptor.AddChild(root_0, name_tree);
				}
				DebugLocation(1155, 39);
				if (state.backtracking == 0)
				{
					 retval.result.Name = (name!=null?name.Text:null); 
				}
				DebugLocation(1156, 2);
				// Smi.g:1156:2: ( ( value )=>v1= value )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				try
				{
					alt108 = dfa108.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1156:3: ( value )=>v1= value
					{
					DebugLocation(1156, 16);
					PushFollow(Follow._value_in_modulecompliance_macro_module6928);
					v1=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
					DebugLocation(1156, 23);
					if (state.backtracking == 0)
					{
						 retval.result.Value = (v1!=null?v1.result:default(ISmiValue)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(108); }


				}
				break;

			}
			} finally { DebugExitSubRule(109); }

			DebugLocation(1157, 5);
			// Smi.g:1157:5: ( 'MANDATORY-GROUPS' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==154))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1157:6: 'MANDATORY-GROUPS' L_BRACE v2= value ( COMMA v3= value )* R_BRACE
				{
				DebugLocation(1157, 6);
				string_literal278=(IToken)Match(input,154,Follow._154_in_modulecompliance_macro_module6943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal278_tree = (CommonTree)adaptor.Create(string_literal278);
				adaptor.AddChild(root_0, string_literal278_tree);
				}
				DebugLocation(1157, 25);
				L_BRACE279=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_modulecompliance_macro_module6945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE279_tree = (CommonTree)adaptor.Create(L_BRACE279);
				adaptor.AddChild(root_0, L_BRACE279_tree);
				}
				DebugLocation(1157, 35);
				PushFollow(Follow._value_in_modulecompliance_macro_module6949);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(1157, 42);
				if (state.backtracking == 0)
				{
					 retval.result.MandatoryGroups.Add((v2!=null?v2.result:default(ISmiValue))); 
				}
				DebugLocation(1158, 2);
				// Smi.g:1158:2: ( COMMA v3= value )*
				try { DebugEnterSubRule(110);
				while (true)
				{
					int alt110=2;
					try { DebugEnterDecision(110, false);
					int LA110_1 = input.LA(1);

					if ((LA110_1==COMMA))
					{
						alt110 = 1;
					}


					} finally { DebugExitDecision(110); }
					switch ( alt110 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1158:3: COMMA v3= value
						{
						DebugLocation(1158, 3);
						COMMA280=(IToken)Match(input,COMMA,Follow._COMMA_in_modulecompliance_macro_module6955); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA280_tree = (CommonTree)adaptor.Create(COMMA280);
						adaptor.AddChild(root_0, COMMA280_tree);
						}
						DebugLocation(1158, 11);
						PushFollow(Follow._value_in_modulecompliance_macro_module6959);
						v3=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, v3.Tree);
						DebugLocation(1158, 18);
						if (state.backtracking == 0)
						{
							 retval.result.MandarotyGroups.Add((v3!=null?v3.result:default(ISmiValue))); 
						}

						}
						break;

					default:
						goto loop110;
					}
				}

				loop110:
					;

				} finally { DebugExitSubRule(110); }

				DebugLocation(1158, 65);
				R_BRACE281=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_modulecompliance_macro_module6965); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE281_tree = (CommonTree)adaptor.Create(R_BRACE281);
				adaptor.AddChild(root_0, R_BRACE281_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(111); }

			DebugLocation(1159, 5);
			// Smi.g:1159:5: (c= modulecompliance_macro_compliance )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==OBJECT_KW))
				{
					int LA112_2 = input.LA(2);

					if ((LA112_2==B_STRING||LA112_2==C_STRING||LA112_2==FALSE_KW||LA112_2==H_STRING||(LA112_2>=LOWER && LA112_2<=L_BRACE)||(LA112_2>=MINUS && LA112_2<=MINUS_INFINITY_KW)||(LA112_2>=NULL_KW && LA112_2<=NUMBER)||LA112_2==PLUS_INFINITY_KW||LA112_2==TRUE_KW||LA112_2==UPPER))
					{
						alt112 = 1;
					}


				}
				else if ((LA112_1==149))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1159:6: c= modulecompliance_macro_compliance
					{
					DebugLocation(1159, 7);
					PushFollow(Follow._modulecompliance_macro_compliance_in_modulecompliance_macro_module6976);
					c=modulecompliance_macro_compliance();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
					DebugLocation(1159, 42);
					if (state.backtracking == 0)
					{
						 retval.result.Compliances.Add((c!=null?c.result:default(Compliance))); 
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_module", 77);
			LeaveRule("modulecompliance_macro_module", 77);
			LeaveRule_modulecompliance_macro_module();
		}
		DebugLocation(1160, 1);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_module"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_module"

	private sealed partial class modulecompliance_macro_compliance_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Compliance result;
		public modulecompliance_macro_compliance_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_modulecompliance_macro_compliance();
	partial void LeaveRule_modulecompliance_macro_compliance();
	// $ANTLR start "modulecompliance_macro_compliance"
	// Smi.g:1162:1: modulecompliance_macro_compliance returns [Compliance result] : ( 'GROUP' v1= value 'DESCRIPTION' c1= C_STRING | 'OBJECT' v2= value ( 'SYNTAX' s= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'MIN-ACCESS' a= modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' a2= modulecompliance_macro_pibaccess )? 'DESCRIPTION' c2= C_STRING );
	[GrammarRule("modulecompliance_macro_compliance")]
	private SmiParser.modulecompliance_macro_compliance_return modulecompliance_macro_compliance()
	{
		EnterRule_modulecompliance_macro_compliance();
		EnterRule("modulecompliance_macro_compliance", 78);
		TraceIn("modulecompliance_macro_compliance", 78);
		SmiParser.modulecompliance_macro_compliance_return retval = new SmiParser.modulecompliance_macro_compliance_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken string_literal282 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken string_literal284 = default(IToken);
		IToken string_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken string_literal289 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.syntax_return s = default(SmiParser.syntax_return);
		SmiParser.syntax_return s2 = default(SmiParser.syntax_return);
		SmiParser.modulecompliance_macro_access_return a = default(SmiParser.modulecompliance_macro_access_return);
		SmiParser.modulecompliance_macro_pibaccess_return a2 = default(SmiParser.modulecompliance_macro_pibaccess_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree string_literal287_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree string_literal289_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_compliance");
		DebugLocation(1162, 1);
		try
		{
			// Smi.g:1163:5: ( 'GROUP' v1= value 'DESCRIPTION' c1= C_STRING | 'OBJECT' v2= value ( 'SYNTAX' s= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'MIN-ACCESS' a= modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' a2= modulecompliance_macro_pibaccess )? 'DESCRIPTION' c2= C_STRING )
			int alt117=2;
			try { DebugEnterDecision(117, false);
			int LA117_1 = input.LA(1);

			if ((LA117_1==149))
			{
				alt117 = 1;
			}
			else if ((LA117_1==OBJECT_KW))
			{
				alt117 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1163:7: 'GROUP' v1= value 'DESCRIPTION' c1= C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1163, 7);
				string_literal282=(IToken)Match(input,149,Follow._149_in_modulecompliance_macro_compliance6999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal282_tree = (CommonTree)adaptor.Create(string_literal282);
				adaptor.AddChild(root_0, string_literal282_tree);
				}
				DebugLocation(1163, 17);
				PushFollow(Follow._value_in_modulecompliance_macro_compliance7003);
				v1=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
				DebugLocation(1163, 24);
				string_literal283=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro_compliance7005); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal283_tree = (CommonTree)adaptor.Create(string_literal283);
				adaptor.AddChild(root_0, string_literal283_tree);
				}
				DebugLocation(1163, 40);
				c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro_compliance7009); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c1_tree = (CommonTree)adaptor.Create(c1);
				adaptor.AddChild(root_0, c1_tree);
				}
				DebugLocation(1163, 50);
				if (state.backtracking == 0)
				{
					 retval.result = new GroupCompliance((v1!=null?v1.result:default(ISmiValue)), (c1!=null?c1.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1164:7: 'OBJECT' v2= value ( 'SYNTAX' s= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'MIN-ACCESS' a= modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' a2= modulecompliance_macro_pibaccess )? 'DESCRIPTION' c2= C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1164, 7);
				string_literal284=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_modulecompliance_macro_compliance7019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal284_tree = (CommonTree)adaptor.Create(string_literal284);
				adaptor.AddChild(root_0, string_literal284_tree);
				}
				DebugLocation(1164, 18);
				PushFollow(Follow._value_in_modulecompliance_macro_compliance7023);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(1164, 25);
				if (state.backtracking == 0)
				{
					 retval.result = new ObjectCompliance((v2!=null?v2.result:default(ISmiValue))); 
				}
				DebugLocation(1165, 5);
				// Smi.g:1165:5: ( 'SYNTAX' s= syntax )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==187))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1165:6: 'SYNTAX' s= syntax
					{
					DebugLocation(1165, 6);
					string_literal285=(IToken)Match(input,187,Follow._187_in_modulecompliance_macro_compliance7033); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal285_tree = (CommonTree)adaptor.Create(string_literal285);
					adaptor.AddChild(root_0, string_literal285_tree);
					}
					DebugLocation(1165, 16);
					PushFollow(Follow._syntax_in_modulecompliance_macro_compliance7037);
					s=syntax();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
					DebugLocation(1165, 24);
					if (state.backtracking == 0)
					{
						 retval.result.Syntax = (s!=null?s.result:default(Syntax)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(1166, 5);
				// Smi.g:1166:5: ( 'WRITE-SYNTAX' s2= syntax )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==197))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1166:6: 'WRITE-SYNTAX' s2= syntax
					{
					DebugLocation(1166, 6);
					string_literal286=(IToken)Match(input,197,Follow._197_in_modulecompliance_macro_compliance7048); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal286_tree = (CommonTree)adaptor.Create(string_literal286);
					adaptor.AddChild(root_0, string_literal286_tree);
					}
					DebugLocation(1166, 23);
					PushFollow(Follow._syntax_in_modulecompliance_macro_compliance7052);
					s2=syntax();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, s2.Tree);
					DebugLocation(1166, 31);
					if (state.backtracking == 0)
					{
						 retval.result.WriteSyntax = (s2!=null?s2.result:default(Syntax)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(1167, 5);
				// Smi.g:1167:5: ( 'MIN-ACCESS' a= modulecompliance_macro_access )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==156))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1167:6: 'MIN-ACCESS' a= modulecompliance_macro_access
					{
					DebugLocation(1167, 6);
					string_literal287=(IToken)Match(input,156,Follow._156_in_modulecompliance_macro_compliance7069); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal287_tree = (CommonTree)adaptor.Create(string_literal287);
					adaptor.AddChild(root_0, string_literal287_tree);
					}
					DebugLocation(1167, 20);
					PushFollow(Follow._modulecompliance_macro_access_in_modulecompliance_macro_compliance7073);
					a=modulecompliance_macro_access();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, a.Tree);
					DebugLocation(1167, 51);
					if (state.backtracking == 0)
					{
						 retval.result.MinAccess = (a!=null?a.result:default(Access)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(1168, 5);
				// Smi.g:1168:5: ( 'PIB-MIN-ACCESS' a2= modulecompliance_macro_pibaccess )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==171))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1168:6: 'PIB-MIN-ACCESS' a2= modulecompliance_macro_pibaccess
					{
					DebugLocation(1168, 6);
					string_literal288=(IToken)Match(input,171,Follow._171_in_modulecompliance_macro_compliance7085); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal288_tree = (CommonTree)adaptor.Create(string_literal288);
					adaptor.AddChild(root_0, string_literal288_tree);
					}
					DebugLocation(1168, 25);
					PushFollow(Follow._modulecompliance_macro_pibaccess_in_modulecompliance_macro_compliance7089);
					a2=modulecompliance_macro_pibaccess();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, a2.Tree);
					DebugLocation(1168, 59);
					if (state.backtracking == 0)
					{
						 retval.result.PibMinAccess = (a2!=null?a2.result:default(PibAccess)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(1169, 5);
				string_literal289=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro_compliance7104); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal289_tree = (CommonTree)adaptor.Create(string_literal289);
				adaptor.AddChild(root_0, string_literal289_tree);
				}
				DebugLocation(1169, 21);
				c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro_compliance7108); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c2_tree = (CommonTree)adaptor.Create(c2);
				adaptor.AddChild(root_0, c2_tree);
				}
				DebugLocation(1169, 31);
				if (state.backtracking == 0)
				{
					 retval.result.Description = (c2!=null?c2.Text:null); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_compliance", 78);
			LeaveRule("modulecompliance_macro_compliance", 78);
			LeaveRule_modulecompliance_macro_compliance();
		}
		DebugLocation(1170, 1);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_compliance"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_compliance"

	private sealed partial class modulecompliance_macro_access_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Access result;
		public modulecompliance_macro_access_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_modulecompliance_macro_access();
	partial void LeaveRule_modulecompliance_macro_access();
	// $ANTLR start "modulecompliance_macro_access"
	// Smi.g:1172:1: modulecompliance_macro_access returns [Access result] : l= LOWER ;
	[GrammarRule("modulecompliance_macro_access")]
	private SmiParser.modulecompliance_macro_access_return modulecompliance_macro_access()
	{
		EnterRule_modulecompliance_macro_access();
		EnterRule("modulecompliance_macro_access", 79);
		TraceIn("modulecompliance_macro_access", 79);
		SmiParser.modulecompliance_macro_access_return retval = new SmiParser.modulecompliance_macro_access_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_access");
		DebugLocation(1172, 4);
		try
		{
			// Smi.g:1173:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1173:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1173, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_access7130); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1173, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-accessible")) retval.result = Access.NotAccessible;
				               else if (l.Text == ("accessible-for-notify")) retval.result = Access.AccessibleForNotify;
				               else if (l.Text == ("read-only")) retval.result = Access.ReadOnly; 
				               else if (l.Text == ("read-write")) retval.result = Access.ReadWrite;
				               else if (l.Text == ("read-create")) retval.result = Access.ReadCreate;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_access", 79);
			LeaveRule("modulecompliance_macro_access", 79);
			LeaveRule_modulecompliance_macro_access();
		}
		DebugLocation(1179, 4);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_access"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_access"

	private sealed partial class modulecompliance_macro_pibaccess_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public PibAccess result;
		public modulecompliance_macro_pibaccess_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_modulecompliance_macro_pibaccess();
	partial void LeaveRule_modulecompliance_macro_pibaccess();
	// $ANTLR start "modulecompliance_macro_pibaccess"
	// Smi.g:1181:1: modulecompliance_macro_pibaccess returns [PibAccess result] : l= LOWER ;
	[GrammarRule("modulecompliance_macro_pibaccess")]
	private SmiParser.modulecompliance_macro_pibaccess_return modulecompliance_macro_pibaccess()
	{
		EnterRule_modulecompliance_macro_pibaccess();
		EnterRule("modulecompliance_macro_pibaccess", 80);
		TraceIn("modulecompliance_macro_pibaccess", 80);
		SmiParser.modulecompliance_macro_pibaccess_return retval = new SmiParser.modulecompliance_macro_pibaccess_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_pibaccess");
		DebugLocation(1181, 1);
		try
		{
			// Smi.g:1182:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1182:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1182, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_pibaccess7155); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1182, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-accessible")) retval.result = PibAccess.NotAccessible;
				               else if (l.Text == ("install")) retval.result = PibAccess.Install;
				               else if (l.Text == ("notify")) retval.result = PibAccess.Notify;
				               else if (l.Text == ("install-notify")) retval.result = PibAccess.InstallNotify;
				               else if (l.Text == ("report-only")) retval.result = PibAccess.ReportOnly;
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_pibaccess", 80);
			LeaveRule("modulecompliance_macro_pibaccess", 80);
			LeaveRule_modulecompliance_macro_pibaccess();
		}
		DebugLocation(1188, 1);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_pibaccess"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_pibaccess"

	private sealed partial class agentcapabilities_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public AgentCapabilitiesMacro result;
		public agentcapabilities_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_agentcapabilities_macro();
	partial void LeaveRule_agentcapabilities_macro();
	// $ANTLR start "agentcapabilities_macro"
	// Smi.g:1191:1: agentcapabilities_macro returns [AgentCapabilitiesMacro result] : 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' c1= C_STRING 'STATUS' s= agentcapabilities_macro_status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? (m= agentcapabilities_macro_module )* ;
	[GrammarRule("agentcapabilities_macro")]
	private SmiParser.agentcapabilities_macro_return agentcapabilities_macro()
	{
		EnterRule_agentcapabilities_macro();
		EnterRule("agentcapabilities_macro", 81);
		TraceIn("agentcapabilities_macro", 81);
		SmiParser.agentcapabilities_macro_return retval = new SmiParser.agentcapabilities_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken c1 = default(IToken);
		IToken c2 = default(IToken);
		IToken c3 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken string_literal293 = default(IToken);
		IToken string_literal294 = default(IToken);
		SmiParser.agentcapabilities_macro_status_return s = default(SmiParser.agentcapabilities_macro_status_return);
		SmiParser.agentcapabilities_macro_module_return m = default(SmiParser.agentcapabilities_macro_module_return);

		CommonTree c1_tree = default(CommonTree);
		CommonTree c2_tree = default(CommonTree);
		CommonTree c3_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree string_literal293_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro");
		DebugLocation(1191, 1);
		try
		{
			// Smi.g:1192:5: ( 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' c1= C_STRING 'STATUS' s= agentcapabilities_macro_status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? (m= agentcapabilities_macro_module )* )
			DebugEnterAlt(1);
			// Smi.g:1192:7: 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' c1= C_STRING 'STATUS' s= agentcapabilities_macro_status 'DESCRIPTION' c2= C_STRING ( 'REFERENCE' c3= C_STRING )? (m= agentcapabilities_macro_module )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1192, 7);
			string_literal290=(IToken)Match(input,131,Follow._131_in_agentcapabilities_macro7177); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal290_tree = (CommonTree)adaptor.Create(string_literal290);
			adaptor.AddChild(root_0, string_literal290_tree);
			}
			DebugLocation(1192, 28);
			string_literal291=(IToken)Match(input,175,Follow._175_in_agentcapabilities_macro7179); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal291_tree = (CommonTree)adaptor.Create(string_literal291);
			adaptor.AddChild(root_0, string_literal291_tree);
			}
			DebugLocation(1192, 48);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro7183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1192, 58);
			if (state.backtracking == 0)
			{
				 retval.result = new AgentCapabilitiesMacro((c1!=null?c1.Text:null)); 
			}
			DebugLocation(1193, 2);
			string_literal292=(IToken)Match(input,184,Follow._184_in_agentcapabilities_macro7188); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal292_tree = (CommonTree)adaptor.Create(string_literal292);
			adaptor.AddChild(root_0, string_literal292_tree);
			}
			DebugLocation(1193, 12);
			PushFollow(Follow._agentcapabilities_macro_status_in_agentcapabilities_macro7192);
			s=agentcapabilities_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, s.Tree);
			DebugLocation(1193, 44);
			if (state.backtracking == 0)
			{
				 retval.result.Status = (s!=null?s.result:default(EntityStatus)); 
			}
			DebugLocation(1194, 2);
			string_literal293=(IToken)Match(input,141,Follow._141_in_agentcapabilities_macro7197); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal293_tree = (CommonTree)adaptor.Create(string_literal293);
			adaptor.AddChild(root_0, string_literal293_tree);
			}
			DebugLocation(1194, 18);
			c2=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro7201); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c2_tree = (CommonTree)adaptor.Create(c2);
			adaptor.AddChild(root_0, c2_tree);
			}
			DebugLocation(1194, 28);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c2!=null?c2.Text:null); 
			}
			DebugLocation(1195, 2);
			// Smi.g:1195:2: ( 'REFERENCE' c3= C_STRING )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_1 = input.LA(1);

			if ((LA118_1==177))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1195:3: 'REFERENCE' c3= C_STRING
				{
				DebugLocation(1195, 3);
				string_literal294=(IToken)Match(input,177,Follow._177_in_agentcapabilities_macro7207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal294_tree = (CommonTree)adaptor.Create(string_literal294);
				adaptor.AddChild(root_0, string_literal294_tree);
				}
				DebugLocation(1195, 17);
				c3=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro7211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				c3_tree = (CommonTree)adaptor.Create(c3);
				adaptor.AddChild(root_0, c3_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(118); }

			DebugLocation(1195, 29);
			if (state.backtracking == 0)
			{
				 retval.result.Reference = (c3!=null?c3.Text:null); 
			}
			DebugLocation(1196, 2);
			// Smi.g:1196:2: (m= agentcapabilities_macro_module )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==186))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1196:3: m= agentcapabilities_macro_module
					{
					DebugLocation(1196, 4);
					PushFollow(Follow._agentcapabilities_macro_module_in_agentcapabilities_macro7221);
					m=agentcapabilities_macro_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree);
					DebugLocation(1196, 36);
					if (state.backtracking == 0)
					{
						 retval.result.Modules.Add((m!=null?m.result:default(AgentCapabilitiesModule))); 
					}

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro", 81);
			LeaveRule("agentcapabilities_macro", 81);
			LeaveRule_agentcapabilities_macro();
		}
		DebugLocation(1197, 1);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro"

	private sealed partial class agentcapabilities_macro_status_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public EntityStatus result;
		public agentcapabilities_macro_status_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_agentcapabilities_macro_status();
	partial void LeaveRule_agentcapabilities_macro_status();
	// $ANTLR start "agentcapabilities_macro_status"
	// Smi.g:1199:1: agentcapabilities_macro_status returns [EntityStatus result] : l= LOWER ;
	[GrammarRule("agentcapabilities_macro_status")]
	private SmiParser.agentcapabilities_macro_status_return agentcapabilities_macro_status()
	{
		EnterRule_agentcapabilities_macro_status();
		EnterRule("agentcapabilities_macro_status", 82);
		TraceIn("agentcapabilities_macro_status", 82);
		SmiParser.agentcapabilities_macro_status_return retval = new SmiParser.agentcapabilities_macro_status_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_status");
		DebugLocation(1199, 64);
		try
		{
			// Smi.g:1200:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1200:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1200, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_status7245); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1200, 15);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current")) retval.result = EntityStatus.Current;
				               else if (l.Text == ("obsolete")) retval.result =EntityStatus.Obsolete; 
				               else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_status", 82);
			LeaveRule("agentcapabilities_macro_status", 82);
			LeaveRule_agentcapabilities_macro_status();
		}
		DebugLocation(1202, 64);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_status"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_status"

	private sealed partial class agentcapabilities_macro_module_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public AgentCapabilitiesModule result;
		public agentcapabilities_macro_module_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_agentcapabilities_macro_module();
	partial void LeaveRule_agentcapabilities_macro_module();
	// $ANTLR start "agentcapabilities_macro_module"
	// Smi.g:1204:1: agentcapabilities_macro_module returns [AgentCapabilitiesModule result] : 'SUPPORTS' name= LOWER (v1= value )? 'INCLUDES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE (va= agentcapabilities_macro_variation )* ;
	[GrammarRule("agentcapabilities_macro_module")]
	private SmiParser.agentcapabilities_macro_module_return agentcapabilities_macro_module()
	{
		EnterRule_agentcapabilities_macro_module();
		EnterRule("agentcapabilities_macro_module", 83);
		TraceIn("agentcapabilities_macro_module", 83);
		SmiParser.agentcapabilities_macro_module_return retval = new SmiParser.agentcapabilities_macro_module_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken string_literal296 = default(IToken);
		IToken L_BRACE297 = default(IToken);
		IToken COMMA298 = default(IToken);
		IToken R_BRACE299 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.value_return v3 = default(SmiParser.value_return);
		SmiParser.agentcapabilities_macro_variation_return va = default(SmiParser.agentcapabilities_macro_variation_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree L_BRACE297_tree = default(CommonTree);
		CommonTree COMMA298_tree = default(CommonTree);
		CommonTree R_BRACE299_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_module");
		DebugLocation(1204, 1);
		try
		{
			// Smi.g:1205:5: ( 'SUPPORTS' name= LOWER (v1= value )? 'INCLUDES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE (va= agentcapabilities_macro_variation )* )
			DebugEnterAlt(1);
			// Smi.g:1205:7: 'SUPPORTS' name= LOWER (v1= value )? 'INCLUDES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE (va= agentcapabilities_macro_variation )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1205, 7);
			string_literal295=(IToken)Match(input,186,Follow._186_in_agentcapabilities_macro_module7263); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal295_tree = (CommonTree)adaptor.Create(string_literal295);
			adaptor.AddChild(root_0, string_literal295_tree);
			}
			DebugLocation(1205, 22);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_module7267); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1205, 29);
			if (state.backtracking == 0)
			{
				 retval.result = new AgentCapabilitiesModule((name!=null?name.Text:null)); 
			}
			DebugLocation(1206, 2);
			// Smi.g:1206:2: (v1= value )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_1 = input.LA(1);

			if ((LA120_1==B_STRING||LA120_1==C_STRING||LA120_1==FALSE_KW||LA120_1==H_STRING||(LA120_1>=LOWER && LA120_1<=L_BRACE)||(LA120_1>=MINUS && LA120_1<=MINUS_INFINITY_KW)||(LA120_1>=NULL_KW && LA120_1<=NUMBER)||LA120_1==PLUS_INFINITY_KW||LA120_1==TRUE_KW||LA120_1==UPPER))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1206:3: v1= value
				{
				DebugLocation(1206, 5);
				PushFollow(Follow._value_in_agentcapabilities_macro_module7275);
				v1=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(1206, 14);
			if (state.backtracking == 0)
			{
				 retval.result.Value = (v1!=null?v1.result:default(ISmiValue)); 
			}
			DebugLocation(1207, 5);
			string_literal296=(IToken)Match(input,INCLUDES_KW,Follow._INCLUDES_KW_in_agentcapabilities_macro_module7285); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal296_tree = (CommonTree)adaptor.Create(string_literal296);
			adaptor.AddChild(root_0, string_literal296_tree);
			}
			DebugLocation(1207, 16);
			L_BRACE297=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_module7287); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE297_tree = (CommonTree)adaptor.Create(L_BRACE297);
			adaptor.AddChild(root_0, L_BRACE297_tree);
			}
			DebugLocation(1207, 26);
			PushFollow(Follow._value_in_agentcapabilities_macro_module7291);
			v2=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
			DebugLocation(1207, 33);
			if (state.backtracking == 0)
			{
				 retval.result.Includes.Add((v2!=null?v2.result:default(ISmiValue))); 
			}
			DebugLocation(1208, 2);
			// Smi.g:1208:2: ( COMMA v3= value )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==COMMA))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1208:3: COMMA v3= value
					{
					DebugLocation(1208, 3);
					COMMA298=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_module7297); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA298_tree = (CommonTree)adaptor.Create(COMMA298);
					adaptor.AddChild(root_0, COMMA298_tree);
					}
					DebugLocation(1208, 11);
					PushFollow(Follow._value_in_agentcapabilities_macro_module7301);
					v3=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v3.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }

			DebugLocation(1208, 20);
			R_BRACE299=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_module7305); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE299_tree = (CommonTree)adaptor.Create(R_BRACE299);
			adaptor.AddChild(root_0, R_BRACE299_tree);
			}
			DebugLocation(1208, 28);
			if (state.backtracking == 0)
			{
				 retval.result.Includes.Add((v3!=null?v3.result:default(ISmiValue))); 
			}
			DebugLocation(1209, 2);
			// Smi.g:1209:2: (va= agentcapabilities_macro_variation )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_1 = input.LA(1);

				if ((LA122_1==196))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1209:3: va= agentcapabilities_macro_variation
					{
					DebugLocation(1209, 5);
					PushFollow(Follow._agentcapabilities_macro_variation_in_agentcapabilities_macro_module7313);
					va=agentcapabilities_macro_variation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, va.Tree);
					DebugLocation(1209, 40);
					if (state.backtracking == 0)
					{
						 retval.result.Variations.Add((va!=null?va.result:default(Variantion))); 
					}

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_module", 83);
			LeaveRule("agentcapabilities_macro_module", 83);
			LeaveRule_agentcapabilities_macro_module();
		}
		DebugLocation(1210, 1);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_module"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_module"

	private sealed partial class agentcapabilities_macro_variation_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Variantion result;
		public agentcapabilities_macro_variation_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_agentcapabilities_macro_variation();
	partial void LeaveRule_agentcapabilities_macro_variation();
	// $ANTLR start "agentcapabilities_macro_variation"
	// Smi.g:1212:1: agentcapabilities_macro_variation returns [Variantion result] : 'VARIATION' v1= value ( 'SYNTAX' s1= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'ACCESS' a1= agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value ) )? 'DESCRIPTION' c1= C_STRING ;
	[GrammarRule("agentcapabilities_macro_variation")]
	private SmiParser.agentcapabilities_macro_variation_return agentcapabilities_macro_variation()
	{
		EnterRule_agentcapabilities_macro_variation();
		EnterRule("agentcapabilities_macro_variation", 84);
		TraceIn("agentcapabilities_macro_variation", 84);
		SmiParser.agentcapabilities_macro_variation_return retval = new SmiParser.agentcapabilities_macro_variation_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l1 = default(IToken);
		IToken l2 = default(IToken);
		IToken c1 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken string_literal301 = default(IToken);
		IToken string_literal302 = default(IToken);
		IToken string_literal303 = default(IToken);
		IToken string_literal304 = default(IToken);
		IToken L_BRACE305 = default(IToken);
		IToken COMMA306 = default(IToken);
		IToken R_BRACE307 = default(IToken);
		IToken string_literal308 = default(IToken);
		IToken L_BRACE309 = default(IToken);
		IToken L_BRACE310 = default(IToken);
		IToken COMMA311 = default(IToken);
		IToken R_BRACE312 = default(IToken);
		IToken string_literal313 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.syntax_return s1 = default(SmiParser.syntax_return);
		SmiParser.syntax_return s2 = default(SmiParser.syntax_return);
		SmiParser.agentcapabilities_macro_access_return a1 = default(SmiParser.agentcapabilities_macro_access_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.value_return v3 = default(SmiParser.value_return);
		SmiParser.value_return v4 = default(SmiParser.value_return);

		CommonTree l1_tree = default(CommonTree);
		CommonTree l2_tree = default(CommonTree);
		CommonTree c1_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree string_literal301_tree = default(CommonTree);
		CommonTree string_literal302_tree = default(CommonTree);
		CommonTree string_literal303_tree = default(CommonTree);
		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree L_BRACE305_tree = default(CommonTree);
		CommonTree COMMA306_tree = default(CommonTree);
		CommonTree R_BRACE307_tree = default(CommonTree);
		CommonTree string_literal308_tree = default(CommonTree);
		CommonTree L_BRACE309_tree = default(CommonTree);
		CommonTree L_BRACE310_tree = default(CommonTree);
		CommonTree COMMA311_tree = default(CommonTree);
		CommonTree R_BRACE312_tree = default(CommonTree);
		CommonTree string_literal313_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_variation");
		DebugLocation(1212, 1);
		try
		{
			// Smi.g:1213:5: ( 'VARIATION' v1= value ( 'SYNTAX' s1= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'ACCESS' a1= agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value ) )? 'DESCRIPTION' c1= C_STRING )
			DebugEnterAlt(1);
			// Smi.g:1213:7: 'VARIATION' v1= value ( 'SYNTAX' s1= syntax )? ( 'WRITE-SYNTAX' s2= syntax )? ( 'ACCESS' a1= agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value ) )? 'DESCRIPTION' c1= C_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1213, 7);
			string_literal300=(IToken)Match(input,196,Follow._196_in_agentcapabilities_macro_variation7335); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal300_tree = (CommonTree)adaptor.Create(string_literal300);
			adaptor.AddChild(root_0, string_literal300_tree);
			}
			DebugLocation(1213, 21);
			PushFollow(Follow._value_in_agentcapabilities_macro_variation7339);
			v1=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
			DebugLocation(1213, 28);
			if (state.backtracking == 0)
			{
				 retval.result = new Variantion((v1!=null?v1.result:default(ISmiValue))); 
			}
			DebugLocation(1214, 2);
			// Smi.g:1214:2: ( 'SYNTAX' s1= syntax )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_1 = input.LA(1);

			if ((LA123_1==187))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1214:3: 'SYNTAX' s1= syntax
				{
				DebugLocation(1214, 3);
				string_literal301=(IToken)Match(input,187,Follow._187_in_agentcapabilities_macro_variation7345); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal301_tree = (CommonTree)adaptor.Create(string_literal301);
				adaptor.AddChild(root_0, string_literal301_tree);
				}
				DebugLocation(1214, 14);
				PushFollow(Follow._syntax_in_agentcapabilities_macro_variation7349);
				s1=syntax();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(1214, 24);
			if (state.backtracking == 0)
			{
				 retval.result.Syntax = (s1!=null?s1.result:default(Syntax)); 
			}
			DebugLocation(1215, 2);
			// Smi.g:1215:2: ( 'WRITE-SYNTAX' s2= syntax )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_1 = input.LA(1);

			if ((LA124_1==197))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1215:3: 'WRITE-SYNTAX' s2= syntax
				{
				DebugLocation(1215, 3);
				string_literal302=(IToken)Match(input,197,Follow._197_in_agentcapabilities_macro_variation7357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal302_tree = (CommonTree)adaptor.Create(string_literal302);
				adaptor.AddChild(root_0, string_literal302_tree);
				}
				DebugLocation(1215, 20);
				PushFollow(Follow._syntax_in_agentcapabilities_macro_variation7361);
				s2=syntax();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, s2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(1215, 30);
			if (state.backtracking == 0)
			{
				 retval.result.WriteSyntax = (s2!=null?s2.result:default(Syntax)); 
			}
			DebugLocation(1216, 2);
			// Smi.g:1216:2: ( 'ACCESS' a1= agentcapabilities_macro_access )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_1 = input.LA(1);

			if ((LA125_1==130))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1216:3: 'ACCESS' a1= agentcapabilities_macro_access
				{
				DebugLocation(1216, 3);
				string_literal303=(IToken)Match(input,130,Follow._130_in_agentcapabilities_macro_variation7369); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal303_tree = (CommonTree)adaptor.Create(string_literal303);
				adaptor.AddChild(root_0, string_literal303_tree);
				}
				DebugLocation(1216, 14);
				PushFollow(Follow._agentcapabilities_macro_access_in_agentcapabilities_macro_variation7373);
				a1=agentcapabilities_macro_access();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, a1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(1216, 48);
			if (state.backtracking == 0)
			{
				 retval.result.Access = (a1!=null?a1.result:default(Access)); 
			}
			DebugLocation(1217, 5);
			// Smi.g:1217:5: ( 'CREATION-REQUIRES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			int LA127_1 = input.LA(1);

			if ((LA127_1==139))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1217:6: 'CREATION-REQUIRES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE
				{
				DebugLocation(1217, 6);
				string_literal304=(IToken)Match(input,139,Follow._139_in_agentcapabilities_macro_variation7384); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal304_tree = (CommonTree)adaptor.Create(string_literal304);
				adaptor.AddChild(root_0, string_literal304_tree);
				}
				DebugLocation(1217, 26);
				L_BRACE305=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7386); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE305_tree = (CommonTree)adaptor.Create(L_BRACE305);
				adaptor.AddChild(root_0, L_BRACE305_tree);
				}
				DebugLocation(1217, 36);
				PushFollow(Follow._value_in_agentcapabilities_macro_variation7390);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(1217, 43);
				if (state.backtracking == 0)
				{
					 retval.result.CreationRequires.Add((v2!=null?v2.result:default(ISmiValue))); 
				}
				DebugLocation(1218, 2);
				// Smi.g:1218:2: ( COMMA v3= value )*
				try { DebugEnterSubRule(126);
				while (true)
				{
					int alt126=2;
					try { DebugEnterDecision(126, false);
					int LA126_1 = input.LA(1);

					if ((LA126_1==COMMA))
					{
						alt126 = 1;
					}


					} finally { DebugExitDecision(126); }
					switch ( alt126 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1218:3: COMMA v3= value
						{
						DebugLocation(1218, 3);
						COMMA306=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_variation7396); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA306_tree = (CommonTree)adaptor.Create(COMMA306);
						adaptor.AddChild(root_0, COMMA306_tree);
						}
						DebugLocation(1218, 11);
						PushFollow(Follow._value_in_agentcapabilities_macro_variation7400);
						v3=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, v3.Tree);

						}
						break;

					default:
						goto loop126;
					}
				}

				loop126:
					;

				} finally { DebugExitSubRule(126); }

				DebugLocation(1218, 20);
				R_BRACE307=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_variation7404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE307_tree = (CommonTree)adaptor.Create(R_BRACE307);
				adaptor.AddChild(root_0, R_BRACE307_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(1218, 30);
			if (state.backtracking == 0)
			{
				 retval.result.CreationRequires.Add((v3!=null?v3.result:default(ISmiValue))); 
			}
			DebugLocation(1219, 5);
			// Smi.g:1219:5: ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value ) )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==140))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1219:6: 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value )
				{
				DebugLocation(1219, 6);
				string_literal308=(IToken)Match(input,140,Follow._140_in_agentcapabilities_macro_variation7415); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal308_tree = (CommonTree)adaptor.Create(string_literal308);
				adaptor.AddChild(root_0, string_literal308_tree);
				}
				DebugLocation(1219, 15);
				L_BRACE309=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7417); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE309_tree = (CommonTree)adaptor.Create(L_BRACE309);
				adaptor.AddChild(root_0, L_BRACE309_tree);
				}
				DebugLocation(1219, 23);
				// Smi.g:1219:23: ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				try
				{
					alt130 = dfa130.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1219:24: ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE
					{
					DebugLocation(1219, 63);
					L_BRACE310=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7438); if (state.failed) return retval;
					if (state.backtracking == 0) {
					L_BRACE310_tree = (CommonTree)adaptor.Create(L_BRACE310);
					adaptor.AddChild(root_0, L_BRACE310_tree);
					}
					DebugLocation(1219, 71);
					// Smi.g:1219:71: (l1= LOWER )?
					int alt128=2;
					try { DebugEnterSubRule(128);
					try { DebugEnterDecision(128, false);
					int LA128_1 = input.LA(1);

					if ((LA128_1==LOWER))
					{
						alt128 = 1;
					}
					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1219:72: l1= LOWER
						{
						DebugLocation(1219, 74);
						l1=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_variation7443); if (state.failed) return retval;
						if (state.backtracking == 0) {
						l1_tree = (CommonTree)adaptor.Create(l1);
						adaptor.AddChild(root_0, l1_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(128); }

					DebugLocation(1219, 83);
					if (state.backtracking == 0)
					{
						 retval.result.DefaultValueIdentifiers.Add((l1!=null?l1.Text:null)); 
					}
					DebugLocation(1220, 2);
					// Smi.g:1220:2: ( COMMA l2= LOWER )*
					try { DebugEnterSubRule(129);
					while (true)
					{
						int alt129=2;
						try { DebugEnterDecision(129, false);
						int LA129_1 = input.LA(1);

						if ((LA129_1==COMMA))
						{
							alt129 = 1;
						}


						} finally { DebugExitDecision(129); }
						switch ( alt129 )
						{
						case 1:
							DebugEnterAlt(1);
							// Smi.g:1220:3: COMMA l2= LOWER
							{
							DebugLocation(1220, 3);
							COMMA311=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_variation7452); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA311_tree = (CommonTree)adaptor.Create(COMMA311);
							adaptor.AddChild(root_0, COMMA311_tree);
							}
							DebugLocation(1220, 11);
							l2=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_variation7456); if (state.failed) return retval;
							if (state.backtracking == 0) {
							l2_tree = (CommonTree)adaptor.Create(l2);
							adaptor.AddChild(root_0, l2_tree);
							}

							}
							break;

						default:
							goto loop129;
						}
					}

					loop129:
						;

					} finally { DebugExitSubRule(129); }

					DebugLocation(1220, 20);
					R_BRACE312=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_variation7460); if (state.failed) return retval;
					if (state.backtracking == 0) {
					R_BRACE312_tree = (CommonTree)adaptor.Create(R_BRACE312);
					adaptor.AddChild(root_0, R_BRACE312_tree);
					}
					DebugLocation(1220, 28);
					if (state.backtracking == 0)
					{
						 retval.result.DefaultValueIdentifiers.Add((l2!=null?l2.Text:null)); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1221:4: v4= value
					{
					DebugLocation(1221, 6);
					PushFollow(Follow._value_in_agentcapabilities_macro_variation7469);
					v4=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v4.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;

			}
			} finally { DebugExitSubRule(131); }

			DebugLocation(1221, 17);
			if (state.backtracking == 0)
			{
				 retval.result.DefaultValue = (v4!=null?v4.result:default(ISmiValue)); 
			}
			DebugLocation(1222, 5);
			string_literal313=(IToken)Match(input,141,Follow._141_in_agentcapabilities_macro_variation7481); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal313_tree = (CommonTree)adaptor.Create(string_literal313);
			adaptor.AddChild(root_0, string_literal313_tree);
			}
			DebugLocation(1222, 21);
			c1=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro_variation7485); if (state.failed) return retval;
			if (state.backtracking == 0) {
			c1_tree = (CommonTree)adaptor.Create(c1);
			adaptor.AddChild(root_0, c1_tree);
			}
			DebugLocation(1222, 31);
			if (state.backtracking == 0)
			{
				 retval.result.Description = (c1!=null?c1.Text:null); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_variation", 84);
			LeaveRule("agentcapabilities_macro_variation", 84);
			LeaveRule_agentcapabilities_macro_variation();
		}
		DebugLocation(1223, 1);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_variation"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_variation"

	private sealed partial class syntax_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Syntax result = new Syntax();
		public syntax_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_syntax();
	partial void LeaveRule_syntax();
	// $ANTLR start "syntax"
	// Smi.g:1225:1: syntax returns [Syntax result = new Syntax()] : ( ( smi_type L_BRACE )=>st= smi_type L_BRACE nb1= namedbit ( COMMA nb2= namedbit )* R_BRACE | ( smi_type )=>st2= smi_type ( smi_subtyping )? |t= type );
	[GrammarRule("syntax")]
	private SmiParser.syntax_return syntax()
	{
		EnterRule_syntax();
		EnterRule("syntax", 85);
		TraceIn("syntax", 85);
		SmiParser.syntax_return retval = new SmiParser.syntax_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE314 = default(IToken);
		IToken COMMA315 = default(IToken);
		IToken R_BRACE316 = default(IToken);
		SmiParser.smi_type_return st = default(SmiParser.smi_type_return);
		SmiParser.namedbit_return nb1 = default(SmiParser.namedbit_return);
		SmiParser.namedbit_return nb2 = default(SmiParser.namedbit_return);
		SmiParser.smi_type_return st2 = default(SmiParser.smi_type_return);
		SmiParser.type_return t = default(SmiParser.type_return);
		AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping317 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree L_BRACE314_tree = default(CommonTree);
		CommonTree COMMA315_tree = default(CommonTree);
		CommonTree R_BRACE316_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "syntax");
		DebugLocation(1225, 1);
		try
		{
			// Smi.g:1226:5: ( ( smi_type L_BRACE )=>st= smi_type L_BRACE nb1= namedbit ( COMMA nb2= namedbit )* R_BRACE | ( smi_type )=>st2= smi_type ( smi_subtyping )? |t= type )
			int alt134=3;
			try { DebugEnterDecision(134, false);
			switch (input.LA(1))
			{
			case 137:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred36_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred36_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==STRING_KW))
				{
					int LA134_3 = input.LA(3);

					if ((LA134_3==L_BRACE) && (EvaluatePredicate(synpred35_Smi_fragment)))
					{
						alt134 = 1;
					}
					else if ((EvaluatePredicate(synpred36_Smi_fragment)))
					{
						alt134 = 2;
					}
					else if ((true))
					{
						alt134 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 9, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OBJECT_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==IDENTIFIER_KW))
				{
					int LA134_3 = input.LA(3);

					if ((LA134_3==L_BRACE) && (EvaluatePredicate(synpred35_Smi_fragment)))
					{
						alt134 = 1;
					}
					else if ((EvaluatePredicate(synpred36_Smi_fragment)))
					{
						alt134 = 2;
					}
					else if ((true))
					{
						alt134 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred36_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case ERROR_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case LOWER:
			case L_BRACKET:
			case NULL_KW:
			case NUMERIC_STR_KW:
			case OPERATION_KW:
			case PRINTABLE_STR_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 179:
			case 188:
			case 191:
				{
				alt134 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1226:7: ( smi_type L_BRACE )=>st= smi_type L_BRACE nb1= namedbit ( COMMA nb2= namedbit )* R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1226, 31);
				PushFollow(Follow._smi_type_in_syntax7515);
				st=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, st.Tree);
				DebugLocation(1226, 41);
				if (state.backtracking == 0)
				{
					 retval.result.Subtype = (st!=null?st.result:default(ISmiType)); 
				}
				DebugLocation(1227, 2);
				L_BRACE314=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_syntax7520); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE314_tree = (CommonTree)adaptor.Create(L_BRACE314);
				adaptor.AddChild(root_0, L_BRACE314_tree);
				}
				DebugLocation(1227, 13);
				PushFollow(Follow._namedbit_in_syntax7524);
				nb1=namedbit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nb1.Tree);
				DebugLocation(1227, 23);
				if (state.backtracking == 0)
				{
					 retval.result.SubtypeNamedBits.Add((nb1!=null?nb1.result:default(NamedBit))); 
				}
				DebugLocation(1228, 2);
				// Smi.g:1228:2: ( COMMA nb2= namedbit )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_1 = input.LA(1);

					if ((LA132_1==COMMA))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1228:3: COMMA nb2= namedbit
						{
						DebugLocation(1228, 3);
						COMMA315=(IToken)Match(input,COMMA,Follow._COMMA_in_syntax7530); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA315_tree = (CommonTree)adaptor.Create(COMMA315);
						adaptor.AddChild(root_0, COMMA315_tree);
						}
						DebugLocation(1228, 12);
						PushFollow(Follow._namedbit_in_syntax7534);
						nb2=namedbit();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, nb2.Tree);
						DebugLocation(1228, 22);
						if (state.backtracking == 0)
						{
							 retval.result.SubtypeNamedBits.Add((nb2!=null?nb2.result:default(NamedBit))); 
						}

						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(1228, 71);
				R_BRACE316=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_syntax7540); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE316_tree = (CommonTree)adaptor.Create(R_BRACE316);
				adaptor.AddChild(root_0, R_BRACE316_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1229:7: ( smi_type )=>st2= smi_type ( smi_subtyping )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1229, 24);
				PushFollow(Follow._smi_type_in_syntax7556);
				st2=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, st2.Tree);
				DebugLocation(1229, 34);
				// Smi.g:1229:34: ( smi_subtyping )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, false);
				int LA133_1 = input.LA(1);

				if ((LA133_1==L_PAREN))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1229:35: smi_subtyping
					{
					DebugLocation(1229, 35);
					PushFollow(Follow._smi_subtyping_in_syntax7559);
					smi_subtyping317=smi_subtyping();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, smi_subtyping317.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(1229, 51);
				if (state.backtracking == 0)
				{
					 retval.result.Subtype = (st2!=null?st2.result:default(ISmiType)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1230:7: t= type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1230, 8);
				PushFollow(Follow._type_in_syntax7573);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(1230, 14);
				if (state.backtracking == 0)
				{
					 retval.result.Subtype=(t!=null?t.result:default(ISmiType)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("syntax", 85);
			LeaveRule("syntax", 85);
			LeaveRule_syntax();
		}
		DebugLocation(1231, 1);
		} finally { DebugExitRule(GrammarFileName, "syntax"); }
		return retval;

	}
	// $ANTLR end "syntax"

	private sealed partial class agentcapabilities_macro_access_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public Access result;
		public agentcapabilities_macro_access_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_agentcapabilities_macro_access();
	partial void LeaveRule_agentcapabilities_macro_access();
	// $ANTLR start "agentcapabilities_macro_access"
	// Smi.g:1233:1: agentcapabilities_macro_access returns [Access result] : l= LOWER ;
	[GrammarRule("agentcapabilities_macro_access")]
	private SmiParser.agentcapabilities_macro_access_return agentcapabilities_macro_access()
	{
		EnterRule_agentcapabilities_macro_access();
		EnterRule("agentcapabilities_macro_access", 86);
		TraceIn("agentcapabilities_macro_access", 86);
		SmiParser.agentcapabilities_macro_access_return retval = new SmiParser.agentcapabilities_macro_access_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken l = default(IToken);

		CommonTree l_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_access");
		DebugLocation(1233, 1);
		try
		{
			// Smi.g:1234:5: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:1234:7: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1234, 8);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_access7595); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(1235, 5);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-implemented")) retval.result = Access.NotImplemented;
				     else if (l.Text == ("accessible-for-notify")) retval.result = Access.AccessibleForNotify;
				     else if (l.Text == ("read-only")) retval.result = Access.ReadOnly;
				     else if (l.Text == ("read-write")) retval.result = Access.ReadWrite;
				     else if (l.Text == ("read-create")) retval.result = Access.ReadCreate;
				     else if (l.Text == ("write-only")) retval.result = Access.WriteOnly;
				     else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_access", 86);
			LeaveRule("agentcapabilities_macro_access", 86);
			LeaveRule_agentcapabilities_macro_access();
		}
		DebugLocation(1242, 1);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_access"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_access"

	private sealed partial class namedbit_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedBit result;
		public namedbit_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_namedbit();
	partial void LeaveRule_namedbit();
	// $ANTLR start "namedbit"
	// Smi.g:1244:1: namedbit returns [NamedBit result] : name= LOWER L_PAREN num= NUMBER R_PAREN ;
	[GrammarRule("namedbit")]
	private SmiParser.namedbit_return namedbit()
	{
		EnterRule_namedbit();
		EnterRule("namedbit", 87);
		TraceIn("namedbit", 87);
		SmiParser.namedbit_return retval = new SmiParser.namedbit_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken num = default(IToken);
		IToken L_PAREN318 = default(IToken);
		IToken R_PAREN319 = default(IToken);

		CommonTree name_tree = default(CommonTree);
		CommonTree num_tree = default(CommonTree);
		CommonTree L_PAREN318_tree = default(CommonTree);
		CommonTree R_PAREN319_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namedbit");
		DebugLocation(1244, 106);
		try
		{
			// Smi.g:1245:5: (name= LOWER L_PAREN num= NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:1245:7: name= LOWER L_PAREN num= NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1245, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_namedbit7621); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1245, 18);
			L_PAREN318=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_namedbit7623); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN318_tree = (CommonTree)adaptor.Create(L_PAREN318);
			adaptor.AddChild(root_0, L_PAREN318_tree);
			}
			DebugLocation(1245, 29);
			num=(IToken)Match(input,NUMBER,Follow._NUMBER_in_namedbit7627); if (state.failed) return retval;
			if (state.backtracking == 0) {
			num_tree = (CommonTree)adaptor.Create(num);
			adaptor.AddChild(root_0, num_tree);
			}
			DebugLocation(1245, 37);
			R_PAREN319=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_namedbit7629); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN319_tree = (CommonTree)adaptor.Create(R_PAREN319);
			adaptor.AddChild(root_0, R_PAREN319_tree);
			}
			DebugLocation(1245, 45);
			if (state.backtracking == 0)
			{
				 retval.result = new NamedBit((name!=null?name.Text:null), long.Parse((num!=null?num.Text:null))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namedbit", 87);
			LeaveRule("namedbit", 87);
			LeaveRule_namedbit();
		}
		DebugLocation(1245, 106);
		} finally { DebugExitRule(GrammarFileName, "namedbit"); }
		return retval;

	}
	// $ANTLR end "namedbit"

	private sealed partial class traptype_macro_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TrapTypeMacro result = new TrapTypeMacro();
		public traptype_macro_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_traptype_macro();
	partial void LeaveRule_traptype_macro();
	// $ANTLR start "traptype_macro"
	// Smi.g:1248:1: traptype_macro returns [TrapTypeMacro result = new TrapTypeMacro()] : 'TRAP-TYPE' 'ENTERPRISE' v= value ( 'VARIABLES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' v4= value )? ( 'REFERENCE' v5= value )? ;
	[GrammarRule("traptype_macro")]
	private SmiParser.traptype_macro_return traptype_macro()
	{
		EnterRule_traptype_macro();
		EnterRule("traptype_macro", 88);
		TraceIn("traptype_macro", 88);
		SmiParser.traptype_macro_return retval = new SmiParser.traptype_macro_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal320 = default(IToken);
		IToken string_literal321 = default(IToken);
		IToken string_literal322 = default(IToken);
		IToken L_BRACE323 = default(IToken);
		IToken COMMA324 = default(IToken);
		IToken R_BRACE325 = default(IToken);
		IToken string_literal326 = default(IToken);
		IToken string_literal327 = default(IToken);
		SmiParser.value_return v = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.value_return v3 = default(SmiParser.value_return);
		SmiParser.value_return v4 = default(SmiParser.value_return);
		SmiParser.value_return v5 = default(SmiParser.value_return);

		CommonTree string_literal320_tree = default(CommonTree);
		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree string_literal322_tree = default(CommonTree);
		CommonTree L_BRACE323_tree = default(CommonTree);
		CommonTree COMMA324_tree = default(CommonTree);
		CommonTree R_BRACE325_tree = default(CommonTree);
		CommonTree string_literal326_tree = default(CommonTree);
		CommonTree string_literal327_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "traptype_macro");
		DebugLocation(1248, 61);
		try
		{
			// Smi.g:1249:5: ( 'TRAP-TYPE' 'ENTERPRISE' v= value ( 'VARIABLES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' v4= value )? ( 'REFERENCE' v5= value )? )
			DebugEnterAlt(1);
			// Smi.g:1249:7: 'TRAP-TYPE' 'ENTERPRISE' v= value ( 'VARIABLES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' v4= value )? ( 'REFERENCE' v5= value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1249, 7);
			string_literal320=(IToken)Match(input,191,Follow._191_in_traptype_macro7649); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal320_tree = (CommonTree)adaptor.Create(string_literal320);
			adaptor.AddChild(root_0, string_literal320_tree);
			}
			DebugLocation(1249, 19);
			string_literal321=(IToken)Match(input,144,Follow._144_in_traptype_macro7651); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal321_tree = (CommonTree)adaptor.Create(string_literal321);
			adaptor.AddChild(root_0, string_literal321_tree);
			}
			DebugLocation(1249, 33);
			PushFollow(Follow._value_in_traptype_macro7655);
			v=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
			DebugLocation(1249, 40);
			if (state.backtracking == 0)
			{
				 retval.result.Enterprise = (v!=null?v.result:default(ISmiValue)); 
			}
			DebugLocation(1250, 2);
			// Smi.g:1250:2: ( 'VARIABLES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE )?
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_1 = input.LA(1);

			if ((LA136_1==195))
			{
				alt136 = 1;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1250:3: 'VARIABLES' L_BRACE v2= value ( COMMA v3= value )* R_BRACE
				{
				DebugLocation(1250, 3);
				string_literal322=(IToken)Match(input,195,Follow._195_in_traptype_macro7661); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal322_tree = (CommonTree)adaptor.Create(string_literal322);
				adaptor.AddChild(root_0, string_literal322_tree);
				}
				DebugLocation(1250, 15);
				L_BRACE323=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_traptype_macro7663); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE323_tree = (CommonTree)adaptor.Create(L_BRACE323);
				adaptor.AddChild(root_0, L_BRACE323_tree);
				}
				DebugLocation(1250, 25);
				PushFollow(Follow._value_in_traptype_macro7667);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(1250, 32);
				if (state.backtracking == 0)
				{
					 retval.result.Variables.Add((v2!=null?v2.result:default(ISmiValue))); 
				}
				DebugLocation(1251, 2);
				// Smi.g:1251:2: ( COMMA v3= value )*
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_1 = input.LA(1);

					if ((LA135_1==COMMA))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch ( alt135 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1251:3: COMMA v3= value
						{
						DebugLocation(1251, 3);
						COMMA324=(IToken)Match(input,COMMA,Follow._COMMA_in_traptype_macro7673); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA324_tree = (CommonTree)adaptor.Create(COMMA324);
						adaptor.AddChild(root_0, COMMA324_tree);
						}
						DebugLocation(1251, 11);
						PushFollow(Follow._value_in_traptype_macro7677);
						v3=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, v3.Tree);
						DebugLocation(1251, 18);
						if (state.backtracking == 0)
						{
							 retval.result.Variables.Add((v3!=null?v3.result:default(ISmiValue))); 
						}

						}
						break;

					default:
						goto loop135;
					}
				}

				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(1251, 59);
				R_BRACE325=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_traptype_macro7683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE325_tree = (CommonTree)adaptor.Create(R_BRACE325);
				adaptor.AddChild(root_0, R_BRACE325_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }

			DebugLocation(1252, 5);
			// Smi.g:1252:5: ( ( 'DESCRIPTION' )=> 'DESCRIPTION' v4= value )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_1 = input.LA(1);

			if ((LA137_1==141))
			{
				int LA137_2 = input.LA(2);

				if ((LA137_2==C_STRING))
				{
					int LA137_3 = input.LA(3);

					if ((EvaluatePredicate(synpred37_Smi_fragment)))
					{
						alt137 = 1;
					}
				}
				else if ((LA137_2==TRUE_KW) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==FALSE_KW) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==NULL_KW) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==UPPER) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==LOWER) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==MINUS) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==NUMBER) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==H_STRING) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==B_STRING) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt137 = 1;
				}
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1252:6: ( 'DESCRIPTION' )=> 'DESCRIPTION' v4= value
				{
				DebugLocation(1252, 25);
				string_literal326=(IToken)Match(input,141,Follow._141_in_traptype_macro7699); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal326_tree = (CommonTree)adaptor.Create(string_literal326);
				adaptor.AddChild(root_0, string_literal326_tree);
				}
				DebugLocation(1252, 41);
				PushFollow(Follow._value_in_traptype_macro7703);
				v4=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v4.Tree);
				DebugLocation(1252, 48);
				if (state.backtracking == 0)
				{
					 retval.result.Description = (v4!=null?v4.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(1253, 2);
			// Smi.g:1253:2: ( 'REFERENCE' v5= value )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_1 = input.LA(1);

			if ((LA138_1==177))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1253:3: 'REFERENCE' v5= value
				{
				DebugLocation(1253, 3);
				string_literal327=(IToken)Match(input,177,Follow._177_in_traptype_macro7712); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal327_tree = (CommonTree)adaptor.Create(string_literal327);
				adaptor.AddChild(root_0, string_literal327_tree);
				}
				DebugLocation(1253, 17);
				PushFollow(Follow._value_in_traptype_macro7716);
				v5=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v5.Tree);
				DebugLocation(1253, 24);
				if (state.backtracking == 0)
				{
					 retval.result.Reference = (v5!=null?v5.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("traptype_macro", 88);
			LeaveRule("traptype_macro", 88);
			LeaveRule_traptype_macro();
		}
		DebugLocation(1253, 61);
		} finally { DebugExitRule(GrammarFileName, "traptype_macro"); }
		return retval;

	}
	// $ANTLR end "traptype_macro"

	private sealed partial class operation_errorlist_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<TypeOrValue> result;
		public operation_errorlist_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_operation_errorlist();
	partial void LeaveRule_operation_errorlist();
	// $ANTLR start "operation_errorlist"
	// Smi.g:1255:1: operation_errorlist returns [IList<TypeOrValue> result] : t= typeorvaluelist ;
	[GrammarRule("operation_errorlist")]
	private SmiParser.operation_errorlist_return operation_errorlist()
	{
		EnterRule_operation_errorlist();
		EnterRule("operation_errorlist", 89);
		TraceIn("operation_errorlist", 89);
		SmiParser.operation_errorlist_return retval = new SmiParser.operation_errorlist_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.typeorvaluelist_return t = default(SmiParser.typeorvaluelist_return);

		try { DebugEnterRule(GrammarFileName, "operation_errorlist");
		DebugLocation(1255, 1);
		try
		{
			// Smi.g:1256:5: (t= typeorvaluelist )
			DebugEnterAlt(1);
			// Smi.g:1256:7: t= typeorvaluelist
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1256, 8);
			PushFollow(Follow._typeorvaluelist_in_operation_errorlist7739);
			t=typeorvaluelist();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(1256, 25);
			if (state.backtracking == 0)
			{
				 retval.result = (t!=null?t.result:default(IList<TypeOrValue>)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation_errorlist", 89);
			LeaveRule("operation_errorlist", 89);
			LeaveRule_operation_errorlist();
		}
		DebugLocation(1257, 1);
		} finally { DebugExitRule(GrammarFileName, "operation_errorlist"); }
		return retval;

	}
	// $ANTLR end "operation_errorlist"

	private sealed partial class linkedOp_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<TypeOrValue> result;
		public linkedOp_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_linkedOp_list();
	partial void LeaveRule_linkedOp_list();
	// $ANTLR start "linkedOp_list"
	// Smi.g:1259:1: linkedOp_list returns [IList<TypeOrValue> result] : t= typeorvaluelist ;
	[GrammarRule("linkedOp_list")]
	private SmiParser.linkedOp_list_return linkedOp_list()
	{
		EnterRule_linkedOp_list();
		EnterRule("linkedOp_list", 90);
		TraceIn("linkedOp_list", 90);
		SmiParser.linkedOp_list_return retval = new SmiParser.linkedOp_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.typeorvaluelist_return t = default(SmiParser.typeorvaluelist_return);

		try { DebugEnterRule(GrammarFileName, "linkedOp_list");
		DebugLocation(1259, 1);
		try
		{
			// Smi.g:1260:5: (t= typeorvaluelist )
			DebugEnterAlt(1);
			// Smi.g:1260:7: t= typeorvaluelist
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1260, 8);
			PushFollow(Follow._typeorvaluelist_in_linkedOp_list7761);
			t=typeorvaluelist();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(1260, 25);
			if (state.backtracking == 0)
			{
				 retval.result = (t!=null?t.result:default(IList<TypeOrValue>)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linkedOp_list", 90);
			LeaveRule("linkedOp_list", 90);
			LeaveRule_linkedOp_list();
		}
		DebugLocation(1261, 1);
		} finally { DebugExitRule(GrammarFileName, "linkedOp_list"); }
		return retval;

	}
	// $ANTLR end "linkedOp_list"

	private sealed partial class typeorvalue_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TypeOrValue result;
		public typeorvalue_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_typeorvalue();
	partial void LeaveRule_typeorvalue();
	// $ANTLR start "typeorvalue"
	// Smi.g:1263:1: typeorvalue returns [TypeOrValue result] : ( ( type )=>t= type |v= value );
	[GrammarRule("typeorvalue")]
	private SmiParser.typeorvalue_return typeorvalue()
	{
		EnterRule_typeorvalue();
		EnterRule("typeorvalue", 91);
		TraceIn("typeorvalue", 91);
		SmiParser.typeorvalue_return retval = new SmiParser.typeorvalue_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.type_return t = default(SmiParser.type_return);
		SmiParser.value_return v = default(SmiParser.value_return);

		try { DebugEnterRule(GrammarFileName, "typeorvalue");
		DebugLocation(1263, 52);
		try
		{
			// Smi.g:1264:5: ( ( type )=>t= type |v= value )
			int alt139=2;
			try { DebugEnterDecision(139, false);
			int LA139_1 = input.LA(1);

			if ((LA139_1==ANY_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==BIT_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==BOOLEAN_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==CHARACTER_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==BMP_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==GENERALIZED_TIME_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==GENERAL_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==GRAPHIC_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==IA5_STRING_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==ISO646_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==NUMERIC_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==PRINTABLE_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==TELETEX_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==T61_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==UNIVERSAL_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==UTF8_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==UTC_TIME_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==VIDEOTEX_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==VISIBLE_STR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==CHOICE_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==EMBEDDED_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==ENUMERATED_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==EXTERNAL_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==INTEGER_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==NULL_KW))
			{
				int LA139_2 = input.LA(2);

				if ((EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt139 = 1;
				}
				else if ((true))
				{
					alt139 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA139_1==OBJECT_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==OCTET_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==REAL_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==179) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==SEQUENCE_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==SET_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==L_BRACKET) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==UPPER))
			{
				int LA139_2 = input.LA(2);

				if ((LA139_2==DOT))
				{
					int LA139_3 = input.LA(3);

					if ((LA139_3==UPPER) && (EvaluatePredicate(synpred38_Smi_fragment)))
					{
						alt139 = 1;
					}
					else if ((LA139_3==LOWER))
					{
						alt139 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 139, 49, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA139_2==L_PAREN) && (EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt139 = 1;
				}
				else if ((LA139_2==COMMA) && (EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt139 = 1;
				}
				else if ((LA139_2==R_BRACE) && (EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt139 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 33, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA139_1==LOWER))
			{
				int LA139_2 = input.LA(2);

				if ((LA139_2==LESS) && (EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt139 = 1;
				}
				else if ((LA139_2==B_STRING||(LA139_2>=COLON && LA139_2<=COMMA)||LA139_2==C_STRING||LA139_2==FALSE_KW||LA139_2==H_STRING||(LA139_2>=LOWER && LA139_2<=L_BRACE)||(LA139_2>=MINUS && LA139_2<=MINUS_INFINITY_KW)||(LA139_2>=NULL_KW && LA139_2<=NUMBER)||LA139_2==PLUS_INFINITY_KW||LA139_2==R_BRACE||LA139_2==TRUE_KW||LA139_2==UPPER))
				{
					alt139 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 34, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA139_1==OPERATION_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==ERROR_KW) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==165) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==159) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==164) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==161) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==188) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==163) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==160) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==158) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==131) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==191) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==137) && (EvaluatePredicate(synpred38_Smi_fragment)))
			{
				alt139 = 1;
			}
			else if ((LA139_1==B_STRING||LA139_1==C_STRING||LA139_1==FALSE_KW||LA139_1==H_STRING||LA139_1==L_BRACE||(LA139_1>=MINUS && LA139_1<=MINUS_INFINITY_KW)||LA139_1==NUMBER||LA139_1==PLUS_INFINITY_KW||LA139_1==TRUE_KW))
			{
				alt139 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1264:7: ( type )=>t= type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1264, 18);
				PushFollow(Follow._type_in_typeorvalue7789);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(1264, 24);
				if (state.backtracking == 0)
				{
					 retval.result = new TypeOrValue((t!=null?t.result:default(ISmiType))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1265:4: v= value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1265, 5);
				PushFollow(Follow._value_in_typeorvalue7799);
				v=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
				DebugLocation(1265, 12);
				if (state.backtracking == 0)
				{
					 retval.result = new TypeOrValue((v!=null?v.result:default(ISmiValue))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeorvalue", 91);
			LeaveRule("typeorvalue", 91);
			LeaveRule_typeorvalue();
		}
		DebugLocation(1265, 52);
		} finally { DebugExitRule(GrammarFileName, "typeorvalue"); }
		return retval;

	}
	// $ANTLR end "typeorvalue"

	private sealed partial class typeorvaluelist_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<TypeOrValue> result = new List<TypeOrValue>();
		public typeorvaluelist_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_typeorvaluelist();
	partial void LeaveRule_typeorvaluelist();
	// $ANTLR start "typeorvaluelist"
	// Smi.g:1268:1: typeorvaluelist returns [IList<TypeOrValue> result = new List<TypeOrValue>()] : t1= typeorvalue ( COMMA t2= typeorvalue )* ;
	[GrammarRule("typeorvaluelist")]
	private SmiParser.typeorvaluelist_return typeorvaluelist()
	{
		EnterRule_typeorvaluelist();
		EnterRule("typeorvaluelist", 92);
		TraceIn("typeorvaluelist", 92);
		SmiParser.typeorvaluelist_return retval = new SmiParser.typeorvaluelist_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA328 = default(IToken);
		SmiParser.typeorvalue_return t1 = default(SmiParser.typeorvalue_return);
		SmiParser.typeorvalue_return t2 = default(SmiParser.typeorvalue_return);

		CommonTree COMMA328_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeorvaluelist");
		DebugLocation(1268, 1);
		try
		{
			// Smi.g:1269:5: (t1= typeorvalue ( COMMA t2= typeorvalue )* )
			DebugEnterAlt(1);
			// Smi.g:1269:7: t1= typeorvalue ( COMMA t2= typeorvalue )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1269, 9);
			PushFollow(Follow._typeorvalue_in_typeorvaluelist7820);
			t1=typeorvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t1.Tree);
			DebugLocation(1269, 22);
			if (state.backtracking == 0)
			{
				 retval.result.Add((t1!=null?t1.result:default(TypeOrValue))); 
			}
			DebugLocation(1270, 2);
			// Smi.g:1270:2: ( COMMA t2= typeorvalue )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_1 = input.LA(1);

				if ((LA140_1==COMMA))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1270:3: COMMA t2= typeorvalue
					{
					DebugLocation(1270, 3);
					COMMA328=(IToken)Match(input,COMMA,Follow._COMMA_in_typeorvaluelist7827); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA328_tree = (CommonTree)adaptor.Create(COMMA328);
					adaptor.AddChild(root_0, COMMA328_tree);
					}
					DebugLocation(1270, 11);
					PushFollow(Follow._typeorvalue_in_typeorvaluelist7831);
					t2=typeorvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
					DebugLocation(1270, 24);
					if (state.backtracking == 0)
					{
						 retval.result.Add((t2!=null?t2.result:default(TypeOrValue))); 
					}

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeorvaluelist", 92);
			LeaveRule("typeorvaluelist", 92);
			LeaveRule_typeorvaluelist();
		}
		DebugLocation(1271, 1);
		} finally { DebugExitRule(GrammarFileName, "typeorvaluelist"); }
		return retval;

	}
	// $ANTLR end "typeorvaluelist"

	private sealed partial class elementType_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ElementType result;
		public elementType_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_elementType();
	partial void LeaveRule_elementType();
	// $ANTLR start "elementType"
	// Smi.g:1274:1: elementType returns [ElementType result] : (t= elementType_tagged | COMPONENTS_KW OF_KW t4= type );
	[GrammarRule("elementType")]
	private SmiParser.elementType_return elementType()
	{
		EnterRule_elementType();
		EnterRule("elementType", 93);
		TraceIn("elementType", 93);
		SmiParser.elementType_return retval = new SmiParser.elementType_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMPONENTS_KW329 = default(IToken);
		IToken OF_KW330 = default(IToken);
		SmiParser.elementType_tagged_return t = default(SmiParser.elementType_tagged_return);
		SmiParser.type_return t4 = default(SmiParser.type_return);

		CommonTree COMPONENTS_KW329_tree = default(CommonTree);
		CommonTree OF_KW330_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementType");
		DebugLocation(1274, 1);
		try
		{
			// Smi.g:1275:5: (t= elementType_tagged | COMPONENTS_KW OF_KW t4= type )
			int alt141=2;
			try { DebugEnterDecision(141, false);
			int LA141_1 = input.LA(1);

			if ((LA141_1==LOWER))
			{
				alt141 = 1;
			}
			else if ((LA141_1==COMPONENTS_KW))
			{
				alt141 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1275:7: t= elementType_tagged
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1275, 8);
				PushFollow(Follow._elementType_tagged_in_elementType7858);
				t=elementType_tagged();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(1275, 28);
				if (state.backtracking == 0)
				{
					 retval.result = (t!=null?t.result:default(TaggedElementType)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1276:7: COMPONENTS_KW OF_KW t4= type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1276, 7);
				COMPONENTS_KW329=(IToken)Match(input,COMPONENTS_KW,Follow._COMPONENTS_KW_in_elementType7868); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMPONENTS_KW329_tree = (CommonTree)adaptor.Create(COMPONENTS_KW329);
				adaptor.AddChild(root_0, COMPONENTS_KW329_tree);
				}
				DebugLocation(1276, 21);
				OF_KW330=(IToken)Match(input,OF_KW,Follow._OF_KW_in_elementType7870); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OF_KW330_tree = (CommonTree)adaptor.Create(OF_KW330);
				adaptor.AddChild(root_0, OF_KW330_tree);
				}
				DebugLocation(1276, 29);
				PushFollow(Follow._type_in_elementType7874);
				t4=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t4.Tree);
				DebugLocation(1276, 35);
				if (state.backtracking == 0)
				{
					 retval.result = new ComponentsOfElementType((t4!=null?t4.result:default(ISmiType))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementType", 93);
			LeaveRule("elementType", 93);
			LeaveRule_elementType();
		}
		DebugLocation(1277, 1);
		} finally { DebugExitRule(GrammarFileName, "elementType"); }
		return retval;

	}
	// $ANTLR end "elementType"

	private sealed partial class elementType_tagged_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TaggedElementType result;
		public elementType_tagged_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_elementType_tagged();
	partial void LeaveRule_elementType_tagged();
	// $ANTLR start "elementType_tagged"
	// Smi.g:1279:1: elementType_tagged returns [TaggedElementType result] : name= LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=>t1= tag )? (t2= tag_default )? t3= type ( OPTIONAL_KW | DEFAULT_KW v= value )? ;
	[GrammarRule("elementType_tagged")]
	private SmiParser.elementType_tagged_return elementType_tagged()
	{
		EnterRule_elementType_tagged();
		EnterRule("elementType_tagged", 94);
		TraceIn("elementType_tagged", 94);
		SmiParser.elementType_tagged_return retval = new SmiParser.elementType_tagged_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken OPTIONAL_KW331 = default(IToken);
		IToken DEFAULT_KW332 = default(IToken);
		SmiParser.tag_return t1 = default(SmiParser.tag_return);
		SmiParser.tag_default_return t2 = default(SmiParser.tag_default_return);
		SmiParser.type_return t3 = default(SmiParser.type_return);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree OPTIONAL_KW331_tree = default(CommonTree);
		CommonTree DEFAULT_KW332_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementType_tagged");
		DebugLocation(1279, 1);
		try
		{
			// Smi.g:1280:5: (name= LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=>t1= tag )? (t2= tag_default )? t3= type ( OPTIONAL_KW | DEFAULT_KW v= value )? )
			DebugEnterAlt(1);
			// Smi.g:1280:7: name= LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=>t1= tag )? (t2= tag_default )? t3= type ( OPTIONAL_KW | DEFAULT_KW v= value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1280, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_elementType_tagged7896); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1281, 2);
			if (state.backtracking == 0)
			{
				 
					    retval.result = new TaggedElementType((name!=null?name.Text:null));
				    
			}
			DebugLocation(1284, 2);
			// Smi.g:1284:2: ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=>t1= tag )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==L_BRACKET))
			{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt142 = 1;
				}
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1284:3: ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=>t1= tag
				{
				DebugLocation(1284, 41);
				PushFollow(Follow._tag_in_elementType_tagged7920);
				t1=tag();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t1.Tree);
				DebugLocation(1284, 46);
				if (state.backtracking == 0)
				{
					 retval.result.Tag = (t1!=null?t1.result:default(Tag)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(1285, 5);
			// Smi.g:1285:5: (t2= tag_default )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_1 = input.LA(1);

			if ((LA143_1==AUTOMATIC_KW||LA143_1==EXPLICIT_KW||LA143_1==IMPLICIT_KW))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1285:6: t2= tag_default
				{
				DebugLocation(1285, 8);
				PushFollow(Follow._tag_default_in_elementType_tagged7934);
				t2=tag_default();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t2.Tree);
				DebugLocation(1285, 21);
				if (state.backtracking == 0)
				{
					 retval.result.TagDefault = (t2!=null?t2.result:default(TagDefault)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(1286, 4);
			PushFollow(Follow._type_in_elementType_tagged7944);
			t3=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t3.Tree);
			DebugLocation(1286, 10);
			if (state.backtracking == 0)
			{
				  retval.result.Subtype = (t3!=null?t3.result:default(ISmiType)); 
			}
			DebugLocation(1287, 2);
			// Smi.g:1287:2: ( OPTIONAL_KW | DEFAULT_KW v= value )?
			int alt144=3;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			int LA144_1 = input.LA(1);

			if ((LA144_1==OPTIONAL_KW))
			{
				alt144 = 1;
			}
			else if ((LA144_1==DEFAULT_KW))
			{
				alt144 = 2;
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1287:3: OPTIONAL_KW
				{
				DebugLocation(1287, 3);
				OPTIONAL_KW331=(IToken)Match(input,OPTIONAL_KW,Follow._OPTIONAL_KW_in_elementType_tagged7950); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPTIONAL_KW331_tree = (CommonTree)adaptor.Create(OPTIONAL_KW331);
				adaptor.AddChild(root_0, OPTIONAL_KW331_tree);
				}
				DebugLocation(1287, 15);
				if (state.backtracking == 0)
				{
					 retval.result.Optional = true; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1288:4: DEFAULT_KW v= value
				{
				DebugLocation(1288, 4);
				DEFAULT_KW332=(IToken)Match(input,DEFAULT_KW,Follow._DEFAULT_KW_in_elementType_tagged7958); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DEFAULT_KW332_tree = (CommonTree)adaptor.Create(DEFAULT_KW332);
				adaptor.AddChild(root_0, DEFAULT_KW332_tree);
				}
				DebugLocation(1288, 15);
				if (state.backtracking == 0)
				{
					 retval.result.Default = true; 
				}
				DebugLocation(1289, 3);
				PushFollow(Follow._value_in_elementType_tagged7965);
				v=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
				DebugLocation(1289, 10);
				if (state.backtracking == 0)
				{
					 retval.result.Value = (v!=null?v.result:default(ISmiValue)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementType_tagged", 94);
			LeaveRule("elementType_tagged", 94);
			LeaveRule_elementType_tagged();
		}
		DebugLocation(1290, 1);
		} finally { DebugExitRule(GrammarFileName, "elementType_tagged"); }
		return retval;

	}
	// $ANTLR end "elementType_tagged"

	private sealed partial class namedNumber_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedNumber result;
		public namedNumber_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_namedNumber();
	partial void LeaveRule_namedNumber();
	// $ANTLR start "namedNumber"
	// Smi.g:1295:1: namedNumber returns [NamedNumber result] : name= LOWER L_PAREN (sn= signed_number |dv= defined_value ) R_PAREN ;
	[GrammarRule("namedNumber")]
	private SmiParser.namedNumber_return namedNumber()
	{
		EnterRule_namedNumber();
		EnterRule("namedNumber", 95);
		TraceIn("namedNumber", 95);
		SmiParser.namedNumber_return retval = new SmiParser.namedNumber_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken L_PAREN333 = default(IToken);
		IToken R_PAREN334 = default(IToken);
		SmiParser.signed_number_return sn = default(SmiParser.signed_number_return);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree L_PAREN333_tree = default(CommonTree);
		CommonTree R_PAREN334_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namedNumber");
		DebugLocation(1295, 1);
		try
		{
			// Smi.g:1296:5: (name= LOWER L_PAREN (sn= signed_number |dv= defined_value ) R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:1296:7: name= LOWER L_PAREN (sn= signed_number |dv= defined_value ) R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1296, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_namedNumber7993); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1297, 2);
			L_PAREN333=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_namedNumber7997); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN333_tree = (CommonTree)adaptor.Create(L_PAREN333);
			adaptor.AddChild(root_0, L_PAREN333_tree);
			}
			DebugLocation(1297, 10);
			// Smi.g:1297:10: (sn= signed_number |dv= defined_value )
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if ((LA145_1==MINUS||LA145_1==NUMBER))
			{
				alt145 = 1;
			}
			else if ((LA145_1==LOWER||LA145_1==UPPER))
			{
				alt145 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1297:11: sn= signed_number
				{
				DebugLocation(1297, 13);
				PushFollow(Follow._signed_number_in_namedNumber8002);
				sn=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sn.Tree);
				DebugLocation(1297, 28);
				if (state.backtracking == 0)
				{
					 retval.result = new NamedNumber((name!=null?name.Text:null), (sn!=null?sn.result:default(NumberLiteralValue))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1298:4: dv= defined_value
				{
				DebugLocation(1298, 6);
				PushFollow(Follow._defined_value_in_namedNumber8012);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(1298, 21);
				if (state.backtracking == 0)
				{
					 retval.result = new NamedNumber((name!=null?name.Text:null), (dv!=null?dv.result:default(DefinedValue))); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(145); }

			DebugLocation(1298, 77);
			R_PAREN334=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_namedNumber8017); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN334_tree = (CommonTree)adaptor.Create(R_PAREN334);
			adaptor.AddChild(root_0, R_PAREN334_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namedNumber", 95);
			LeaveRule("namedNumber", 95);
			LeaveRule_namedNumber();
		}
		DebugLocation(1299, 1);
		} finally { DebugExitRule(GrammarFileName, "namedNumber"); }
		return retval;

	}
	// $ANTLR end "namedNumber"

	private sealed partial class signed_number_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NumberLiteralValue result;
		public signed_number_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_signed_number();
	partial void LeaveRule_signed_number();
	// $ANTLR start "signed_number"
	// Smi.g:1301:1: signed_number returns [NumberLiteralValue result] : ( MINUS num= NUMBER |num2= NUMBER );
	[GrammarRule("signed_number")]
	private SmiParser.signed_number_return signed_number()
	{
		EnterRule_signed_number();
		EnterRule("signed_number", 96);
		TraceIn("signed_number", 96);
		SmiParser.signed_number_return retval = new SmiParser.signed_number_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken num = default(IToken);
		IToken num2 = default(IToken);
		IToken MINUS335 = default(IToken);

		CommonTree num_tree = default(CommonTree);
		CommonTree num2_tree = default(CommonTree);
		CommonTree MINUS335_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "signed_number");
		DebugLocation(1301, 1);
		try
		{
			// Smi.g:1302:5: ( MINUS num= NUMBER |num2= NUMBER )
			int alt146=2;
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==MINUS))
			{
				alt146 = 1;
			}
			else if ((LA146_1==NUMBER))
			{
				alt146 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1302:7: MINUS num= NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1302, 7);
				MINUS335=(IToken)Match(input,MINUS,Follow._MINUS_in_signed_number8035); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS335_tree = (CommonTree)adaptor.Create(MINUS335);
				adaptor.AddChild(root_0, MINUS335_tree);
				}
				DebugLocation(1302, 16);
				num=(IToken)Match(input,NUMBER,Follow._NUMBER_in_signed_number8039); if (state.failed) return retval;
				if (state.backtracking == 0) {
				num_tree = (CommonTree)adaptor.Create(num);
				adaptor.AddChild(root_0, num_tree);
				}
				DebugLocation(1302, 24);
				if (state.backtracking == 0)
				{
					 retval.result = new NumberLiteralValue(-1 * long.Parse((num!=null?num.Text:null))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1303:4: num2= NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1303, 8);
				num2=(IToken)Match(input,NUMBER,Follow._NUMBER_in_signed_number8048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				num2_tree = (CommonTree)adaptor.Create(num2);
				adaptor.AddChild(root_0, num2_tree);
				}
				DebugLocation(1303, 16);
				if (state.backtracking == 0)
				{
					 retval.result = new NumberLiteralValue(ulong.Parse((num2!=null?num2.Text:null))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("signed_number", 96);
			LeaveRule("signed_number", 96);
			LeaveRule_signed_number();
		}
		DebugLocation(1304, 1);
		} finally { DebugExitRule(GrammarFileName, "signed_number"); }
		return retval;

	}
	// $ANTLR end "signed_number"

	private sealed partial class element_set_specs_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ElementSetRange result = new ElementSetRange();
		public element_set_specs_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_element_set_specs();
	partial void LeaveRule_element_set_specs();
	// $ANTLR start "element_set_specs"
	// Smi.g:1306:1: element_set_specs returns [ElementSetRange result = new ElementSetRange()] : left= element_set_spec ( COMMA DOTDOTDOT )? ( COMMA right= element_set_spec )? ;
	[GrammarRule("element_set_specs")]
	private SmiParser.element_set_specs_return element_set_specs()
	{
		EnterRule_element_set_specs();
		EnterRule("element_set_specs", 97);
		TraceIn("element_set_specs", 97);
		SmiParser.element_set_specs_return retval = new SmiParser.element_set_specs_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA336 = default(IToken);
		IToken DOTDOTDOT337 = default(IToken);
		IToken COMMA338 = default(IToken);
		SmiParser.element_set_spec_return left = default(SmiParser.element_set_spec_return);
		SmiParser.element_set_spec_return right = default(SmiParser.element_set_spec_return);

		CommonTree COMMA336_tree = default(CommonTree);
		CommonTree DOTDOTDOT337_tree = default(CommonTree);
		CommonTree COMMA338_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "element_set_specs");
		DebugLocation(1306, 2);
		try
		{
			// Smi.g:1307:5: (left= element_set_spec ( COMMA DOTDOTDOT )? ( COMMA right= element_set_spec )? )
			DebugEnterAlt(1);
			// Smi.g:1307:7: left= element_set_spec ( COMMA DOTDOTDOT )? ( COMMA right= element_set_spec )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1307, 11);
			PushFollow(Follow._element_set_spec_in_element_set_specs8070);
			left=element_set_spec();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1307, 29);
			if (state.backtracking == 0)
			{
				 retval.result.LeftElement = (left!=null?left.result:default(ConstraintElement)); 
			}
			DebugLocation(1308, 3);
			// Smi.g:1308:3: ( COMMA DOTDOTDOT )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_1 = input.LA(1);

			if ((LA147_1==COMMA))
			{
				int LA147_2 = input.LA(2);

				if ((LA147_2==DOTDOTDOT))
				{
					alt147 = 1;
				}
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1308:4: COMMA DOTDOTDOT
				{
				DebugLocation(1308, 4);
				COMMA336=(IToken)Match(input,COMMA,Follow._COMMA_in_element_set_specs8078); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA336_tree = (CommonTree)adaptor.Create(COMMA336);
				adaptor.AddChild(root_0, COMMA336_tree);
				}
				DebugLocation(1308, 10);
				DOTDOTDOT337=(IToken)Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_element_set_specs8080); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTDOTDOT337_tree = (CommonTree)adaptor.Create(DOTDOTDOT337);
				adaptor.AddChild(root_0, DOTDOTDOT337_tree);
				}
				DebugLocation(1308, 20);
				if (state.backtracking == 0)
				{
					 retval.result.ContainsEllipsis = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(147); }

			DebugLocation(1309, 3);
			// Smi.g:1309:3: ( COMMA right= element_set_spec )?
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			int LA148_1 = input.LA(1);

			if ((LA148_1==COMMA))
			{
				alt148 = 1;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1309:4: COMMA right= element_set_spec
				{
				DebugLocation(1309, 4);
				COMMA338=(IToken)Match(input,COMMA,Follow._COMMA_in_element_set_specs8090); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA338_tree = (CommonTree)adaptor.Create(COMMA338);
				adaptor.AddChild(root_0, COMMA338_tree);
				}
				DebugLocation(1309, 15);
				PushFollow(Follow._element_set_spec_in_element_set_specs8094);
				right=element_set_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, right.Tree);
				DebugLocation(1309, 33);
				if (state.backtracking == 0)
				{
					 retval.result.RightElement = (right!=null?right.result:default(ConstraintElement)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_set_specs", 97);
			LeaveRule("element_set_specs", 97);
			LeaveRule_element_set_specs();
		}
		DebugLocation(1310, 2);
		} finally { DebugExitRule(GrammarFileName, "element_set_specs"); }
		return retval;

	}
	// $ANTLR end "element_set_specs"

	private sealed partial class exception_spec_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ExceptionSpec result;
		public exception_spec_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_exception_spec();
	partial void LeaveRule_exception_spec();
	// $ANTLR start "exception_spec"
	// Smi.g:1312:1: exception_spec returns [ExceptionSpec result] : EXCLAMATION ( ( signed_number )=>sn= signed_number | ( defined_value )=>dv= defined_value |t= type COLON v= value ) ;
	[GrammarRule("exception_spec")]
	private SmiParser.exception_spec_return exception_spec()
	{
		EnterRule_exception_spec();
		EnterRule("exception_spec", 98);
		TraceIn("exception_spec", 98);
		SmiParser.exception_spec_return retval = new SmiParser.exception_spec_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EXCLAMATION339 = default(IToken);
		IToken COLON340 = default(IToken);
		SmiParser.signed_number_return sn = default(SmiParser.signed_number_return);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);
		SmiParser.type_return t = default(SmiParser.type_return);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree EXCLAMATION339_tree = default(CommonTree);
		CommonTree COLON340_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exception_spec");
		DebugLocation(1312, 17);
		try
		{
			// Smi.g:1313:6: ( EXCLAMATION ( ( signed_number )=>sn= signed_number | ( defined_value )=>dv= defined_value |t= type COLON v= value ) )
			DebugEnterAlt(1);
			// Smi.g:1313:8: EXCLAMATION ( ( signed_number )=>sn= signed_number | ( defined_value )=>dv= defined_value |t= type COLON v= value )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1313, 8);
			EXCLAMATION339=(IToken)Match(input,EXCLAMATION,Follow._EXCLAMATION_in_exception_spec8119); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXCLAMATION339_tree = (CommonTree)adaptor.Create(EXCLAMATION339);
			adaptor.AddChild(root_0, EXCLAMATION339_tree);
			}
			DebugLocation(1314, 17);
			// Smi.g:1314:17: ( ( signed_number )=>sn= signed_number | ( defined_value )=>dv= defined_value |t= type COLON v= value )
			int alt149=3;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_1 = input.LA(1);

			if ((LA149_1==MINUS) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt149 = 1;
			}
			else if ((LA149_1==NUMBER) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt149 = 1;
			}
			else if ((LA149_1==UPPER))
			{
				int LA149_2 = input.LA(2);

				if ((LA149_2==DOT))
				{
					int LA149_3 = input.LA(3);

					if ((LA149_3==LOWER) && (EvaluatePredicate(synpred41_Smi_fragment)))
					{
						alt149 = 2;
					}
					else if ((LA149_3==UPPER))
					{
						alt149 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 149, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA149_2==COLON||LA149_2==L_PAREN))
				{
					alt149 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 149, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA149_1==LOWER))
			{
				int LA149_2 = input.LA(2);

				if ((LA149_2==LESS))
				{
					alt149 = 3;
				}
				else if ((LA149_2==R_PAREN) && (EvaluatePredicate(synpred41_Smi_fragment)))
				{
					alt149 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 149, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA149_1==ANY_KW||LA149_1==BIT_KW||(LA149_1>=BMP_STR_KW && LA149_1<=BOOLEAN_KW)||LA149_1==CHARACTER_KW||LA149_1==CHOICE_KW||LA149_1==EMBEDDED_KW||LA149_1==ENUMERATED_KW||LA149_1==ERROR_KW||LA149_1==EXTERNAL_KW||(LA149_1>=GENERALIZED_TIME_KW && LA149_1<=GRAPHIC_STR_KW)||LA149_1==IA5_STRING_KW||LA149_1==INTEGER_KW||LA149_1==ISO646_STR_KW||LA149_1==L_BRACKET||LA149_1==NULL_KW||LA149_1==NUMERIC_STR_KW||(LA149_1>=OBJECT_KW && LA149_1<=OCTET_KW)||LA149_1==OPERATION_KW||LA149_1==PRINTABLE_STR_KW||LA149_1==REAL_KW||(LA149_1>=SEQUENCE_KW && LA149_1<=SET_KW)||LA149_1==T61_STR_KW||LA149_1==TELETEX_STR_KW||LA149_1==UNIVERSAL_STR_KW||(LA149_1>=UTC_TIME_KW && LA149_1<=VISIBLE_STR_KW)||LA149_1==131||LA149_1==137||(LA149_1>=158 && LA149_1<=161)||(LA149_1>=163 && LA149_1<=165)||LA149_1==179||LA149_1==188||LA149_1==191))
			{
				alt149 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 149, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1314:19: ( signed_number )=>sn= signed_number
				{
				DebugLocation(1314, 40);
				PushFollow(Follow._signed_number_in_exception_spec8148);
				sn=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sn.Tree);
				DebugLocation(1314, 55);
				if (state.backtracking == 0)
				{
					 retval.result = new ExceptionSpec((sn!=null?sn.result:default(NumberLiteralValue))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1315:21: ( defined_value )=>dv= defined_value
				{
				DebugLocation(1315, 42);
				PushFollow(Follow._defined_value_in_exception_spec8180);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(1315, 57);
				if (state.backtracking == 0)
				{
					 retval.result = new ExceptionSpec((dv!=null?dv.result:default(DefinedValue))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1316:21: t= type COLON v= value
				{
				DebugLocation(1316, 22);
				PushFollow(Follow._type_in_exception_spec8206);
				t=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(1316, 28);
				COLON340=(IToken)Match(input,COLON,Follow._COLON_in_exception_spec8208); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON340_tree = (CommonTree)adaptor.Create(COLON340);
				adaptor.AddChild(root_0, COLON340_tree);
				}
				DebugLocation(1316, 35);
				PushFollow(Follow._value_in_exception_spec8212);
				v=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
				DebugLocation(1316, 42);
				if (state.backtracking == 0)
				{
					 retval.result = new ExceptionSpec((t!=null?t.result:default(ISmiType)), (v!=null?v.result:default(ISmiValue))); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exception_spec", 98);
			LeaveRule("exception_spec", 98);
			LeaveRule_exception_spec();
		}
		DebugLocation(1317, 17);
		} finally { DebugExitRule(GrammarFileName, "exception_spec"); }
		return retval;

	}
	// $ANTLR end "exception_spec"

	private sealed partial class element_set_spec_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ConstraintElement result;
		public element_set_spec_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_element_set_spec();
	partial void LeaveRule_element_set_spec();
	// $ANTLR start "element_set_spec"
	// Smi.g:1319:1: element_set_spec returns [ConstraintElement result] : (n= element_set_spec_normal | ALL_KW EXCEPT_KW c= constraint_elements );
	[GrammarRule("element_set_spec")]
	private SmiParser.element_set_spec_return element_set_spec()
	{
		EnterRule_element_set_spec();
		EnterRule("element_set_spec", 99);
		TraceIn("element_set_spec", 99);
		SmiParser.element_set_spec_return retval = new SmiParser.element_set_spec_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ALL_KW341 = default(IToken);
		IToken EXCEPT_KW342 = default(IToken);
		SmiParser.element_set_spec_normal_return n = default(SmiParser.element_set_spec_normal_return);
		SmiParser.constraint_elements_return c = default(SmiParser.constraint_elements_return);

		CommonTree ALL_KW341_tree = default(CommonTree);
		CommonTree EXCEPT_KW342_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "element_set_spec");
		DebugLocation(1319, 2);
		try
		{
			// Smi.g:1320:6: (n= element_set_spec_normal | ALL_KW EXCEPT_KW c= constraint_elements )
			int alt150=2;
			try { DebugEnterDecision(150, false);
			int LA150_1 = input.LA(1);

			if ((LA150_1==ANY_KW||LA150_1==BIT_KW||(LA150_1>=BMP_STR_KW && LA150_1<=BOOLEAN_KW)||(LA150_1>=B_STRING && LA150_1<=CHARACTER_KW)||LA150_1==CHOICE_KW||LA150_1==C_STRING||LA150_1==EMBEDDED_KW||LA150_1==ENUMERATED_KW||LA150_1==ERROR_KW||(LA150_1>=EXTERNAL_KW && LA150_1<=GRAPHIC_STR_KW)||(LA150_1>=H_STRING && LA150_1<=IA5_STRING_KW)||LA150_1==INCLUDES_KW||LA150_1==INTEGER_KW||LA150_1==ISO646_STR_KW||(LA150_1>=LOWER && LA150_1<=L_PAREN)||(LA150_1>=MINUS && LA150_1<=NUMERIC_STR_KW)||(LA150_1>=OBJECT_KW && LA150_1<=OCTET_KW)||LA150_1==OPERATION_KW||LA150_1==PATTERN_KW||LA150_1==PLUS_INFINITY_KW||LA150_1==PRINTABLE_STR_KW||LA150_1==REAL_KW||(LA150_1>=SEQUENCE_KW && LA150_1<=SET_KW)||LA150_1==SIZE_KW||LA150_1==T61_STR_KW||(LA150_1>=TELETEX_STR_KW && LA150_1<=TRUE_KW)||(LA150_1>=UNIVERSAL_STR_KW && LA150_1<=WITH_KW)||LA150_1==131||LA150_1==137||(LA150_1>=158 && LA150_1<=161)||(LA150_1>=163 && LA150_1<=165)||LA150_1==179||LA150_1==188||LA150_1==191))
			{
				alt150 = 1;
			}
			else if ((LA150_1==ALL_KW))
			{
				alt150 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1320:8: n= element_set_spec_normal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1320, 9);
				PushFollow(Follow._element_set_spec_normal_in_element_set_spec8251);
				n=element_set_spec_normal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(1320, 34);
				if (state.backtracking == 0)
				{
					 retval.result = (n!=null?n.result:default(NormalConstraintElement)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1321:8: ALL_KW EXCEPT_KW c= constraint_elements
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1321, 8);
				ALL_KW341=(IToken)Match(input,ALL_KW,Follow._ALL_KW_in_element_set_spec8262); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ALL_KW341_tree = (CommonTree)adaptor.Create(ALL_KW341);
				adaptor.AddChild(root_0, ALL_KW341_tree);
				}
				DebugLocation(1321, 15);
				EXCEPT_KW342=(IToken)Match(input,EXCEPT_KW,Follow._EXCEPT_KW_in_element_set_spec8264); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXCEPT_KW342_tree = (CommonTree)adaptor.Create(EXCEPT_KW342);
				adaptor.AddChild(root_0, EXCEPT_KW342_tree);
				}
				DebugLocation(1321, 26);
				PushFollow(Follow._constraint_elements_in_element_set_spec8268);
				c=constraint_elements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1321, 47);
				if (state.backtracking == 0)
				{
					 retval.result = new AllExceptConstraintElement((c!=null?c.result:default(ConstraintElement))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_set_spec", 99);
			LeaveRule("element_set_spec", 99);
			LeaveRule_element_set_spec();
		}
		DebugLocation(1322, 2);
		} finally { DebugExitRule(GrammarFileName, "element_set_spec"); }
		return retval;

	}
	// $ANTLR end "element_set_spec"

	private sealed partial class element_set_spec_normal_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NormalConstraintElement result = new NormalConstraintElement();
		public element_set_spec_normal_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_element_set_spec_normal();
	partial void LeaveRule_element_set_spec_normal();
	// $ANTLR start "element_set_spec_normal"
	// Smi.g:1324:1: element_set_spec_normal returns [NormalConstraintElement result = new NormalConstraintElement()] : left= intersections ( ( BAR | UNION_KW ) right= intersections )* ;
	[GrammarRule("element_set_spec_normal")]
	private SmiParser.element_set_spec_normal_return element_set_spec_normal()
	{
		EnterRule_element_set_spec_normal();
		EnterRule("element_set_spec_normal", 100);
		TraceIn("element_set_spec_normal", 100);
		SmiParser.element_set_spec_normal_return retval = new SmiParser.element_set_spec_normal_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set343 = default(IToken);
		SmiParser.intersections_return left = default(SmiParser.intersections_return);
		SmiParser.intersections_return right = default(SmiParser.intersections_return);

		CommonTree set343_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "element_set_spec_normal");
		DebugLocation(1324, 2);
		try
		{
			// Smi.g:1325:5: (left= intersections ( ( BAR | UNION_KW ) right= intersections )* )
			DebugEnterAlt(1);
			// Smi.g:1325:7: left= intersections ( ( BAR | UNION_KW ) right= intersections )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1325, 11);
			PushFollow(Follow._intersections_in_element_set_spec_normal8291);
			left=intersections();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1326, 3);
			if (state.backtracking == 0)
			{
				  
						 retval.result.Add(new NormalConstraintElement((left!=null?left.result:default(ConstraintElement))));
					 
			}
			DebugLocation(1329, 3);
			// Smi.g:1329:3: ( ( BAR | UNION_KW ) right= intersections )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_1 = input.LA(1);

				if ((LA151_1==BAR||LA151_1==UNION_KW))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1329:5: ( BAR | UNION_KW ) right= intersections
					{
					DebugLocation(1329, 5);

					set343=(IToken)input.LT(1);
					if (input.LA(1)==BAR||input.LA(1)==UNION_KW)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set343));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1329, 29);
					PushFollow(Follow._intersections_in_element_set_spec_normal8315);
					right=intersections();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1329, 44);
					if (state.backtracking == 0)
					{
						 retval.result.Add(new NormalConstraintElement((right!=null?right.result:default(ConstraintElement)))); 
					}

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_set_spec_normal", 100);
			LeaveRule("element_set_spec_normal", 100);
			LeaveRule_element_set_spec_normal();
		}
		DebugLocation(1330, 2);
		} finally { DebugExitRule(GrammarFileName, "element_set_spec_normal"); }
		return retval;

	}
	// $ANTLR end "element_set_spec_normal"

	private sealed partial class intersections_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ConstraintElement result = new NormalConstraintElement();
		public intersections_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_intersections();
	partial void LeaveRule_intersections();
	// $ANTLR start "intersections"
	// Smi.g:1332:1: intersections returns [ConstraintElement result = new NormalConstraintElement()] : c1= constraint_elements_except ( ( INTERSECTION | INTERSECTION_KW ) c2= constraint_elements_except )* ;
	[GrammarRule("intersections")]
	private SmiParser.intersections_return intersections()
	{
		EnterRule_intersections();
		EnterRule("intersections", 101);
		TraceIn("intersections", 101);
		SmiParser.intersections_return retval = new SmiParser.intersections_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set344 = default(IToken);
		SmiParser.constraint_elements_except_return c1 = default(SmiParser.constraint_elements_except_return);
		SmiParser.constraint_elements_except_return c2 = default(SmiParser.constraint_elements_except_return);

		CommonTree set344_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "intersections");
		DebugLocation(1332, 5);
		try
		{
			// Smi.g:1333:6: (c1= constraint_elements_except ( ( INTERSECTION | INTERSECTION_KW ) c2= constraint_elements_except )* )
			DebugEnterAlt(1);
			// Smi.g:1333:8: c1= constraint_elements_except ( ( INTERSECTION | INTERSECTION_KW ) c2= constraint_elements_except )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1333, 10);
			PushFollow(Follow._constraint_elements_except_in_intersections8342);
			c1=constraint_elements_except();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, c1.Tree);
			DebugLocation(1334, 3);
			if (state.backtracking == 0)
			{

					     retval.result.Add((c1!=null?c1.result:default(ConstraintElement))); 
				     
			}
			DebugLocation(1337, 6);
			// Smi.g:1337:6: ( ( INTERSECTION | INTERSECTION_KW ) c2= constraint_elements_except )*
			try { DebugEnterSubRule(152);
			while (true)
			{
				int alt152=2;
				try { DebugEnterDecision(152, false);
				int LA152_1 = input.LA(1);

				if (((LA152_1>=INTERSECTION && LA152_1<=INTERSECTION_KW)))
				{
					alt152 = 1;
				}


				} finally { DebugExitDecision(152); }
				switch ( alt152 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1337:8: ( INTERSECTION | INTERSECTION_KW ) c2= constraint_elements_except
					{
					DebugLocation(1337, 8);

					set344=(IToken)input.LT(1);
					if ((input.LA(1)>=INTERSECTION && input.LA(1)<=INTERSECTION_KW))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set344));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1338, 5);
					PushFollow(Follow._constraint_elements_except_in_intersections8371);
					c2=constraint_elements_except();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, c2.Tree);
					DebugLocation(1338, 33);
					if (state.backtracking == 0)
					{
						 retval.result.Add((c2!=null?c2.result:default(ConstraintElement))); 
					}

					}
					break;

				default:
					goto loop152;
				}
			}

			loop152:
				;

			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("intersections", 101);
			LeaveRule("intersections", 101);
			LeaveRule_intersections();
		}
		DebugLocation(1339, 5);
		} finally { DebugExitRule(GrammarFileName, "intersections"); }
		return retval;

	}
	// $ANTLR end "intersections"

	private sealed partial class constraint_elements_except_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ConstraintElement result;
		public constraint_elements_except_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_constraint_elements_except();
	partial void LeaveRule_constraint_elements_except();
	// $ANTLR start "constraint_elements_except"
	// Smi.g:1341:1: constraint_elements_except returns [ConstraintElement result] : c= constraint_elements ( EXCEPT_KW c2= constraint_elements )? ;
	[GrammarRule("constraint_elements_except")]
	private SmiParser.constraint_elements_except_return constraint_elements_except()
	{
		EnterRule_constraint_elements_except();
		EnterRule("constraint_elements_except", 102);
		TraceIn("constraint_elements_except", 102);
		SmiParser.constraint_elements_except_return retval = new SmiParser.constraint_elements_except_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EXCEPT_KW345 = default(IToken);
		SmiParser.constraint_elements_return c = default(SmiParser.constraint_elements_return);
		SmiParser.constraint_elements_return c2 = default(SmiParser.constraint_elements_return);

		CommonTree EXCEPT_KW345_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraint_elements_except");
		DebugLocation(1341, 71);
		try
		{
			// Smi.g:1342:6: (c= constraint_elements ( EXCEPT_KW c2= constraint_elements )? )
			DebugEnterAlt(1);
			// Smi.g:1342:8: c= constraint_elements ( EXCEPT_KW c2= constraint_elements )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1342, 9);
			PushFollow(Follow._constraint_elements_in_constraint_elements_except8398);
			c=constraint_elements();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
			DebugLocation(1342, 30);
			if (state.backtracking == 0)
			{
				 retval.result = (c!=null?c.result:default(ConstraintElement)); 
			}
			DebugLocation(1343, 3);
			// Smi.g:1343:3: ( EXCEPT_KW c2= constraint_elements )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_1 = input.LA(1);

			if ((LA153_1==EXCEPT_KW))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1343:4: EXCEPT_KW c2= constraint_elements
				{
				DebugLocation(1343, 4);
				EXCEPT_KW345=(IToken)Match(input,EXCEPT_KW,Follow._EXCEPT_KW_in_constraint_elements_except8405); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXCEPT_KW345_tree = (CommonTree)adaptor.Create(EXCEPT_KW345);
				adaptor.AddChild(root_0, EXCEPT_KW345_tree);
				}
				DebugLocation(1343, 16);
				PushFollow(Follow._constraint_elements_in_constraint_elements_except8409);
				c2=constraint_elements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c2.Tree);
				DebugLocation(1343, 37);
				if (state.backtracking == 0)
				{
					 retval.result.Element = (c2!=null?c2.result:default(ConstraintElement)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint_elements_except", 102);
			LeaveRule("constraint_elements_except", 102);
			LeaveRule_constraint_elements_except();
		}
		DebugLocation(1343, 71);
		} finally { DebugExitRule(GrammarFileName, "constraint_elements_except"); }
		return retval;

	}
	// $ANTLR end "constraint_elements_except"

	private sealed partial class constraint_elements_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ConstraintElement result;
		public constraint_elements_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_constraint_elements();
	partial void LeaveRule_constraint_elements();
	// $ANTLR start "constraint_elements"
	// Smi.g:1345:1: constraint_elements returns [ConstraintElement result] : ( ( value_range )=>vr= value_range | ( value )=>v= value | SIZE_KW c= constraint | FROM_KW c2= constraint | L_PAREN e= element_set_spec R_PAREN |i= constraint_elements_includes | PATTERN_KW v2= value | WITH_KW ( COMPONENT_KW co1= constraint |cs= constraint_elements_components ) );
	[GrammarRule("constraint_elements")]
	private SmiParser.constraint_elements_return constraint_elements()
	{
		EnterRule_constraint_elements();
		EnterRule("constraint_elements", 103);
		TraceIn("constraint_elements", 103);
		SmiParser.constraint_elements_return retval = new SmiParser.constraint_elements_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SIZE_KW346 = default(IToken);
		IToken FROM_KW347 = default(IToken);
		IToken L_PAREN348 = default(IToken);
		IToken R_PAREN349 = default(IToken);
		IToken PATTERN_KW350 = default(IToken);
		IToken WITH_KW351 = default(IToken);
		IToken COMPONENT_KW352 = default(IToken);
		SmiParser.value_range_return vr = default(SmiParser.value_range_return);
		SmiParser.value_return v = default(SmiParser.value_return);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);
		SmiParser.constraint_return c2 = default(SmiParser.constraint_return);
		SmiParser.element_set_spec_return e = default(SmiParser.element_set_spec_return);
		SmiParser.constraint_elements_includes_return i = default(SmiParser.constraint_elements_includes_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);
		SmiParser.constraint_return co1 = default(SmiParser.constraint_return);
		SmiParser.constraint_elements_components_return cs = default(SmiParser.constraint_elements_components_return);

		CommonTree SIZE_KW346_tree = default(CommonTree);
		CommonTree FROM_KW347_tree = default(CommonTree);
		CommonTree L_PAREN348_tree = default(CommonTree);
		CommonTree R_PAREN349_tree = default(CommonTree);
		CommonTree PATTERN_KW350_tree = default(CommonTree);
		CommonTree WITH_KW351_tree = default(CommonTree);
		CommonTree COMPONENT_KW352_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraint_elements");
		DebugLocation(1345, 1);
		try
		{
			// Smi.g:1346:5: ( ( value_range )=>vr= value_range | ( value )=>v= value | SIZE_KW c= constraint | FROM_KW c2= constraint | L_PAREN e= element_set_spec R_PAREN |i= constraint_elements_includes | PATTERN_KW v2= value | WITH_KW ( COMPONENT_KW co1= constraint |cs= constraint_elements_components ) )
			int alt155=8;
			try { DebugEnterDecision(155, false);
			try
			{
				alt155 = dfa155.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1346:7: ( value_range )=>vr= value_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1346, 26);
				PushFollow(Follow._value_range_in_constraint_elements8437);
				vr=value_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, vr.Tree);
				DebugLocation(1346, 39);
				if (state.backtracking == 0)
				{
					 retval.result = new ValueRangeConstraintElement((vr!=null?vr.result:default(ValueRange))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1347:7: ( value )=>v= value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1347, 19);
				PushFollow(Follow._value_in_constraint_elements8455);
				v=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
				DebugLocation(1347, 26);
				if (state.backtracking == 0)
				{
					 retval.result = new ValueConstraintElement((v!=null?v.result:default(ISmiValue))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1348:7: SIZE_KW c= constraint
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1348, 7);
				SIZE_KW346=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_constraint_elements8465); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW346_tree = (CommonTree)adaptor.Create(SIZE_KW346);
				adaptor.AddChild(root_0, SIZE_KW346_tree);
				}
				DebugLocation(1348, 16);
				PushFollow(Follow._constraint_in_constraint_elements8469);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1348, 28);
				if (state.backtracking == 0)
				{
					 retval.result = new SizeConstraintElement((c!=null?c.result:default(Constraint))); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:1349:7: FROM_KW c2= constraint
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1349, 7);
				FROM_KW347=(IToken)Match(input,FROM_KW,Follow._FROM_KW_in_constraint_elements8479); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM_KW347_tree = (CommonTree)adaptor.Create(FROM_KW347);
				adaptor.AddChild(root_0, FROM_KW347_tree);
				}
				DebugLocation(1349, 17);
				PushFollow(Follow._constraint_in_constraint_elements8483);
				c2=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c2.Tree);
				DebugLocation(1349, 29);
				if (state.backtracking == 0)
				{
					 retval.result = new FromConstraintElement((c2!=null?c2.result:default(Constraint))); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:1350:7: L_PAREN e= element_set_spec R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1350, 7);
				L_PAREN348=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_constraint_elements8493); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN348_tree = (CommonTree)adaptor.Create(L_PAREN348);
				adaptor.AddChild(root_0, L_PAREN348_tree);
				}
				DebugLocation(1350, 16);
				PushFollow(Follow._element_set_spec_in_constraint_elements8497);
				e=element_set_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(1350, 34);
				R_PAREN349=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_constraint_elements8499); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN349_tree = (CommonTree)adaptor.Create(R_PAREN349);
				adaptor.AddChild(root_0, R_PAREN349_tree);
				}
				DebugLocation(1350, 42);
				if (state.backtracking == 0)
				{
					 retval.result = new ElementSetConstraintElement((e!=null?e.result:default(ConstraintElement))); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:1351:7: i= constraint_elements_includes
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1351, 8);
				PushFollow(Follow._constraint_elements_includes_in_constraint_elements8511);
				i=constraint_elements_includes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i.Tree);
				DebugLocation(1351, 38);
				if (state.backtracking == 0)
				{
					 retval.result = (i!=null?i.result:default(IncludeTypeConstraintElement)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:1352:7: PATTERN_KW v2= value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1352, 7);
				PATTERN_KW350=(IToken)Match(input,PATTERN_KW,Follow._PATTERN_KW_in_constraint_elements8521); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PATTERN_KW350_tree = (CommonTree)adaptor.Create(PATTERN_KW350);
				adaptor.AddChild(root_0, PATTERN_KW350_tree);
				}
				DebugLocation(1352, 20);
				PushFollow(Follow._value_in_constraint_elements8525);
				v2=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
				DebugLocation(1352, 27);
				if (state.backtracking == 0)
				{
					 retval.result = new PatternConstraintElement((v2!=null?v2.result:default(ISmiValue))); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:1353:7: WITH_KW ( COMPONENT_KW co1= constraint |cs= constraint_elements_components )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1353, 7);
				WITH_KW351=(IToken)Match(input,WITH_KW,Follow._WITH_KW_in_constraint_elements8536); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITH_KW351_tree = (CommonTree)adaptor.Create(WITH_KW351);
				adaptor.AddChild(root_0, WITH_KW351_tree);
				}
				DebugLocation(1354, 6);
				// Smi.g:1354:6: ( COMPONENT_KW co1= constraint |cs= constraint_elements_components )
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, false);
				int LA154_1 = input.LA(1);

				if ((LA154_1==COMPONENT_KW))
				{
					alt154 = 1;
				}
				else if ((LA154_1==COMPONENTS_KW))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1354:7: COMPONENT_KW co1= constraint
					{
					DebugLocation(1354, 7);
					COMPONENT_KW352=(IToken)Match(input,COMPONENT_KW,Follow._COMPONENT_KW_in_constraint_elements8545); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMPONENT_KW352_tree = (CommonTree)adaptor.Create(COMPONENT_KW352);
					adaptor.AddChild(root_0, COMPONENT_KW352_tree);
					}
					DebugLocation(1354, 23);
					PushFollow(Follow._constraint_in_constraint_elements8549);
					co1=constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, co1.Tree);
					DebugLocation(1354, 35);
					if (state.backtracking == 0)
					{
						 retval.result = new WithComponentConstraintElement((co1!=null?co1.result:default(Constraint))); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1355:5: cs= constraint_elements_components
					{
					DebugLocation(1355, 7);
					PushFollow(Follow._constraint_elements_components_in_constraint_elements8560);
					cs=constraint_elements_components();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cs.Tree);
					DebugLocation(1355, 39);
					if (state.backtracking == 0)
					{
						 retval.result = (cs!=null?cs.result:default(WithComponentsConstraintElement)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(154); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint_elements", 103);
			LeaveRule("constraint_elements", 103);
			LeaveRule_constraint_elements();
		}
		DebugLocation(1356, 1);
		} finally { DebugExitRule(GrammarFileName, "constraint_elements"); }
		return retval;

	}
	// $ANTLR end "constraint_elements"

	private sealed partial class constraint_elements_includes_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IncludeTypeConstraintElement result = new IncludeTypeConstraintElement();
		public constraint_elements_includes_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_constraint_elements_includes();
	partial void LeaveRule_constraint_elements_includes();
	// $ANTLR start "constraint_elements_includes"
	// Smi.g:1358:1: constraint_elements_includes returns [IncludeTypeConstraintElement result = new IncludeTypeConstraintElement()] : ( INCLUDES_KW )? t= type ;
	[GrammarRule("constraint_elements_includes")]
	private SmiParser.constraint_elements_includes_return constraint_elements_includes()
	{
		EnterRule_constraint_elements_includes();
		EnterRule("constraint_elements_includes", 104);
		TraceIn("constraint_elements_includes", 104);
		SmiParser.constraint_elements_includes_return retval = new SmiParser.constraint_elements_includes_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INCLUDES_KW353 = default(IToken);
		SmiParser.type_return t = default(SmiParser.type_return);

		CommonTree INCLUDES_KW353_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraint_elements_includes");
		DebugLocation(1358, 1);
		try
		{
			// Smi.g:1359:5: ( ( INCLUDES_KW )? t= type )
			DebugEnterAlt(1);
			// Smi.g:1359:7: ( INCLUDES_KW )? t= type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1359, 7);
			// Smi.g:1359:7: ( INCLUDES_KW )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==INCLUDES_KW))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1359:8: INCLUDES_KW
				{
				DebugLocation(1359, 8);
				INCLUDES_KW353=(IToken)Match(input,INCLUDES_KW,Follow._INCLUDES_KW_in_constraint_elements_includes8582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INCLUDES_KW353_tree = (CommonTree)adaptor.Create(INCLUDES_KW353);
				adaptor.AddChild(root_0, INCLUDES_KW353_tree);
				}
				DebugLocation(1359, 20);
				if (state.backtracking == 0)
				{
					 retval.result.Includes = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(1360, 3);
			PushFollow(Follow._type_in_constraint_elements_includes8592);
			t=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
			DebugLocation(1360, 9);
			if (state.backtracking == 0)
			{
				 retval.result.ConstraintType = (t!=null?t.result:default(ISmiType)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint_elements_includes", 104);
			LeaveRule("constraint_elements_includes", 104);
			LeaveRule_constraint_elements_includes();
		}
		DebugLocation(1361, 1);
		} finally { DebugExitRule(GrammarFileName, "constraint_elements_includes"); }
		return retval;

	}
	// $ANTLR end "constraint_elements_includes"

	private sealed partial class constraint_elements_components_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public WithComponentsConstraintElement result = new WithComponentsConstraintElement();
		public constraint_elements_components_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_constraint_elements_components();
	partial void LeaveRule_constraint_elements_components();
	// $ANTLR start "constraint_elements_components"
	// Smi.g:1363:1: constraint_elements_components returns [WithComponentsConstraintElement result = new WithComponentsConstraintElement()] : COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? tcl= type_constraint_list R_BRACE ;
	[GrammarRule("constraint_elements_components")]
	private SmiParser.constraint_elements_components_return constraint_elements_components()
	{
		EnterRule_constraint_elements_components();
		EnterRule("constraint_elements_components", 105);
		TraceIn("constraint_elements_components", 105);
		SmiParser.constraint_elements_components_return retval = new SmiParser.constraint_elements_components_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMPONENTS_KW354 = default(IToken);
		IToken L_BRACE355 = default(IToken);
		IToken DOTDOTDOT356 = default(IToken);
		IToken COMMA357 = default(IToken);
		IToken R_BRACE358 = default(IToken);
		SmiParser.type_constraint_list_return tcl = default(SmiParser.type_constraint_list_return);

		CommonTree COMPONENTS_KW354_tree = default(CommonTree);
		CommonTree L_BRACE355_tree = default(CommonTree);
		CommonTree DOTDOTDOT356_tree = default(CommonTree);
		CommonTree COMMA357_tree = default(CommonTree);
		CommonTree R_BRACE358_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraint_elements_components");
		DebugLocation(1363, 4);
		try
		{
			// Smi.g:1364:5: ( COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? tcl= type_constraint_list R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1364:7: COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? tcl= type_constraint_list R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1364, 7);
			COMPONENTS_KW354=(IToken)Match(input,COMPONENTS_KW,Follow._COMPONENTS_KW_in_constraint_elements_components8612); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMPONENTS_KW354_tree = (CommonTree)adaptor.Create(COMPONENTS_KW354);
			adaptor.AddChild(root_0, COMPONENTS_KW354_tree);
			}
			DebugLocation(1364, 21);
			L_BRACE355=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_constraint_elements_components8614); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE355_tree = (CommonTree)adaptor.Create(L_BRACE355);
			adaptor.AddChild(root_0, L_BRACE355_tree);
			}
			DebugLocation(1364, 29);
			// Smi.g:1364:29: ( DOTDOTDOT COMMA )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==DOTDOTDOT))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1364:30: DOTDOTDOT COMMA
				{
				DebugLocation(1364, 30);
				DOTDOTDOT356=(IToken)Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_constraint_elements_components8617); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTDOTDOT356_tree = (CommonTree)adaptor.Create(DOTDOTDOT356);
				adaptor.AddChild(root_0, DOTDOTDOT356_tree);
				}
				DebugLocation(1364, 40);
				COMMA357=(IToken)Match(input,COMMA,Follow._COMMA_in_constraint_elements_components8619); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA357_tree = (CommonTree)adaptor.Create(COMMA357);
				adaptor.AddChild(root_0, COMMA357_tree);
				}
				DebugLocation(1364, 46);
				if (state.backtracking == 0)
				{
					 retval.result.Ellipsis = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1365, 8);
			PushFollow(Follow._type_constraint_list_in_constraint_elements_components8632);
			tcl=type_constraint_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, tcl.Tree);
			DebugLocation(1365, 30);
			R_BRACE358=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_constraint_elements_components8634); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE358_tree = (CommonTree)adaptor.Create(R_BRACE358);
			adaptor.AddChild(root_0, R_BRACE358_tree);
			}
			DebugLocation(1365, 38);
			if (state.backtracking == 0)
			{
				 retval.result.TypeConstraintList = (tcl!=null?tcl.result:default(IList<ConstraintElement>)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint_elements_components", 105);
			LeaveRule("constraint_elements_components", 105);
			LeaveRule_constraint_elements_components();
		}
		DebugLocation(1366, 4);
		} finally { DebugExitRule(GrammarFileName, "constraint_elements_components"); }
		return retval;

	}
	// $ANTLR end "constraint_elements_components"

	private sealed partial class value_range_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ValueRange result = new ValueRange();
		public value_range_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_value_range();
	partial void LeaveRule_value_range();
	// $ANTLR start "value_range"
	// Smi.g:1368:1: value_range returns [ValueRange result = new ValueRange()] : (lower= value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? (upper= value | MAX_KW ) ;
	[GrammarRule("value_range")]
	private SmiParser.value_range_return value_range()
	{
		EnterRule_value_range();
		EnterRule("value_range", 106);
		TraceIn("value_range", 106);
		SmiParser.value_range_return retval = new SmiParser.value_range_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken MIN_KW359 = default(IToken);
		IToken LESS360 = default(IToken);
		IToken DOTDOT361 = default(IToken);
		IToken LESS362 = default(IToken);
		IToken MAX_KW363 = default(IToken);
		SmiParser.value_return lower = default(SmiParser.value_return);
		SmiParser.value_return upper = default(SmiParser.value_return);

		CommonTree MIN_KW359_tree = default(CommonTree);
		CommonTree LESS360_tree = default(CommonTree);
		CommonTree DOTDOT361_tree = default(CommonTree);
		CommonTree LESS362_tree = default(CommonTree);
		CommonTree MAX_KW363_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "value_range");
		DebugLocation(1368, 1);
		try
		{
			// Smi.g:1369:5: ( (lower= value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? (upper= value | MAX_KW ) )
			DebugEnterAlt(1);
			// Smi.g:1369:7: (lower= value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? (upper= value | MAX_KW )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1369, 7);
			// Smi.g:1369:7: (lower= value | MIN_KW )
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			int LA158_1 = input.LA(1);

			if ((LA158_1==B_STRING||LA158_1==C_STRING||LA158_1==FALSE_KW||LA158_1==H_STRING||(LA158_1>=LOWER && LA158_1<=L_BRACE)||(LA158_1>=MINUS && LA158_1<=MINUS_INFINITY_KW)||(LA158_1>=NULL_KW && LA158_1<=NUMBER)||LA158_1==PLUS_INFINITY_KW||LA158_1==TRUE_KW||LA158_1==UPPER))
			{
				alt158 = 1;
			}
			else if ((LA158_1==MIN_KW))
			{
				alt158 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 158, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1369:8: lower= value
				{
				DebugLocation(1369, 13);
				PushFollow(Follow._value_in_value_range8660);
				lower=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lower.Tree);
				DebugLocation(1369, 20);
				if (state.backtracking == 0)
				{
					 retval.result.LowerValue = (lower!=null?lower.result:default(ISmiValue)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1370:4: MIN_KW
				{
				DebugLocation(1370, 4);
				MIN_KW359=(IToken)Match(input,MIN_KW,Follow._MIN_KW_in_value_range8667); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MIN_KW359_tree = (CommonTree)adaptor.Create(MIN_KW359);
				adaptor.AddChild(root_0, MIN_KW359_tree);
				}
				DebugLocation(1370, 11);
				if (state.backtracking == 0)
				{
					 retval.result.MinValue = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(158); }

			DebugLocation(1371, 2);
			// Smi.g:1371:2: ( LESS )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_1 = input.LA(1);

			if ((LA159_1==LESS))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1371:3: LESS
				{
				DebugLocation(1371, 3);
				LESS360=(IToken)Match(input,LESS,Follow._LESS_in_value_range8675); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LESS360_tree = (CommonTree)adaptor.Create(LESS360);
				adaptor.AddChild(root_0, LESS360_tree);
				}
				DebugLocation(1371, 8);
				if (state.backtracking == 0)
				{
					 retval.result.LessThan = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(1371, 39);
			DOTDOT361=(IToken)Match(input,DOTDOT,Follow._DOTDOT_in_value_range8681); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOTDOT361_tree = (CommonTree)adaptor.Create(DOTDOT361);
			adaptor.AddChild(root_0, DOTDOT361_tree);
			}
			DebugLocation(1372, 2);
			// Smi.g:1372:2: ( LESS )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, false);
			int LA160_1 = input.LA(1);

			if ((LA160_1==LESS))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1372:3: LESS
				{
				DebugLocation(1372, 3);
				LESS362=(IToken)Match(input,LESS,Follow._LESS_in_value_range8686); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LESS362_tree = (CommonTree)adaptor.Create(LESS362);
				adaptor.AddChild(root_0, LESS362_tree);
				}
				DebugLocation(1372, 8);
				if (state.backtracking == 0)
				{
					 retval.result.GreaterThan = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(1373, 2);
			// Smi.g:1373:2: (upper= value | MAX_KW )
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			int LA161_1 = input.LA(1);

			if ((LA161_1==B_STRING||LA161_1==C_STRING||LA161_1==FALSE_KW||LA161_1==H_STRING||(LA161_1>=LOWER && LA161_1<=L_BRACE)||(LA161_1>=MINUS && LA161_1<=MINUS_INFINITY_KW)||(LA161_1>=NULL_KW && LA161_1<=NUMBER)||LA161_1==PLUS_INFINITY_KW||LA161_1==TRUE_KW||LA161_1==UPPER))
			{
				alt161 = 1;
			}
			else if ((LA161_1==MAX_KW))
			{
				alt161 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1373:3: upper= value
				{
				DebugLocation(1373, 8);
				PushFollow(Follow._value_in_value_range8697);
				upper=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, upper.Tree);
				DebugLocation(1373, 15);
				if (state.backtracking == 0)
				{
					 retval.result.UpperValue = (upper!=null?upper.result:default(ISmiValue)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1374:2: MAX_KW
				{
				DebugLocation(1374, 2);
				MAX_KW363=(IToken)Match(input,MAX_KW,Follow._MAX_KW_in_value_range8705); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MAX_KW363_tree = (CommonTree)adaptor.Create(MAX_KW363);
				adaptor.AddChild(root_0, MAX_KW363_tree);
				}
				DebugLocation(1374, 9);
				if (state.backtracking == 0)
				{
					 retval.result.MaxValue = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(161); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value_range", 106);
			LeaveRule("value_range", 106);
			LeaveRule_value_range();
		}
		DebugLocation(1375, 1);
		} finally { DebugExitRule(GrammarFileName, "value_range"); }
		return retval;

	}
	// $ANTLR end "value_range"

	private sealed partial class type_constraint_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IList<ConstraintElement> result = new List<ConstraintElement>();
		public type_constraint_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_type_constraint_list();
	partial void LeaveRule_type_constraint_list();
	// $ANTLR start "type_constraint_list"
	// Smi.g:1377:1: type_constraint_list returns [IList<ConstraintElement> result = new List<ConstraintElement>()] : nc1= named_constraint ( COMMA nc2= named_constraint )* ;
	[GrammarRule("type_constraint_list")]
	private SmiParser.type_constraint_list_return type_constraint_list()
	{
		EnterRule_type_constraint_list();
		EnterRule("type_constraint_list", 107);
		TraceIn("type_constraint_list", 107);
		SmiParser.type_constraint_list_return retval = new SmiParser.type_constraint_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA364 = default(IToken);
		SmiParser.named_constraint_return nc1 = default(SmiParser.named_constraint_return);
		SmiParser.named_constraint_return nc2 = default(SmiParser.named_constraint_return);

		CommonTree COMMA364_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_constraint_list");
		DebugLocation(1377, 1);
		try
		{
			// Smi.g:1378:5: (nc1= named_constraint ( COMMA nc2= named_constraint )* )
			DebugEnterAlt(1);
			// Smi.g:1378:7: nc1= named_constraint ( COMMA nc2= named_constraint )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1378, 10);
			PushFollow(Follow._named_constraint_in_type_constraint_list8729);
			nc1=named_constraint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, nc1.Tree);
			DebugLocation(1378, 28);
			if (state.backtracking == 0)
			{
				 retval.result.Add((nc1!=null?nc1.result:default(NamedConstraintElement))); 
			}
			DebugLocation(1379, 2);
			// Smi.g:1379:2: ( COMMA nc2= named_constraint )*
			try { DebugEnterSubRule(162);
			while (true)
			{
				int alt162=2;
				try { DebugEnterDecision(162, false);
				int LA162_1 = input.LA(1);

				if ((LA162_1==COMMA))
				{
					alt162 = 1;
				}


				} finally { DebugExitDecision(162); }
				switch ( alt162 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1379:3: COMMA nc2= named_constraint
					{
					DebugLocation(1379, 3);
					COMMA364=(IToken)Match(input,COMMA,Follow._COMMA_in_type_constraint_list8736); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA364_tree = (CommonTree)adaptor.Create(COMMA364);
					adaptor.AddChild(root_0, COMMA364_tree);
					}
					DebugLocation(1379, 12);
					PushFollow(Follow._named_constraint_in_type_constraint_list8740);
					nc2=named_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nc2.Tree);
					DebugLocation(1379, 30);
					if (state.backtracking == 0)
					{
						 retval.result.Add((nc2!=null?nc2.result:default(NamedConstraintElement))); 
					}

					}
					break;

				default:
					goto loop162;
				}
			}

			loop162:
				;

			} finally { DebugExitSubRule(162); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_constraint_list", 107);
			LeaveRule("type_constraint_list", 107);
			LeaveRule_type_constraint_list();
		}
		DebugLocation(1380, 1);
		} finally { DebugExitRule(GrammarFileName, "type_constraint_list"); }
		return retval;

	}
	// $ANTLR end "type_constraint_list"

	private sealed partial class named_constraint_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedConstraintElement result;
		public named_constraint_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_named_constraint();
	partial void LeaveRule_named_constraint();
	// $ANTLR start "named_constraint"
	// Smi.g:1382:1: named_constraint returns [NamedConstraintElement result] : name= LOWER (c= constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )? ;
	[GrammarRule("named_constraint")]
	private SmiParser.named_constraint_return named_constraint()
	{
		EnterRule_named_constraint();
		EnterRule("named_constraint", 108);
		TraceIn("named_constraint", 108);
		SmiParser.named_constraint_return retval = new SmiParser.named_constraint_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken PRESENT_KW365 = default(IToken);
		IToken ABSENT_KW366 = default(IToken);
		IToken OPTIONAL_KW367 = default(IToken);
		SmiParser.constraint_return c = default(SmiParser.constraint_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree PRESENT_KW365_tree = default(CommonTree);
		CommonTree ABSENT_KW366_tree = default(CommonTree);
		CommonTree OPTIONAL_KW367_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "named_constraint");
		DebugLocation(1382, 1);
		try
		{
			// Smi.g:1383:5: (name= LOWER (c= constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )? )
			DebugEnterAlt(1);
			// Smi.g:1383:7: name= LOWER (c= constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1383, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_named_constraint8765); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1383, 18);
			if (state.backtracking == 0)
			{
				 retval.result = new NamedConstraintElement((name!=null?name.Text:null)); 
			}
			DebugLocation(1384, 2);
			// Smi.g:1384:2: (c= constraint )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			int LA163_1 = input.LA(1);

			if ((LA163_1==L_PAREN))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1384:3: c= constraint
				{
				DebugLocation(1384, 4);
				PushFollow(Follow._constraint_in_named_constraint8773);
				c=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1384, 16);
				if (state.backtracking == 0)
				{
					 retval.result.Constraint = (c!=null?c.result:default(Constraint)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1385, 2);
			// Smi.g:1385:2: ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )?
			int alt164=4;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			switch (input.LA(1))
			{
			case PRESENT_KW:
				{
				alt164 = 1;
				}
				break;
			case ABSENT_KW:
				{
				alt164 = 2;
				}
				break;
			case OPTIONAL_KW:
				{
				alt164 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1385:3: PRESENT_KW
				{
				DebugLocation(1385, 3);
				PRESENT_KW365=(IToken)Match(input,PRESENT_KW,Follow._PRESENT_KW_in_named_constraint8782); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRESENT_KW365_tree = (CommonTree)adaptor.Create(PRESENT_KW365);
				adaptor.AddChild(root_0, PRESENT_KW365_tree);
				}
				DebugLocation(1385, 14);
				if (state.backtracking == 0)
				{
					 retval.result.Present = true; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1386:4: ABSENT_KW
				{
				DebugLocation(1386, 4);
				ABSENT_KW366=(IToken)Match(input,ABSENT_KW,Follow._ABSENT_KW_in_named_constraint8789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ABSENT_KW366_tree = (CommonTree)adaptor.Create(ABSENT_KW366);
				adaptor.AddChild(root_0, ABSENT_KW366_tree);
				}
				DebugLocation(1386, 14);
				if (state.backtracking == 0)
				{
					 retval.result.Absent = true; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1387:4: OPTIONAL_KW
				{
				DebugLocation(1387, 4);
				OPTIONAL_KW367=(IToken)Match(input,OPTIONAL_KW,Follow._OPTIONAL_KW_in_named_constraint8796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPTIONAL_KW367_tree = (CommonTree)adaptor.Create(OPTIONAL_KW367);
				adaptor.AddChild(root_0, OPTIONAL_KW367_tree);
				}
				DebugLocation(1387, 16);
				if (state.backtracking == 0)
				{
					 retval.result.Optinal = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_constraint", 108);
			LeaveRule("named_constraint", 108);
			LeaveRule_named_constraint();
		}
		DebugLocation(1388, 1);
		} finally { DebugExitRule(GrammarFileName, "named_constraint"); }
		return retval;

	}
	// $ANTLR end "named_constraint"

	private sealed partial class choice_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ChoiceValue result = new ChoiceValue();
		public choice_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_choice_value();
	partial void LeaveRule_choice_value();
	// $ANTLR start "choice_value"
	// Smi.g:1390:1: choice_value returns [ChoiceValue result = new ChoiceValue()] : name= LOWER ( COLON )? v= value ;
	[GrammarRule("choice_value")]
	private SmiParser.choice_value_return choice_value()
	{
		EnterRule_choice_value();
		EnterRule("choice_value", 109);
		TraceIn("choice_value", 109);
		SmiParser.choice_value_return retval = new SmiParser.choice_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken COLON368 = default(IToken);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree name_tree = default(CommonTree);
		CommonTree COLON368_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "choice_value");
		DebugLocation(1390, 1);
		try
		{
			// Smi.g:1391:5: (name= LOWER ( COLON )? v= value )
			DebugEnterAlt(1);
			// Smi.g:1391:7: name= LOWER ( COLON )? v= value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1391, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_choice_value8821); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1391, 18);
			if (state.backtracking == 0)
			{
				 retval.result.Name = (name!=null?name.Text:null); 
			}
			DebugLocation(1392, 2);
			// Smi.g:1392:2: ( COLON )?
			int alt165=2;
			try { DebugEnterSubRule(165);
			try { DebugEnterDecision(165, false);
			int LA165_1 = input.LA(1);

			if ((LA165_1==COLON))
			{
				alt165 = 1;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1392:3: COLON
				{
				DebugLocation(1392, 3);
				COLON368=(IToken)Match(input,COLON,Follow._COLON_in_choice_value8828); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON368_tree = (CommonTree)adaptor.Create(COLON368);
				adaptor.AddChild(root_0, COLON368_tree);
				}
				DebugLocation(1392, 9);
				if (state.backtracking == 0)
				{
					 retval.result.ContainsColon = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(165); }

			DebugLocation(1393, 3);
			PushFollow(Follow._value_in_choice_value8838);
			v=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
			DebugLocation(1393, 10);
			if (state.backtracking == 0)
			{
				 retval.result.Value = (v!=null?v.result:default(ISmiValue)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("choice_value", 109);
			LeaveRule("choice_value", 109);
			LeaveRule_choice_value();
		}
		DebugLocation(1394, 1);
		} finally { DebugExitRule(GrammarFileName, "choice_value"); }
		return retval;

	}
	// $ANTLR end "choice_value"

	private sealed partial class sequence_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SequenceValue result = new SequenceValue();
		public sequence_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_sequence_value();
	partial void LeaveRule_sequence_value();
	// $ANTLR start "sequence_value"
	// Smi.g:1396:1: sequence_value returns [SequenceValue result = new SequenceValue()] : L_BRACE (nv1= named_value )? ( COMMA nv2= named_value )* R_BRACE ;
	[GrammarRule("sequence_value")]
	private SmiParser.sequence_value_return sequence_value()
	{
		EnterRule_sequence_value();
		EnterRule("sequence_value", 110);
		TraceIn("sequence_value", 110);
		SmiParser.sequence_value_return retval = new SmiParser.sequence_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE369 = default(IToken);
		IToken COMMA370 = default(IToken);
		IToken R_BRACE371 = default(IToken);
		SmiParser.named_value_return nv1 = default(SmiParser.named_value_return);
		SmiParser.named_value_return nv2 = default(SmiParser.named_value_return);

		CommonTree L_BRACE369_tree = default(CommonTree);
		CommonTree COMMA370_tree = default(CommonTree);
		CommonTree R_BRACE371_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sequence_value");
		DebugLocation(1396, 1);
		try
		{
			// Smi.g:1397:5: ( L_BRACE (nv1= named_value )? ( COMMA nv2= named_value )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1397:7: L_BRACE (nv1= named_value )? ( COMMA nv2= named_value )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1397, 7);
			L_BRACE369=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequence_value8858); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE369_tree = (CommonTree)adaptor.Create(L_BRACE369);
			adaptor.AddChild(root_0, L_BRACE369_tree);
			}
			DebugLocation(1397, 15);
			// Smi.g:1397:15: (nv1= named_value )?
			int alt166=2;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			int LA166_1 = input.LA(1);

			if ((LA166_1==LOWER))
			{
				alt166 = 1;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1397:16: nv1= named_value
				{
				DebugLocation(1397, 19);
				PushFollow(Follow._named_value_in_sequence_value8863);
				nv1=named_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nv1.Tree);
				DebugLocation(1397, 32);
				if (state.backtracking == 0)
				{
					 retval.result.Add((nv1!=null?nv1.result:default(NamedValue))); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(166); }

			DebugLocation(1398, 2);
			// Smi.g:1398:2: ( COMMA nv2= named_value )*
			try { DebugEnterSubRule(167);
			while (true)
			{
				int alt167=2;
				try { DebugEnterDecision(167, false);
				int LA167_1 = input.LA(1);

				if ((LA167_1==COMMA))
				{
					alt167 = 1;
				}


				} finally { DebugExitDecision(167); }
				switch ( alt167 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1398:3: COMMA nv2= named_value
					{
					DebugLocation(1398, 3);
					COMMA370=(IToken)Match(input,COMMA,Follow._COMMA_in_sequence_value8872); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA370_tree = (CommonTree)adaptor.Create(COMMA370);
					adaptor.AddChild(root_0, COMMA370_tree);
					}
					DebugLocation(1398, 12);
					PushFollow(Follow._named_value_in_sequence_value8876);
					nv2=named_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nv2.Tree);
					DebugLocation(1398, 25);
					if (state.backtracking == 0)
					{
						 retval.result.Add((nv2!=null?nv2.result:default(NamedValue))); 
					}

					}
					break;

				default:
					goto loop167;
				}
			}

			loop167:
				;

			} finally { DebugExitSubRule(167); }

			DebugLocation(1399, 2);
			R_BRACE371=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequence_value8884); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE371_tree = (CommonTree)adaptor.Create(R_BRACE371);
			adaptor.AddChild(root_0, R_BRACE371_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequence_value", 110);
			LeaveRule("sequence_value", 110);
			LeaveRule_sequence_value();
		}
		DebugLocation(1400, 1);
		} finally { DebugExitRule(GrammarFileName, "sequence_value"); }
		return retval;

	}
	// $ANTLR end "sequence_value"

	private sealed partial class sequenceof_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public SequenceOfValue result = new SequenceOfValue();
		public sequenceof_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_sequenceof_value();
	partial void LeaveRule_sequenceof_value();
	// $ANTLR start "sequenceof_value"
	// Smi.g:1402:1: sequenceof_value returns [SequenceOfValue result = new SequenceOfValue()] : L_BRACE (v1= value )? ( COMMA v2= value )* R_BRACE ;
	[GrammarRule("sequenceof_value")]
	private SmiParser.sequenceof_value_return sequenceof_value()
	{
		EnterRule_sequenceof_value();
		EnterRule("sequenceof_value", 111);
		TraceIn("sequenceof_value", 111);
		SmiParser.sequenceof_value_return retval = new SmiParser.sequenceof_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken L_BRACE372 = default(IToken);
		IToken COMMA373 = default(IToken);
		IToken R_BRACE374 = default(IToken);
		SmiParser.value_return v1 = default(SmiParser.value_return);
		SmiParser.value_return v2 = default(SmiParser.value_return);

		CommonTree L_BRACE372_tree = default(CommonTree);
		CommonTree COMMA373_tree = default(CommonTree);
		CommonTree R_BRACE374_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sequenceof_value");
		DebugLocation(1402, 1);
		try
		{
			// Smi.g:1403:5: ( L_BRACE (v1= value )? ( COMMA v2= value )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1403:7: L_BRACE (v1= value )? ( COMMA v2= value )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1403, 7);
			L_BRACE372=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequenceof_value8902); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE372_tree = (CommonTree)adaptor.Create(L_BRACE372);
			adaptor.AddChild(root_0, L_BRACE372_tree);
			}
			DebugLocation(1403, 15);
			// Smi.g:1403:15: (v1= value )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_1 = input.LA(1);

			if ((LA168_1==B_STRING||LA168_1==C_STRING||LA168_1==FALSE_KW||LA168_1==H_STRING||(LA168_1>=LOWER && LA168_1<=L_BRACE)||(LA168_1>=MINUS && LA168_1<=MINUS_INFINITY_KW)||(LA168_1>=NULL_KW && LA168_1<=NUMBER)||LA168_1==PLUS_INFINITY_KW||LA168_1==TRUE_KW||LA168_1==UPPER))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1403:16: v1= value
				{
				DebugLocation(1403, 18);
				PushFollow(Follow._value_in_sequenceof_value8907);
				v1=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, v1.Tree);
				DebugLocation(1403, 25);
				if (state.backtracking == 0)
				{
					 retval.result.Add((v1!=null?v1.result:default(ISmiValue))); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(168); }

			DebugLocation(1404, 2);
			// Smi.g:1404:2: ( COMMA v2= value )*
			try { DebugEnterSubRule(169);
			while (true)
			{
				int alt169=2;
				try { DebugEnterDecision(169, false);
				int LA169_1 = input.LA(1);

				if ((LA169_1==COMMA))
				{
					alt169 = 1;
				}


				} finally { DebugExitDecision(169); }
				switch ( alt169 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1404:3: COMMA v2= value
					{
					DebugLocation(1404, 3);
					COMMA373=(IToken)Match(input,COMMA,Follow._COMMA_in_sequenceof_value8916); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA373_tree = (CommonTree)adaptor.Create(COMMA373);
					adaptor.AddChild(root_0, COMMA373_tree);
					}
					DebugLocation(1404, 11);
					PushFollow(Follow._value_in_sequenceof_value8920);
					v2=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, v2.Tree);
					DebugLocation(1404, 18);
					if (state.backtracking == 0)
					{
						 retval.result.Add((v2!=null?v2.result:default(ISmiValue))); 
					}

					}
					break;

				default:
					goto loop169;
				}
			}

			loop169:
				;

			} finally { DebugExitSubRule(169); }

			DebugLocation(1405, 2);
			R_BRACE374=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequenceof_value8928); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE374_tree = (CommonTree)adaptor.Create(R_BRACE374);
			adaptor.AddChild(root_0, R_BRACE374_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequenceof_value", 111);
			LeaveRule("sequenceof_value", 111);
			LeaveRule_sequenceof_value();
		}
		DebugLocation(1406, 1);
		} finally { DebugExitRule(GrammarFileName, "sequenceof_value"); }
		return retval;

	}
	// $ANTLR end "sequenceof_value"

	private sealed partial class cstr_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiValue result;
		public cstr_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_cstr_value();
	partial void LeaveRule_cstr_value();
	// $ANTLR start "cstr_value"
	// Smi.g:1408:1: cstr_value returns [ISmiValue result] : ( ( H_STRING )=>h= H_STRING | ( B_STRING )=>b= B_STRING | L_BRACE ( ( id_list )=>id= id_list | ( char_defs_list )=>ch= char_defs_list |tu= tuple_or_quad ) R_BRACE );
	[GrammarRule("cstr_value")]
	private SmiParser.cstr_value_return cstr_value()
	{
		EnterRule_cstr_value();
		EnterRule("cstr_value", 112);
		TraceIn("cstr_value", 112);
		SmiParser.cstr_value_return retval = new SmiParser.cstr_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken h = default(IToken);
		IToken b = default(IToken);
		IToken L_BRACE375 = default(IToken);
		IToken R_BRACE376 = default(IToken);
		SmiParser.id_list_return id = default(SmiParser.id_list_return);
		SmiParser.char_defs_list_return ch = default(SmiParser.char_defs_list_return);
		SmiParser.tuple_or_quad_return tu = default(SmiParser.tuple_or_quad_return);

		CommonTree h_tree = default(CommonTree);
		CommonTree b_tree = default(CommonTree);
		CommonTree L_BRACE375_tree = default(CommonTree);
		CommonTree R_BRACE376_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cstr_value");
		DebugLocation(1408, 21);
		try
		{
			// Smi.g:1409:5: ( ( H_STRING )=>h= H_STRING | ( B_STRING )=>b= B_STRING | L_BRACE ( ( id_list )=>id= id_list | ( char_defs_list )=>ch= char_defs_list |tu= tuple_or_quad ) R_BRACE )
			int alt171=3;
			try { DebugEnterDecision(171, false);
			int LA171_1 = input.LA(1);

			if ((LA171_1==H_STRING) && (EvaluatePredicate(synpred44_Smi_fragment)))
			{
				alt171 = 1;
			}
			else if ((LA171_1==B_STRING) && (EvaluatePredicate(synpred45_Smi_fragment)))
			{
				alt171 = 2;
			}
			else if ((LA171_1==L_BRACE))
			{
				alt171 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 171, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1409:7: ( H_STRING )=>h= H_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1409, 22);
				h=(IToken)Match(input,H_STRING,Follow._H_STRING_in_cstr_value8954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				h_tree = (CommonTree)adaptor.Create(h);
				adaptor.AddChild(root_0, h_tree);
				}
				DebugLocation(1410, 2);
				if (state.backtracking == 0)
				{
					 
						    retval.result = new HexLiteralValue((h!=null?h.Text:null)); 
					    
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1413:7: ( B_STRING )=>b= B_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1413, 22);
				b=(IToken)Match(input,B_STRING,Follow._B_STRING_in_cstr_value8974); if (state.failed) return retval;
				if (state.backtracking == 0) {
				b_tree = (CommonTree)adaptor.Create(b);
				adaptor.AddChild(root_0, b_tree);
				}
				DebugLocation(1414, 2);
				if (state.backtracking == 0)
				{

						    retval.result = new BinaryLiteralValue((b!=null?b.Text:null));
						
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1417:7: L_BRACE ( ( id_list )=>id= id_list | ( char_defs_list )=>ch= char_defs_list |tu= tuple_or_quad ) R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1417, 7);
				L_BRACE375=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_cstr_value8986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE375_tree = (CommonTree)adaptor.Create(L_BRACE375);
				adaptor.AddChild(root_0, L_BRACE375_tree);
				}
				DebugLocation(1418, 13);
				// Smi.g:1418:13: ( ( id_list )=>id= id_list | ( char_defs_list )=>ch= char_defs_list |tu= tuple_or_quad )
				int alt170=3;
				try { DebugEnterSubRule(170);
				try { DebugEnterDecision(170, false);
				int LA170_1 = input.LA(1);

				if ((LA170_1==LOWER))
				{
					int LA170_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Smi_fragment)))
					{
						alt170 = 1;
					}
					else if ((EvaluatePredicate(synpred47_Smi_fragment)))
					{
						alt170 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 170, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA170_1==C_STRING) && (EvaluatePredicate(synpred47_Smi_fragment)))
				{
					alt170 = 2;
				}
				else if ((LA170_1==L_BRACE) && (EvaluatePredicate(synpred47_Smi_fragment)))
				{
					alt170 = 2;
				}
				else if ((LA170_1==UPPER) && (EvaluatePredicate(synpred47_Smi_fragment)))
				{
					alt170 = 2;
				}
				else if ((LA170_1==MINUS||LA170_1==NUMBER))
				{
					alt170 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 170, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(170); }
				switch (alt170)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1418:15: ( id_list )=>id= id_list
					{
					DebugLocation(1418, 30);
					PushFollow(Follow._id_list_in_cstr_value9011);
					id=id_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, id.Tree);
					DebugLocation(1418, 39);
					if (state.backtracking == 0)
					{
						 retval.result = (id!=null?id.result:default(IdListValue)); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1419:17: ( char_defs_list )=>ch= char_defs_list
					{
					DebugLocation(1419, 39);
					PushFollow(Follow._char_defs_list_in_cstr_value9039);
					ch=char_defs_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ch.Tree);
					DebugLocation(1419, 55);
					if (state.backtracking == 0)
					{
						 retval.result = (ch!=null?ch.result:default(CharDefinitionListValue)); 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Smi.g:1420:17: tu= tuple_or_quad
					{
					DebugLocation(1420, 19);
					PushFollow(Follow._tuple_or_quad_in_cstr_value9061);
					tu=tuple_or_quad();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tu.Tree);
					DebugLocation(1420, 34);
					if (state.backtracking == 0)
					{
						 retval.result = (tu!=null?tu.result:default(ISmiValue)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(170); }

				DebugLocation(1421, 15);
				R_BRACE376=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_cstr_value9084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE376_tree = (CommonTree)adaptor.Create(R_BRACE376);
				adaptor.AddChild(root_0, R_BRACE376_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cstr_value", 112);
			LeaveRule("cstr_value", 112);
			LeaveRule_cstr_value();
		}
		DebugLocation(1421, 21);
		} finally { DebugExitRule(GrammarFileName, "cstr_value"); }
		return retval;

	}
	// $ANTLR end "cstr_value"

	private sealed partial class id_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public IdListValue result = new IdListValue();
		public id_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_id_list();
	partial void LeaveRule_id_list();
	// $ANTLR start "id_list"
	// Smi.g:1423:1: id_list returns [IdListValue result = new IdListValue()] : name1= LOWER ( COMMA name2= LOWER )* ;
	[GrammarRule("id_list")]
	private SmiParser.id_list_return id_list()
	{
		EnterRule_id_list();
		EnterRule("id_list", 113);
		TraceIn("id_list", 113);
		SmiParser.id_list_return retval = new SmiParser.id_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name1 = default(IToken);
		IToken name2 = default(IToken);
		IToken COMMA377 = default(IToken);

		CommonTree name1_tree = default(CommonTree);
		CommonTree name2_tree = default(CommonTree);
		CommonTree COMMA377_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "id_list");
		DebugLocation(1423, 1);
		try
		{
			// Smi.g:1424:5: (name1= LOWER ( COMMA name2= LOWER )* )
			DebugEnterAlt(1);
			// Smi.g:1424:7: name1= LOWER ( COMMA name2= LOWER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1424, 12);
			name1=(IToken)Match(input,LOWER,Follow._LOWER_in_id_list9102); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name1_tree = (CommonTree)adaptor.Create(name1);
			adaptor.AddChild(root_0, name1_tree);
			}
			DebugLocation(1424, 19);
			if (state.backtracking == 0)
			{
				 retval.result.Add((name1!=null?name1.Text:null)); 
			}
			DebugLocation(1425, 2);
			// Smi.g:1425:2: ( COMMA name2= LOWER )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_1 = input.LA(1);

				if ((LA172_1==COMMA))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1425:3: COMMA name2= LOWER
					{
					DebugLocation(1425, 3);
					COMMA377=(IToken)Match(input,COMMA,Follow._COMMA_in_id_list9108); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA377_tree = (CommonTree)adaptor.Create(COMMA377);
					adaptor.AddChild(root_0, COMMA377_tree);
					}
					DebugLocation(1425, 14);
					name2=(IToken)Match(input,LOWER,Follow._LOWER_in_id_list9112); if (state.failed) return retval;
					if (state.backtracking == 0) {
					name2_tree = (CommonTree)adaptor.Create(name2);
					adaptor.AddChild(root_0, name2_tree);
					}
					DebugLocation(1425, 21);
					if (state.backtracking == 0)
					{
						 retval.result.Add((name2!=null?name2.Text:null)); 
					}

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("id_list", 113);
			LeaveRule("id_list", 113);
			LeaveRule_id_list();
		}
		DebugLocation(1426, 1);
		} finally { DebugExitRule(GrammarFileName, "id_list"); }
		return retval;

	}
	// $ANTLR end "id_list"

	private sealed partial class char_defs_list_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public CharDefinitionListValue result = new CharDefinitionListValue();
		public char_defs_list_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_char_defs_list();
	partial void LeaveRule_char_defs_list();
	// $ANTLR start "char_defs_list"
	// Smi.g:1428:1: char_defs_list returns [CharDefinitionListValue result = new CharDefinitionListValue()] : ch1= char_defs ( COMMA ch2= char_defs )* ;
	[GrammarRule("char_defs_list")]
	private SmiParser.char_defs_list_return char_defs_list()
	{
		EnterRule_char_defs_list();
		EnterRule("char_defs_list", 114);
		TraceIn("char_defs_list", 114);
		SmiParser.char_defs_list_return retval = new SmiParser.char_defs_list_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA378 = default(IToken);
		SmiParser.char_defs_return ch1 = default(SmiParser.char_defs_return);
		SmiParser.char_defs_return ch2 = default(SmiParser.char_defs_return);

		CommonTree COMMA378_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "char_defs_list");
		DebugLocation(1428, 1);
		try
		{
			// Smi.g:1429:5: (ch1= char_defs ( COMMA ch2= char_defs )* )
			DebugEnterAlt(1);
			// Smi.g:1429:7: ch1= char_defs ( COMMA ch2= char_defs )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1429, 10);
			PushFollow(Follow._char_defs_in_char_defs_list9137);
			ch1=char_defs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ch1.Tree);
			DebugLocation(1429, 21);
			if (state.backtracking == 0)
			{
				 retval.result.Add((ch1!=null?ch1.result:default(CharDefinition))); 
			}
			DebugLocation(1430, 2);
			// Smi.g:1430:2: ( COMMA ch2= char_defs )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_1 = input.LA(1);

				if ((LA173_1==COMMA))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1430:3: COMMA ch2= char_defs
					{
					DebugLocation(1430, 3);
					COMMA378=(IToken)Match(input,COMMA,Follow._COMMA_in_char_defs_list9143); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA378_tree = (CommonTree)adaptor.Create(COMMA378);
					adaptor.AddChild(root_0, COMMA378_tree);
					}
					DebugLocation(1430, 12);
					PushFollow(Follow._char_defs_in_char_defs_list9147);
					ch2=char_defs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ch2.Tree);
					DebugLocation(1430, 23);
					if (state.backtracking == 0)
					{
						 retval.result.Add((ch2!=null?ch2.result:default(CharDefinition))); 
					}

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("char_defs_list", 114);
			LeaveRule("char_defs_list", 114);
			LeaveRule_char_defs_list();
		}
		DebugLocation(1431, 1);
		} finally { DebugExitRule(GrammarFileName, "char_defs_list"); }
		return retval;

	}
	// $ANTLR end "char_defs_list"

	private sealed partial class tuple_or_quad_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public ISmiValue result;
		public tuple_or_quad_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_tuple_or_quad();
	partial void LeaveRule_tuple_or_quad();
	// $ANTLR start "tuple_or_quad"
	// Smi.g:1434:1: tuple_or_quad returns [ISmiValue result] : (tu= tuple_number |qu= quad_number );
	[GrammarRule("tuple_or_quad")]
	private SmiParser.tuple_or_quad_return tuple_or_quad()
	{
		EnterRule_tuple_or_quad();
		EnterRule("tuple_or_quad", 115);
		TraceIn("tuple_or_quad", 115);
		SmiParser.tuple_or_quad_return retval = new SmiParser.tuple_or_quad_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		SmiParser.tuple_number_return tu = default(SmiParser.tuple_number_return);
		SmiParser.quad_number_return qu = default(SmiParser.quad_number_return);

		try { DebugEnterRule(GrammarFileName, "tuple_or_quad");
		DebugLocation(1434, 1);
		try
		{
			// Smi.g:1435:5: (tu= tuple_number |qu= quad_number )
			int alt174=2;
			try { DebugEnterDecision(174, false);
			int LA174_1 = input.LA(1);

			if ((LA174_1==MINUS))
			{
				int LA174_2 = input.LA(2);

				if ((LA174_2==NUMBER))
				{
					int LA174_3 = input.LA(3);

					if ((LA174_3==COMMA))
					{
						int LA174_4 = input.LA(4);

						if ((LA174_4==MINUS))
						{
							int LA174_5 = input.LA(5);

							if ((LA174_5==NUMBER))
							{
								int LA174_6 = input.LA(6);

								if ((LA174_6==R_BRACE))
								{
									alt174 = 1;
								}
								else if ((LA174_6==COMMA))
								{
									alt174 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 174, 7, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 174, 5, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA174_4==NUMBER))
						{
							int LA174_5 = input.LA(5);

							if ((LA174_5==R_BRACE))
							{
								alt174 = 1;
							}
							else if ((LA174_5==COMMA))
							{
								alt174 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 174, 6, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 174, 4, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 174, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 174, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA174_1==NUMBER))
			{
				int LA174_2 = input.LA(2);

				if ((LA174_2==COMMA))
				{
					int LA174_3 = input.LA(3);

					if ((LA174_3==MINUS))
					{
						int LA174_4 = input.LA(4);

						if ((LA174_4==NUMBER))
						{
							int LA174_5 = input.LA(5);

							if ((LA174_5==R_BRACE))
							{
								alt174 = 1;
							}
							else if ((LA174_5==COMMA))
							{
								alt174 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 174, 7, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 174, 5, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA174_3==NUMBER))
					{
						int LA174_4 = input.LA(4);

						if ((LA174_4==R_BRACE))
						{
							alt174 = 1;
						}
						else if ((LA174_4==COMMA))
						{
							alt174 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 174, 6, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 174, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 174, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 174, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1435:7: tu= tuple_number
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1435, 9);
				PushFollow(Follow._tuple_number_in_tuple_or_quad9173);
				tu=tuple_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tu.Tree);
				DebugLocation(1435, 23);
				if (state.backtracking == 0)
				{
					 retval.result = (tu!=null?tu.result:default(TupleValue)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1436:4: qu= quad_number
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1436, 6);
				PushFollow(Follow._quad_number_in_tuple_or_quad9182);
				qu=quad_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qu.Tree);
				DebugLocation(1436, 19);
				if (state.backtracking == 0)
				{
					 retval.result = (qu!=null?qu.result:default(QuadValue)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tuple_or_quad", 115);
			LeaveRule("tuple_or_quad", 115);
			LeaveRule_tuple_or_quad();
		}
		DebugLocation(1437, 1);
		} finally { DebugExitRule(GrammarFileName, "tuple_or_quad"); }
		return retval;

	}
	// $ANTLR end "tuple_or_quad"

	private sealed partial class tuple_number_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public TupleValue result;
		public tuple_number_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_tuple_number();
	partial void LeaveRule_tuple_number();
	// $ANTLR start "tuple_number"
	// Smi.g:1439:1: tuple_number returns [TupleValue result] : sn1= signed_number COMMA sn2= signed_number ;
	[GrammarRule("tuple_number")]
	private SmiParser.tuple_number_return tuple_number()
	{
		EnterRule_tuple_number();
		EnterRule("tuple_number", 116);
		TraceIn("tuple_number", 116);
		SmiParser.tuple_number_return retval = new SmiParser.tuple_number_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA379 = default(IToken);
		SmiParser.signed_number_return sn1 = default(SmiParser.signed_number_return);
		SmiParser.signed_number_return sn2 = default(SmiParser.signed_number_return);

		CommonTree COMMA379_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tuple_number");
		DebugLocation(1439, 1);
		try
		{
			// Smi.g:1440:5: (sn1= signed_number COMMA sn2= signed_number )
			DebugEnterAlt(1);
			// Smi.g:1440:7: sn1= signed_number COMMA sn2= signed_number
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1440, 10);
			PushFollow(Follow._signed_number_in_tuple_number9204);
			sn1=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn1.Tree);
			DebugLocation(1440, 25);
			COMMA379=(IToken)Match(input,COMMA,Follow._COMMA_in_tuple_number9206); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA379_tree = (CommonTree)adaptor.Create(COMMA379);
			adaptor.AddChild(root_0, COMMA379_tree);
			}
			DebugLocation(1440, 34);
			PushFollow(Follow._signed_number_in_tuple_number9210);
			sn2=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn2.Tree);
			DebugLocation(1440, 49);
			if (state.backtracking == 0)
			{
				 retval.result = new TupleValue((sn1!=null?sn1.result:default(NumberLiteralValue)), (sn2!=null?sn2.result:default(NumberLiteralValue))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tuple_number", 116);
			LeaveRule("tuple_number", 116);
			LeaveRule_tuple_number();
		}
		DebugLocation(1441, 1);
		} finally { DebugExitRule(GrammarFileName, "tuple_number"); }
		return retval;

	}
	// $ANTLR end "tuple_number"

	private sealed partial class quad_number_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public QuadValue result;
		public quad_number_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_quad_number();
	partial void LeaveRule_quad_number();
	// $ANTLR start "quad_number"
	// Smi.g:1443:1: quad_number returns [QuadValue result] : sn1= signed_number COMMA sn2= signed_number COMMA sn3= signed_number COMMA sn4= signed_number ;
	[GrammarRule("quad_number")]
	private SmiParser.quad_number_return quad_number()
	{
		EnterRule_quad_number();
		EnterRule("quad_number", 117);
		TraceIn("quad_number", 117);
		SmiParser.quad_number_return retval = new SmiParser.quad_number_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA380 = default(IToken);
		IToken COMMA381 = default(IToken);
		IToken COMMA382 = default(IToken);
		SmiParser.signed_number_return sn1 = default(SmiParser.signed_number_return);
		SmiParser.signed_number_return sn2 = default(SmiParser.signed_number_return);
		SmiParser.signed_number_return sn3 = default(SmiParser.signed_number_return);
		SmiParser.signed_number_return sn4 = default(SmiParser.signed_number_return);

		CommonTree COMMA380_tree = default(CommonTree);
		CommonTree COMMA381_tree = default(CommonTree);
		CommonTree COMMA382_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "quad_number");
		DebugLocation(1443, 1);
		try
		{
			// Smi.g:1444:5: (sn1= signed_number COMMA sn2= signed_number COMMA sn3= signed_number COMMA sn4= signed_number )
			DebugEnterAlt(1);
			// Smi.g:1444:7: sn1= signed_number COMMA sn2= signed_number COMMA sn3= signed_number COMMA sn4= signed_number
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1444, 10);
			PushFollow(Follow._signed_number_in_quad_number9232);
			sn1=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn1.Tree);
			DebugLocation(1444, 25);
			COMMA380=(IToken)Match(input,COMMA,Follow._COMMA_in_quad_number9234); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA380_tree = (CommonTree)adaptor.Create(COMMA380);
			adaptor.AddChild(root_0, COMMA380_tree);
			}
			DebugLocation(1444, 34);
			PushFollow(Follow._signed_number_in_quad_number9238);
			sn2=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn2.Tree);
			DebugLocation(1444, 49);
			COMMA381=(IToken)Match(input,COMMA,Follow._COMMA_in_quad_number9240); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA381_tree = (CommonTree)adaptor.Create(COMMA381);
			adaptor.AddChild(root_0, COMMA381_tree);
			}
			DebugLocation(1444, 58);
			PushFollow(Follow._signed_number_in_quad_number9244);
			sn3=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn3.Tree);
			DebugLocation(1444, 73);
			COMMA382=(IToken)Match(input,COMMA,Follow._COMMA_in_quad_number9246); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA382_tree = (CommonTree)adaptor.Create(COMMA382);
			adaptor.AddChild(root_0, COMMA382_tree);
			}
			DebugLocation(1444, 82);
			PushFollow(Follow._signed_number_in_quad_number9250);
			sn4=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sn4.Tree);
			DebugLocation(1445, 2);
			if (state.backtracking == 0)
			{
				 retval.result = new QuadValue((sn1!=null?sn1.result:default(NumberLiteralValue)), (sn2!=null?sn2.result:default(NumberLiteralValue)), (sn3!=null?sn3.result:default(NumberLiteralValue)), (sn4!=null?sn4.result:default(NumberLiteralValue))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("quad_number", 117);
			LeaveRule("quad_number", 117);
			LeaveRule_quad_number();
		}
		DebugLocation(1446, 1);
		} finally { DebugExitRule(GrammarFileName, "quad_number"); }
		return retval;

	}
	// $ANTLR end "quad_number"

	private sealed partial class char_defs_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public CharDefinition result;
		public char_defs_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_char_defs();
	partial void LeaveRule_char_defs();
	// $ANTLR start "char_defs"
	// Smi.g:1448:1: char_defs returns [CharDefinition result] : (cs= C_STRING | L_BRACE tu= tuple_or_quad R_BRACE |dv= defined_value );
	[GrammarRule("char_defs")]
	private SmiParser.char_defs_return char_defs()
	{
		EnterRule_char_defs();
		EnterRule("char_defs", 118);
		TraceIn("char_defs", 118);
		SmiParser.char_defs_return retval = new SmiParser.char_defs_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken cs = default(IToken);
		IToken L_BRACE383 = default(IToken);
		IToken R_BRACE384 = default(IToken);
		SmiParser.tuple_or_quad_return tu = default(SmiParser.tuple_or_quad_return);
		SmiParser.defined_value_return dv = default(SmiParser.defined_value_return);

		CommonTree cs_tree = default(CommonTree);
		CommonTree L_BRACE383_tree = default(CommonTree);
		CommonTree R_BRACE384_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "char_defs");
		DebugLocation(1448, 68);
		try
		{
			// Smi.g:1449:5: (cs= C_STRING | L_BRACE tu= tuple_or_quad R_BRACE |dv= defined_value )
			int alt175=3;
			try { DebugEnterDecision(175, false);
			switch (input.LA(1))
			{
			case C_STRING:
				{
				alt175 = 1;
				}
				break;
			case L_BRACE:
				{
				alt175 = 2;
				}
				break;
			case LOWER:
			case UPPER:
				{
				alt175 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 175, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1450:2: cs= C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1450, 4);
				cs=(IToken)Match(input,C_STRING,Follow._C_STRING_in_char_defs9275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				cs_tree = (CommonTree)adaptor.Create(cs);
				adaptor.AddChild(root_0, cs_tree);
				}
				DebugLocation(1450, 14);
				if (state.backtracking == 0)
				{
					 retval.result = new CharDefinition((cs!=null?cs.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1451:7: L_BRACE tu= tuple_or_quad R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1451, 7);
				L_BRACE383=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_char_defs9285); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE383_tree = (CommonTree)adaptor.Create(L_BRACE383);
				adaptor.AddChild(root_0, L_BRACE383_tree);
				}
				DebugLocation(1451, 17);
				PushFollow(Follow._tuple_or_quad_in_char_defs9289);
				tu=tuple_or_quad();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tu.Tree);
				DebugLocation(1451, 32);
				R_BRACE384=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_char_defs9291); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE384_tree = (CommonTree)adaptor.Create(R_BRACE384);
				adaptor.AddChild(root_0, R_BRACE384_tree);
				}
				DebugLocation(1451, 40);
				if (state.backtracking == 0)
				{
					 retval.result = new CharDefinition((tu!=null?tu.result:default(ISmiValue))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1452:7: dv= defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1452, 9);
				PushFollow(Follow._defined_value_in_char_defs9303);
				dv=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dv.Tree);
				DebugLocation(1452, 24);
				if (state.backtracking == 0)
				{
					 retval.result = new CharDefinition((dv!=null?dv.result:default(DefinedValue))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("char_defs", 118);
			LeaveRule("char_defs", 118);
			LeaveRule_char_defs();
		}
		DebugLocation(1452, 68);
		} finally { DebugExitRule(GrammarFileName, "char_defs"); }
		return retval;

	}
	// $ANTLR end "char_defs"

	private sealed partial class named_value_return : AstParserRuleReturnScope<CommonTree, IToken>
	{
		public NamedValue result;
		public named_value_return(SmiParser grammar) {OnCreated(grammar);}
		partial void OnCreated(SmiParser grammar);
	}

	partial void EnterRule_named_value();
	partial void LeaveRule_named_value();
	// $ANTLR start "named_value"
	// Smi.g:1457:1: named_value returns [NamedValue result] : name= LOWER v= value ;
	[GrammarRule("named_value")]
	private SmiParser.named_value_return named_value()
	{
		EnterRule_named_value();
		EnterRule("named_value", 119);
		TraceIn("named_value", 119);
		SmiParser.named_value_return retval = new SmiParser.named_value_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		SmiParser.value_return v = default(SmiParser.value_return);

		CommonTree name_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "named_value");
		DebugLocation(1457, 1);
		try
		{
			// Smi.g:1458:5: (name= LOWER v= value )
			DebugEnterAlt(1);
			// Smi.g:1458:7: name= LOWER v= value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1458, 11);
			name=(IToken)Match(input,LOWER,Follow._LOWER_in_named_value9326); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (CommonTree)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(1458, 19);
			PushFollow(Follow._value_in_named_value9330);
			v=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, v.Tree);
			DebugLocation(1458, 26);
			if (state.backtracking == 0)
			{
				 retval.result = new NamedValue((name!=null?name.Text:null), (v!=null?v.result:default(ISmiValue))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_value", 119);
			LeaveRule("named_value", 119);
			LeaveRule_named_value();
		}
		DebugLocation(1459, 1);
		} finally { DebugExitRule(GrammarFileName, "named_value"); }
		return retval;

	}
	// $ANTLR end "named_value"

	partial void EnterRule_synpred1_Smi_fragment();
	partial void LeaveRule_synpred1_Smi_fragment();

	// $ANTLR start synpred1_Smi
	public void synpred1_Smi_fragment()
	{
		EnterRule_synpred1_Smi_fragment();
		EnterRule("synpred1_Smi_fragment", 120);
		TraceIn("synpred1_Smi_fragment", 120);
		try
		{
			// Smi.g:625:16: ( LOWER ( LOWER | NUMBER ) )
			DebugEnterAlt(1);
			// Smi.g:625:17: LOWER ( LOWER | NUMBER )
			{
			DebugLocation(625, 17);
			Match(input,LOWER,Follow._LOWER_in_synpred1_Smi2099); if (state.failed) return;
			DebugLocation(625, 23);
			if (input.LA(1)==LOWER||input.LA(1)==NUMBER)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_Smi_fragment", 120);
			LeaveRule("synpred1_Smi_fragment", 120);
			LeaveRule_synpred1_Smi_fragment();
		}
	}
	// $ANTLR end synpred1_Smi

	partial void EnterRule_synpred2_Smi_fragment();
	partial void LeaveRule_synpred2_Smi_fragment();

	// $ANTLR start synpred2_Smi
	public void synpred2_Smi_fragment()
	{
		EnterRule_synpred2_Smi_fragment();
		EnterRule("synpred2_Smi_fragment", 121);
		TraceIn("synpred2_Smi_fragment", 121);
		try
		{
			// Smi.g:692:29: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:692:30: defined_value
			{
			DebugLocation(692, 30);
			PushFollow(Follow._defined_value_in_synpred2_Smi2559);
			defined_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Smi_fragment", 121);
			LeaveRule("synpred2_Smi_fragment", 121);
			LeaveRule_synpred2_Smi_fragment();
		}
	}
	// $ANTLR end synpred2_Smi

	partial void EnterRule_synpred3_Smi_fragment();
	partial void LeaveRule_synpred3_Smi_fragment();

	// $ANTLR start synpred3_Smi
	public void synpred3_Smi_fragment()
	{
		EnterRule_synpred3_Smi_fragment();
		EnterRule("synpred3_Smi_fragment", 122);
		TraceIn("synpred3_Smi_fragment", 122);
		try
		{
			// Smi.g:715:7: ( TRUE_KW )
			DebugEnterAlt(1);
			// Smi.g:715:8: TRUE_KW
			{
			DebugLocation(715, 8);
			Match(input,TRUE_KW,Follow._TRUE_KW_in_synpred3_Smi2821); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Smi_fragment", 122);
			LeaveRule("synpred3_Smi_fragment", 122);
			LeaveRule_synpred3_Smi_fragment();
		}
	}
	// $ANTLR end synpred3_Smi

	partial void EnterRule_synpred4_Smi_fragment();
	partial void LeaveRule_synpred4_Smi_fragment();

	// $ANTLR start synpred4_Smi
	public void synpred4_Smi_fragment()
	{
		EnterRule_synpred4_Smi_fragment();
		EnterRule("synpred4_Smi_fragment", 123);
		TraceIn("synpred4_Smi_fragment", 123);
		try
		{
			// Smi.g:716:8: ( FALSE_KW )
			DebugEnterAlt(1);
			// Smi.g:716:9: FALSE_KW
			{
			DebugLocation(716, 9);
			Match(input,FALSE_KW,Follow._FALSE_KW_in_synpred4_Smi2838); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_Smi_fragment", 123);
			LeaveRule("synpred4_Smi_fragment", 123);
			LeaveRule_synpred4_Smi_fragment();
		}
	}
	// $ANTLR end synpred4_Smi

	partial void EnterRule_synpred5_Smi_fragment();
	partial void LeaveRule_synpred5_Smi_fragment();

	// $ANTLR start synpred5_Smi
	public void synpred5_Smi_fragment()
	{
		EnterRule_synpred5_Smi_fragment();
		EnterRule("synpred5_Smi_fragment", 124);
		TraceIn("synpred5_Smi_fragment", 124);
		try
		{
			// Smi.g:717:8: ( NULL_KW )
			DebugEnterAlt(1);
			// Smi.g:717:9: NULL_KW
			{
			DebugLocation(717, 9);
			Match(input,NULL_KW,Follow._NULL_KW_in_synpred5_Smi2855); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_Smi_fragment", 124);
			LeaveRule("synpred5_Smi_fragment", 124);
			LeaveRule_synpred5_Smi_fragment();
		}
	}
	// $ANTLR end synpred5_Smi

	partial void EnterRule_synpred6_Smi_fragment();
	partial void LeaveRule_synpred6_Smi_fragment();

	// $ANTLR start synpred6_Smi
	public void synpred6_Smi_fragment()
	{
		EnterRule_synpred6_Smi_fragment();
		EnterRule("synpred6_Smi_fragment", 125);
		TraceIn("synpred6_Smi_fragment", 125);
		try
		{
			// Smi.g:718:8: ( C_STRING )
			DebugEnterAlt(1);
			// Smi.g:718:9: C_STRING
			{
			DebugLocation(718, 9);
			Match(input,C_STRING,Follow._C_STRING_in_synpred6_Smi2872); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Smi_fragment", 125);
			LeaveRule("synpred6_Smi_fragment", 125);
			LeaveRule_synpred6_Smi_fragment();
		}
	}
	// $ANTLR end synpred6_Smi

	partial void EnterRule_synpred7_Smi_fragment();
	partial void LeaveRule_synpred7_Smi_fragment();

	// $ANTLR start synpred7_Smi
	public void synpred7_Smi_fragment()
	{
		EnterRule_synpred7_Smi_fragment();
		EnterRule("synpred7_Smi_fragment", 126);
		TraceIn("synpred7_Smi_fragment", 126);
		try
		{
			// Smi.g:719:8: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:719:9: defined_value
			{
			DebugLocation(719, 9);
			PushFollow(Follow._defined_value_in_synpred7_Smi2892);
			defined_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_Smi_fragment", 126);
			LeaveRule("synpred7_Smi_fragment", 126);
			LeaveRule_synpred7_Smi_fragment();
		}
	}
	// $ANTLR end synpred7_Smi

	partial void EnterRule_synpred8_Smi_fragment();
	partial void LeaveRule_synpred8_Smi_fragment();

	// $ANTLR start synpred8_Smi
	public void synpred8_Smi_fragment()
	{
		EnterRule_synpred8_Smi_fragment();
		EnterRule("synpred8_Smi_fragment", 127);
		TraceIn("synpred8_Smi_fragment", 127);
		try
		{
			// Smi.g:720:8: ( signed_number )
			DebugEnterAlt(1);
			// Smi.g:720:9: signed_number
			{
			DebugLocation(720, 9);
			PushFollow(Follow._signed_number_in_synpred8_Smi2911);
			signed_number();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_Smi_fragment", 127);
			LeaveRule("synpred8_Smi_fragment", 127);
			LeaveRule_synpred8_Smi_fragment();
		}
	}
	// $ANTLR end synpred8_Smi

	partial void EnterRule_synpred9_Smi_fragment();
	partial void LeaveRule_synpred9_Smi_fragment();

	// $ANTLR start synpred9_Smi
	public void synpred9_Smi_fragment()
	{
		EnterRule_synpred9_Smi_fragment();
		EnterRule("synpred9_Smi_fragment", 128);
		TraceIn("synpred9_Smi_fragment", 128);
		try
		{
			// Smi.g:721:8: ( choice_value )
			DebugEnterAlt(1);
			// Smi.g:721:9: choice_value
			{
			DebugLocation(721, 9);
			PushFollow(Follow._choice_value_in_synpred9_Smi2930);
			choice_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_Smi_fragment", 128);
			LeaveRule("synpred9_Smi_fragment", 128);
			LeaveRule_synpred9_Smi_fragment();
		}
	}
	// $ANTLR end synpred9_Smi

	partial void EnterRule_synpred10_Smi_fragment();
	partial void LeaveRule_synpred10_Smi_fragment();

	// $ANTLR start synpred10_Smi
	public void synpred10_Smi_fragment()
	{
		EnterRule_synpred10_Smi_fragment();
		EnterRule("synpred10_Smi_fragment", 129);
		TraceIn("synpred10_Smi_fragment", 129);
		try
		{
			// Smi.g:722:8: ( sequence_value )
			DebugEnterAlt(1);
			// Smi.g:722:9: sequence_value
			{
			DebugLocation(722, 9);
			PushFollow(Follow._sequence_value_in_synpred10_Smi2949);
			sequence_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Smi_fragment", 129);
			LeaveRule("synpred10_Smi_fragment", 129);
			LeaveRule_synpred10_Smi_fragment();
		}
	}
	// $ANTLR end synpred10_Smi

	partial void EnterRule_synpred11_Smi_fragment();
	partial void LeaveRule_synpred11_Smi_fragment();

	// $ANTLR start synpred11_Smi
	public void synpred11_Smi_fragment()
	{
		EnterRule_synpred11_Smi_fragment();
		EnterRule("synpred11_Smi_fragment", 130);
		TraceIn("synpred11_Smi_fragment", 130);
		try
		{
			// Smi.g:723:8: ( sequenceof_value )
			DebugEnterAlt(1);
			// Smi.g:723:9: sequenceof_value
			{
			DebugLocation(723, 9);
			PushFollow(Follow._sequenceof_value_in_synpred11_Smi2968);
			sequenceof_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_Smi_fragment", 130);
			LeaveRule("synpred11_Smi_fragment", 130);
			LeaveRule_synpred11_Smi_fragment();
		}
	}
	// $ANTLR end synpred11_Smi

	partial void EnterRule_synpred12_Smi_fragment();
	partial void LeaveRule_synpred12_Smi_fragment();

	// $ANTLR start synpred12_Smi
	public void synpred12_Smi_fragment()
	{
		EnterRule_synpred12_Smi_fragment();
		EnterRule("synpred12_Smi_fragment", 131);
		TraceIn("synpred12_Smi_fragment", 131);
		try
		{
			// Smi.g:724:8: ( cstr_value )
			DebugEnterAlt(1);
			// Smi.g:724:9: cstr_value
			{
			DebugLocation(724, 9);
			PushFollow(Follow._cstr_value_in_synpred12_Smi2987);
			cstr_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Smi_fragment", 131);
			LeaveRule("synpred12_Smi_fragment", 131);
			LeaveRule_synpred12_Smi_fragment();
		}
	}
	// $ANTLR end synpred12_Smi

	partial void EnterRule_synpred13_Smi_fragment();
	partial void LeaveRule_synpred13_Smi_fragment();

	// $ANTLR start synpred13_Smi
	public void synpred13_Smi_fragment()
	{
		EnterRule_synpred13_Smi_fragment();
		EnterRule("synpred13_Smi_fragment", 132);
		TraceIn("synpred13_Smi_fragment", 132);
		try
		{
			// Smi.g:725:8: ( obj_id_comp_lst )
			DebugEnterAlt(1);
			// Smi.g:725:9: obj_id_comp_lst
			{
			DebugLocation(725, 9);
			PushFollow(Follow._obj_id_comp_lst_in_synpred13_Smi3006);
			obj_id_comp_lst();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Smi_fragment", 132);
			LeaveRule("synpred13_Smi_fragment", 132);
			LeaveRule_synpred13_Smi_fragment();
		}
	}
	// $ANTLR end synpred13_Smi

	partial void EnterRule_synpred14_Smi_fragment();
	partial void LeaveRule_synpred14_Smi_fragment();

	// $ANTLR start synpred14_Smi
	public void synpred14_Smi_fragment()
	{
		EnterRule_synpred14_Smi_fragment();
		EnterRule("synpred14_Smi_fragment", 133);
		TraceIn("synpred14_Smi_fragment", 133);
		try
		{
			// Smi.g:726:8: ( PLUS_INFINITY_KW )
			DebugEnterAlt(1);
			// Smi.g:726:9: PLUS_INFINITY_KW
			{
			DebugLocation(726, 9);
			Match(input,PLUS_INFINITY_KW,Follow._PLUS_INFINITY_KW_in_synpred14_Smi3025); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Smi_fragment", 133);
			LeaveRule("synpred14_Smi_fragment", 133);
			LeaveRule_synpred14_Smi_fragment();
		}
	}
	// $ANTLR end synpred14_Smi

	partial void EnterRule_synpred15_Smi_fragment();
	partial void LeaveRule_synpred15_Smi_fragment();

	// $ANTLR start synpred15_Smi
	public void synpred15_Smi_fragment()
	{
		EnterRule_synpred15_Smi_fragment();
		EnterRule("synpred15_Smi_fragment", 134);
		TraceIn("synpred15_Smi_fragment", 134);
		try
		{
			// Smi.g:727:8: ( MINUS_INFINITY_KW )
			DebugEnterAlt(1);
			// Smi.g:727:9: MINUS_INFINITY_KW
			{
			DebugLocation(727, 9);
			Match(input,MINUS_INFINITY_KW,Follow._MINUS_INFINITY_KW_in_synpred15_Smi3042); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Smi_fragment", 134);
			LeaveRule("synpred15_Smi_fragment", 134);
			LeaveRule_synpred15_Smi_fragment();
		}
	}
	// $ANTLR end synpred15_Smi

	partial void EnterRule_synpred16_Smi_fragment();
	partial void LeaveRule_synpred16_Smi_fragment();

	// $ANTLR start synpred16_Smi
	public void synpred16_Smi_fragment()
	{
		EnterRule_synpred16_Smi_fragment();
		EnterRule("synpred16_Smi_fragment", 135);
		TraceIn("synpred16_Smi_fragment", 135);
		try
		{
			// Smi.g:767:25: ( L_BRACE namedNumber )
			DebugEnterAlt(1);
			// Smi.g:767:26: L_BRACE namedNumber
			{
			DebugLocation(767, 26);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred16_Smi3389); if (state.failed) return;
			DebugLocation(767, 34);
			PushFollow(Follow._namedNumber_in_synpred16_Smi3391);
			namedNumber();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Smi_fragment", 135);
			LeaveRule("synpred16_Smi_fragment", 135);
			LeaveRule_synpred16_Smi_fragment();
		}
	}
	// $ANTLR end synpred16_Smi

	partial void EnterRule_synpred17_Smi_fragment();
	partial void LeaveRule_synpred17_Smi_fragment();

	// $ANTLR start synpred17_Smi
	public void synpred17_Smi_fragment()
	{
		EnterRule_synpred17_Smi_fragment();
		EnterRule("synpred17_Smi_fragment", 136);
		TraceIn("synpred17_Smi_fragment", 136);
		try
		{
			// Smi.g:801:19: ( L_BRACE namedNumber )
			DebugEnterAlt(1);
			// Smi.g:801:20: L_BRACE namedNumber
			{
			DebugLocation(801, 20);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred17_Smi3595); if (state.failed) return;
			DebugLocation(801, 28);
			PushFollow(Follow._namedNumber_in_synpred17_Smi3597);
			namedNumber();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Smi_fragment", 136);
			LeaveRule("synpred17_Smi_fragment", 136);
			LeaveRule_synpred17_Smi_fragment();
		}
	}
	// $ANTLR end synpred17_Smi

	partial void EnterRule_synpred18_Smi_fragment();
	partial void LeaveRule_synpred18_Smi_fragment();

	// $ANTLR start synpred18_Smi
	public void synpred18_Smi_fragment()
	{
		EnterRule_synpred18_Smi_fragment();
		EnterRule("synpred18_Smi_fragment", 137);
		TraceIn("synpred18_Smi_fragment", 137);
		try
		{
			// Smi.g:904:16: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:904:17: LOWER
			{
			DebugLocation(904, 17);
			Match(input,LOWER,Follow._LOWER_in_synpred18_Smi4281); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Smi_fragment", 137);
			LeaveRule("synpred18_Smi_fragment", 137);
			LeaveRule_synpred18_Smi_fragment();
		}
	}
	// $ANTLR end synpred18_Smi

	partial void EnterRule_synpred19_Smi_fragment();
	partial void LeaveRule_synpred19_Smi_fragment();

	// $ANTLR start synpred19_Smi
	public void synpred19_Smi_fragment()
	{
		EnterRule_synpred19_Smi_fragment();
		EnterRule("synpred19_Smi_fragment", 138);
		TraceIn("synpred19_Smi_fragment", 138);
		try
		{
			// Smi.g:906:7: ( RESULT_KW )
			DebugEnterAlt(1);
			// Smi.g:906:8: RESULT_KW
			{
			DebugLocation(906, 8);
			Match(input,RESULT_KW,Follow._RESULT_KW_in_synpred19_Smi4312); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_Smi_fragment", 138);
			LeaveRule("synpred19_Smi_fragment", 138);
			LeaveRule_synpred19_Smi_fragment();
		}
	}
	// $ANTLR end synpred19_Smi

	partial void EnterRule_synpred20_Smi_fragment();
	partial void LeaveRule_synpred20_Smi_fragment();

	// $ANTLR start synpred20_Smi
	public void synpred20_Smi_fragment()
	{
		EnterRule_synpred20_Smi_fragment();
		EnterRule("synpred20_Smi_fragment", 139);
		TraceIn("synpred20_Smi_fragment", 139);
		try
		{
			// Smi.g:907:10: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:907:11: LOWER
			{
			DebugLocation(907, 11);
			Match(input,LOWER,Follow._LOWER_in_synpred20_Smi4330); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_Smi_fragment", 139);
			LeaveRule("synpred20_Smi_fragment", 139);
			LeaveRule_synpred20_Smi_fragment();
		}
	}
	// $ANTLR end synpred20_Smi

	partial void EnterRule_synpred21_Smi_fragment();
	partial void LeaveRule_synpred21_Smi_fragment();

	// $ANTLR start synpred21_Smi
	public void synpred21_Smi_fragment()
	{
		EnterRule_synpred21_Smi_fragment();
		EnterRule("synpred21_Smi_fragment", 140);
		TraceIn("synpred21_Smi_fragment", 140);
		try
		{
			// Smi.g:907:22: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:907:23: LOWER
			{
			DebugLocation(907, 23);
			Match(input,LOWER,Follow._LOWER_in_synpred21_Smi4337); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_Smi_fragment", 140);
			LeaveRule("synpred21_Smi_fragment", 140);
			LeaveRule_synpred21_Smi_fragment();
		}
	}
	// $ANTLR end synpred21_Smi

	partial void EnterRule_synpred22_Smi_fragment();
	partial void LeaveRule_synpred22_Smi_fragment();

	// $ANTLR start synpred22_Smi
	public void synpred22_Smi_fragment()
	{
		EnterRule_synpred22_Smi_fragment();
		EnterRule("synpred22_Smi_fragment", 141);
		TraceIn("synpred22_Smi_fragment", 141);
		try
		{
			// Smi.g:910:7: ( ERRORS_KW )
			DebugEnterAlt(1);
			// Smi.g:910:8: ERRORS_KW
			{
			DebugLocation(910, 8);
			Match(input,ERRORS_KW,Follow._ERRORS_KW_in_synpred22_Smi4373); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_Smi_fragment", 141);
			LeaveRule("synpred22_Smi_fragment", 141);
			LeaveRule_synpred22_Smi_fragment();
		}
	}
	// $ANTLR end synpred22_Smi

	partial void EnterRule_synpred23_Smi_fragment();
	partial void LeaveRule_synpred23_Smi_fragment();

	// $ANTLR start synpred23_Smi
	public void synpred23_Smi_fragment()
	{
		EnterRule_synpred23_Smi_fragment();
		EnterRule("synpred23_Smi_fragment", 142);
		TraceIn("synpred23_Smi_fragment", 142);
		try
		{
			// Smi.g:911:7: ( LINKED_KW )
			DebugEnterAlt(1);
			// Smi.g:911:8: LINKED_KW
			{
			DebugLocation(911, 8);
			Match(input,LINKED_KW,Follow._LINKED_KW_in_synpred23_Smi4404); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_Smi_fragment", 142);
			LeaveRule("synpred23_Smi_fragment", 142);
			LeaveRule_synpred23_Smi_fragment();
		}
	}
	// $ANTLR end synpred23_Smi

	partial void EnterRule_synpred24_Smi_fragment();
	partial void LeaveRule_synpred24_Smi_fragment();

	// $ANTLR start synpred24_Smi
	public void synpred24_Smi_fragment()
	{
		EnterRule_synpred24_Smi_fragment();
		EnterRule("synpred24_Smi_fragment", 143);
		TraceIn("synpred24_Smi_fragment", 143);
		try
		{
			// Smi.g:925:18: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:925:19: LOWER
			{
			DebugLocation(925, 19);
			Match(input,LOWER,Follow._LOWER_in_synpred24_Smi4464); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_Smi_fragment", 143);
			LeaveRule("synpred24_Smi_fragment", 143);
			LeaveRule_synpred24_Smi_fragment();
		}
	}
	// $ANTLR end synpred24_Smi

	partial void EnterRule_synpred25_Smi_fragment();
	partial void LeaveRule_synpred25_Smi_fragment();

	// $ANTLR start synpred25_Smi
	public void synpred25_Smi_fragment()
	{
		EnterRule_synpred25_Smi_fragment();
		EnterRule("synpred25_Smi_fragment", 144);
		TraceIn("synpred25_Smi_fragment", 144);
		try
		{
			// Smi.g:973:23: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:973:24: smi_type L_BRACE
			{
			DebugLocation(973, 24);
			PushFollow(Follow._smi_type_in_synpred25_Smi4881);
			smi_type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(973, 33);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred25_Smi4883); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred25_Smi_fragment", 144);
			LeaveRule("synpred25_Smi_fragment", 144);
			LeaveRule_synpred25_Smi_fragment();
		}
	}
	// $ANTLR end synpred25_Smi

	partial void EnterRule_synpred26_Smi_fragment();
	partial void LeaveRule_synpred26_Smi_fragment();

	// $ANTLR start synpred26_Smi
	public void synpred26_Smi_fragment()
	{
		EnterRule_synpred26_Smi_fragment();
		EnterRule("synpred26_Smi_fragment", 145);
		TraceIn("synpred26_Smi_fragment", 145);
		try
		{
			// Smi.g:978:24: ( smi_type )
			DebugEnterAlt(1);
			// Smi.g:978:25: smi_type
			{
			DebugLocation(978, 25);
			PushFollow(Follow._smi_type_in_synpred26_Smi4928);
			smi_type();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred26_Smi_fragment", 145);
			LeaveRule("synpred26_Smi_fragment", 145);
			LeaveRule_synpred26_Smi_fragment();
		}
	}
	// $ANTLR end synpred26_Smi

	partial void EnterRule_synpred27_Smi_fragment();
	partial void LeaveRule_synpred27_Smi_fragment();

	// $ANTLR start synpred27_Smi
	public void synpred27_Smi_fragment()
	{
		EnterRule_synpred27_Smi_fragment();
		EnterRule("synpred27_Smi_fragment", 146);
		TraceIn("synpred27_Smi_fragment", 146);
		try
		{
			// Smi.g:989:21: ( 'DESCRIPTION' )
			DebugEnterAlt(1);
			// Smi.g:989:22: 'DESCRIPTION'
			{
			DebugLocation(989, 22);
			Match(input,141,Follow._141_in_synpred27_Smi5281); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Smi_fragment", 146);
			LeaveRule("synpred27_Smi_fragment", 146);
			LeaveRule_synpred27_Smi_fragment();
		}
	}
	// $ANTLR end synpred27_Smi

	partial void EnterRule_synpred28_Smi_fragment();
	partial void LeaveRule_synpred28_Smi_fragment();

	// $ANTLR start synpred28_Smi
	public void synpred28_Smi_fragment()
	{
		EnterRule_synpred28_Smi_fragment();
		EnterRule("synpred28_Smi_fragment", 147);
		TraceIn("synpred28_Smi_fragment", 147);
		try
		{
			// Smi.g:993:7: (~ ( 'PIB-INDEX' ) )
			DebugEnterAlt(1);
			// Smi.g:
			{
			DebugLocation(993, 7);
			if ((input.LA(1)>=ABSENT_KW && input.LA(1)<=169)||(input.LA(1)>=171 && input.LA(1)<=197))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred28_Smi_fragment", 147);
			LeaveRule("synpred28_Smi_fragment", 147);
			LeaveRule_synpred28_Smi_fragment();
		}
	}
	// $ANTLR end synpred28_Smi

	partial void EnterRule_synpred29_Smi_fragment();
	partial void LeaveRule_synpred29_Smi_fragment();

	// $ANTLR start synpred29_Smi
	public void synpred29_Smi_fragment()
	{
		EnterRule_synpred29_Smi_fragment();
		EnterRule("synpred29_Smi_fragment", 148);
		TraceIn("synpred29_Smi_fragment", 148);
		try
		{
			// Smi.g:1001:7: ( 'DEFVAL' )
			DebugEnterAlt(1);
			// Smi.g:1001:8: 'DEFVAL'
			{
			DebugLocation(1001, 8);
			Match(input,140,Follow._140_in_synpred29_Smi5727); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_Smi_fragment", 148);
			LeaveRule("synpred29_Smi_fragment", 148);
			LeaveRule_synpred29_Smi_fragment();
		}
	}
	// $ANTLR end synpred29_Smi

	partial void EnterRule_synpred30_Smi_fragment();
	partial void LeaveRule_synpred30_Smi_fragment();

	// $ANTLR start synpred30_Smi
	public void synpred30_Smi_fragment()
	{
		EnterRule_synpred30_Smi_fragment();
		EnterRule("synpred30_Smi_fragment", 149);
		TraceIn("synpred30_Smi_fragment", 149);
		try
		{
			// Smi.g:1002:23: ( L_BRACE LOWER ( COMMA | R_BRACE ) )
			DebugEnterAlt(1);
			// Smi.g:1002:24: L_BRACE LOWER ( COMMA | R_BRACE )
			{
			DebugLocation(1002, 24);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred30_Smi5760); if (state.failed) return;
			DebugLocation(1002, 32);
			Match(input,LOWER,Follow._LOWER_in_synpred30_Smi5762); if (state.failed) return;
			DebugLocation(1002, 38);
			if (input.LA(1)==COMMA||input.LA(1)==R_BRACE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred30_Smi_fragment", 149);
			LeaveRule("synpred30_Smi_fragment", 149);
			LeaveRule_synpred30_Smi_fragment();
		}
	}
	// $ANTLR end synpred30_Smi

	partial void EnterRule_synpred31_Smi_fragment();
	partial void LeaveRule_synpred31_Smi_fragment();

	// $ANTLR start synpred31_Smi
	public void synpred31_Smi_fragment()
	{
		EnterRule_synpred31_Smi_fragment();
		EnterRule("synpred31_Smi_fragment", 150);
		TraceIn("synpred31_Smi_fragment", 150);
		try
		{
			// Smi.g:1109:16: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1109:17: smi_type L_BRACE
			{
			DebugLocation(1109, 17);
			PushFollow(Follow._smi_type_in_synpred31_Smi6542);
			smi_type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1109, 26);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred31_Smi6544); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred31_Smi_fragment", 150);
			LeaveRule("synpred31_Smi_fragment", 150);
			LeaveRule_synpred31_Smi_fragment();
		}
	}
	// $ANTLR end synpred31_Smi

	partial void EnterRule_synpred32_Smi_fragment();
	partial void LeaveRule_synpred32_Smi_fragment();

	// $ANTLR start synpred32_Smi
	public void synpred32_Smi_fragment()
	{
		EnterRule_synpred32_Smi_fragment();
		EnterRule("synpred32_Smi_fragment", 151);
		TraceIn("synpred32_Smi_fragment", 151);
		try
		{
			// Smi.g:1155:17: ( UPPER )
			DebugEnterAlt(1);
			// Smi.g:1155:18: UPPER
			{
			DebugLocation(1155, 18);
			Match(input,UPPER,Follow._UPPER_in_synpred32_Smi6907); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_Smi_fragment", 151);
			LeaveRule("synpred32_Smi_fragment", 151);
			LeaveRule_synpred32_Smi_fragment();
		}
	}
	// $ANTLR end synpred32_Smi

	partial void EnterRule_synpred33_Smi_fragment();
	partial void LeaveRule_synpred33_Smi_fragment();

	// $ANTLR start synpred33_Smi
	public void synpred33_Smi_fragment()
	{
		EnterRule_synpred33_Smi_fragment();
		EnterRule("synpred33_Smi_fragment", 152);
		TraceIn("synpred33_Smi_fragment", 152);
		try
		{
			// Smi.g:1156:3: ( value )
			DebugEnterAlt(1);
			// Smi.g:1156:4: value
			{
			DebugLocation(1156, 4);
			PushFollow(Follow._value_in_synpred33_Smi6921);
			value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred33_Smi_fragment", 152);
			LeaveRule("synpred33_Smi_fragment", 152);
			LeaveRule_synpred33_Smi_fragment();
		}
	}
	// $ANTLR end synpred33_Smi

	partial void EnterRule_synpred34_Smi_fragment();
	partial void LeaveRule_synpred34_Smi_fragment();

	// $ANTLR start synpred34_Smi
	public void synpred34_Smi_fragment()
	{
		EnterRule_synpred34_Smi_fragment();
		EnterRule("synpred34_Smi_fragment", 153);
		TraceIn("synpred34_Smi_fragment", 153);
		try
		{
			// Smi.g:1219:24: ( L_BRACE ( LOWER | COMMA | R_BRACE ) )
			DebugEnterAlt(1);
			// Smi.g:1219:25: L_BRACE ( LOWER | COMMA | R_BRACE )
			{
			DebugLocation(1219, 25);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred34_Smi7421); if (state.failed) return;
			DebugLocation(1219, 33);
			if (input.LA(1)==COMMA||input.LA(1)==LOWER||input.LA(1)==R_BRACE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred34_Smi_fragment", 153);
			LeaveRule("synpred34_Smi_fragment", 153);
			LeaveRule_synpred34_Smi_fragment();
		}
	}
	// $ANTLR end synpred34_Smi

	partial void EnterRule_synpred35_Smi_fragment();
	partial void LeaveRule_synpred35_Smi_fragment();

	// $ANTLR start synpred35_Smi
	public void synpred35_Smi_fragment()
	{
		EnterRule_synpred35_Smi_fragment();
		EnterRule("synpred35_Smi_fragment", 154);
		TraceIn("synpred35_Smi_fragment", 154);
		try
		{
			// Smi.g:1226:7: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1226:8: smi_type L_BRACE
			{
			DebugLocation(1226, 8);
			PushFollow(Follow._smi_type_in_synpred35_Smi7506);
			smi_type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1226, 17);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred35_Smi7508); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_Smi_fragment", 154);
			LeaveRule("synpred35_Smi_fragment", 154);
			LeaveRule_synpred35_Smi_fragment();
		}
	}
	// $ANTLR end synpred35_Smi

	partial void EnterRule_synpred36_Smi_fragment();
	partial void LeaveRule_synpred36_Smi_fragment();

	// $ANTLR start synpred36_Smi
	public void synpred36_Smi_fragment()
	{
		EnterRule_synpred36_Smi_fragment();
		EnterRule("synpred36_Smi_fragment", 155);
		TraceIn("synpred36_Smi_fragment", 155);
		try
		{
			// Smi.g:1229:7: ( smi_type )
			DebugEnterAlt(1);
			// Smi.g:1229:8: smi_type
			{
			DebugLocation(1229, 8);
			PushFollow(Follow._smi_type_in_synpred36_Smi7549);
			smi_type();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_Smi_fragment", 155);
			LeaveRule("synpred36_Smi_fragment", 155);
			LeaveRule_synpred36_Smi_fragment();
		}
	}
	// $ANTLR end synpred36_Smi

	partial void EnterRule_synpred37_Smi_fragment();
	partial void LeaveRule_synpred37_Smi_fragment();

	// $ANTLR start synpred37_Smi
	public void synpred37_Smi_fragment()
	{
		EnterRule_synpred37_Smi_fragment();
		EnterRule("synpred37_Smi_fragment", 156);
		TraceIn("synpred37_Smi_fragment", 156);
		try
		{
			// Smi.g:1252:6: ( 'DESCRIPTION' )
			DebugEnterAlt(1);
			// Smi.g:1252:7: 'DESCRIPTION'
			{
			DebugLocation(1252, 7);
			Match(input,141,Follow._141_in_synpred37_Smi7694); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_Smi_fragment", 156);
			LeaveRule("synpred37_Smi_fragment", 156);
			LeaveRule_synpred37_Smi_fragment();
		}
	}
	// $ANTLR end synpred37_Smi

	partial void EnterRule_synpred38_Smi_fragment();
	partial void LeaveRule_synpred38_Smi_fragment();

	// $ANTLR start synpred38_Smi
	public void synpred38_Smi_fragment()
	{
		EnterRule_synpred38_Smi_fragment();
		EnterRule("synpred38_Smi_fragment", 157);
		TraceIn("synpred38_Smi_fragment", 157);
		try
		{
			// Smi.g:1264:7: ( type )
			DebugEnterAlt(1);
			// Smi.g:1264:8: type
			{
			DebugLocation(1264, 8);
			PushFollow(Follow._type_in_synpred38_Smi7782);
			type();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred38_Smi_fragment", 157);
			LeaveRule("synpred38_Smi_fragment", 157);
			LeaveRule_synpred38_Smi_fragment();
		}
	}
	// $ANTLR end synpred38_Smi

	partial void EnterRule_synpred39_Smi_fragment();
	partial void LeaveRule_synpred39_Smi_fragment();

	// $ANTLR start synpred39_Smi
	public void synpred39_Smi_fragment()
	{
		EnterRule_synpred39_Smi_fragment();
		EnterRule("synpred39_Smi_fragment", 158);
		TraceIn("synpred39_Smi_fragment", 158);
		try
		{
			// Smi.g:1284:3: ( L_BRACKET ( NUMBER | UPPER | LOWER ) )
			DebugEnterAlt(1);
			// Smi.g:1284:4: L_BRACKET ( NUMBER | UPPER | LOWER )
			{
			DebugLocation(1284, 4);
			Match(input,L_BRACKET,Follow._L_BRACKET_in_synpred39_Smi7905); if (state.failed) return;
			DebugLocation(1284, 14);
			if (input.LA(1)==LOWER||input.LA(1)==NUMBER||input.LA(1)==UPPER)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred39_Smi_fragment", 158);
			LeaveRule("synpred39_Smi_fragment", 158);
			LeaveRule_synpred39_Smi_fragment();
		}
	}
	// $ANTLR end synpred39_Smi

	partial void EnterRule_synpred40_Smi_fragment();
	partial void LeaveRule_synpred40_Smi_fragment();

	// $ANTLR start synpred40_Smi
	public void synpred40_Smi_fragment()
	{
		EnterRule_synpred40_Smi_fragment();
		EnterRule("synpred40_Smi_fragment", 159);
		TraceIn("synpred40_Smi_fragment", 159);
		try
		{
			// Smi.g:1314:19: ( signed_number )
			DebugEnterAlt(1);
			// Smi.g:1314:20: signed_number
			{
			DebugLocation(1314, 20);
			PushFollow(Follow._signed_number_in_synpred40_Smi8141);
			signed_number();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred40_Smi_fragment", 159);
			LeaveRule("synpred40_Smi_fragment", 159);
			LeaveRule_synpred40_Smi_fragment();
		}
	}
	// $ANTLR end synpred40_Smi

	partial void EnterRule_synpred41_Smi_fragment();
	partial void LeaveRule_synpred41_Smi_fragment();

	// $ANTLR start synpred41_Smi
	public void synpred41_Smi_fragment()
	{
		EnterRule_synpred41_Smi_fragment();
		EnterRule("synpred41_Smi_fragment", 160);
		TraceIn("synpred41_Smi_fragment", 160);
		try
		{
			// Smi.g:1315:21: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:1315:22: defined_value
			{
			DebugLocation(1315, 22);
			PushFollow(Follow._defined_value_in_synpred41_Smi8173);
			defined_value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred41_Smi_fragment", 160);
			LeaveRule("synpred41_Smi_fragment", 160);
			LeaveRule_synpred41_Smi_fragment();
		}
	}
	// $ANTLR end synpred41_Smi

	partial void EnterRule_synpred42_Smi_fragment();
	partial void LeaveRule_synpred42_Smi_fragment();

	// $ANTLR start synpred42_Smi
	public void synpred42_Smi_fragment()
	{
		EnterRule_synpred42_Smi_fragment();
		EnterRule("synpred42_Smi_fragment", 161);
		TraceIn("synpred42_Smi_fragment", 161);
		try
		{
			// Smi.g:1346:7: ( value_range )
			DebugEnterAlt(1);
			// Smi.g:1346:8: value_range
			{
			DebugLocation(1346, 8);
			PushFollow(Follow._value_range_in_synpred42_Smi8430);
			value_range();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_Smi_fragment", 161);
			LeaveRule("synpred42_Smi_fragment", 161);
			LeaveRule_synpred42_Smi_fragment();
		}
	}
	// $ANTLR end synpred42_Smi

	partial void EnterRule_synpred43_Smi_fragment();
	partial void LeaveRule_synpred43_Smi_fragment();

	// $ANTLR start synpred43_Smi
	public void synpred43_Smi_fragment()
	{
		EnterRule_synpred43_Smi_fragment();
		EnterRule("synpred43_Smi_fragment", 162);
		TraceIn("synpred43_Smi_fragment", 162);
		try
		{
			// Smi.g:1347:7: ( value )
			DebugEnterAlt(1);
			// Smi.g:1347:8: value
			{
			DebugLocation(1347, 8);
			PushFollow(Follow._value_in_synpred43_Smi8448);
			value();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Smi_fragment", 162);
			LeaveRule("synpred43_Smi_fragment", 162);
			LeaveRule_synpred43_Smi_fragment();
		}
	}
	// $ANTLR end synpred43_Smi

	partial void EnterRule_synpred44_Smi_fragment();
	partial void LeaveRule_synpred44_Smi_fragment();

	// $ANTLR start synpred44_Smi
	public void synpred44_Smi_fragment()
	{
		EnterRule_synpred44_Smi_fragment();
		EnterRule("synpred44_Smi_fragment", 163);
		TraceIn("synpred44_Smi_fragment", 163);
		try
		{
			// Smi.g:1409:7: ( H_STRING )
			DebugEnterAlt(1);
			// Smi.g:1409:8: H_STRING
			{
			DebugLocation(1409, 8);
			Match(input,H_STRING,Follow._H_STRING_in_synpred44_Smi8947); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred44_Smi_fragment", 163);
			LeaveRule("synpred44_Smi_fragment", 163);
			LeaveRule_synpred44_Smi_fragment();
		}
	}
	// $ANTLR end synpred44_Smi

	partial void EnterRule_synpred45_Smi_fragment();
	partial void LeaveRule_synpred45_Smi_fragment();

	// $ANTLR start synpred45_Smi
	public void synpred45_Smi_fragment()
	{
		EnterRule_synpred45_Smi_fragment();
		EnterRule("synpred45_Smi_fragment", 164);
		TraceIn("synpred45_Smi_fragment", 164);
		try
		{
			// Smi.g:1413:7: ( B_STRING )
			DebugEnterAlt(1);
			// Smi.g:1413:8: B_STRING
			{
			DebugLocation(1413, 8);
			Match(input,B_STRING,Follow._B_STRING_in_synpred45_Smi8967); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_Smi_fragment", 164);
			LeaveRule("synpred45_Smi_fragment", 164);
			LeaveRule_synpred45_Smi_fragment();
		}
	}
	// $ANTLR end synpred45_Smi

	partial void EnterRule_synpred46_Smi_fragment();
	partial void LeaveRule_synpred46_Smi_fragment();

	// $ANTLR start synpred46_Smi
	public void synpred46_Smi_fragment()
	{
		EnterRule_synpred46_Smi_fragment();
		EnterRule("synpred46_Smi_fragment", 165);
		TraceIn("synpred46_Smi_fragment", 165);
		try
		{
			// Smi.g:1418:15: ( id_list )
			DebugEnterAlt(1);
			// Smi.g:1418:16: id_list
			{
			DebugLocation(1418, 16);
			PushFollow(Follow._id_list_in_synpred46_Smi9004);
			id_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Smi_fragment", 165);
			LeaveRule("synpred46_Smi_fragment", 165);
			LeaveRule_synpred46_Smi_fragment();
		}
	}
	// $ANTLR end synpred46_Smi

	partial void EnterRule_synpred47_Smi_fragment();
	partial void LeaveRule_synpred47_Smi_fragment();

	// $ANTLR start synpred47_Smi
	public void synpred47_Smi_fragment()
	{
		EnterRule_synpred47_Smi_fragment();
		EnterRule("synpred47_Smi_fragment", 166);
		TraceIn("synpred47_Smi_fragment", 166);
		try
		{
			// Smi.g:1419:17: ( char_defs_list )
			DebugEnterAlt(1);
			// Smi.g:1419:18: char_defs_list
			{
			DebugLocation(1419, 18);
			PushFollow(Follow._char_defs_list_in_synpred47_Smi9032);
			char_defs_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred47_Smi_fragment", 166);
			LeaveRule("synpred47_Smi_fragment", 166);
			LeaveRule_synpred47_Smi_fragment();
		}
	}
	// $ANTLR end synpred47_Smi
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA51 dfa51;
	private DFA78 dfa78;
	private DFA83 dfa83;
	private DFA100 dfa100;
	private DFA109 dfa109;
	private DFA108 dfa108;
	private DFA130 dfa130;
	private DFA155 dfa155;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa51 = new DFA51( this, SpecialStateTransition51 );
		dfa78 = new DFA78( this, SpecialStateTransition78 );
		dfa83 = new DFA83( this, SpecialStateTransition83 );
		dfa100 = new DFA100( this, SpecialStateTransition100 );
		dfa109 = new DFA109( this, SpecialStateTransition109 );
		dfa108 = new DFA108( this, SpecialStateTransition108 );
		dfa130 = new DFA130( this, SpecialStateTransition130 );
		dfa155 = new DFA155( this, SpecialStateTransition155 );
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x62\xFFFF";
		private const string DFA51_eofS =
			"\x1\x30\x61\xFFFF";
		private const string DFA51_minS =
			"\x1\x7\x1\x0\x13\xFFFF\x1\x0\x5\xFFFF\x1\x0\x6\xFFFF\xD\x0\x33\xFFFF";
		private const string DFA51_maxS =
			"\x1\xC5\x1\x0\x13\xFFFF\x1\x0\x5\xFFFF\x1\x0\x6\xFFFF\xD\x0\x33\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x13\x1\x1\xFFFF\x5\x1\x1\xFFFF\x6\x1\xD\xFFFF\x1\x1\x1\x2\x31"+
			"\xFFFF";
		private const string DFA51_specialS =
			"\x1\x0\x1\x1\x13\xFFFF\x1\x2\x5\xFFFF\x1\x3\x6\xFFFF\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x33\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x30\x1\xFFFF\x1\x30\x2\xFFFF\x1\x3\x1\xFFFF\x1\x6"+
				"\x1\x4\x3\xFFFF\x1\x5\x2\xFFFF\x1\x15\x1\xFFFF\x2\x30\x5\xFFFF\x1\x30"+
				"\x5\xFFFF\x1\x16\x1\x30\x1\x17\x1\x30\x1\x24\x2\x30\x3\xFFFF\x1\x18"+
				"\x2\xFFFF\x1\x7\x1\x8\x1\x9\x2\xFFFF\x1\xA\x6\xFFFF\x1\x19\x2\x30\x1"+
				"\xB\x1\xFFFF\x1\x30\x1\x1\x1\xFFFF\x1\x21\x5\xFFFF\x1\x1A\x1\xFFFF\x1"+
				"\xC\x1\xFFFF\x1\x1B\x1\x1C\x2\xFFFF\x1\x23\x1\x30\x6\xFFFF\x1\xD\x1"+
				"\xFFFF\x1\x1D\x1\xFFFF\x2\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1\x1F\x1\x20"+
				"\x4\xFFFF\x1\xF\x1\xFFFF\x1\xE\x2\xFFFF\x1\x30\x2\xFFFF\x1\x10\x1\x22"+
				"\x1\x12\x1\x11\x1\x13\x1\x14\x2\xFFFF\x5\x30\x1\x2D\x3\x30\x1\xFFFF"+
				"\x1\x30\x1\x2F\x1\xFFFF\x3\x30\x1\xFFFF\x1\x30\x2\xFFFF\x3\x30\x6\xFFFF"+
				"\x2\x30\x1\xFFFF\x1\x2C\x1\x26\x1\x2B\x1\x28\x1\xFFFF\x1\x2A\x1\x27"+
				"\x1\x25\x2\xFFFF\x1\x30\x2\xFFFF\x4\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1"+
				"\x30\x1\x1E\x1\xFFFF\x4\x30\x3\xFFFF\x1\x29\x2\x30\x1\x2E\x1\x30\x1"+
				"\xFFFF\x1\x30\x2\xFFFF\x1\x30",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "907:9: ( ( LOWER )=> ( ( LOWER )=>l2= LOWER )? t2= type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition51(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA51_1 = input.LA(1);
		int index51_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA51_1==LOWER)) {s = 1;}

				else if ((LA51_1==ANY_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 2;}

				else if ((LA51_1==BIT_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 3;}

				else if ((LA51_1==BOOLEAN_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 4;}

				else if ((LA51_1==CHARACTER_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 5;}

				else if ((LA51_1==BMP_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 6;}

				else if ((LA51_1==GENERALIZED_TIME_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 7;}

				else if ((LA51_1==GENERAL_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 8;}

				else if ((LA51_1==GRAPHIC_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 9;}

				else if ((LA51_1==IA5_STRING_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 10;}

				else if ((LA51_1==ISO646_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 11;}

				else if ((LA51_1==NUMERIC_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 12;}

				else if ((LA51_1==PRINTABLE_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 13;}

				else if ((LA51_1==TELETEX_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 14;}

				else if ((LA51_1==T61_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 15;}

				else if ((LA51_1==UNIVERSAL_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 16;}

				else if ((LA51_1==UTF8_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 17;}

				else if ((LA51_1==UTC_TIME_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 18;}

				else if ((LA51_1==VIDEOTEX_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 19;}

				else if ((LA51_1==VISIBLE_STR_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 20;}

				else if ((LA51_1==CHOICE_KW)) {s = 21;}

				else if ((LA51_1==EMBEDDED_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 22;}

				else if ((LA51_1==ENUMERATED_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 23;}

				else if ((LA51_1==EXTERNAL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 24;}

				else if ((LA51_1==INTEGER_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 25;}

				else if ((LA51_1==NULL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 26;}

				else if ((LA51_1==OBJECT_KW)) {s = 27;}

				else if ((LA51_1==OCTET_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 28;}

				else if ((LA51_1==REAL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 29;}

				else if ((LA51_1==179) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 30;}

				else if ((LA51_1==SEQUENCE_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 31;}

				else if ((LA51_1==SET_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 32;}

				else if ((LA51_1==L_BRACKET) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((LA51_1==UPPER)) {s = 34;}

				else if ((LA51_1==OPERATION_KW)) {s = 35;}

				else if ((LA51_1==ERROR_KW)) {s = 36;}

				else if ((LA51_1==165)) {s = 37;}

				else if ((LA51_1==159)) {s = 38;}

				else if ((LA51_1==164)) {s = 39;}

				else if ((LA51_1==161)) {s = 40;}

				else if ((LA51_1==188)) {s = 41;}

				else if ((LA51_1==163)) {s = 42;}

				else if ((LA51_1==160)) {s = 43;}

				else if ((LA51_1==158)) {s = 44;}

				else if ((LA51_1==131)) {s = 45;}

				else if ((LA51_1==191)) {s = 46;}

				else if ((LA51_1==137) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((LA51_1==EOF||LA51_1==ASSIGN_OP||LA51_1==BAR||(LA51_1>=COLON && LA51_1<=COMMA)||LA51_1==DEFAULT_KW||LA51_1==END_KW||LA51_1==ERRORS_KW||(LA51_1>=EXCEPT_KW && LA51_1<=EXCLAMATION)||(LA51_1>=INTERSECTION && LA51_1<=INTERSECTION_KW)||LA51_1==LINKED_KW||LA51_1==OPTIONAL_KW||(LA51_1>=RESULT_KW && LA51_1<=R_BRACE)||LA51_1==R_PAREN||LA51_1==UNION_KW||(LA51_1>=126 && LA51_1<=130)||(LA51_1>=132 && LA51_1<=134)||LA51_1==136||(LA51_1>=139 && LA51_1<=141)||LA51_1==143||(LA51_1>=146 && LA51_1<=148)||(LA51_1>=155 && LA51_1<=156)||LA51_1==168||(LA51_1>=171 && LA51_1<=174)||LA51_1==176||LA51_1==178||(LA51_1>=181 && LA51_1<=184)||(LA51_1>=189 && LA51_1<=190)||LA51_1==192||LA51_1==194||LA51_1==197)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 47;}

				else if ((true)) {s = 48;}

				input.Seek(index51_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 51, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA78 : DFA
	{
		private const string DFA78_eotS =
			"\x40\xFFFF";
		private const string DFA78_eofS =
			"\x1\x5\x3F\xFFFF";
		private const string DFA78_minS =
			"\x1\xA\x1\x0\x3E\xFFFF";
		private const string DFA78_maxS =
			"\x1\xC5\x1\x0\x3E\xFFFF";
		private const string DFA78_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x39\xFFFF\x1\x1";
		private const string DFA78_specialS =
			"\x1\xFFFF\x1\x0\x3E\xFFFF}>";
		private static readonly string[] DFA78_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x5\xC\xFFFF\x1\x5\x1\xFFFF\x2\x5\x5\xFFFF\x1\x5\x6"+
				"\xFFFF\x1\x5\x1\xFFFF\x4\x5\x13\xFFFF\x2\x5\x2\xFFFF\x2\x5\xB\xFFFF"+
				"\x1\x5\x3\xFFFF\x2\x5\xA\xFFFF\x2\x5\x1\xFFFF\x1\x5\xC\xFFFF\x1\x5\x3"+
				"\xFFFF\x1\x5\x6\xFFFF\x9\x5\x1\x2\x1\x5\x2\xFFFF\x3\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x4\x3\x5\x1\xFFFF\x1\x1\x4\xFFFF\x2\x5\x1\xFFFF\x4\x5\x1"+
				"\xFFFF\x3\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x3\x4\x5\x1\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x2\xFFFF\x4\x5\x3\xFFFF\x7\x5\x2\xFFFF\x1\x5",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA78_eot = DFA.UnpackEncodedString(DFA78_eotS);
		private static readonly short[] DFA78_eof = DFA.UnpackEncodedString(DFA78_eofS);
		private static readonly char[] DFA78_min = DFA.UnpackEncodedStringToUnsignedChars(DFA78_minS);
		private static readonly char[] DFA78_max = DFA.UnpackEncodedStringToUnsignedChars(DFA78_maxS);
		private static readonly short[] DFA78_accept = DFA.UnpackEncodedString(DFA78_acceptS);
		private static readonly short[] DFA78_special = DFA.UnpackEncodedString(DFA78_specialS);
		private static readonly short[][] DFA78_transition;

		static DFA78()
		{
			int numStates = DFA78_transitionS.Length;
			DFA78_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA78_transition[i] = DFA.UnpackEncodedString(DFA78_transitionS[i]);
			}
		}

		public DFA78( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}

		public override string Description { get { return "993:5: ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' i3= objecttype_macro_index | 'AUGMENTS' i4= objecttype_macro_augments | 'PIB-INDEX' L_BRACE v3= value R_BRACE | 'EXTENDS' L_BRACE v4= value R_BRACE )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition78(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA78_1 = input.LA(1);
		int index78_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred28_Smi_fragment))) {s = 63;}

				else if ((true)) {s = 5;}

				input.Seek(index78_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 78, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA83 : DFA
	{
		private const string DFA83_eotS =
			"\xA\xFFFF";
		private const string DFA83_eofS =
			"\xA\xFFFF";
		private const string DFA83_minS =
			"\x2\x15\x1\xFFFF\x2\x15\x1\x0\x1\x15\x1\xFFFF\x1\x0\x1\x15";
		private const string DFA83_maxS =
			"\x2\x77\x1\xFFFF\x2\x77\x1\x0\x1\x77\x1\xFFFF\x1\x0\x1\x77";
		private const string DFA83_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA83_specialS =
			"\x5\xFFFF\x1\x0\x2\xFFFF\x1\x1\x1\xFFFF}>";
		private static readonly string[] DFA83_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x1\x1\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x3\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x4\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC"+
				"\xFFFF\x1\x2\x6\xFFFF\x1\x5\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x6"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x9\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x8\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x6"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2"
			};

		private static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
		private static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
		private static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
		private static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
		private static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
		private static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
		private static readonly short[][] DFA83_transition;

		static DFA83()
		{
			int numStates = DFA83_transitionS.Length;
			DFA83_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA83_transition[i] = DFA.UnpackEncodedString(DFA83_transitionS[i]);
			}
		}

		public DFA83( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 83;
			this.eot = DFA83_eot;
			this.eof = DFA83_eof;
			this.min = DFA83_min;
			this.max = DFA83_max;
			this.accept = DFA83_accept;
			this.special = DFA83_special;
			this.transition = DFA83_transition;
		}

		public override string Description { get { return "1002:21: ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=>b= objecttype_macro_bitsvalue |v7= value )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition83(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA83_1 = input.LA(1);
		int index83_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred30_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 2;}

				input.Seek(index83_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred30_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 2;}

				input.Seek(index83_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 83, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA100 : DFA
	{
		private const string DFA100_eotS =
			"\x1A\xFFFF";
		private const string DFA100_eofS =
			"\x1\xFFFF\x2\x6\x2\xFFFF\x1\x6\x3\xFFFF\x2\x6\xF\xFFFF";
		private const string DFA100_minS =
			"\x1\x7\x2\xA\x1\x6D\x1\x3B\x1\xA\x2\xFFFF\x1\x47\x2\xA\x1\x4A\x1\x47"+
			"\x1\x50\x2\x66\x1\x1C\x1\x47\x1\x0\x1\x4A\x1\x47\x1\x50\x2\x66\x1\x1C"+
			"\x1\x0";
		private const string DFA100_maxS =
			"\x1\xBF\x2\xC5\x1\x6D\x1\x3B\x1\xC5\x2\xFFFF\x1\x47\x2\xC5\x1\x4A\x1"+
			"\x77\x1\x50\x2\x66\x1\x64\x1\x47\x1\x0\x1\x4A\x1\x77\x1\x50\x2\x66\x1"+
			"\x64\x1\x0";
		private const string DFA100_acceptS =
			"\x6\xFFFF\x1\x2\x1\x1\x12\xFFFF";
		private const string DFA100_specialS =
			"\x1\xFFFF\x1\x0\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\x3\x7\xFFFF\x1\x4\x6"+
			"\xFFFF\x1\x5}>";
		private static readonly string[] DFA100_transitionS =
			{
				"\x1\x6\x7\xFFFF\x1\x6\x1\xFFFF\x2\x6\x3\xFFFF\x1\x6\x2\xFFFF\x1\x6\xE"+
				"\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x2\xFFFF\x3"+
				"\x6\x2\xFFFF\x1\x6\x6\xFFFF\x1\x2\x2\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x5\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x4\x1\x3\x2\xFFFF\x1"+
				"\x6\x7\xFFFF\x1\x6\x1\xFFFF\x1\x6\x6\xFFFF\x2\x6\x4\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x5\xFFFF\x1\x6\x1\x5\x4\x6\x7\xFFFF\x1\x6\x5\xFFFF\x1\x1\x14"+
				"\xFFFF\x4\x6\x1\xFFFF\x3\x6\xD\xFFFF\x1\x6\x8\xFFFF\x1\x6\x2\xFFFF\x1"+
				"\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x1\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6"+
				"\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\xA"+
				"\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1"+
				"\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF"+
				"\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2"+
				"\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4"+
				"\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x1\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6"+
				"\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x8\x1"+
				"\xFFFF\x1\x6\x8\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1"+
				"\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1"+
				"\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1"+
				"\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x9",
				"\x1\xA",
				"\x1\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x1\xFFFF\x2\x6\x5\xFFFF\x1\x6\x2"+
				"\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF"+
				"\x2\x6\x1\x7\x1\xFFFF\x1\x6\x8\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF"+
				"\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1"+
				"\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1"+
				"\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x1\x6",
				"",
				"",
				"\x1\xB",
				"\x1\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x1\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6"+
				"\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\x1"+
				"\xFFFF\x1\x6\x8\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1"+
				"\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1"+
				"\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1"+
				"\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x1\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6"+
				"\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\xA"+
				"\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1"+
				"\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF"+
				"\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2"+
				"\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4"+
				"\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\xC",
				"\x1\x6\x4\xFFFF\x1\xD\x3\xFFFF\x1\xE\x26\xFFFF\x1\x6",
				"\x1\xF",
				"\x1\x10",
				"\x1\x10",
				"\x1\x11\x47\xFFFF\x1\x12",
				"\x1\x13",
				"\x1\xFFFF",
				"\x1\x14",
				"\x1\x6\x4\xFFFF\x1\x15\x3\xFFFF\x1\x16\x26\xFFFF\x1\x6",
				"\x1\x17",
				"\x1\x18",
				"\x1\x18",
				"\x1\x11\x47\xFFFF\x1\x19",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
		private static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
		private static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
		private static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
		private static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
		private static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
		private static readonly short[][] DFA100_transition;

		static DFA100()
		{
			int numStates = DFA100_transitionS.Length;
			DFA100_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA100_transition[i] = DFA.UnpackEncodedString(DFA100_transitionS[i]);
			}
		}

		public DFA100( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 100;
			this.eot = DFA100_eot;
			this.eof = DFA100_eof;
			this.min = DFA100_min;
			this.max = DFA100_max;
			this.accept = DFA100_accept;
			this.special = DFA100_special;
			this.transition = DFA100_transition;
		}

		public override string Description { get { return "1109:14: ( ( smi_type L_BRACE )=>s2= smi_type L_BRACE nb1= textualconvention_macro_namedbit ( COMMA nb2= textualconvention_macro_namedbit )* R_BRACE |t= type )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition100(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA100_1 = input.LA(1);
		int index100_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA100_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA100_1==EOF||LA100_1==ASSIGN_OP||LA100_1==BAR||LA100_1==CHOICE_KW||(LA100_1>=COLON && LA100_1<=COMMA)||LA100_1==DEFAULT_KW||LA100_1==END_KW||(LA100_1>=ERRORS_KW && LA100_1<=EXCLAMATION)||(LA100_1>=INTERSECTION && LA100_1<=INTERSECTION_KW)||(LA100_1>=LINKED_KW && LA100_1<=LOWER)||LA100_1==OBJECT_KW||(LA100_1>=OPERATION_KW && LA100_1<=OPTIONAL_KW)||(LA100_1>=RESULT_KW && LA100_1<=R_BRACE)||LA100_1==R_PAREN||LA100_1==UNION_KW||LA100_1==UPPER||(LA100_1>=126 && LA100_1<=134)||LA100_1==136||(LA100_1>=139 && LA100_1<=141)||LA100_1==143||(LA100_1>=146 && LA100_1<=148)||(LA100_1>=155 && LA100_1<=156)||(LA100_1>=158 && LA100_1<=161)||(LA100_1>=163 && LA100_1<=165)||LA100_1==168||(LA100_1>=171 && LA100_1<=174)||LA100_1==176||LA100_1==178||(LA100_1>=181 && LA100_1<=184)||(LA100_1>=188 && LA100_1<=192)||LA100_1==194||LA100_1==197)) {s = 6;}

				input.Seek(index100_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA100_1==EOF||LA100_1==ASSIGN_OP||LA100_1==BAR||LA100_1==CHOICE_KW||(LA100_1>=COLON && LA100_1<=COMMA)||LA100_1==DEFAULT_KW||LA100_1==DOT||LA100_1==END_KW||(LA100_1>=ERRORS_KW && LA100_1<=EXCLAMATION)||(LA100_1>=INTERSECTION && LA100_1<=INTERSECTION_KW)||(LA100_1>=LINKED_KW && LA100_1<=LOWER)||LA100_1==L_PAREN||LA100_1==OBJECT_KW||(LA100_1>=OPERATION_KW && LA100_1<=OPTIONAL_KW)||(LA100_1>=RESULT_KW && LA100_1<=R_BRACE)||LA100_1==R_PAREN||LA100_1==UNION_KW||LA100_1==UPPER||(LA100_1>=126 && LA100_1<=134)||LA100_1==136||(LA100_1>=139 && LA100_1<=141)||LA100_1==143||(LA100_1>=146 && LA100_1<=148)||(LA100_1>=155 && LA100_1<=156)||(LA100_1>=158 && LA100_1<=161)||(LA100_1>=163 && LA100_1<=165)||LA100_1==168||(LA100_1>=171 && LA100_1<=174)||LA100_1==176||LA100_1==178||(LA100_1>=181 && LA100_1<=184)||(LA100_1>=188 && LA100_1<=192)||LA100_1==194||LA100_1==197)) {s = 6;}

				else if ((LA100_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				input.Seek(index100_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((LA100_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA100_1==EOF||LA100_1==ASSIGN_OP||LA100_1==BAR||LA100_1==CHOICE_KW||(LA100_1>=COLON && LA100_1<=COMMA)||LA100_1==DEFAULT_KW||LA100_1==END_KW||(LA100_1>=ERRORS_KW && LA100_1<=EXCLAMATION)||(LA100_1>=INTERSECTION && LA100_1<=INTERSECTION_KW)||(LA100_1>=LINKED_KW && LA100_1<=LOWER)||LA100_1==L_PAREN||LA100_1==OBJECT_KW||(LA100_1>=OPERATION_KW && LA100_1<=OPTIONAL_KW)||(LA100_1>=RESULT_KW && LA100_1<=R_BRACE)||LA100_1==R_PAREN||LA100_1==UNION_KW||LA100_1==UPPER||(LA100_1>=126 && LA100_1<=134)||LA100_1==136||(LA100_1>=139 && LA100_1<=141)||LA100_1==143||(LA100_1>=146 && LA100_1<=148)||(LA100_1>=155 && LA100_1<=156)||(LA100_1>=158 && LA100_1<=161)||(LA100_1>=163 && LA100_1<=165)||LA100_1==168||(LA100_1>=171 && LA100_1<=174)||LA100_1==176||LA100_1==178||(LA100_1>=181 && LA100_1<=184)||(LA100_1>=188 && LA100_1<=192)||LA100_1==194||LA100_1==197)) {s = 6;}

				input.Seek(index100_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA100_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA100_1==EOF||LA100_1==ASSIGN_OP||LA100_1==BAR||LA100_1==CHOICE_KW||(LA100_1>=COLON && LA100_1<=COMMA)||LA100_1==DEFAULT_KW||LA100_1==END_KW||(LA100_1>=ERRORS_KW && LA100_1<=EXCLAMATION)||(LA100_1>=INTERSECTION && LA100_1<=INTERSECTION_KW)||(LA100_1>=LINKED_KW && LA100_1<=LOWER)||LA100_1==OBJECT_KW||(LA100_1>=OPERATION_KW && LA100_1<=OPTIONAL_KW)||(LA100_1>=RESULT_KW && LA100_1<=R_BRACE)||LA100_1==R_PAREN||LA100_1==UNION_KW||LA100_1==UPPER||(LA100_1>=126 && LA100_1<=134)||LA100_1==136||(LA100_1>=139 && LA100_1<=141)||LA100_1==143||(LA100_1>=146 && LA100_1<=148)||(LA100_1>=155 && LA100_1<=156)||(LA100_1>=158 && LA100_1<=161)||(LA100_1>=163 && LA100_1<=165)||LA100_1==168||(LA100_1>=171 && LA100_1<=174)||LA100_1==176||LA100_1==178||(LA100_1>=181 && LA100_1<=184)||(LA100_1>=188 && LA100_1<=192)||LA100_1==194||LA100_1==197)) {s = 6;}

				input.Seek(index100_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 6;}

				input.Seek(index100_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 6;}

				input.Seek(index100_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 100, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA109 : DFA
	{
		private const string DFA109_eotS =
			"\x68\xFFFF";
		private const string DFA109_eofS =
			"\x1\x2\x1\x48\x66\xFFFF";
		private const string DFA109_minS =
			"\x2\xA\x1\xFFFF\x1\x7\x46\xFFFF\x1\x0\x1\x25\x1\x15\xA\xFFFF\x1\x47\x10"+
			"\xFFFF";
		private const string DFA109_maxS =
			"\x2\xC5\x1\xFFFF\x1\xBF\x46\xFFFF\x1\x0\x2\xC0\xA\xFFFF\x1\x77\x10\xFFFF";
		private const string DFA109_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x46\x1\x3\xFFFF\xA\x1\x1\xFFFF\x10\x1";
		private const string DFA109_specialS =
			"\x1\xFFFF\x1\x0\x1\xFFFF\x1\x1\x46\xFFFF\x1\x2\x1\xFFFF\x1\x3\xA\xFFFF"+
			"\x1\x4\x10\xFFFF}>";
		private static readonly string[] DFA109_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\xC\xFFFF\x1\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x1\xFFFF\x4\x2\x13\xFFFF\x2\x2\x2\xFFFF\x2\x2\xB\xFFFF"+
				"\x1\x2\x3\xFFFF\x2\x2\xA\xFFFF\x2\x2\x1\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x1\x6\xFFFF\x9\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x4\x2\x4\xFFFF\x8\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2\x3\xFFFF\x5\x2\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\x1\x47\x8\xFFFF\x1\xE\x3\xFFFF\x1\x3F\x1\xFFFF\x1\x42"+
				"\x1\x3D\x4\xFFFF\x1\x7\x1\x41\x6\xFFFF\x1\x14\x1\xFFFF\x1\x2E\x1\x16"+
				"\x1\x45\x1\x43\x4\xFFFF\x1\x5\x5\xFFFF\x1\xD\x8\xFFFF\x2\x46\x2\xFFFF"+
				"\x1\x2F\x1\x9\x1\xC\x3\xFFFF\x1\xA\x1\x10\x1\xFFFF\x1\x6\x1\xB\x2\xFFFF"+
				"\x1\x13\x3\xFFFF\x1\x15\x1\x40\x4\xFFFF\x1\xF\x5\xFFFF\x1\x2D\x1\x3E"+
				"\x1\xFFFF\x1\x44\xA\xFFFF\x1\x4\x1\xFFFF\x1\x47\x3\xFFFF\x1\x8\x6\xFFFF"+
				"\x1\x23\x1\x26\x1\x25\x1\x24\x1\x32\x1\x2C\x1\x27\x1\x1A\x1\x19\x1\xFFFF"+
				"\x1\x17\x2\xFFFF\x1\x3B\x1\x3C\x1\x3A\x1\xFFFF\x1\x28\x2\xFFFF\x1\x1B"+
				"\x1\x1D\x1\x1C\x1\x12\x3\xFFFF\x1\x2\x1\x11\x1\x31\x1\x38\x1\x49\x4"+
				"\x2C\x1\xFFFF\x3\x2C\x2\xFFFF\x1\x33\x2\xFFFF\x1\x39\x1\x34\x1\x35\x1"+
				"\x21\x1\xFFFF\x1\x2B\x1\xFFFF\x1\x22\x2\xFFFF\x1\x20\x1\x2A\x1\x29\x1"+
				"\x36\x3\xFFFF\x1\x2C\x1\x1E\x1\x1F\x1\x2C\x1\x18\x1\xFFFF\x1\x30\x2"+
				"\xFFFF\x1\x37",
				"",
				"\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x54\x1\x2\x2\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x4F\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2\x1\x4E\x1\xFFFF\x3\x2\x1\xFFFF\x1\x53\x1\x2\x6\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x4C\x1\x52\x1\x2\x2\xFFFF\x1\x50\x1"+
				"\x56\x1\xFFFF\x1\x4A\x1\x51\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x55\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4D\x4\xFFFF\x1\x2\x1\x4B\x4\x2\x7\xFFFF\x1\x2\x5"+
				"\xFFFF\x1\x2\x14\xFFFF\x4\x2\x1\xFFFF\x3\x2\xD\xFFFF\x1\x2\x8\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\x57\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1A\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x8\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x6\xFFFF\x4\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x6\xFFFF\x1\x2\x2\xFFFF\x3\x2\x9\xFFFF\x4\x2\x1"+
				"\xFFFF\x3\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3"+
				"\x2\x4\xFFFF\x5\x2",
				"\x1\x64\x5\xFFFF\x1\x5B\x5\xFFFF\x1\x5F\x7\xFFFF\x1\x14\x2\xFFFF\x1"+
				"\x16\x6\xFFFF\x1\x5D\x5\xFFFF\x1\x63\xB\xFFFF\x1\x2\x1\xFFFF\x1\x59"+
				"\x1\x62\x3\xFFFF\x1\x60\x1\x66\x1\xFFFF\x1\x5E\x1\x61\x2\xFFFF\x1\x5A"+
				"\x3\xFFFF\x1\x15\x5\xFFFF\x1\x65\x13\xFFFF\x1\x5C\x5\xFFFF\x1\x58\x6"+
				"\xFFFF\x1\x23\x1\x26\x1\x25\x1\x24\x1\xFFFF\x1\x2C\x1\x27\x1\x1A\x1"+
				"\x19\x1\xFFFF\x1\x17\x6\xFFFF\x1\x28\x2\xFFFF\x1\x1B\x1\x1D\x1\x1C\x9"+
				"\xFFFF\x4\x2C\x1\xFFFF\x3\x2C\x8\xFFFF\x1\x21\x1\xFFFF\x1\x2B\x1\xFFFF"+
				"\x1\x22\x2\xFFFF\x1\x20\x1\x2A\x1\x29\x4\xFFFF\x1\x2C\x1\x1E\x1\x1F"+
				"\x1\x2C\x1\x18",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x67\x2F\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA109_eot = DFA.UnpackEncodedString(DFA109_eotS);
		private static readonly short[] DFA109_eof = DFA.UnpackEncodedString(DFA109_eofS);
		private static readonly char[] DFA109_min = DFA.UnpackEncodedStringToUnsignedChars(DFA109_minS);
		private static readonly char[] DFA109_max = DFA.UnpackEncodedStringToUnsignedChars(DFA109_maxS);
		private static readonly short[] DFA109_accept = DFA.UnpackEncodedString(DFA109_acceptS);
		private static readonly short[] DFA109_special = DFA.UnpackEncodedString(DFA109_specialS);
		private static readonly short[][] DFA109_transition;

		static DFA109()
		{
			int numStates = DFA109_transitionS.Length;
			DFA109_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA109_transition[i] = DFA.UnpackEncodedString(DFA109_transitionS[i]);
			}
		}

		public DFA109( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 109;
			this.eot = DFA109_eot;
			this.eof = DFA109_eof;
			this.min = DFA109_min;
			this.max = DFA109_max;
			this.accept = DFA109_accept;
			this.special = DFA109_special;
			this.transition = DFA109_transition;
		}

		public override string Description { get { return "1155:16: ( ( UPPER )=>name= UPPER ( ( value )=>v1= value )? )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition109(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA109_1 = input.LA(1);
		int index109_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA109_1==ASSIGN_OP)) {s = 3;}

				else if ((LA109_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 4;}

				else if ((LA109_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 5;}

				else if ((LA109_1==NULL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 6;}

				else if ((LA109_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 7;}

				else if ((LA109_1==UPPER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 8;}

				else if ((LA109_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 9;}

				else if ((LA109_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 10;}

				else if ((LA109_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 11;}

				else if ((LA109_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 12;}

				else if ((LA109_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 13;}

				else if ((LA109_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 14;}

				else if ((LA109_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 15;}

				else if ((LA109_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 16;}

				else if ((LA109_1==154) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 17;}

				else if ((LA109_1==149) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 18;}

				else if ((LA109_1==OBJECT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 19;}

				else if ((LA109_1==END_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 20;}

				else if ((LA109_1==OPERATION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 21;}

				else if ((LA109_1==ERROR_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 22;}

				else if ((LA109_1==136) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 23;}

				else if ((LA109_1==192) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 24;}

				else if ((LA109_1==134) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 25;}

				else if ((LA109_1==133) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 26;}

				else if ((LA109_1==146) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 27;}

				else if ((LA109_1==148) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 28;}

				else if ((LA109_1==147) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 29;}

				else if ((LA109_1==189) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 30;}

				else if ((LA109_1==190) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 31;}

				else if ((LA109_1==181) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 32;}

				else if ((LA109_1==174) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 33;}

				else if ((LA109_1==178) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 34;}

				else if ((LA109_1==126) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 35;}

				else if ((LA109_1==129) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 36;}

				else if ((LA109_1==128) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 37;}

				else if ((LA109_1==127) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 38;}

				else if ((LA109_1==132) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 39;}

				else if ((LA109_1==143) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 40;}

				else if ((LA109_1==183) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 41;}

				else if ((LA109_1==182) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 42;}

				else if ((LA109_1==176) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 43;}

				else if ((LA109_1==131||(LA109_1>=158 && LA109_1<=161)||(LA109_1>=163 && LA109_1<=165)||LA109_1==188||LA109_1==191) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 44;}

				else if ((LA109_1==RESULT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 45;}

				else if ((LA109_1==ERRORS_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 46;}

				else if ((LA109_1==LINKED_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 47;}

				else if ((LA109_1==194) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 48;}

				else if ((LA109_1==155) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 49;}

				else if ((LA109_1==130) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 50;}

				else if ((LA109_1==168) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 51;}

				else if ((LA109_1==172) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 52;}

				else if ((LA109_1==173) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 53;}

				else if ((LA109_1==184) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 54;}

				else if ((LA109_1==197) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 55;}

				else if ((LA109_1==156) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 56;}

				else if ((LA109_1==171) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 57;}

				else if ((LA109_1==141) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 58;}

				else if ((LA109_1==139) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 59;}

				else if ((LA109_1==140) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 60;}

				else if ((LA109_1==COMMA) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 61;}

				else if ((LA109_1==R_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 62;}

				else if ((LA109_1==CHOICE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 63;}

				else if ((LA109_1==OPTIONAL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 64;}

				else if ((LA109_1==DEFAULT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 65;}

				else if ((LA109_1==COLON) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 66;}

				else if ((LA109_1==EXCLAMATION) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 67;}

				else if ((LA109_1==R_PAREN) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 68;}

				else if ((LA109_1==EXCEPT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 69;}

				else if (((LA109_1>=INTERSECTION && LA109_1<=INTERSECTION_KW)) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 70;}

				else if ((LA109_1==BAR||LA109_1==UNION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 71;}

				else if ((LA109_1==EOF) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 72;}

				else if ((LA109_1==157) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 73;}

				else if ((LA109_1==153)) {s = 2;}

				input.Seek(index109_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA109_1==ANY_KW||LA109_1==BIT_KW||(LA109_1>=BMP_STR_KW && LA109_1<=BOOLEAN_KW)||LA109_1==CHARACTER_KW||LA109_1==CHOICE_KW||LA109_1==EMBEDDED_KW||LA109_1==ENUMERATED_KW||LA109_1==ERROR_KW||LA109_1==EXTERNAL_KW||(LA109_1>=GENERALIZED_TIME_KW && LA109_1<=GRAPHIC_STR_KW)||LA109_1==IA5_STRING_KW||LA109_1==INTEGER_KW||LA109_1==ISO646_STR_KW||LA109_1==L_BRACKET||LA109_1==NUMERIC_STR_KW||(LA109_1>=OBJECT_KW && LA109_1<=OCTET_KW)||LA109_1==OPERATION_KW||LA109_1==PRINTABLE_STR_KW||LA109_1==REAL_KW||(LA109_1>=SEQUENCE_KW && LA109_1<=SET_KW)||LA109_1==T61_STR_KW||LA109_1==TELETEX_STR_KW||LA109_1==UNIVERSAL_STR_KW||(LA109_1>=UTC_TIME_KW && LA109_1<=VISIBLE_STR_KW)||LA109_1==131||LA109_1==137||(LA109_1>=158 && LA109_1<=161)||(LA109_1>=163 && LA109_1<=165)||LA109_1==179||LA109_1==188||LA109_1==191)) {s = 2;}

				else if ((LA109_1==NULL_KW)) {s = 74;}

				else if ((LA109_1==UPPER)) {s = 75;}

				else if ((LA109_1==LOWER)) {s = 76;}

				else if ((LA109_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 77;}

				else if ((LA109_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 78;}

				else if ((LA109_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 79;}

				else if ((LA109_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 80;}

				else if ((LA109_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 81;}

				else if ((LA109_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 82;}

				else if ((LA109_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 83;}

				else if ((LA109_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 84;}

				else if ((LA109_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 85;}

				else if ((LA109_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 86;}

				input.Seek(index109_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred32_Smi_fragment))) {s = 86;}

				else if ((true)) {s = 2;}

				input.Seek(index109_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA109_1==LESS)) {s = 2;}

				else if ((LA109_1==END_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 20;}

				else if ((LA109_1==UPPER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 88;}

				else if ((LA109_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 89;}

				else if ((LA109_1==OPERATION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 21;}

				else if ((LA109_1==ERROR_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 22;}

				else if ((LA109_1==136) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 23;}

				else if ((LA109_1==192) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 24;}

				else if ((LA109_1==134) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 25;}

				else if ((LA109_1==133) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 26;}

				else if ((LA109_1==146) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 27;}

				else if ((LA109_1==148) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 28;}

				else if ((LA109_1==147) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 29;}

				else if ((LA109_1==189) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 30;}

				else if ((LA109_1==190) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 31;}

				else if ((LA109_1==181) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 32;}

				else if ((LA109_1==OBJECT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 90;}

				else if ((LA109_1==174) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 33;}

				else if ((LA109_1==178) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 34;}

				else if ((LA109_1==126) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 35;}

				else if ((LA109_1==129) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 36;}

				else if ((LA109_1==128) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 37;}

				else if ((LA109_1==127) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 38;}

				else if ((LA109_1==132) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 39;}

				else if ((LA109_1==143) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 40;}

				else if ((LA109_1==183) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 41;}

				else if ((LA109_1==182) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 42;}

				else if ((LA109_1==176) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 43;}

				else if ((LA109_1==131||(LA109_1>=158 && LA109_1<=161)||(LA109_1>=163 && LA109_1<=165)||LA109_1==188||LA109_1==191) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 44;}

				else if ((LA109_1==COLON) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 91;}

				else if ((LA109_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 92;}

				else if ((LA109_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 93;}

				else if ((LA109_1==NULL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 94;}

				else if ((LA109_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 95;}

				else if ((LA109_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 96;}

				else if ((LA109_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 97;}

				else if ((LA109_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 98;}

				else if ((LA109_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 99;}

				else if ((LA109_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 100;}

				else if ((LA109_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 101;}

				else if ((LA109_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 102;}

				input.Seek(index109_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((LA109_1==UPPER)) {s = 2;}

				else if ((LA109_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 103;}

				input.Seek(index109_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 109, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x48\xFFFF";
		private const string DFA108_eofS =
			"\x1\xE\x47\xFFFF";
		private const string DFA108_minS =
			"\x1\xA\x4\xFFFF\x2\x0\x41\xFFFF";
		private const string DFA108_maxS =
			"\x1\xC5\x4\xFFFF\x2\x0\x41\xFFFF";
		private const string DFA108_acceptS =
			"\x1\xFFFF\x4\x1\x2\xFFFF\x7\x1\x1\x2\x39\xFFFF";
		private const string DFA108_specialS =
			"\x1\x0\x4\xFFFF\x1\x1\x1\x2\x41\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\xE\x1\xFFFF\x1\xE\x8\xFFFF\x1\xB\x3\xFFFF\x1\xE\x1\xFFFF\x2\xE\x4"+
				"\xFFFF\x1\x4\x1\xE\x6\xFFFF\x1\xE\x1\xFFFF\x4\xE\x4\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\xA\x8\xFFFF\x2\xE\x2\xFFFF\x1\xE\x1\x6\x1\x9\x3\xFFFF\x1\x7\x1\xD"+
				"\x1\xFFFF\x1\x3\x1\x8\x2\xFFFF\x1\xE\x3\xFFFF\x2\xE\x4\xFFFF\x1\xC\x5"+
				"\xFFFF\x2\xE\x1\xFFFF\x1\xE\xA\xFFFF\x1\x1\x1\xFFFF\x1\xE\x3\xFFFF\x1"+
				"\x5\x6\xFFFF\x9\xE\x1\xFFFF\x1\xE\x2\xFFFF\x3\xE\x1\xFFFF\x1\xE\x2\xFFFF"+
				"\x4\xE\x4\xFFFF\x8\xE\x1\xFFFF\x3\xE\x2\xFFFF\x1\xE\x2\xFFFF\x4\xE\x1"+
				"\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x4\xE\x3\xFFFF\x5\xE\x1\xFFFF\x1"+
				"\xE\x2\xFFFF\x1\xE",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "1156:2: ( ( value )=>v1= value )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition108(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA108_1 = input.LA(1);
		int index108_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA108_1==TRUE_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 1;}

				else if ((LA108_1==FALSE_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 2;}

				else if ((LA108_1==NULL_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 3;}

				else if ((LA108_1==C_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 4;}

				else if ((LA108_1==UPPER)) {s = 5;}

				else if ((LA108_1==LOWER)) {s = 6;}

				else if ((LA108_1==MINUS) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 7;}

				else if ((LA108_1==NUMBER) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 8;}

				else if ((LA108_1==L_BRACE) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 9;}

				else if ((LA108_1==H_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 10;}

				else if ((LA108_1==B_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 11;}

				else if ((LA108_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 12;}

				else if ((LA108_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((LA108_1==EOF||LA108_1==ASSIGN_OP||LA108_1==BAR||LA108_1==CHOICE_KW||(LA108_1>=COLON && LA108_1<=COMMA)||LA108_1==DEFAULT_KW||LA108_1==END_KW||(LA108_1>=ERRORS_KW && LA108_1<=EXCLAMATION)||(LA108_1>=INTERSECTION && LA108_1<=INTERSECTION_KW)||LA108_1==LINKED_KW||LA108_1==OBJECT_KW||(LA108_1>=OPERATION_KW && LA108_1<=OPTIONAL_KW)||(LA108_1>=RESULT_KW && LA108_1<=R_BRACE)||LA108_1==R_PAREN||LA108_1==UNION_KW||(LA108_1>=126 && LA108_1<=134)||LA108_1==136||(LA108_1>=139 && LA108_1<=141)||LA108_1==143||(LA108_1>=146 && LA108_1<=149)||(LA108_1>=154 && LA108_1<=161)||(LA108_1>=163 && LA108_1<=165)||LA108_1==168||(LA108_1>=171 && LA108_1<=174)||LA108_1==176||LA108_1==178||(LA108_1>=181 && LA108_1<=184)||(LA108_1>=188 && LA108_1<=192)||LA108_1==194||LA108_1==197)) {s = 14;}

				input.Seek(index108_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((true)) {s = 14;}

				input.Seek(index108_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((true)) {s = 14;}

				input.Seek(index108_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 108, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x11\xFFFF";
		private const string DFA130_eofS =
			"\x11\xFFFF";
		private const string DFA130_minS =
			"\x2\x15\x1\xFFFF\x2\x15\x1\x0\x1\x15\x1\x0\x1\x15\x1\xFFFF\x1\x15\x1"+
			"\x0\x1\x15\x1\x0\x2\x15\x1\x0";
		private const string DFA130_maxS =
			"\x2\x77\x1\xFFFF\x2\x77\x1\x0\x1\x77\x1\x0\x1\x77\x1\xFFFF\x1\x77\x1"+
			"\x0\x1\x77\x1\x0\x2\x77\x1\x0";
		private const string DFA130_acceptS =
			"\x2\xFFFF\x1\x2\x6\xFFFF\x1\x1\x7\xFFFF";
		private const string DFA130_specialS =
			"\x5\xFFFF\x1\x0\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF"+
			"\x1\x4}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x1\x1\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x6\xFFFF\x1\x4\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x3\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x5\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC"+
				"\xFFFF\x1\x2\x6\xFFFF\x1\x7\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x8"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xA"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xC\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\xB\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xE\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\xD\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xF"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xA"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xC\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x10\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "1219:23: ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE (l1= LOWER )? ( COMMA l2= LOWER )* R_BRACE |v4= value )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition130(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA130_1 = input.LA(1);
		int index130_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred34_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred34_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred34_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred34_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred34_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 130, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA155 : DFA
	{
		private const string DFA155_eotS =
			"\x42\xFFFF";
		private const string DFA155_eofS =
			"\x42\xFFFF";
		private const string DFA155_minS =
			"\x1\x7\xD\x0\x34\xFFFF";
		private const string DFA155_maxS =
			"\x1\xBF\xD\x0\x34\xFFFF";
		private const string DFA155_acceptS =
			"\xE\xFFFF\x1\x1\x1\x3\x1\x4\x1\x5\x1\x6\x2C\xFFFF\x1\x7\x1\x8\x1\x2";
		private const string DFA155_specialS =
			"\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x34\xFFFF}>";
		private static readonly string[] DFA155_transitionS =
			{
				"\x1\x12\x7\xFFFF\x1\x12\x1\xFFFF\x2\x12\x2\xFFFF\x1\xB\x1\x12\x2\xFFFF"+
				"\x1\x12\x7\xFFFF\x1\x4\x6\xFFFF\x1\x12\x1\xFFFF\x1\x12\x1\xFFFF\x1\x12"+
				"\x5\xFFFF\x1\x12\x1\x2\x1\x10\x3\x12\x1\xFFFF\x1\xA\x1\x12\x4\xFFFF"+
				"\x1\x12\x1\xFFFF\x1\x12\x2\xFFFF\x1\x12\x2\xFFFF\x1\x6\x1\x9\x1\x12"+
				"\x1\x11\x1\xFFFF\x1\x7\x1\xD\x1\xE\x1\x3\x1\x8\x1\x12\x1\xFFFF\x2\x12"+
				"\x2\xFFFF\x1\x12\x2\xFFFF\x1\x3F\x2\xFFFF\x1\xC\x1\xFFFF\x1\x12\x1\xFFFF"+
				"\x1\x12\x6\xFFFF\x2\x12\x1\xFFFF\x1\xF\x2\xFFFF\x1\x12\x1\xFFFF\x1\x12"+
				"\x1\x1\x4\xFFFF\x1\x12\x1\x5\x4\x12\x1\x40\x6\xFFFF\x1\x12\x5\xFFFF"+
				"\x1\x12\x14\xFFFF\x4\x12\x1\xFFFF\x3\x12\xD\xFFFF\x1\x12\x8\xFFFF\x1"+
				"\x12\x2\xFFFF\x1\x12",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA155_eot = DFA.UnpackEncodedString(DFA155_eotS);
		private static readonly short[] DFA155_eof = DFA.UnpackEncodedString(DFA155_eofS);
		private static readonly char[] DFA155_min = DFA.UnpackEncodedStringToUnsignedChars(DFA155_minS);
		private static readonly char[] DFA155_max = DFA.UnpackEncodedStringToUnsignedChars(DFA155_maxS);
		private static readonly short[] DFA155_accept = DFA.UnpackEncodedString(DFA155_acceptS);
		private static readonly short[] DFA155_special = DFA.UnpackEncodedString(DFA155_specialS);
		private static readonly short[][] DFA155_transition;

		static DFA155()
		{
			int numStates = DFA155_transitionS.Length;
			DFA155_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA155_transition[i] = DFA.UnpackEncodedString(DFA155_transitionS[i]);
			}
		}

		public DFA155( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 155;
			this.eot = DFA155_eot;
			this.eof = DFA155_eof;
			this.min = DFA155_min;
			this.max = DFA155_max;
			this.accept = DFA155_accept;
			this.special = DFA155_special;
			this.transition = DFA155_transition;
		}

		public override string Description { get { return "1345:1: constraint_elements returns [ConstraintElement result] : ( ( value_range )=>vr= value_range | ( value )=>v= value | SIZE_KW c= constraint | FROM_KW c2= constraint | L_PAREN e= element_set_spec R_PAREN |i= constraint_elements_includes | PATTERN_KW v2= value | WITH_KW ( COMPONENT_KW co1= constraint |cs= constraint_elements_components ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition155(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA155_1 = input.LA(1);
		int index155_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA155_1==TRUE_KW)) {s = 1;}

				else if ((LA155_1==FALSE_KW)) {s = 2;}

				else if ((LA155_1==NULL_KW)) {s = 3;}

				else if ((LA155_1==C_STRING)) {s = 4;}

				else if ((LA155_1==UPPER)) {s = 5;}

				else if ((LA155_1==LOWER)) {s = 6;}

				else if ((LA155_1==MINUS)) {s = 7;}

				else if ((LA155_1==NUMBER)) {s = 8;}

				else if ((LA155_1==L_BRACE)) {s = 9;}

				else if ((LA155_1==H_STRING)) {s = 10;}

				else if ((LA155_1==B_STRING)) {s = 11;}

				else if ((LA155_1==PLUS_INFINITY_KW)) {s = 12;}

				else if ((LA155_1==MINUS_INFINITY_KW)) {s = 13;}

				else if ((LA155_1==MIN_KW) && (EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((LA155_1==SIZE_KW)) {s = 15;}

				else if ((LA155_1==FROM_KW)) {s = 16;}

				else if ((LA155_1==L_PAREN)) {s = 17;}

				else if ((LA155_1==ANY_KW||LA155_1==BIT_KW||(LA155_1>=BMP_STR_KW && LA155_1<=BOOLEAN_KW)||LA155_1==CHARACTER_KW||LA155_1==CHOICE_KW||LA155_1==EMBEDDED_KW||LA155_1==ENUMERATED_KW||LA155_1==ERROR_KW||LA155_1==EXTERNAL_KW||(LA155_1>=GENERALIZED_TIME_KW && LA155_1<=GRAPHIC_STR_KW)||LA155_1==IA5_STRING_KW||LA155_1==INCLUDES_KW||LA155_1==INTEGER_KW||LA155_1==ISO646_STR_KW||LA155_1==L_BRACKET||LA155_1==NUMERIC_STR_KW||(LA155_1>=OBJECT_KW && LA155_1<=OCTET_KW)||LA155_1==OPERATION_KW||LA155_1==PRINTABLE_STR_KW||LA155_1==REAL_KW||(LA155_1>=SEQUENCE_KW && LA155_1<=SET_KW)||LA155_1==T61_STR_KW||LA155_1==TELETEX_STR_KW||LA155_1==UNIVERSAL_STR_KW||(LA155_1>=UTC_TIME_KW && LA155_1<=VISIBLE_STR_KW)||LA155_1==131||LA155_1==137||(LA155_1>=158 && LA155_1<=161)||(LA155_1>=163 && LA155_1<=165)||LA155_1==179||LA155_1==188||LA155_1==191)) {s = 18;}

				else if ((LA155_1==PATTERN_KW)) {s = 63;}

				else if ((LA155_1==WITH_KW)) {s = 64;}

				input.Seek(index155_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				else if ((true)) {s = 18;}

				input.Seek(index155_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				else if ((true)) {s = 18;}

				input.Seek(index155_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				else if ((true)) {s = 18;}

				input.Seek(index155_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred42_Smi_fragment))) {s = 14;}

				else if ((EvaluatePredicate(synpred43_Smi_fragment))) {s = 65;}

				input.Seek(index155_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 155, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _module_definition_in_statement1924 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_statement1930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _module_identifier_in_module_definition1955 = new BitSet(new ulong[]{0x1000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _set_in_module_definition1957 = new BitSet(new ulong[]{0x1002800000000C00UL});
		public static readonly BitSet _set_in_module_definition1970 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _TAGS_KW_in_module_definition1982 = new BitSet(new ulong[]{0x2000000000400UL});
		public static readonly BitSet _EXTENSIBILITY_KW_in_module_definition1991 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _IMPLIED_KW_in_module_definition1993 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_module_definition1999 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _BEGIN_KW_in_module_definition2001 = new BitSet(new ulong[]{0x4001120000000000UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _module_body_in_module_definition2005 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _END_KW_in_module_definition2007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_module_identifier2024 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _obj_id_comp_lst_in_module_identifier2027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exports_in_module_body2050 = new BitSet(new ulong[]{0x4000100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _imports_in_module_body2061 = new BitSet(new ulong[]{0x100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _assignment_in_module_body2072 = new BitSet(new ulong[]{0x100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _L_BRACE_in_obj_id_comp_lst2095 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _defined_value_in_obj_id_comp_lst2112 = new BitSet(new ulong[]{0x0UL,0x10080UL});
		public static readonly BitSet _obj_id_component_in_obj_id_comp_lst2122 = new BitSet(new ulong[]{0x0UL,0x1000010080UL});
		public static readonly BitSet _R_BRACE_in_obj_id_comp_lst2130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_defined_value2154 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _DOT_in_defined_value2156 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_defined_value2166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_obj_id_component2191 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _LOWER_in_obj_id_component2203 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_obj_id_component2210 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_obj_id_component2214 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_obj_id_component2216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPLICIT_KW_in_tag_default2242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLICIT_KW_in_tag_default2249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AUTOMATIC_KW_in_tag_default2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPORTS_KW_in_exports2276 = new BitSet(new ulong[]{0x100000000040UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbol_list_in_exports2288 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _ALL_KW_in_exports2299 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _SEMI_in_exports2310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTS_KW_in_imports2326 = new BitSet(new ulong[]{0x100000000000UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbols_from_module_in_imports2331 = new BitSet(new ulong[]{0x100000000000UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _SEMI_in_imports2337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_assignment2360 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2362 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_assignment2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_assignment2380 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_assignment2384 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2386 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_assignment2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_assignment2405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _macroName_in_assignment2409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_assignment2412 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2414 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _BEGIN_KW_in_assignment2416 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0x3FUL});
		public static readonly BitSet _END_KW_in_assignment2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _symbol_in_symbol_list2454 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_symbol_list2461 = new BitSet(new ulong[]{0x100000000000UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbol_in_symbol_list2465 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _symbol_list_in_symbols_from_module2488 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _FROM_KW_in_symbols_from_module2493 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UPPER_in_symbols_from_module2497 = new BitSet(new ulong[]{0x2UL,0x80000000000180UL});
		public static readonly BitSet _obj_id_comp_lst_in_symbols_from_module2527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_symbols_from_module2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_symbol2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_symbol2604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _macroName_in_symbol2608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPERATION_KW_in_macroName2615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERROR_KW_in_macroName2619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_macroName2624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_macroName2628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_macroName2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_macroName2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_macroName2650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_macroName2664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_macroName2668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _189_in_macroName2672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_macroName2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_macroName2683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_macroName2687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_macroName2691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_macroName2695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_macroName2699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_macroName2706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_macroName2710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_macroName2714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_macroName2721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_macroName2725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_macroName2729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_macroName2733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_macroName2737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_macros_in_macroName2744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _built_in_type_in_type2764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_type_in_type2773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_type_in_type2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _macros_type_in_type2791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_type2800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_KW_in_value2826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_KW_in_value2843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_value2860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_value2879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_value2899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_value2918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_value_in_value2937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_value_in_value2956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_value_in_value2975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cstr_value_in_value2994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _obj_id_comp_lst_in_value3013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_INFINITY_KW_in_value3030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_INFINITY_KW_in_value3047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _any_type_in_built_in_type3070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bit_string_type_in_built_in_type3082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_type_in_built_in_type3094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_str_type_in_built_in_type3106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_type_in_built_in_type3118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embedded_type_in_built_in_type3130 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _EMBEDDED_KW_in_built_in_type3132 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _PDV_KW_in_built_in_type3134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_type_in_built_in_type3146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _external_type_in_built_in_type3158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _integer_type_in_built_in_type3167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _null_type_in_built_in_type3176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_identifier_type_in_built_in_type3185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octetString_type_in_built_in_type3194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _real_type_in_built_in_type3203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relativeOid_type_in_built_in_type3212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_type_in_built_in_type3221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_type_in_built_in_type3230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_type_in_built_in_type3239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setof_type_in_built_in_type3248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tagged_type_in_built_in_type3257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_defined_type3280 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _DOT_in_defined_type3282 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UPPER_in_defined_type3292 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_defined_type3300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_selection_type3323 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _LESS_in_selection_type3325 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_selection_type3329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_KW_in_any_type3349 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DEFINED_KW_in_any_type3352 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _BY_KW_in_any_type3354 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_any_type3358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_KW_in_bit_string_type3383 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_bit_string_type3385 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _namedNumber_list_in_bit_string_type3398 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_bit_string_type3409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOLEAN_KW_in_boolean_type3434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_KW_in_character_str_type3453 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_character_str_type3455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_set_in_character_str_type3464 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_character_str_type3473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHOICE_KW_in_choice_type3497 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_choice_type3499 = new BitSet(new ulong[]{0x40000000UL,0x80UL});
		public static readonly BitSet _elementType_list_in_choice_type3503 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_choice_type3505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EMBEDDED_KW_in_embedded_type3525 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _PDV_KW_in_embedded_type3527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUMERATED_KW_in_enum_type3546 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _namedNumber_list_in_enum_type3550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTERNAL_KW_in_external_type3570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_KW_in_integer_type3591 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _namedNumber_list_in_integer_type3604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraint_in_integer_type3613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_null_type3638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_object_identifier_type3657 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _IDENTIFIER_KW_in_object_identifier_type3659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTET_KW_in_octetString_type3678 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_octetString_type3680 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_octetString_type3685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REAL_KW_in_real_type3708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_relativeOid_type3730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEQUENCE_KW_in_sequence_type3751 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_sequence_type3753 = new BitSet(new ulong[]{0x40000000UL,0x1000000080UL});
		public static readonly BitSet _elementType_list_in_sequence_type3758 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequence_type3764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEQUENCE_KW_in_sequenceof_type3783 = new BitSet(new ulong[]{0x0UL,0x200400UL});
		public static readonly BitSet _L_PAREN_in_sequenceof_type3786 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SIZE_KW_in_sequenceof_type3788 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_sequenceof_type3792 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_sequenceof_type3796 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_sequenceof_type3801 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_sequenceof_type3805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_KW_in_set_type3825 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_set_type3827 = new BitSet(new ulong[]{0x40000000UL,0x1000000080UL});
		public static readonly BitSet _elementType_list_in_set_type3832 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_set_type3838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_KW_in_setof_type3856 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _SIZE_KW_in_setof_type3859 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_setof_type3863 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_setof_type3870 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_setof_type3874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tag_in_tagged_type3896 = new BitSet(new ulong[]{0x14E4950002468880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_default_in_tagged_type3904 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_tagged_type3914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_namedNumber_list3934 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_namedNumber_list3938 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_namedNumber_list3944 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_namedNumber_list3948 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_namedNumber_list3954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_constraint3972 = new BitSet(new ulong[]{0x86FC5502026680C0UL,0x1FC34B42A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_specs_in_constraint3977 = new BitSet(new ulong[]{0x400000000000UL,0x4000000000UL});
		public static readonly BitSet _exception_spec_in_constraint3988 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_constraint3994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BMP_STR_KW_in_character_set4012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GENERALIZED_TIME_KW_in_character_set4019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GENERAL_STR_KW_in_character_set4026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GRAPHIC_STR_KW_in_character_set4033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IA5_STRING_KW_in_character_set4043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ISO646_STR_KW_in_character_set4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMERIC_STR_KW_in_character_set4057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRINTABLE_STR_KW_in_character_set4064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TELETEX_STR_KW_in_character_set4074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _T61_STR_KW_in_character_set4081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNIVERSAL_STR_KW_in_character_set4088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UTF8_STR_KW_in_character_set4095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UTC_TIME_KW_in_character_set4105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIDEOTEX_STR_KW_in_character_set4112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VISIBLE_STR_KW_in_character_set4119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementType_in_elementType_list4141 = new BitSet(new ulong[]{0x12000002UL});
		public static readonly BitSet _COMMA_in_elementType_list4148 = new BitSet(new ulong[]{0x40000000UL,0x80UL});
		public static readonly BitSet _elementType_in_elementType_list4152 = new BitSet(new ulong[]{0x12000002UL});
		public static readonly BitSet _choice_type_in_elementType_list4161 = new BitSet(new ulong[]{0x12000002UL});
		public static readonly BitSet _L_BRACKET_in_tag4185 = new BitSet(new ulong[]{0x100UL,0xA0000100010080UL});
		public static readonly BitSet _clazz_in_tag4190 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _class_NUMBER_in_tag4200 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _R_BRACKET_in_tag4202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_class_NUMBER4241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_class_NUMBER4250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPERATION_KW_in_operation_macro4272 = new BitSet(new ulong[]{0x80000000202UL,0x800000040UL});
		public static readonly BitSet _ARGUMENT_KW_in_operation_macro4277 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_operation_macro4288 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_operation_macro4298 = new BitSet(new ulong[]{0x80000000002UL,0x800000040UL});
		public static readonly BitSet _RESULT_KW_in_operation_macro4317 = new BitSet(new ulong[]{0x4E41D0002468082UL,0xFC14302809A82D2UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_operation_macro4344 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_operation_macro4355 = new BitSet(new ulong[]{0x80000000002UL,0x40UL});
		public static readonly BitSet _ERRORS_KW_in_operation_macro4378 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_operation_macro4380 = new BitSet(new ulong[]{0x6EC150202668080UL,0xFC34312A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _operation_errorlist_in_operation_macro4385 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_operation_macro4391 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LINKED_KW_in_operation_macro4409 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_operation_macro4411 = new BitSet(new ulong[]{0x6EC150202668080UL,0xFC34312A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _linkedOp_list_in_operation_macro4416 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_operation_macro4422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERROR_KW_in_error_macro4454 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _PARAMETER_KW_in_error_macro4460 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_error_macro4471 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_error_macro4481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operation_macro_in_macros_type4511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _error_macro_in_macros_type4520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objecttype_macro_in_macros_type4529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moduleidentity_macro_in_macros_type4538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectidentity_macro_in_macros_type4550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _notificationtype_macro_in_macros_type4559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _textualconvention_macro_in_macros_type4568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectgroup_macro_in_macros_type4580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _notificationgroup_macro_in_macros_type4589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modulecompliance_macro_in_macros_type4598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _agentcapabilities_macro_in_macros_type4610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _traptype_macro_in_macros_type4619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_smi_type4704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_KW_in_smi_type4711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTET_KW_in_smi_type4718 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_smi_type4720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_smi_type4727 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _IDENTIFIER_KW_in_smi_type4729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_smi_type4739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping4757 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping4759 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _BAR_in_smi_subtyping4762 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping4764 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping4768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping4785 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SIZE_KW_in_smi_subtyping4787 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping4789 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping4791 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _BAR_in_smi_subtyping4794 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping4796 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping4800 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping4802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtype_value_in_subtype_range4808 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _DOTDOT_in_subtype_range4811 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_value_in_subtype_range4813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_subtype_value4823 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_subtype_value4827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_subtype_value4831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_subtype_value4835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_objecttype_macro4853 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _187_in_objecttype_macro4855 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _smi_type_in_objecttype_macro4890 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_namedbits_in_objecttype_macro4894 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _smi_type_in_objecttype_macro4935 = new BitSet(new ulong[]{0x0UL,0x400UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _smi_subtyping_in_objecttype_macro4938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _type_in_objecttype_macro4969 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _194_in_objecttype_macro5015 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro5019 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL});
		public static readonly BitSet _155_in_objecttype_macro5047 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _130_in_objecttype_macro5060 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_accesstypes_in_objecttype_macro5075 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100300000000000UL});
		public static readonly BitSet _168_in_objecttype_macro5100 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_pibaccess_in_objecttype_macro5104 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100300000000000UL});
		public static readonly BitSet _172_in_objecttype_macro5144 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5146 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5150 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100200000000000UL});
		public static readonly BitSet _173_in_objecttype_macro5195 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5197 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5201 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5203 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objecttype_macro5252 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_statustypes_in_objecttype_macro5256 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000C23080UL,0x2UL});
		public static readonly BitSet _141_in_objecttype_macro5286 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro5290 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000C21080UL,0x2UL});
		public static readonly BitSet _151_in_objecttype_macro5347 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5349 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_error_in_objecttype_macro5353 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro5364 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_error_in_objecttype_macro5368 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5374 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000421080UL,0x2UL});
		public static readonly BitSet _177_in_objecttype_macro5389 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro5393 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000421080UL,0x2UL});
		public static readonly BitSet _150_in_objecttype_macro5415 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_index_in_objecttype_macro5419 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _135_in_objecttype_macro5445 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_augments_in_objecttype_macro5449 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _170_in_objecttype_macro5475 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5477 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5481 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5483 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _145_in_objecttype_macro5530 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5532 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5536 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5538 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _150_in_objecttype_macro5608 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_index_in_objecttype_macro5612 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000UL,0x2UL});
		public static readonly BitSet _193_in_objecttype_macro5662 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5664 = new BitSet(new ulong[]{0x208000200200000UL,0x8200102001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5669 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro5680 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro5684 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5693 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_objecttype_macro5732 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro5734 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_bitsvalue_in_objecttype_macro5777 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _value_in_objecttype_macro5808 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro5834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_accesstypes5858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_pibaccess5885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_statustypes5909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_index5931 = new BitSet(new ulong[]{0x2208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_indextype_in_objecttype_macro_index5935 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_index5942 = new BitSet(new ulong[]{0x2208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_indextype_in_objecttype_macro_index5946 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_index5952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLIED_KW_in_objecttype_macro_indextype5978 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro_indextype5984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_augments6004 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro_augments6008 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_augments6010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_namedbits6034 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedbit_in_objecttype_macro_namedbits6038 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_namedbits6045 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedbit_in_objecttype_macro_namedbits6049 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_namedbits6055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_bitsvalue6078 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_bitsvalue6082 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_bitsvalue6089 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_bitsvalue6093 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_bitsvalue6099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namedbit_in_objecttype_macro_error6125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_moduleidentity_macro6147 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000001000000UL});
		public static readonly BitSet _185_in_moduleidentity_macro6150 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_moduleidentity_macro6152 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _moduleidentity_macro_categories_in_moduleidentity_macro6156 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_moduleidentity_macro6158 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_moduleidentity_macro6170 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro6174 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_moduleidentity_macro6179 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro6183 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_moduleidentity_macro6188 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro6192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_moduleidentity_macro6200 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro6204 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _moduleidentity_macro_revision_in_moduleidentity_macro6212 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_moduleidentity_macro_revision6233 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro_revision6237 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_moduleidentity_macro_revision6239 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro_revision6243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_moduleidentity_macro_categories6266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moduleidentity_macro_categoryid_in_moduleidentity_macro_categories6279 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_moduleidentity_macro_categories6286 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _moduleidentity_macro_categoryid_in_moduleidentity_macro_categories6290 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _namedbit_in_moduleidentity_macro_categoryid6314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_objectidentity_macro6337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objectidentity_macro6339 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_objectidentity_macro6343 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_objectidentity_macro6347 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectidentity_macro6351 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_objectidentity_macro6358 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectidentity_macro6362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_notificationtype_macro6385 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100004000000000UL});
		public static readonly BitSet _166_in_notificationtype_macro6388 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_notificationtype_macro6390 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationtype_macro6394 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_notificationtype_macro6404 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationtype_macro6408 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_notificationtype_macro6414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_notificationtype_macro6423 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_notificationtype_macro6427 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_notificationtype_macro6435 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationtype_macro6439 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_notificationtype_macro6448 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationtype_macro6452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_textualconvention_macro6480 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000004000UL});
		public static readonly BitSet _142_in_textualconvention_macro6483 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro6487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_textualconvention_macro6497 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_textualconvention_macro6501 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_textualconvention_macro6509 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro6513 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000000000000UL});
		public static readonly BitSet _177_in_textualconvention_macro6522 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro6526 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _187_in_textualconvention_macro6537 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _smi_type_in_textualconvention_macro6551 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_textualconvention_macro6556 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _textualconvention_macro_namedbit_in_textualconvention_macro6560 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_textualconvention_macro6577 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _textualconvention_macro_namedbit_in_textualconvention_macro6581 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_textualconvention_macro6587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_textualconvention_macro6597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_textualconvention_macro_namedbit6618 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_textualconvention_macro_namedbit6623 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _MINUS_in_textualconvention_macro_namedbit6626 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_textualconvention_macro_namedbit6636 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_textualconvention_macro_namedbit6638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_objectgroup_macro6660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_objectgroup_macro6662 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objectgroup_macro6664 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objectgroup_macro6668 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objectgroup_macro6674 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objectgroup_macro6678 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objectgroup_macro6684 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objectgroup_macro6691 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_objectgroup_macro6695 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_objectgroup_macro6700 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectgroup_macro6704 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_objectgroup_macro6710 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectgroup_macro6714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_notificationgroup_macro6739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_notificationgroup_macro6741 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_notificationgroup_macro6743 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationgroup_macro6747 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_notificationgroup_macro6753 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationgroup_macro6757 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_notificationgroup_macro6763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_notificationgroup_macro6770 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_notificationgroup_macro6774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_notificationgroup_macro6779 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationgroup_macro6783 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_notificationgroup_macro6789 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationgroup_macro6793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_modulecompliance_macro6818 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_modulecompliance_macro6820 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _status_in_modulecompliance_macro6824 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro6830 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro6834 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000020000000UL});
		public static readonly BitSet _177_in_modulecompliance_macro6840 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro6844 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _modulecompliance_macro_module_in_modulecompliance_macro6855 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _LOWER_in_status6880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_modulecompliance_macro_module6903 = new BitSet(new ulong[]{0x2UL,0x80000000080000UL,0x4200000UL});
		public static readonly BitSet _UPPER_in_modulecompliance_macro_module6914 = new BitSet(new ulong[]{0x208000200200002UL,0x8200002009B180UL,0x4200000UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6928 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x4200000UL});
		public static readonly BitSet _154_in_modulecompliance_macro_module6943 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_modulecompliance_macro_module6945 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6949 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_modulecompliance_macro_module6955 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6959 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_modulecompliance_macro_module6965 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x200000UL});
		public static readonly BitSet _modulecompliance_macro_compliance_in_modulecompliance_macro_module6976 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x200000UL});
		public static readonly BitSet _149_in_modulecompliance_macro_compliance6999 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_compliance7003 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro_compliance7005 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro_compliance7009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_modulecompliance_macro_compliance7019 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_compliance7023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800080010002000UL,0x20UL});
		public static readonly BitSet _187_in_modulecompliance_macro_compliance7033 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _syntax_in_modulecompliance_macro_compliance7037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80010002000UL,0x20UL});
		public static readonly BitSet _197_in_modulecompliance_macro_compliance7048 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _syntax_in_modulecompliance_macro_compliance7052 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80010002000UL});
		public static readonly BitSet _156_in_modulecompliance_macro_compliance7069 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_access_in_modulecompliance_macro_compliance7073 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000002000UL});
		public static readonly BitSet _171_in_modulecompliance_macro_compliance7085 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_pibaccess_in_modulecompliance_macro_compliance7089 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro_compliance7104 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro_compliance7108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_access7130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_pibaccess7155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_agentcapabilities_macro7177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_agentcapabilities_macro7179 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro7183 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_agentcapabilities_macro7188 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_status_in_agentcapabilities_macro7192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_agentcapabilities_macro7197 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro7201 = new BitSet(new ulong[]{0x2UL,0x0UL,0x402000000000000UL});
		public static readonly BitSet _177_in_agentcapabilities_macro7207 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro7211 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _agentcapabilities_macro_module_in_agentcapabilities_macro7221 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_status7245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_agentcapabilities_macro_module7263 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_module7267 = new BitSet(new ulong[]{0x8208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module7275 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _INCLUDES_KW_in_agentcapabilities_macro_module7285 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_module7287 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module7291 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_module7297 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module7301 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_module7305 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _agentcapabilities_macro_variation_in_agentcapabilities_macro_module7313 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _196_in_agentcapabilities_macro_variation7335 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7339 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000003804UL,0x20UL});
		public static readonly BitSet _187_in_agentcapabilities_macro_variation7345 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _syntax_in_agentcapabilities_macro_variation7349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3804UL,0x20UL});
		public static readonly BitSet _197_in_agentcapabilities_macro_variation7357 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _syntax_in_agentcapabilities_macro_variation7361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3804UL});
		public static readonly BitSet _130_in_agentcapabilities_macro_variation7369 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_access_in_agentcapabilities_macro_variation7373 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3800UL});
		public static readonly BitSet _139_in_agentcapabilities_macro_variation7384 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7386 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7390 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_variation7396 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7400 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_variation7404 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3000UL});
		public static readonly BitSet _140_in_agentcapabilities_macro_variation7415 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7417 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7438 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_variation7443 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_variation7452 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_variation7456 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_variation7460 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7469 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_agentcapabilities_macro_variation7481 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro_variation7485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_syntax7515 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_syntax7520 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedbit_in_syntax7524 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_syntax7530 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedbit_in_syntax7534 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_syntax7540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_syntax7556 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _smi_subtyping_in_syntax7559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_syntax7573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_access7595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_namedbit7621 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_namedbit7623 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_namedbit7627 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_namedbit7629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _191_in_traptype_macro7649 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_traptype_macro7651 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7655 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000002000UL,0x8UL});
		public static readonly BitSet _195_in_traptype_macro7661 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_traptype_macro7663 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7667 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_traptype_macro7673 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7677 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_traptype_macro7683 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000002000UL});
		public static readonly BitSet _141_in_traptype_macro7699 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7703 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_traptype_macro7712 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeorvaluelist_in_operation_errorlist7739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeorvaluelist_in_linkedOp_list7761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeorvalue7789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_typeorvalue7799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeorvalue_in_typeorvaluelist7820 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_typeorvaluelist7827 = new BitSet(new ulong[]{0x6EC150202668080UL,0xFC34302A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _typeorvalue_in_typeorvaluelist7831 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _elementType_tagged_in_elementType7858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPONENTS_KW_in_elementType7868 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_elementType7870 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_elementType7874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_elementType_tagged7896 = new BitSet(new ulong[]{0x14E4950002468880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_in_elementType_tagged7920 = new BitSet(new ulong[]{0x14E4950002468880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_default_in_elementType_tagged7934 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_elementType_tagged7944 = new BitSet(new ulong[]{0x400000002UL,0x1000000UL});
		public static readonly BitSet _OPTIONAL_KW_in_elementType_tagged7950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_KW_in_elementType_tagged7958 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_elementType_tagged7965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_namedNumber7993 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_namedNumber7997 = new BitSet(new ulong[]{0x0UL,0x80000000011080UL});
		public static readonly BitSet _signed_number_in_namedNumber8002 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _defined_value_in_namedNumber8012 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_namedNumber8017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_signed_number8035 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_signed_number8039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_signed_number8048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_set_spec_in_element_set_specs8070 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_element_set_specs8078 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOTDOTDOT_in_element_set_specs8080 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_element_set_specs8090 = new BitSet(new ulong[]{0x86FC1502026680C0UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_spec_in_element_set_specs8094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXCLAMATION_in_exception_spec8119 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809B9292UL,0x9008003BC0000208UL});
		public static readonly BitSet _signed_number_in_exception_spec8148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_exception_spec8180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_exception_spec8206 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _COLON_in_exception_spec8208 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_exception_spec8212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_set_spec_normal_in_element_set_spec8251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_KW_in_element_set_spec8262 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _EXCEPT_KW_in_element_set_spec8264 = new BitSet(new ulong[]{0x86FC150202668080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_element_set_spec8268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _intersections_in_element_set_spec_normal8291 = new BitSet(new ulong[]{0x1002UL,0x8000000000000UL});
		public static readonly BitSet _set_in_element_set_spec_normal8303 = new BitSet(new ulong[]{0x86FC150202668080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _intersections_in_element_set_spec_normal8315 = new BitSet(new ulong[]{0x1002UL,0x8000000000000UL});
		public static readonly BitSet _constraint_elements_except_in_intersections8342 = new BitSet(new ulong[]{0x2UL,0xCUL});
		public static readonly BitSet _set_in_intersections8358 = new BitSet(new ulong[]{0x86FC150202668080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_except_in_intersections8371 = new BitSet(new ulong[]{0x2UL,0xCUL});
		public static readonly BitSet _constraint_elements_in_constraint_elements_except8398 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _EXCEPT_KW_in_constraint_elements_except8405 = new BitSet(new ulong[]{0x86FC150202668080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_constraint_elements_except8409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_range_in_constraint_elements8437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_constraint_elements8455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIZE_KW_in_constraint_elements8465 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements8469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_KW_in_constraint_elements8479 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements8483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_constraint_elements8493 = new BitSet(new ulong[]{0x86FC1502026680C0UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_spec_in_constraint_elements8497 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_constraint_elements8499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraint_elements_includes_in_constraint_elements8511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PATTERN_KW_in_constraint_elements8521 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_constraint_elements8525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_KW_in_constraint_elements8536 = new BitSet(new ulong[]{0xC0000000UL});
		public static readonly BitSet _COMPONENT_KW_in_constraint_elements8545 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements8549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraint_elements_components_in_constraint_elements8560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDES_KW_in_constraint_elements_includes8582 = new BitSet(new ulong[]{0x4E4150002468080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_constraint_elements_includes8592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPONENTS_KW_in_constraint_elements_components8612 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_constraint_elements_components8614 = new BitSet(new ulong[]{0x8000000000UL,0x80UL});
		public static readonly BitSet _DOTDOTDOT_in_constraint_elements_components8617 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_constraint_elements_components8619 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _type_constraint_list_in_constraint_elements_components8632 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_constraint_elements_components8634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_value_range8660 = new BitSet(new ulong[]{0x4000000000UL,0x20UL});
		public static readonly BitSet _MIN_KW_in_value_range8667 = new BitSet(new ulong[]{0x4000000000UL,0x20UL});
		public static readonly BitSet _LESS_in_value_range8675 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _DOTDOT_in_value_range8681 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B9A0UL});
		public static readonly BitSet _LESS_in_value_range8686 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B980UL});
		public static readonly BitSet _value_in_value_range8697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_KW_in_value_range8705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _named_constraint_in_type_constraint_list8729 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_type_constraint_list8736 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _named_constraint_in_type_constraint_list8740 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _LOWER_in_named_constraint8765 = new BitSet(new ulong[]{0x12UL,0x41000400UL});
		public static readonly BitSet _constraint_in_named_constraint8773 = new BitSet(new ulong[]{0x12UL,0x41000000UL});
		public static readonly BitSet _PRESENT_KW_in_named_constraint8782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSENT_KW_in_named_constraint8789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONAL_KW_in_named_constraint8796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_choice_value8821 = new BitSet(new ulong[]{0x208000208200000UL,0x8200002001B180UL});
		public static readonly BitSet _COLON_in_choice_value8828 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_choice_value8838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_sequence_value8858 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _named_value_in_sequence_value8863 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_sequence_value8872 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _named_value_in_sequence_value8876 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequence_value8884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_sequenceof_value8902 = new BitSet(new ulong[]{0x208000210200000UL,0x8200102001B180UL});
		public static readonly BitSet _value_in_sequenceof_value8907 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_sequenceof_value8916 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_sequenceof_value8920 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequenceof_value8928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_cstr_value8954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_cstr_value8974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_cstr_value8986 = new BitSet(new ulong[]{0x200000000UL,0x80000000011180UL});
		public static readonly BitSet _id_list_in_cstr_value9011 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _char_defs_list_in_cstr_value9039 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _tuple_or_quad_in_cstr_value9061 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_cstr_value9084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_id_list9102 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_id_list9108 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_id_list9112 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _char_defs_in_char_defs_list9137 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_char_defs_list9143 = new BitSet(new ulong[]{0x200000000UL,0x80000000000180UL});
		public static readonly BitSet _char_defs_in_char_defs_list9147 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _tuple_number_in_tuple_or_quad9173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _quad_number_in_tuple_or_quad9182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_tuple_number9204 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_tuple_number9206 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_tuple_number9210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_quad_number9232 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_quad_number9234 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_quad_number9238 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_quad_number9240 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_quad_number9244 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_quad_number9246 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_quad_number9250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_char_defs9275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_char_defs9285 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _tuple_or_quad_in_char_defs9289 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_char_defs9291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_char_defs9303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_named_value9326 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_named_value9330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred1_Smi2099 = new BitSet(new ulong[]{0x0UL,0x10080UL});
		public static readonly BitSet _set_in_synpred1_Smi2101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred2_Smi2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_KW_in_synpred3_Smi2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_KW_in_synpred4_Smi2838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_synpred5_Smi2855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_synpred6_Smi2872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred7_Smi2892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_synpred8_Smi2911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_value_in_synpred9_Smi2930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_value_in_synpred10_Smi2949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_value_in_synpred11_Smi2968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cstr_value_in_synpred12_Smi2987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _obj_id_comp_lst_in_synpred13_Smi3006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_INFINITY_KW_in_synpred14_Smi3025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_INFINITY_KW_in_synpred15_Smi3042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred16_Smi3389 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_synpred16_Smi3391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred17_Smi3595 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_synpred17_Smi3597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred18_Smi4281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESULT_KW_in_synpred19_Smi4312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred20_Smi4330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred21_Smi4337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERRORS_KW_in_synpred22_Smi4373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LINKED_KW_in_synpred23_Smi4404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred24_Smi4464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred25_Smi4881 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred25_Smi4883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred26_Smi4928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred27_Smi5281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_synpred29_Smi5727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred30_Smi5760 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_synpred30_Smi5762 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _set_in_synpred30_Smi5764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred31_Smi6542 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred31_Smi6544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_synpred32_Smi6907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_synpred33_Smi6921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred34_Smi7421 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _set_in_synpred34_Smi7423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred35_Smi7506 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred35_Smi7508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred36_Smi7549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred37_Smi7694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred38_Smi7782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACKET_in_synpred39_Smi7905 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _set_in_synpred39_Smi7907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_synpred40_Smi8141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred41_Smi8173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_range_in_synpred42_Smi8430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_synpred43_Smi8448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_synpred44_Smi8947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_synpred45_Smi8967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _id_list_in_synpred46_Smi9004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _char_defs_list_in_synpred47_Smi9032 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Lextm.SharpSnmpLib.Mib.Ast 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Smi.g 2011-12-17 18:37:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


#pragma warning disable 3001, 3003, 3005, 3009, 1591 


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Lextm.SharpSnmpLib.Mib.Ast.ANTLR 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class SmiParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSENT_KW", "ABSTRACT_SYNTAX_KW", "ALL_KW", "ANY_KW", "APPLICATION_KW", "ARGUMENT_KW", "ASSIGN_OP", "AUTOMATIC_KW", "BAR", "BASED_NUM_KW", "BDIG", "BEGIN_KW", "BIT_KW", "BMP_STR_KW", "BOOLEAN_KW", "BY_KW", "B_OR_H_STRING", "B_STRING", "CHARACTER_KW", "CHARB", "CHARH", "CHOICE_KW", "CLASS_KW", "COLON", "COMMA", "COMMENT", "COMPONENTS_KW", "COMPONENT_KW", "CONSTRAINED_KW", "C_STRING", "DEFAULT_KW", "DEFINED_KW", "DEFINITIONS_KW", "DOT", "DOTDOT", "DOTDOTDOT", "EMBEDDED_KW", "END_KW", "ENUMERATED_KW", "ERRORS_KW", "ERROR_KW", "EXCEPT_KW", "EXCLAMATION", "EXPLICIT_KW", "EXPORTS_KW", "EXTENSIBILITY_KW", "EXTERNAL_KW", "FALSE_KW", "FROM_KW", "GENERALIZED_TIME_KW", "GENERAL_STR_KW", "GRAPHIC_STR_KW", "HDIG", "H_STRING", "IA5_STRING_KW", "IDENTIFIER_KW", "IMPLICIT_KW", "IMPLIED_KW", "IMPORTS_KW", "INCLUDES_KW", "INSTANCE_KW", "INTEGER_KW", "INTERSECTION", "INTERSECTION_KW", "ISO646_STR_KW", "LESS", "LINKED_KW", "LOWER", "L_BRACE", "L_BRACKET", "L_PAREN", "MAX_KW", "MINUS", "MINUS_INFINITY_KW", "MIN_KW", "NULL_KW", "NUMBER", "NUMERIC_STR_KW", "OBJECT_DESCRIPTOR_KW", "OBJECT_KW", "OCTET_KW", "OF_KW", "OID_KW", "OPERATION_KW", "OPTIONAL_KW", "PARAMETER_KW", "PATTERN_KW", "PDV_KW", "PLUS", "PLUS_INFINITY_KW", "PRESENT_KW", "PRINTABLE_STR_KW", "PRIVATE_KW", "REAL_KW", "RELATIVE_KW", "RESULT_KW", "R_BRACE", "R_BRACKET", "R_PAREN", "SEMI", "SEQUENCE_KW", "SET_KW", "SINGLE_QUOTE", "SIZE_KW", "SL_COMMENT", "STRING_KW", "T61_STR_KW", "TAGS_KW", "TELETEX_STR_KW", "TRUE_KW", "TYPE_IDENTIFIER_KW", "UNION_KW", "UNIQUE_KW", "UNIVERSAL_KW", "UNIVERSAL_STR_KW", "UPPER", "UTC_TIME_KW", "UTF8_STR_KW", "VIDEOTEX_STR_KW", "VISIBLE_STR_KW", "WITH_KW", "WS", "'ABSTRACT-BIND'", "'ABSTRACT-ERROR'", "'ABSTRACT-OPERATION'", "'ABSTRACT-UNBIND'", "'ACCESS'", "'AGENT-CAPABILITIES'", "'ALGORITHM'", "'APPLICATION-CONTEXT'", "'APPLICATION-SERVICE-ELEMENT'", "'AUGMENTS'", "'BIND'", "'BITS'", "'CONTACT-INFO'", "'CREATION-REQUIRES'", "'DEFVAL'", "'DESCRIPTION'", "'DISPLAY-HINT'", "'ENCRYPTED'", "'ENTERPRISE'", "'EXTENDS'", "'EXTENSION'", "'EXTENSION-ATTRIBUTE'", "'EXTENSIONS'", "'GROUP'", "'INDEX'", "'INSTALL-ERRORS'", "'LAST-UPDATED'", "'MACRO'", "'MANDATORY-GROUPS'", "'MAX-ACCESS'", "'MIN-ACCESS'", "'MODULE'", "'MODULE-COMPLIANCE'", "'MODULE-IDENTITY'", "'NOTIFICATION-GROUP'", "'NOTIFICATION-TYPE'", "'NOTIFICATIONS'", "'OBJECT-GROUP'", "'OBJECT-IDENTITY'", "'OBJECT-TYPE'", "'OBJECTS'", "'ORGANIZATION'", "'PIB-ACCESS'", "'PIB-DEFINITIONS'", "'PIB-INDEX'", "'PIB-MIN-ACCESS'", "'PIB-REFERENCES'", "'PIB-TAG'", "'PORT'", "'PRODUCT-RELEASE'", "'PROTECTED'", "'REFERENCE'", "'REFINE'", "'RELATIVE-OID'", "'REVISION'", "'SECURITY-CATEGORY'", "'SIGNATURE'", "'SIGNED'", "'STATUS'", "'SUBJECT-CATEGORIES'", "'SUPPORTS'", "'SYNTAX'", "'TEXTUAL-CONVENTION'", "'TOKEN'", "'TOKEN-DATA'", "'TRAP-TYPE'", "'UNBIND'", "'UNIQUENESS'", "'UNITS'", "'VARIABLES'", "'VARIATION'", "'WRITE-SYNTAX'"
	};
	public const int EOF=-1;
	public const int ABSENT_KW=4;
	public const int ABSTRACT_SYNTAX_KW=5;
	public const int ALL_KW=6;
	public const int ANY_KW=7;
	public const int APPLICATION_KW=8;
	public const int ARGUMENT_KW=9;
	public const int ASSIGN_OP=10;
	public const int AUTOMATIC_KW=11;
	public const int BAR=12;
	public const int BASED_NUM_KW=13;
	public const int BDIG=14;
	public const int BEGIN_KW=15;
	public const int BIT_KW=16;
	public const int BMP_STR_KW=17;
	public const int BOOLEAN_KW=18;
	public const int BY_KW=19;
	public const int B_OR_H_STRING=20;
	public const int B_STRING=21;
	public const int CHARACTER_KW=22;
	public const int CHARB=23;
	public const int CHARH=24;
	public const int CHOICE_KW=25;
	public const int CLASS_KW=26;
	public const int COLON=27;
	public const int COMMA=28;
	public const int COMMENT=29;
	public const int COMPONENTS_KW=30;
	public const int COMPONENT_KW=31;
	public const int CONSTRAINED_KW=32;
	public const int C_STRING=33;
	public const int DEFAULT_KW=34;
	public const int DEFINED_KW=35;
	public const int DEFINITIONS_KW=36;
	public const int DOT=37;
	public const int DOTDOT=38;
	public const int DOTDOTDOT=39;
	public const int EMBEDDED_KW=40;
	public const int END_KW=41;
	public const int ENUMERATED_KW=42;
	public const int ERRORS_KW=43;
	public const int ERROR_KW=44;
	public const int EXCEPT_KW=45;
	public const int EXCLAMATION=46;
	public const int EXPLICIT_KW=47;
	public const int EXPORTS_KW=48;
	public const int EXTENSIBILITY_KW=49;
	public const int EXTERNAL_KW=50;
	public const int FALSE_KW=51;
	public const int FROM_KW=52;
	public const int GENERALIZED_TIME_KW=53;
	public const int GENERAL_STR_KW=54;
	public const int GRAPHIC_STR_KW=55;
	public const int HDIG=56;
	public const int H_STRING=57;
	public const int IA5_STRING_KW=58;
	public const int IDENTIFIER_KW=59;
	public const int IMPLICIT_KW=60;
	public const int IMPLIED_KW=61;
	public const int IMPORTS_KW=62;
	public const int INCLUDES_KW=63;
	public const int INSTANCE_KW=64;
	public const int INTEGER_KW=65;
	public const int INTERSECTION=66;
	public const int INTERSECTION_KW=67;
	public const int ISO646_STR_KW=68;
	public const int LESS=69;
	public const int LINKED_KW=70;
	public const int LOWER=71;
	public const int L_BRACE=72;
	public const int L_BRACKET=73;
	public const int L_PAREN=74;
	public const int MAX_KW=75;
	public const int MINUS=76;
	public const int MINUS_INFINITY_KW=77;
	public const int MIN_KW=78;
	public const int NULL_KW=79;
	public const int NUMBER=80;
	public const int NUMERIC_STR_KW=81;
	public const int OBJECT_DESCRIPTOR_KW=82;
	public const int OBJECT_KW=83;
	public const int OCTET_KW=84;
	public const int OF_KW=85;
	public const int OID_KW=86;
	public const int OPERATION_KW=87;
	public const int OPTIONAL_KW=88;
	public const int PARAMETER_KW=89;
	public const int PATTERN_KW=90;
	public const int PDV_KW=91;
	public const int PLUS=92;
	public const int PLUS_INFINITY_KW=93;
	public const int PRESENT_KW=94;
	public const int PRINTABLE_STR_KW=95;
	public const int PRIVATE_KW=96;
	public const int REAL_KW=97;
	public const int RELATIVE_KW=98;
	public const int RESULT_KW=99;
	public const int R_BRACE=100;
	public const int R_BRACKET=101;
	public const int R_PAREN=102;
	public const int SEMI=103;
	public const int SEQUENCE_KW=104;
	public const int SET_KW=105;
	public const int SINGLE_QUOTE=106;
	public const int SIZE_KW=107;
	public const int SL_COMMENT=108;
	public const int STRING_KW=109;
	public const int T61_STR_KW=110;
	public const int TAGS_KW=111;
	public const int TELETEX_STR_KW=112;
	public const int TRUE_KW=113;
	public const int TYPE_IDENTIFIER_KW=114;
	public const int UNION_KW=115;
	public const int UNIQUE_KW=116;
	public const int UNIVERSAL_KW=117;
	public const int UNIVERSAL_STR_KW=118;
	public const int UPPER=119;
	public const int UTC_TIME_KW=120;
	public const int UTF8_STR_KW=121;
	public const int VIDEOTEX_STR_KW=122;
	public const int VISIBLE_STR_KW=123;
	public const int WITH_KW=124;
	public const int WS=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, true, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, true, true, 
				false, true, false, true, false, false, false, false, false, false, 
				false, false, false, false, false, true, false, false, false, false, 
				true, false, false, false, true, false, false, false, false, true, true, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, true, false, false, false, false, 
				false, false, false, true, true, false, false, false, false, false, 
				false, false, false, false, false, true, false, false, false, false, 
				false, false, false, false, false, false, false, false, true, false, 
				false, false, true, false, false, true, false, false, false, true, false, 
				true, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				true, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public SmiParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SmiParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SmiParser.tokenNames; } }
	public override string GrammarFileName { get { return "Smi.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// Smi.g:593:1: statement : ( module_definition )* ;
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> module_definition1 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(593, 1);
		try
		{
			// Smi.g:594:5: ( ( module_definition )* )
			DebugEnterAlt(1);
			// Smi.g:594:7: ( module_definition )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(594, 7);
			// Smi.g:594:7: ( module_definition )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==UPPER))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:594:8: module_definition
					{
					DebugLocation(594, 8);
					PushFollow(Follow._module_definition_in_statement1862);
					module_definition1=module_definition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, module_definition1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
	    }
	 	DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_module_definition() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_module_definition() {}
	// $ANTLR start "module_definition"
	// Smi.g:600:1: module_definition : module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW module_body END_KW ;
	[GrammarRule("module_definition")]
	private AstParserRuleReturnScope<CommonTree, IToken> module_definition()
	{
		EnterRule_module_definition();
		EnterRule("module_definition", 2);
		TraceIn("module_definition", 2);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set3 = default(IToken);
	    IToken set4 = default(IToken);
	    IToken TAGS_KW5 = default(IToken);
	    IToken EXTENSIBILITY_KW6 = default(IToken);
	    IToken IMPLIED_KW7 = default(IToken);
	    IToken ASSIGN_OP8 = default(IToken);
	    IToken BEGIN_KW9 = default(IToken);
	    IToken END_KW11 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> module_identifier2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> module_body10 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set3_tree = default(CommonTree);
	    CommonTree set4_tree = default(CommonTree);
	    CommonTree TAGS_KW5_tree = default(CommonTree);
	    CommonTree EXTENSIBILITY_KW6_tree = default(CommonTree);
	    CommonTree IMPLIED_KW7_tree = default(CommonTree);
	    CommonTree ASSIGN_OP8_tree = default(CommonTree);
	    CommonTree BEGIN_KW9_tree = default(CommonTree);
	    CommonTree END_KW11_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "module_definition");
		DebugLocation(600, 39);
		try
		{
			// Smi.g:600:18: ( module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW module_body END_KW )
			DebugEnterAlt(1);
			// Smi.g:600:20: module_identifier ( 'PIB-DEFINITIONS' | DEFINITIONS_KW ) ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )? ( EXTENSIBILITY_KW IMPLIED_KW )? ASSIGN_OP BEGIN_KW module_body END_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(600, 20);
			PushFollow(Follow._module_identifier_in_module_definition1879);
			module_identifier2=module_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, module_identifier2.Tree);
			DebugLocation(600, 38);

			set3=(IToken)input.LT(1);
			if (input.LA(1)==DEFINITIONS_KW||input.LA(1)==169)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set3));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(601, 3);
			// Smi.g:601:3: ( ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_1 = input.LA(1);

			if ((LA2_1==AUTOMATIC_KW||LA2_1==EXPLICIT_KW||LA2_1==IMPLICIT_KW))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:601:5: ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW ) TAGS_KW
				{
				DebugLocation(601, 5);

				set4=(IToken)input.LT(1);
				if (input.LA(1)==AUTOMATIC_KW||input.LA(1)==EXPLICIT_KW||input.LA(1)==IMPLICIT_KW)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set4));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(601, 48);
				TAGS_KW5=(IToken)Match(input,TAGS_KW,Follow._TAGS_KW_in_module_definition1906); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TAGS_KW5_tree = (CommonTree)adaptor.Create(TAGS_KW5);
				adaptor.AddChild(root_0, TAGS_KW5_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(602, 3);
			// Smi.g:602:3: ( EXTENSIBILITY_KW IMPLIED_KW )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_1 = input.LA(1);

			if ((LA3_1==EXTENSIBILITY_KW))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:602:4: EXTENSIBILITY_KW IMPLIED_KW
				{
				DebugLocation(602, 4);
				EXTENSIBILITY_KW6=(IToken)Match(input,EXTENSIBILITY_KW,Follow._EXTENSIBILITY_KW_in_module_definition1915); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXTENSIBILITY_KW6_tree = (CommonTree)adaptor.Create(EXTENSIBILITY_KW6);
				adaptor.AddChild(root_0, EXTENSIBILITY_KW6_tree);
				}
				DebugLocation(602, 21);
				IMPLIED_KW7=(IToken)Match(input,IMPLIED_KW,Follow._IMPLIED_KW_in_module_definition1917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IMPLIED_KW7_tree = (CommonTree)adaptor.Create(IMPLIED_KW7);
				adaptor.AddChild(root_0, IMPLIED_KW7_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(603, 3);
			ASSIGN_OP8=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_module_definition1923); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ASSIGN_OP8_tree = (CommonTree)adaptor.Create(ASSIGN_OP8);
			adaptor.AddChild(root_0, ASSIGN_OP8_tree);
			}
			DebugLocation(603, 13);
			BEGIN_KW9=(IToken)Match(input,BEGIN_KW,Follow._BEGIN_KW_in_module_definition1925); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BEGIN_KW9_tree = (CommonTree)adaptor.Create(BEGIN_KW9);
			adaptor.AddChild(root_0, BEGIN_KW9_tree);
			}
			DebugLocation(603, 22);
			PushFollow(Follow._module_body_in_module_definition1927);
			module_body10=module_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, module_body10.Tree);
			DebugLocation(603, 34);
			END_KW11=(IToken)Match(input,END_KW,Follow._END_KW_in_module_definition1929); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END_KW11_tree = (CommonTree)adaptor.Create(END_KW11);
			adaptor.AddChild(root_0, END_KW11_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_definition", 2);
			LeaveRule("module_definition", 2);
			LeaveRule_module_definition();
	    }
	 	DebugLocation(603, 39);
		} finally { DebugExitRule(GrammarFileName, "module_definition"); }
		return retval;

	}
	// $ANTLR end "module_definition"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_module_identifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_module_identifier() {}
	// $ANTLR start "module_identifier"
	// Smi.g:605:1: module_identifier : UPPER ( obj_id_comp_lst )? ;
	[GrammarRule("module_identifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> module_identifier()
	{
		EnterRule_module_identifier();
		EnterRule("module_identifier", 3);
		TraceIn("module_identifier", 3);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken UPPER12 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> obj_id_comp_lst13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree UPPER12_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "module_identifier");
		DebugLocation(605, 44);
		try
		{
			// Smi.g:605:18: ( UPPER ( obj_id_comp_lst )? )
			DebugEnterAlt(1);
			// Smi.g:605:20: UPPER ( obj_id_comp_lst )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(605, 20);
			UPPER12=(IToken)Match(input,UPPER,Follow._UPPER_in_module_identifier1936); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UPPER12_tree = (CommonTree)adaptor.Create(UPPER12);
			adaptor.AddChild(root_0, UPPER12_tree);
			}
			DebugLocation(605, 26);
			// Smi.g:605:26: ( obj_id_comp_lst )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_1 = input.LA(1);

			if ((LA4_1==L_BRACE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:605:27: obj_id_comp_lst
				{
				DebugLocation(605, 27);
				PushFollow(Follow._obj_id_comp_lst_in_module_identifier1939);
				obj_id_comp_lst13=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_comp_lst13.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_identifier", 3);
			LeaveRule("module_identifier", 3);
			LeaveRule_module_identifier();
	    }
	 	DebugLocation(605, 44);
		} finally { DebugExitRule(GrammarFileName, "module_identifier"); }
		return retval;

	}
	// $ANTLR end "module_identifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_module_body() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_module_body() {}
	// $ANTLR start "module_body"
	// Smi.g:607:1: module_body : ( exports )? ( imports )? ( assignment )* ;
	[GrammarRule("module_body")]
	private AstParserRuleReturnScope<CommonTree, IToken> module_body()
	{
		EnterRule_module_body();
		EnterRule("module_body", 4);
		TraceIn("module_body", 4);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> exports14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> imports15 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> assignment16 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "module_body");
		DebugLocation(607, 49);
		try
		{
			// Smi.g:607:12: ( ( exports )? ( imports )? ( assignment )* )
			DebugEnterAlt(1);
			// Smi.g:607:14: ( exports )? ( imports )? ( assignment )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(607, 14);
			// Smi.g:607:14: ( exports )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_1 = input.LA(1);

			if ((LA5_1==EXPORTS_KW))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:607:15: exports
				{
				DebugLocation(607, 15);
				PushFollow(Follow._exports_in_module_body1950);
				exports14=exports();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exports14.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(607, 25);
			// Smi.g:607:25: ( imports )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_1 = input.LA(1);

			if ((LA6_1==IMPORTS_KW))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:607:26: imports
				{
				DebugLocation(607, 26);
				PushFollow(Follow._imports_in_module_body1955);
				imports15=imports();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, imports15.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(607, 36);
			// Smi.g:607:36: ( assignment )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_1 = input.LA(1);

				if ((LA7_1==ERROR_KW||LA7_1==LOWER||LA7_1==OBJECT_KW||LA7_1==OPERATION_KW||LA7_1==UPPER||(LA7_1>=126 && LA7_1<=129)||(LA7_1>=131 && LA7_1<=134)||LA7_1==136||LA7_1==143||(LA7_1>=146 && LA7_1<=148)||(LA7_1>=158 && LA7_1<=161)||(LA7_1>=163 && LA7_1<=165)||LA7_1==174||LA7_1==176||LA7_1==178||(LA7_1>=181 && LA7_1<=183)||(LA7_1>=188 && LA7_1<=192)))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:607:37: assignment
					{
					DebugLocation(607, 37);
					PushFollow(Follow._assignment_in_module_body1960);
					assignment16=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment16.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_body", 4);
			LeaveRule("module_body", 4);
			LeaveRule_module_body();
	    }
	 	DebugLocation(607, 49);
		} finally { DebugExitRule(GrammarFileName, "module_body"); }
		return retval;

	}
	// $ANTLR end "module_body"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_obj_id_comp_lst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_obj_id_comp_lst() {}
	// $ANTLR start "obj_id_comp_lst"
	// Smi.g:610:1: obj_id_comp_lst : L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=> defined_value )? ( obj_id_component )+ R_BRACE ;
	[GrammarRule("obj_id_comp_lst")]
	private AstParserRuleReturnScope<CommonTree, IToken> obj_id_comp_lst()
	{
		EnterRule_obj_id_comp_lst();
		EnterRule("obj_id_comp_lst", 5);
		TraceIn("obj_id_comp_lst", 5);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE17 = default(IToken);
	    IToken R_BRACE20 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> obj_id_component19 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE17_tree = default(CommonTree);
	    CommonTree R_BRACE20_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "obj_id_comp_lst");
		DebugLocation(610, 95);
		try
		{
			// Smi.g:610:16: ( L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=> defined_value )? ( obj_id_component )+ R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:610:18: L_BRACE ( ( LOWER ( LOWER | NUMBER ) )=> defined_value )? ( obj_id_component )+ R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(610, 18);
			L_BRACE17=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_obj_id_comp_lst1972); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE17_tree = (CommonTree)adaptor.Create(L_BRACE17);
			adaptor.AddChild(root_0, L_BRACE17_tree);
			}
			DebugLocation(610, 26);
			// Smi.g:610:26: ( ( LOWER ( LOWER | NUMBER ) )=> defined_value )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_1 = input.LA(1);

			if ((LA8_1==UPPER) && (EvaluatePredicate(synpred1_Smi_fragment)))
			{
				alt8 = 1;
			}
			else if ((LA8_1==LOWER))
			{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Smi_fragment)))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:610:27: ( LOWER ( LOWER | NUMBER ) )=> defined_value
				{
				DebugLocation(610, 53);
				PushFollow(Follow._defined_value_in_obj_id_comp_lst1987);
				defined_value18=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value18.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(610, 69);
			// Smi.g:610:69: ( obj_id_component )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_1 = input.LA(1);

				if ((LA9_1==LOWER||LA9_1==NUMBER))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:610:70: obj_id_component
					{
					DebugLocation(610, 70);
					PushFollow(Follow._obj_id_component_in_obj_id_comp_lst1992);
					obj_id_component19=obj_id_component();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_component19.Tree);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(610, 89);
			R_BRACE20=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_obj_id_comp_lst1996); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE20_tree = (CommonTree)adaptor.Create(R_BRACE20);
			adaptor.AddChild(root_0, R_BRACE20_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("obj_id_comp_lst", 5);
			LeaveRule("obj_id_comp_lst", 5);
			LeaveRule_obj_id_comp_lst();
	    }
	 	DebugLocation(610, 95);
		} finally { DebugExitRule(GrammarFileName, "obj_id_comp_lst"); }
		return retval;

	}
	// $ANTLR end "obj_id_comp_lst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_defined_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_defined_value() {}
	// $ANTLR start "defined_value"
	// Smi.g:613:11: protected defined_value : ( UPPER DOT )? LOWER ;
	[GrammarRule("defined_value")]
	protected AstParserRuleReturnScope<CommonTree, IToken> defined_value()
	{
		EnterRule_defined_value();
		EnterRule("defined_value", 6);
		TraceIn("defined_value", 6);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken UPPER21 = default(IToken);
	    IToken DOT22 = default(IToken);
	    IToken LOWER23 = default(IToken);

	    CommonTree UPPER21_tree = default(CommonTree);
	    CommonTree DOT22_tree = default(CommonTree);
	    CommonTree LOWER23_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "defined_value");
		DebugLocation(613, 44);
		try
		{
			// Smi.g:613:24: ( ( UPPER DOT )? LOWER )
			DebugEnterAlt(1);
			// Smi.g:613:26: ( UPPER DOT )? LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(613, 26);
			// Smi.g:613:26: ( UPPER DOT )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_1 = input.LA(1);

			if ((LA10_1==UPPER))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:613:27: UPPER DOT
				{
				DebugLocation(613, 27);
				UPPER21=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_value2007); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER21_tree = (CommonTree)adaptor.Create(UPPER21);
				adaptor.AddChild(root_0, UPPER21_tree);
				}
				DebugLocation(613, 33);
				DOT22=(IToken)Match(input,DOT,Follow._DOT_in_defined_value2009); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT22_tree = (CommonTree)adaptor.Create(DOT22);
				adaptor.AddChild(root_0, DOT22_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(613, 39);
			LOWER23=(IToken)Match(input,LOWER,Follow._LOWER_in_defined_value2013); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER23_tree = (CommonTree)adaptor.Create(LOWER23);
			adaptor.AddChild(root_0, LOWER23_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defined_value", 6);
			LeaveRule("defined_value", 6);
			LeaveRule_defined_value();
	    }
	 	DebugLocation(613, 44);
		} finally { DebugExitRule(GrammarFileName, "defined_value"); }
		return retval;

	}
	// $ANTLR end "defined_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_obj_id_component() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_obj_id_component() {}
	// $ANTLR start "obj_id_component"
	// Smi.g:616:1: obj_id_component : ( NUMBER | LOWER ( L_PAREN NUMBER R_PAREN )? );
	[GrammarRule("obj_id_component")]
	private AstParserRuleReturnScope<CommonTree, IToken> obj_id_component()
	{
		EnterRule_obj_id_component();
		EnterRule("obj_id_component", 7);
		TraceIn("obj_id_component", 7);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken NUMBER24 = default(IToken);
	    IToken LOWER25 = default(IToken);
	    IToken L_PAREN26 = default(IToken);
	    IToken NUMBER27 = default(IToken);
	    IToken R_PAREN28 = default(IToken);

	    CommonTree NUMBER24_tree = default(CommonTree);
	    CommonTree LOWER25_tree = default(CommonTree);
	    CommonTree L_PAREN26_tree = default(CommonTree);
	    CommonTree NUMBER27_tree = default(CommonTree);
	    CommonTree R_PAREN28_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "obj_id_component");
		DebugLocation(616, 49);
		try
		{
			// Smi.g:616:17: ( NUMBER | LOWER ( L_PAREN NUMBER R_PAREN )? )
			int alt12=2;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_1 = input.LA(1);

			if ((LA12_1==NUMBER))
			{
				alt12 = 1;
			}
			else if ((LA12_1==LOWER))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:616:19: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(616, 19);
				NUMBER24=(IToken)Match(input,NUMBER,Follow._NUMBER_in_obj_id_component2023); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER24_tree = (CommonTree)adaptor.Create(NUMBER24);
				adaptor.AddChild(root_0, NUMBER24_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:617:19: LOWER ( L_PAREN NUMBER R_PAREN )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(617, 19);
				LOWER25=(IToken)Match(input,LOWER,Follow._LOWER_in_obj_id_component2044); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER25_tree = (CommonTree)adaptor.Create(LOWER25);
				adaptor.AddChild(root_0, LOWER25_tree);
				}
				DebugLocation(617, 25);
				// Smi.g:617:25: ( L_PAREN NUMBER R_PAREN )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_1 = input.LA(1);

				if ((LA11_1==L_PAREN))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:617:26: L_PAREN NUMBER R_PAREN
					{
					DebugLocation(617, 26);
					L_PAREN26=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_obj_id_component2047); if (state.failed) return retval;
					if (state.backtracking == 0) {
					L_PAREN26_tree = (CommonTree)adaptor.Create(L_PAREN26);
					adaptor.AddChild(root_0, L_PAREN26_tree);
					}
					DebugLocation(617, 34);
					NUMBER27=(IToken)Match(input,NUMBER,Follow._NUMBER_in_obj_id_component2049); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NUMBER27_tree = (CommonTree)adaptor.Create(NUMBER27);
					adaptor.AddChild(root_0, NUMBER27_tree);
					}
					DebugLocation(617, 41);
					R_PAREN28=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_obj_id_component2051); if (state.failed) return retval;
					if (state.backtracking == 0) {
					R_PAREN28_tree = (CommonTree)adaptor.Create(R_PAREN28);
					adaptor.AddChild(root_0, R_PAREN28_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("obj_id_component", 7);
			LeaveRule("obj_id_component", 7);
			LeaveRule_obj_id_component();
	    }
	 	DebugLocation(617, 49);
		} finally { DebugExitRule(GrammarFileName, "obj_id_component"); }
		return retval;

	}
	// $ANTLR end "obj_id_component"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_tag_default() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_tag_default() {}
	// $ANTLR start "tag_default"
	// Smi.g:623:1: tag_default : ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW );
	[GrammarRule("tag_default")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag_default()
	{
		EnterRule_tag_default();
		EnterRule("tag_default", 8);
		TraceIn("tag_default", 8);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set29 = default(IToken);

	    CommonTree set29_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "tag_default");
		DebugLocation(623, 53);
		try
		{
			// Smi.g:623:12: ( EXPLICIT_KW | IMPLICIT_KW | AUTOMATIC_KW )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(623, 12);

			set29=(IToken)input.LT(1);
			if (input.LA(1)==AUTOMATIC_KW||input.LA(1)==EXPLICIT_KW||input.LA(1)==IMPLICIT_KW)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set29));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag_default", 8);
			LeaveRule("tag_default", 8);
			LeaveRule_tag_default();
	    }
	 	DebugLocation(623, 53);
		} finally { DebugExitRule(GrammarFileName, "tag_default"); }
		return retval;

	}
	// $ANTLR end "tag_default"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exports() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exports() {}
	// $ANTLR start "exports"
	// Smi.g:625:1: exports : EXPORTS_KW ( ( symbol_list )? | ALL_KW ) SEMI ;
	[GrammarRule("exports")]
	private AstParserRuleReturnScope<CommonTree, IToken> exports()
	{
		EnterRule_exports();
		EnterRule("exports", 9);
		TraceIn("exports", 9);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EXPORTS_KW30 = default(IToken);
	    IToken ALL_KW32 = default(IToken);
	    IToken SEMI33 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> symbol_list31 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree EXPORTS_KW30_tree = default(CommonTree);
	    CommonTree ALL_KW32_tree = default(CommonTree);
	    CommonTree SEMI33_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "exports");
		DebugLocation(625, 52);
		try
		{
			// Smi.g:625:8: ( EXPORTS_KW ( ( symbol_list )? | ALL_KW ) SEMI )
			DebugEnterAlt(1);
			// Smi.g:625:10: EXPORTS_KW ( ( symbol_list )? | ALL_KW ) SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(625, 10);
			EXPORTS_KW30=(IToken)Match(input,EXPORTS_KW,Follow._EXPORTS_KW_in_exports2079); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXPORTS_KW30_tree = (CommonTree)adaptor.Create(EXPORTS_KW30);
			adaptor.AddChild(root_0, EXPORTS_KW30_tree);
			}
			DebugLocation(625, 21);
			// Smi.g:625:21: ( ( symbol_list )? | ALL_KW )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_1 = input.LA(1);

			if ((LA14_1==ERROR_KW||LA14_1==LOWER||LA14_1==OBJECT_KW||LA14_1==OPERATION_KW||LA14_1==SEMI||LA14_1==UPPER||(LA14_1>=126 && LA14_1<=129)||(LA14_1>=131 && LA14_1<=134)||LA14_1==136||LA14_1==143||(LA14_1>=146 && LA14_1<=148)||(LA14_1>=158 && LA14_1<=161)||(LA14_1>=163 && LA14_1<=165)||LA14_1==174||LA14_1==176||LA14_1==178||(LA14_1>=181 && LA14_1<=183)||(LA14_1>=188 && LA14_1<=192)))
			{
				alt14 = 1;
			}
			else if ((LA14_1==ALL_KW))
			{
				alt14 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:625:23: ( symbol_list )?
				{
				DebugLocation(625, 23);
				// Smi.g:625:23: ( symbol_list )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_1 = input.LA(1);

				if ((LA13_1==ERROR_KW||LA13_1==LOWER||LA13_1==OBJECT_KW||LA13_1==OPERATION_KW||LA13_1==UPPER||(LA13_1>=126 && LA13_1<=129)||(LA13_1>=131 && LA13_1<=134)||LA13_1==136||LA13_1==143||(LA13_1>=146 && LA13_1<=148)||(LA13_1>=158 && LA13_1<=161)||(LA13_1>=163 && LA13_1<=165)||LA13_1==174||LA13_1==176||LA13_1==178||(LA13_1>=181 && LA13_1<=183)||(LA13_1>=188 && LA13_1<=192)))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:625:24: symbol_list
					{
					DebugLocation(625, 24);
					PushFollow(Follow._symbol_list_in_exports2084);
					symbol_list31=symbol_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, symbol_list31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:625:40: ALL_KW
				{
				DebugLocation(625, 40);
				ALL_KW32=(IToken)Match(input,ALL_KW,Follow._ALL_KW_in_exports2090); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ALL_KW32_tree = (CommonTree)adaptor.Create(ALL_KW32);
				adaptor.AddChild(root_0, ALL_KW32_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(625, 49);
			SEMI33=(IToken)Match(input,SEMI,Follow._SEMI_in_exports2094); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI33_tree = (CommonTree)adaptor.Create(SEMI33);
			adaptor.AddChild(root_0, SEMI33_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exports", 9);
			LeaveRule("exports", 9);
			LeaveRule_exports();
	    }
	 	DebugLocation(625, 52);
		} finally { DebugExitRule(GrammarFileName, "exports"); }
		return retval;

	}
	// $ANTLR end "exports"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_imports() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_imports() {}
	// $ANTLR start "imports"
	// Smi.g:627:1: imports : IMPORTS_KW ( symbols_from_module )* SEMI ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 10);
		TraceIn("imports", 10);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken IMPORTS_KW34 = default(IToken);
	    IToken SEMI36 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> symbols_from_module35 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree IMPORTS_KW34_tree = default(CommonTree);
	    CommonTree SEMI36_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(627, 48);
		try
		{
			// Smi.g:627:8: ( IMPORTS_KW ( symbols_from_module )* SEMI )
			DebugEnterAlt(1);
			// Smi.g:627:10: IMPORTS_KW ( symbols_from_module )* SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(627, 10);
			IMPORTS_KW34=(IToken)Match(input,IMPORTS_KW,Follow._IMPORTS_KW_in_imports2101); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORTS_KW34_tree = (CommonTree)adaptor.Create(IMPORTS_KW34);
			adaptor.AddChild(root_0, IMPORTS_KW34_tree);
			}
			DebugLocation(627, 21);
			// Smi.g:627:21: ( symbols_from_module )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_1 = input.LA(1);

				if ((LA15_1==ERROR_KW||LA15_1==LOWER||LA15_1==OBJECT_KW||LA15_1==OPERATION_KW||LA15_1==UPPER||(LA15_1>=126 && LA15_1<=129)||(LA15_1>=131 && LA15_1<=134)||LA15_1==136||LA15_1==143||(LA15_1>=146 && LA15_1<=148)||(LA15_1>=158 && LA15_1<=161)||(LA15_1>=163 && LA15_1<=165)||LA15_1==174||LA15_1==176||LA15_1==178||(LA15_1>=181 && LA15_1<=183)||(LA15_1>=188 && LA15_1<=192)))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:627:22: symbols_from_module
					{
					DebugLocation(627, 22);
					PushFollow(Follow._symbols_from_module_in_imports2104);
					symbols_from_module35=symbols_from_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, symbols_from_module35.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(627, 44);
			SEMI36=(IToken)Match(input,SEMI,Follow._SEMI_in_imports2108); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI36_tree = (CommonTree)adaptor.Create(SEMI36);
			adaptor.AddChild(root_0, SEMI36_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 10);
			LeaveRule("imports", 10);
			LeaveRule_imports();
	    }
	 	DebugLocation(627, 48);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}
	// $ANTLR start "assignment"
	// Smi.g:630:1: assignment : ( UPPER ASSIGN_OP type | LOWER type ASSIGN_OP value | ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW );
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 11);
		TraceIn("assignment", 11);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken UPPER37 = default(IToken);
	    IToken ASSIGN_OP38 = default(IToken);
	    IToken LOWER40 = default(IToken);
	    IToken ASSIGN_OP42 = default(IToken);
	    IToken UPPER44 = default(IToken);
	    IToken string_literal46 = default(IToken);
	    IToken ASSIGN_OP47 = default(IToken);
	    IToken BEGIN_KW48 = default(IToken);
	    IToken set49 = default(IToken);
	    IToken END_KW50 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> type39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> macroName45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree UPPER37_tree = default(CommonTree);
	    CommonTree ASSIGN_OP38_tree = default(CommonTree);
	    CommonTree LOWER40_tree = default(CommonTree);
	    CommonTree ASSIGN_OP42_tree = default(CommonTree);
	    CommonTree UPPER44_tree = default(CommonTree);
	    CommonTree string_literal46_tree = default(CommonTree);
	    CommonTree ASSIGN_OP47_tree = default(CommonTree);
	    CommonTree BEGIN_KW48_tree = default(CommonTree);
	    CommonTree set49_tree = default(CommonTree);
	    CommonTree END_KW50_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(630, 79);
		try
		{
			// Smi.g:630:11: ( UPPER ASSIGN_OP type | LOWER type ASSIGN_OP value | ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW )
			int alt18=3;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			switch (input.LA(1))
			{
			case UPPER:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==ASSIGN_OP))
				{
					alt18 = 1;
				}
				else if ((LA18_2==153))
				{
					alt18 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOWER:
				{
				alt18 = 2;
				}
				break;
			case ERROR_KW:
			case OBJECT_KW:
			case OPERATION_KW:
			case 126:
			case 127:
			case 128:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 143:
			case 146:
			case 147:
			case 148:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 174:
			case 176:
			case 178:
			case 181:
			case 182:
			case 183:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
				{
				alt18 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:630:13: UPPER ASSIGN_OP type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(630, 13);
				UPPER37=(IToken)Match(input,UPPER,Follow._UPPER_in_assignment2118); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER37_tree = (CommonTree)adaptor.Create(UPPER37);
				adaptor.AddChild(root_0, UPPER37_tree);
				}
				DebugLocation(630, 19);
				ASSIGN_OP38=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2120); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP38_tree = (CommonTree)adaptor.Create(ASSIGN_OP38);
				adaptor.AddChild(root_0, ASSIGN_OP38_tree);
				}
				DebugLocation(630, 29);
				PushFollow(Follow._type_in_assignment2122);
				type39=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type39.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:631:13: LOWER type ASSIGN_OP value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(631, 13);
				LOWER40=(IToken)Match(input,LOWER,Follow._LOWER_in_assignment2137); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER40_tree = (CommonTree)adaptor.Create(LOWER40);
				adaptor.AddChild(root_0, LOWER40_tree);
				}
				DebugLocation(631, 19);
				PushFollow(Follow._type_in_assignment2139);
				type41=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type41.Tree);
				DebugLocation(631, 24);
				ASSIGN_OP42=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2141); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP42_tree = (CommonTree)adaptor.Create(ASSIGN_OP42);
				adaptor.AddChild(root_0, ASSIGN_OP42_tree);
				}
				DebugLocation(631, 34);
				PushFollow(Follow._value_in_assignment2143);
				value43=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value43.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:632:13: ( UPPER | macroName ) 'MACRO' ASSIGN_OP BEGIN_KW (~ ( END_KW ) )* END_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(632, 13);
				// Smi.g:632:13: ( UPPER | macroName )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_1 = input.LA(1);

				if ((LA16_1==UPPER))
				{
					alt16 = 1;
				}
				else if ((LA16_1==ERROR_KW||LA16_1==OBJECT_KW||LA16_1==OPERATION_KW||(LA16_1>=126 && LA16_1<=129)||(LA16_1>=131 && LA16_1<=134)||LA16_1==136||LA16_1==143||(LA16_1>=146 && LA16_1<=148)||(LA16_1>=158 && LA16_1<=161)||(LA16_1>=163 && LA16_1<=165)||LA16_1==174||LA16_1==176||LA16_1==178||(LA16_1>=181 && LA16_1<=183)||(LA16_1>=188 && LA16_1<=192)))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:632:14: UPPER
					{
					DebugLocation(632, 14);
					UPPER44=(IToken)Match(input,UPPER,Follow._UPPER_in_assignment2159); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UPPER44_tree = (CommonTree)adaptor.Create(UPPER44);
					adaptor.AddChild(root_0, UPPER44_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:632:22: macroName
					{
					DebugLocation(632, 22);
					PushFollow(Follow._macroName_in_assignment2163);
					macroName45=macroName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, macroName45.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(632, 33);
				string_literal46=(IToken)Match(input,153,Follow._153_in_assignment2166); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal46_tree = (CommonTree)adaptor.Create(string_literal46);
				adaptor.AddChild(root_0, string_literal46_tree);
				}
				DebugLocation(632, 41);
				ASSIGN_OP47=(IToken)Match(input,ASSIGN_OP,Follow._ASSIGN_OP_in_assignment2168); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN_OP47_tree = (CommonTree)adaptor.Create(ASSIGN_OP47);
				adaptor.AddChild(root_0, ASSIGN_OP47_tree);
				}
				DebugLocation(632, 51);
				BEGIN_KW48=(IToken)Match(input,BEGIN_KW,Follow._BEGIN_KW_in_assignment2170); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BEGIN_KW48_tree = (CommonTree)adaptor.Create(BEGIN_KW48);
				adaptor.AddChild(root_0, BEGIN_KW48_tree);
				}
				DebugLocation(632, 60);
				// Smi.g:632:60: (~ ( END_KW ) )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, decisionCanBacktrack[17]);
					int LA17_1 = input.LA(1);

					if (((LA17_1>=ABSENT_KW && LA17_1<=EMBEDDED_KW)||(LA17_1>=ENUMERATED_KW && LA17_1<=197)))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:
						{
						DebugLocation(632, 60);

						set49=(IToken)input.LT(1);
						if ((input.LA(1)>=ABSENT_KW && input.LA(1)<=EMBEDDED_KW)||(input.LA(1)>=ENUMERATED_KW && input.LA(1)<=197))
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set49));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(632, 73);
				END_KW50=(IToken)Match(input,END_KW,Follow._END_KW_in_assignment2180); if (state.failed) return retval;
				if (state.backtracking == 0) {
				END_KW50_tree = (CommonTree)adaptor.Create(END_KW50);
				adaptor.AddChild(root_0, END_KW50_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 11);
			LeaveRule("assignment", 11);
			LeaveRule_assignment();
	    }
	 	DebugLocation(632, 79);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_symbol_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_symbol_list() {}
	// $ANTLR start "symbol_list"
	// Smi.g:640:1: symbol_list : symbol ( COMMA symbol )* ;
	[GrammarRule("symbol_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> symbol_list()
	{
		EnterRule_symbol_list();
		EnterRule("symbol_list", 12);
		TraceIn("symbol_list", 12);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA52 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> symbol51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> symbol53 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA52_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "symbol_list");
		DebugLocation(640, 36);
		try
		{
			// Smi.g:640:12: ( symbol ( COMMA symbol )* )
			DebugEnterAlt(1);
			// Smi.g:640:14: symbol ( COMMA symbol )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(640, 14);
			PushFollow(Follow._symbol_in_symbol_list2194);
			symbol51=symbol();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, symbol51.Tree);
			DebugLocation(640, 21);
			// Smi.g:640:21: ( COMMA symbol )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:640:22: COMMA symbol
					{
					DebugLocation(640, 22);
					COMMA52=(IToken)Match(input,COMMA,Follow._COMMA_in_symbol_list2197); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA52_tree = (CommonTree)adaptor.Create(COMMA52);
					adaptor.AddChild(root_0, COMMA52_tree);
					}
					DebugLocation(640, 28);
					PushFollow(Follow._symbol_in_symbol_list2199);
					symbol53=symbol();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, symbol53.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbol_list", 12);
			LeaveRule("symbol_list", 12);
			LeaveRule_symbol_list();
	    }
	 	DebugLocation(640, 36);
		} finally { DebugExitRule(GrammarFileName, "symbol_list"); }
		return retval;

	}
	// $ANTLR end "symbol_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_symbols_from_module() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_symbols_from_module() {}
	// $ANTLR start "symbols_from_module"
	// Smi.g:642:1: symbols_from_module : symbol_list FROM_KW UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )? ;
	[GrammarRule("symbols_from_module")]
	private AstParserRuleReturnScope<CommonTree, IToken> symbols_from_module()
	{
		EnterRule_symbols_from_module();
		EnterRule("symbols_from_module", 13);
		TraceIn("symbols_from_module", 13);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken FROM_KW55 = default(IToken);
	    IToken UPPER56 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> symbol_list54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> obj_id_comp_lst57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree FROM_KW55_tree = default(CommonTree);
	    CommonTree UPPER56_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "symbols_from_module");
		DebugLocation(642, 27);
		try
		{
			// Smi.g:642:20: ( symbol_list FROM_KW UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )? )
			DebugEnterAlt(1);
			// Smi.g:642:22: symbol_list FROM_KW UPPER ( obj_id_comp_lst | ( defined_value )=> defined_value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(642, 22);
			PushFollow(Follow._symbol_list_in_symbols_from_module2209);
			symbol_list54=symbol_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, symbol_list54.Tree);
			DebugLocation(642, 34);
			FROM_KW55=(IToken)Match(input,FROM_KW,Follow._FROM_KW_in_symbols_from_module2211); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FROM_KW55_tree = (CommonTree)adaptor.Create(FROM_KW55);
			adaptor.AddChild(root_0, FROM_KW55_tree);
			}
			DebugLocation(642, 42);
			UPPER56=(IToken)Match(input,UPPER,Follow._UPPER_in_symbols_from_module2213); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UPPER56_tree = (CommonTree)adaptor.Create(UPPER56);
			adaptor.AddChild(root_0, UPPER56_tree);
			}
			DebugLocation(643, 25);
			// Smi.g:643:25: ( obj_id_comp_lst | ( defined_value )=> defined_value )?
			int alt20=3;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			switch (input.LA(1))
			{
			case L_BRACE:
				{
				alt20 = 1;
				}
				break;
			case UPPER:
				{
				int LA20_2 = input.LA(2);

				if ((LA20_2==DOT) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				}
				break;
			case LOWER:
				{
				int LA20_2 = input.LA(2);

				if ((LA20_2==SEMI) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==UPPER) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==LOWER) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==OPERATION_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==ERROR_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==136) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==192) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==134) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==133) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==146) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==148) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==147) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==189) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==190) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==181) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==OBJECT_KW) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==174) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==178) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==126) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==129) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==128) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==127) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==132) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==143) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==183) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==182) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==176) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				else if ((LA20_2==131||(LA20_2>=158 && LA20_2<=161)||(LA20_2>=163 && LA20_2<=165)||LA20_2==188||LA20_2==191) && (EvaluatePredicate(synpred2_Smi_fragment)))
				{
					alt20 = 2;
				}
				}
				break;
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:643:27: obj_id_comp_lst
				{
				DebugLocation(643, 27);
				PushFollow(Follow._obj_id_comp_lst_in_symbols_from_module2242);
				obj_id_comp_lst57=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_comp_lst57.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:644:29: ( defined_value )=> defined_value
				{
				DebugLocation(644, 48);
				PushFollow(Follow._defined_value_in_symbols_from_module2279);
				defined_value58=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value58.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbols_from_module", 13);
			LeaveRule("symbols_from_module", 13);
			LeaveRule_symbols_from_module();
	    }
	 	DebugLocation(645, 27);
		} finally { DebugExitRule(GrammarFileName, "symbols_from_module"); }
		return retval;

	}
	// $ANTLR end "symbols_from_module"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_symbol() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_symbol() {}
	// $ANTLR start "symbol"
	// Smi.g:647:1: symbol : ( UPPER | LOWER | macroName );
	[GrammarRule("symbol")]
	private AstParserRuleReturnScope<CommonTree, IToken> symbol()
	{
		EnterRule_symbol();
		EnterRule("symbol", 14);
		TraceIn("symbol", 14);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken UPPER59 = default(IToken);
	    IToken LOWER60 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> macroName61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree UPPER59_tree = default(CommonTree);
	    CommonTree LOWER60_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "symbol");
		DebugLocation(647, 33);
		try
		{
			// Smi.g:647:7: ( UPPER | LOWER | macroName )
			int alt21=3;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			switch (input.LA(1))
			{
			case UPPER:
				{
				alt21 = 1;
				}
				break;
			case LOWER:
				{
				alt21 = 2;
				}
				break;
			case ERROR_KW:
			case OBJECT_KW:
			case OPERATION_KW:
			case 126:
			case 127:
			case 128:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 143:
			case 146:
			case 147:
			case 148:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 174:
			case 176:
			case 178:
			case 181:
			case 182:
			case 183:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
				{
				alt21 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:647:9: UPPER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(647, 9);
				UPPER59=(IToken)Match(input,UPPER,Follow._UPPER_in_symbol2315); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER59_tree = (CommonTree)adaptor.Create(UPPER59);
				adaptor.AddChild(root_0, UPPER59_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:647:17: LOWER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(647, 17);
				LOWER60=(IToken)Match(input,LOWER,Follow._LOWER_in_symbol2319); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER60_tree = (CommonTree)adaptor.Create(LOWER60);
				adaptor.AddChild(root_0, LOWER60_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:647:25: macroName
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(647, 25);
				PushFollow(Follow._macroName_in_symbol2323);
				macroName61=macroName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, macroName61.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("symbol", 14);
			LeaveRule("symbol", 14);
			LeaveRule_symbol();
	    }
	 	DebugLocation(647, 33);
		} finally { DebugExitRule(GrammarFileName, "symbol"); }
		return retval;

	}
	// $ANTLR end "symbol"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_macroName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_macroName() {}
	// $ANTLR start "macroName"
	// Smi.g:649:1: macroName : ( OPERATION_KW | ERROR_KW | 'BIND' | 'UNBIND' | 'APPLICATION-SERVICE-ELEMENT' | 'APPLICATION-CONTEXT' | 'EXTENSION' | 'EXTENSIONS' | 'EXTENSION-ATTRIBUTE' | 'TOKEN' | 'TOKEN-DATA' | 'SECURITY-CATEGORY' | 'OBJECT' | 'PORT' | 'REFINE' | 'ABSTRACT-BIND' | 'ABSTRACT-UNBIND' | 'ABSTRACT-OPERATION' | 'ABSTRACT-ERROR' | 'ALGORITHM' | 'ENCRYPTED' | 'SIGNED' | 'SIGNATURE' | 'PROTECTED' | smi_macros );
	[GrammarRule("macroName")]
	private AstParserRuleReturnScope<CommonTree, IToken> macroName()
	{
		EnterRule_macroName();
		EnterRule("macroName", 15);
		TraceIn("macroName", 15);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken OPERATION_KW62 = default(IToken);
	    IToken ERROR_KW63 = default(IToken);
	    IToken string_literal64 = default(IToken);
	    IToken string_literal65 = default(IToken);
	    IToken string_literal66 = default(IToken);
	    IToken string_literal67 = default(IToken);
	    IToken string_literal68 = default(IToken);
	    IToken string_literal69 = default(IToken);
	    IToken string_literal70 = default(IToken);
	    IToken string_literal71 = default(IToken);
	    IToken string_literal72 = default(IToken);
	    IToken string_literal73 = default(IToken);
	    IToken string_literal74 = default(IToken);
	    IToken string_literal75 = default(IToken);
	    IToken string_literal76 = default(IToken);
	    IToken string_literal77 = default(IToken);
	    IToken string_literal78 = default(IToken);
	    IToken string_literal79 = default(IToken);
	    IToken string_literal80 = default(IToken);
	    IToken string_literal81 = default(IToken);
	    IToken string_literal82 = default(IToken);
	    IToken string_literal83 = default(IToken);
	    IToken string_literal84 = default(IToken);
	    IToken string_literal85 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_macros86 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree OPERATION_KW62_tree = default(CommonTree);
	    CommonTree ERROR_KW63_tree = default(CommonTree);
	    CommonTree string_literal64_tree = default(CommonTree);
	    CommonTree string_literal65_tree = default(CommonTree);
	    CommonTree string_literal66_tree = default(CommonTree);
	    CommonTree string_literal67_tree = default(CommonTree);
	    CommonTree string_literal68_tree = default(CommonTree);
	    CommonTree string_literal69_tree = default(CommonTree);
	    CommonTree string_literal70_tree = default(CommonTree);
	    CommonTree string_literal71_tree = default(CommonTree);
	    CommonTree string_literal72_tree = default(CommonTree);
	    CommonTree string_literal73_tree = default(CommonTree);
	    CommonTree string_literal74_tree = default(CommonTree);
	    CommonTree string_literal75_tree = default(CommonTree);
	    CommonTree string_literal76_tree = default(CommonTree);
	    CommonTree string_literal77_tree = default(CommonTree);
	    CommonTree string_literal78_tree = default(CommonTree);
	    CommonTree string_literal79_tree = default(CommonTree);
	    CommonTree string_literal80_tree = default(CommonTree);
	    CommonTree string_literal81_tree = default(CommonTree);
	    CommonTree string_literal82_tree = default(CommonTree);
	    CommonTree string_literal83_tree = default(CommonTree);
	    CommonTree string_literal84_tree = default(CommonTree);
	    CommonTree string_literal85_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "macroName");
		DebugLocation(649, 14);
		try
		{
			// Smi.g:649:10: ( OPERATION_KW | ERROR_KW | 'BIND' | 'UNBIND' | 'APPLICATION-SERVICE-ELEMENT' | 'APPLICATION-CONTEXT' | 'EXTENSION' | 'EXTENSIONS' | 'EXTENSION-ATTRIBUTE' | 'TOKEN' | 'TOKEN-DATA' | 'SECURITY-CATEGORY' | 'OBJECT' | 'PORT' | 'REFINE' | 'ABSTRACT-BIND' | 'ABSTRACT-UNBIND' | 'ABSTRACT-OPERATION' | 'ABSTRACT-ERROR' | 'ALGORITHM' | 'ENCRYPTED' | 'SIGNED' | 'SIGNATURE' | 'PROTECTED' | smi_macros )
			int alt22=25;
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			switch (input.LA(1))
			{
			case OPERATION_KW:
				{
				alt22 = 1;
				}
				break;
			case ERROR_KW:
				{
				alt22 = 2;
				}
				break;
			case 136:
				{
				alt22 = 3;
				}
				break;
			case 192:
				{
				alt22 = 4;
				}
				break;
			case 134:
				{
				alt22 = 5;
				}
				break;
			case 133:
				{
				alt22 = 6;
				}
				break;
			case 146:
				{
				alt22 = 7;
				}
				break;
			case 148:
				{
				alt22 = 8;
				}
				break;
			case 147:
				{
				alt22 = 9;
				}
				break;
			case 189:
				{
				alt22 = 10;
				}
				break;
			case 190:
				{
				alt22 = 11;
				}
				break;
			case 181:
				{
				alt22 = 12;
				}
				break;
			case OBJECT_KW:
				{
				alt22 = 13;
				}
				break;
			case 174:
				{
				alt22 = 14;
				}
				break;
			case 178:
				{
				alt22 = 15;
				}
				break;
			case 126:
				{
				alt22 = 16;
				}
				break;
			case 129:
				{
				alt22 = 17;
				}
				break;
			case 128:
				{
				alt22 = 18;
				}
				break;
			case 127:
				{
				alt22 = 19;
				}
				break;
			case 132:
				{
				alt22 = 20;
				}
				break;
			case 143:
				{
				alt22 = 21;
				}
				break;
			case 183:
				{
				alt22 = 22;
				}
				break;
			case 182:
				{
				alt22 = 23;
				}
				break;
			case 176:
				{
				alt22 = 24;
				}
				break;
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 188:
			case 191:
				{
				alt22 = 25;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:649:12: OPERATION_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 12);
				OPERATION_KW62=(IToken)Match(input,OPERATION_KW,Follow._OPERATION_KW_in_macroName2330); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPERATION_KW62_tree = (CommonTree)adaptor.Create(OPERATION_KW62);
				adaptor.AddChild(root_0, OPERATION_KW62_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:649:27: ERROR_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 27);
				ERROR_KW63=(IToken)Match(input,ERROR_KW,Follow._ERROR_KW_in_macroName2334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ERROR_KW63_tree = (CommonTree)adaptor.Create(ERROR_KW63);
				adaptor.AddChild(root_0, ERROR_KW63_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:649:39: 'BIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 39);
				string_literal64=(IToken)Match(input,136,Follow._136_in_macroName2339); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal64_tree = (CommonTree)adaptor.Create(string_literal64);
				adaptor.AddChild(root_0, string_literal64_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:649:48: 'UNBIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(649, 48);
				string_literal65=(IToken)Match(input,192,Follow._192_in_macroName2343); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal65_tree = (CommonTree)adaptor.Create(string_literal65);
				adaptor.AddChild(root_0, string_literal65_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:650:12: 'APPLICATION-SERVICE-ELEMENT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(650, 12);
				string_literal66=(IToken)Match(input,134,Follow._134_in_macroName2357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal66_tree = (CommonTree)adaptor.Create(string_literal66);
				adaptor.AddChild(root_0, string_literal66_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:650:44: 'APPLICATION-CONTEXT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(650, 44);
				string_literal67=(IToken)Match(input,133,Follow._133_in_macroName2361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal67_tree = (CommonTree)adaptor.Create(string_literal67);
				adaptor.AddChild(root_0, string_literal67_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:650:68: 'EXTENSION'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(650, 68);
				string_literal68=(IToken)Match(input,146,Follow._146_in_macroName2365); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal68_tree = (CommonTree)adaptor.Create(string_literal68);
				adaptor.AddChild(root_0, string_literal68_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:651:12: 'EXTENSIONS'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 12);
				string_literal69=(IToken)Match(input,148,Follow._148_in_macroName2379); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal69_tree = (CommonTree)adaptor.Create(string_literal69);
				adaptor.AddChild(root_0, string_literal69_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:651:27: 'EXTENSION-ATTRIBUTE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 27);
				string_literal70=(IToken)Match(input,147,Follow._147_in_macroName2383); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal70_tree = (CommonTree)adaptor.Create(string_literal70);
				adaptor.AddChild(root_0, string_literal70_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:651:51: 'TOKEN'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 51);
				string_literal71=(IToken)Match(input,189,Follow._189_in_macroName2387); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal71_tree = (CommonTree)adaptor.Create(string_literal71);
				adaptor.AddChild(root_0, string_literal71_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:651:61: 'TOKEN-DATA'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(651, 61);
				string_literal72=(IToken)Match(input,190,Follow._190_in_macroName2391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal72_tree = (CommonTree)adaptor.Create(string_literal72);
				adaptor.AddChild(root_0, string_literal72_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:652:5: 'SECURITY-CATEGORY'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(652, 5);
				string_literal73=(IToken)Match(input,181,Follow._181_in_macroName2398); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal73_tree = (CommonTree)adaptor.Create(string_literal73);
				adaptor.AddChild(root_0, string_literal73_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:652:27: 'OBJECT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(652, 27);
				string_literal74=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_macroName2402); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal74_tree = (CommonTree)adaptor.Create(string_literal74);
				adaptor.AddChild(root_0, string_literal74_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Smi.g:652:38: 'PORT'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(652, 38);
				string_literal75=(IToken)Match(input,174,Follow._174_in_macroName2406); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal75_tree = (CommonTree)adaptor.Create(string_literal75);
				adaptor.AddChild(root_0, string_literal75_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Smi.g:652:47: 'REFINE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(652, 47);
				string_literal76=(IToken)Match(input,178,Follow._178_in_macroName2410); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal76_tree = (CommonTree)adaptor.Create(string_literal76);
				adaptor.AddChild(root_0, string_literal76_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Smi.g:652:58: 'ABSTRACT-BIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(652, 58);
				string_literal77=(IToken)Match(input,126,Follow._126_in_macroName2414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal77_tree = (CommonTree)adaptor.Create(string_literal77);
				adaptor.AddChild(root_0, string_literal77_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Smi.g:653:5: 'ABSTRACT-UNBIND'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 5);
				string_literal78=(IToken)Match(input,129,Follow._129_in_macroName2421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal78_tree = (CommonTree)adaptor.Create(string_literal78);
				adaptor.AddChild(root_0, string_literal78_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Smi.g:653:25: 'ABSTRACT-OPERATION'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 25);
				string_literal79=(IToken)Match(input,128,Follow._128_in_macroName2425); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal79_tree = (CommonTree)adaptor.Create(string_literal79);
				adaptor.AddChild(root_0, string_literal79_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Smi.g:653:48: 'ABSTRACT-ERROR'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 48);
				string_literal80=(IToken)Match(input,127,Follow._127_in_macroName2429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal80_tree = (CommonTree)adaptor.Create(string_literal80);
				adaptor.AddChild(root_0, string_literal80_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// Smi.g:654:5: 'ALGORITHM'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 5);
				string_literal81=(IToken)Match(input,132,Follow._132_in_macroName2436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal81_tree = (CommonTree)adaptor.Create(string_literal81);
				adaptor.AddChild(root_0, string_literal81_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// Smi.g:654:19: 'ENCRYPTED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 19);
				string_literal82=(IToken)Match(input,143,Follow._143_in_macroName2440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal82_tree = (CommonTree)adaptor.Create(string_literal82);
				adaptor.AddChild(root_0, string_literal82_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// Smi.g:654:33: 'SIGNED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 33);
				string_literal83=(IToken)Match(input,183,Follow._183_in_macroName2444); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal83_tree = (CommonTree)adaptor.Create(string_literal83);
				adaptor.AddChild(root_0, string_literal83_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// Smi.g:654:44: 'SIGNATURE'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 44);
				string_literal84=(IToken)Match(input,182,Follow._182_in_macroName2448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal84_tree = (CommonTree)adaptor.Create(string_literal84);
				adaptor.AddChild(root_0, string_literal84_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// Smi.g:654:58: 'PROTECTED'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 58);
				string_literal85=(IToken)Match(input,176,Follow._176_in_macroName2452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal85_tree = (CommonTree)adaptor.Create(string_literal85);
				adaptor.AddChild(root_0, string_literal85_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// Smi.g:655:5: smi_macros
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(655, 5);
				PushFollow(Follow._smi_macros_in_macroName2459);
				smi_macros86=smi_macros();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_macros86.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("macroName", 15);
			LeaveRule("macroName", 15);
			LeaveRule_macroName();
	    }
	 	DebugLocation(655, 14);
		} finally { DebugExitRule(GrammarFileName, "macroName"); }
		return retval;

	}
	// $ANTLR end "macroName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type() {}
	// $ANTLR start "type"
	// Smi.g:657:1: type : ( built_in_type | defined_type | selection_type | macros_type | smi_type );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 16);
		TraceIn("type", 16);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> built_in_type87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_type88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> selection_type89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> macros_type90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type91 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(657, 76);
		try
		{
			// Smi.g:657:5: ( built_in_type | defined_type | selection_type | macros_type | smi_type )
			int alt23=5;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			switch (input.LA(1))
			{
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case NUMERIC_STR_KW:
			case PRINTABLE_STR_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
				{
				alt23 = 1;
				}
				break;
			case INTEGER_KW:
			case L_BRACKET:
			case NULL_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case 179:
				{
				alt23 = 1;
				}
				break;
			case OBJECT_KW:
				{
				int LA23_2 = input.LA(2);

				if ((LA23_2==IDENTIFIER_KW))
				{
					alt23 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA23_2 = input.LA(2);

				if ((LA23_2==STRING_KW))
				{
					alt23 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				alt23 = 2;
				}
				break;
			case LOWER:
				{
				alt23 = 3;
				}
				break;
			case ERROR_KW:
			case OPERATION_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 188:
			case 191:
				{
				alt23 = 4;
				}
				break;
			case 137:
				{
				alt23 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:657:7: built_in_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(657, 7);
				PushFollow(Follow._built_in_type_in_type2466);
				built_in_type87=built_in_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, built_in_type87.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:657:23: defined_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(657, 23);
				PushFollow(Follow._defined_type_in_type2470);
				defined_type88=defined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_type88.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:657:38: selection_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(657, 38);
				PushFollow(Follow._selection_type_in_type2474);
				selection_type89=selection_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_type89.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:657:55: macros_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(657, 55);
				PushFollow(Follow._macros_type_in_type2478);
				macros_type90=macros_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, macros_type90.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:657:69: smi_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(657, 69);
				PushFollow(Follow._smi_type_in_type2482);
				smi_type91=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type91.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 16);
			LeaveRule("type", 16);
			LeaveRule_type();
	    }
	 	DebugLocation(657, 76);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_value() {}
	// $ANTLR start "value"
	// Smi.g:659:1: value : ( ( TRUE_KW )=> TRUE_KW | ( FALSE_KW )=> FALSE_KW | ( NULL_KW )=> NULL_KW | ( C_STRING )=> C_STRING | ( defined_value )=> defined_value | ( signed_number )=> signed_number | ( choice_value )=> choice_value | ( sequence_value )=> sequence_value | ( sequenceof_value )=> sequenceof_value | ( cstr_value )=> cstr_value | ( obj_id_comp_lst )=> obj_id_comp_lst | ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW | ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW );
	[GrammarRule("value")]
	private AstParserRuleReturnScope<CommonTree, IToken> value()
	{
		EnterRule_value();
		EnterRule("value", 17);
		TraceIn("value", 17);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken TRUE_KW92 = default(IToken);
	    IToken FALSE_KW93 = default(IToken);
	    IToken NULL_KW94 = default(IToken);
	    IToken C_STRING95 = default(IToken);
	    IToken PLUS_INFINITY_KW103 = default(IToken);
	    IToken MINUS_INFINITY_KW104 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> choice_value98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> sequence_value99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> sequenceof_value100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> cstr_value101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> obj_id_comp_lst102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree TRUE_KW92_tree = default(CommonTree);
	    CommonTree FALSE_KW93_tree = default(CommonTree);
	    CommonTree NULL_KW94_tree = default(CommonTree);
	    CommonTree C_STRING95_tree = default(CommonTree);
	    CommonTree PLUS_INFINITY_KW103_tree = default(CommonTree);
	    CommonTree MINUS_INFINITY_KW104_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "value");
		DebugLocation(659, 47);
		try
		{
			// Smi.g:659:6: ( ( TRUE_KW )=> TRUE_KW | ( FALSE_KW )=> FALSE_KW | ( NULL_KW )=> NULL_KW | ( C_STRING )=> C_STRING | ( defined_value )=> defined_value | ( signed_number )=> signed_number | ( choice_value )=> choice_value | ( sequence_value )=> sequence_value | ( sequenceof_value )=> sequenceof_value | ( cstr_value )=> cstr_value | ( obj_id_comp_lst )=> obj_id_comp_lst | ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW | ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW )
			int alt24=13;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_1 = input.LA(1);

			if ((LA24_1==TRUE_KW) && (EvaluatePredicate(synpred3_Smi_fragment)))
			{
				alt24 = 1;
			}
			else if ((LA24_1==FALSE_KW) && (EvaluatePredicate(synpred4_Smi_fragment)))
			{
				alt24 = 2;
			}
			else if ((LA24_1==NULL_KW) && (EvaluatePredicate(synpred5_Smi_fragment)))
			{
				alt24 = 3;
			}
			else if ((LA24_1==C_STRING) && (EvaluatePredicate(synpred6_Smi_fragment)))
			{
				alt24 = 4;
			}
			else if ((LA24_1==UPPER) && (EvaluatePredicate(synpred7_Smi_fragment)))
			{
				alt24 = 5;
			}
			else if ((LA24_1==LOWER))
			{
				int LA24_2 = input.LA(2);

				if ((EvaluatePredicate(synpred7_Smi_fragment)))
				{
					alt24 = 5;
				}
				else if ((EvaluatePredicate(synpred9_Smi_fragment)))
				{
					alt24 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA24_1==MINUS) && (EvaluatePredicate(synpred8_Smi_fragment)))
			{
				alt24 = 6;
			}
			else if ((LA24_1==NUMBER) && (EvaluatePredicate(synpred8_Smi_fragment)))
			{
				alt24 = 6;
			}
			else if ((LA24_1==L_BRACE))
			{
				int LA24_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Smi_fragment)))
				{
					alt24 = 8;
				}
				else if ((EvaluatePredicate(synpred11_Smi_fragment)))
				{
					alt24 = 9;
				}
				else if ((EvaluatePredicate(synpred12_Smi_fragment)))
				{
					alt24 = 10;
				}
				else if ((EvaluatePredicate(synpred13_Smi_fragment)))
				{
					alt24 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA24_1==H_STRING) && (EvaluatePredicate(synpred12_Smi_fragment)))
			{
				alt24 = 10;
			}
			else if ((LA24_1==B_STRING) && (EvaluatePredicate(synpred12_Smi_fragment)))
			{
				alt24 = 10;
			}
			else if ((LA24_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred14_Smi_fragment)))
			{
				alt24 = 12;
			}
			else if ((LA24_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred15_Smi_fragment)))
			{
				alt24 = 13;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:659:8: ( TRUE_KW )=> TRUE_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(659, 21);
				TRUE_KW92=(IToken)Match(input,TRUE_KW,Follow._TRUE_KW_in_value2495); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE_KW92_tree = (CommonTree)adaptor.Create(TRUE_KW92);
				adaptor.AddChild(root_0, TRUE_KW92_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:660:8: ( FALSE_KW )=> FALSE_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(660, 22);
				FALSE_KW93=(IToken)Match(input,FALSE_KW,Follow._FALSE_KW_in_value2511); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE_KW93_tree = (CommonTree)adaptor.Create(FALSE_KW93);
				adaptor.AddChild(root_0, FALSE_KW93_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:661:8: ( NULL_KW )=> NULL_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(661, 21);
				NULL_KW94=(IToken)Match(input,NULL_KW,Follow._NULL_KW_in_value2527); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NULL_KW94_tree = (CommonTree)adaptor.Create(NULL_KW94);
				adaptor.AddChild(root_0, NULL_KW94_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:662:8: ( C_STRING )=> C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(662, 22);
				C_STRING95=(IToken)Match(input,C_STRING,Follow._C_STRING_in_value2544); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING95_tree = (CommonTree)adaptor.Create(C_STRING95);
				adaptor.AddChild(root_0, C_STRING95_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:663:8: ( defined_value )=> defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(663, 27);
				PushFollow(Follow._defined_value_in_value2560);
				defined_value96=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value96.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:664:8: ( signed_number )=> signed_number
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(664, 27);
				PushFollow(Follow._signed_number_in_value2576);
				signed_number97=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number97.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:665:8: ( choice_value )=> choice_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(665, 26);
				PushFollow(Follow._choice_value_in_value2591);
				choice_value98=choice_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, choice_value98.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:666:8: ( sequence_value )=> sequence_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(666, 28);
				PushFollow(Follow._sequence_value_in_value2607);
				sequence_value99=sequence_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sequence_value99.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:667:8: ( sequenceof_value )=> sequenceof_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(667, 30);
				PushFollow(Follow._sequenceof_value_in_value2623);
				sequenceof_value100=sequenceof_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sequenceof_value100.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:668:8: ( cstr_value )=> cstr_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(668, 24);
				PushFollow(Follow._cstr_value_in_value2639);
				cstr_value101=cstr_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cstr_value101.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:669:8: ( obj_id_comp_lst )=> obj_id_comp_lst
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(669, 29);
				PushFollow(Follow._obj_id_comp_lst_in_value2655);
				obj_id_comp_lst102=obj_id_comp_lst();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, obj_id_comp_lst102.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:670:8: ( PLUS_INFINITY_KW )=> PLUS_INFINITY_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(670, 30);
				PLUS_INFINITY_KW103=(IToken)Match(input,PLUS_INFINITY_KW,Follow._PLUS_INFINITY_KW_in_value2671); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PLUS_INFINITY_KW103_tree = (CommonTree)adaptor.Create(PLUS_INFINITY_KW103);
				adaptor.AddChild(root_0, PLUS_INFINITY_KW103_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:671:8: ( MINUS_INFINITY_KW )=> MINUS_INFINITY_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(671, 31);
				MINUS_INFINITY_KW104=(IToken)Match(input,MINUS_INFINITY_KW,Follow._MINUS_INFINITY_KW_in_value2687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS_INFINITY_KW104_tree = (CommonTree)adaptor.Create(MINUS_INFINITY_KW104);
				adaptor.AddChild(root_0, MINUS_INFINITY_KW104_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value", 17);
			LeaveRule("value", 17);
			LeaveRule_value();
	    }
	 	DebugLocation(671, 47);
		} finally { DebugExitRule(GrammarFileName, "value"); }
		return retval;

	}
	// $ANTLR end "value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_built_in_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_built_in_type() {}
	// $ANTLR start "built_in_type"
	// Smi.g:673:1: built_in_type : ( any_type | bit_string_type | boolean_type | character_str_type | choice_type | embedded_type EMBEDDED_KW PDV_KW | enum_type | external_type | integer_type | null_type | object_identifier_type | octetString_type | real_type | relativeOid_type | sequence_type | sequenceof_type | set_type | setof_type | tagged_type );
	[GrammarRule("built_in_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> built_in_type()
	{
		EnterRule_built_in_type();
		EnterRule("built_in_type", 18);
		TraceIn("built_in_type", 18);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EMBEDDED_KW111 = default(IToken);
	    IToken PDV_KW112 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> any_type105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> bit_string_type106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> boolean_type107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> character_str_type108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> choice_type109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> embedded_type110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> enum_type113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> external_type114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> integer_type115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> null_type116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> object_identifier_type117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> octetString_type118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> real_type119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> relativeOid_type120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> sequence_type121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> sequenceof_type122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> set_type123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> setof_type124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> tagged_type125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree EMBEDDED_KW111_tree = default(CommonTree);
	    CommonTree PDV_KW112_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "built_in_type");
		DebugLocation(673, 19);
		try
		{
			// Smi.g:673:14: ( any_type | bit_string_type | boolean_type | character_str_type | choice_type | embedded_type EMBEDDED_KW PDV_KW | enum_type | external_type | integer_type | null_type | object_identifier_type | octetString_type | real_type | relativeOid_type | sequence_type | sequenceof_type | set_type | setof_type | tagged_type )
			int alt25=19;
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			switch (input.LA(1))
			{
			case ANY_KW:
				{
				alt25 = 1;
				}
				break;
			case BIT_KW:
				{
				alt25 = 2;
				}
				break;
			case BOOLEAN_KW:
				{
				alt25 = 3;
				}
				break;
			case BMP_STR_KW:
			case CHARACTER_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case NUMERIC_STR_KW:
			case PRINTABLE_STR_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
				{
				alt25 = 4;
				}
				break;
			case CHOICE_KW:
				{
				alt25 = 5;
				}
				break;
			case EMBEDDED_KW:
				{
				alt25 = 6;
				}
				break;
			case ENUMERATED_KW:
				{
				alt25 = 7;
				}
				break;
			case EXTERNAL_KW:
				{
				alt25 = 8;
				}
				break;
			case INTEGER_KW:
				{
				alt25 = 9;
				}
				break;
			case NULL_KW:
				{
				alt25 = 10;
				}
				break;
			case OBJECT_KW:
				{
				alt25 = 11;
				}
				break;
			case OCTET_KW:
				{
				alt25 = 12;
				}
				break;
			case REAL_KW:
				{
				alt25 = 13;
				}
				break;
			case 179:
				{
				alt25 = 14;
				}
				break;
			case SEQUENCE_KW:
				{
				int LA25_2 = input.LA(2);

				if ((LA25_2==L_BRACE))
				{
					alt25 = 15;
				}
				else if ((LA25_2==OF_KW||LA25_2==SIZE_KW))
				{
					alt25 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SET_KW:
				{
				int LA25_2 = input.LA(2);

				if ((LA25_2==L_BRACE))
				{
					alt25 = 17;
				}
				else if ((LA25_2==OF_KW||LA25_2==SIZE_KW))
				{
					alt25 = 18;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case L_BRACKET:
				{
				alt25 = 19;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:673:16: any_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(673, 16);
				PushFollow(Follow._any_type_in_built_in_type2694);
				any_type105=any_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, any_type105.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:674:16: bit_string_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(674, 16);
				PushFollow(Follow._bit_string_type_in_built_in_type2712);
				bit_string_type106=bit_string_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bit_string_type106.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:675:16: boolean_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(675, 16);
				PushFollow(Follow._boolean_type_in_built_in_type2730);
				boolean_type107=boolean_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_type107.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:676:16: character_str_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(676, 16);
				PushFollow(Follow._character_str_type_in_built_in_type2748);
				character_str_type108=character_str_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_str_type108.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:677:16: choice_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(677, 16);
				PushFollow(Follow._choice_type_in_built_in_type2766);
				choice_type109=choice_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, choice_type109.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:678:16: embedded_type EMBEDDED_KW PDV_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(678, 16);
				PushFollow(Follow._embedded_type_in_built_in_type2783);
				embedded_type110=embedded_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_type110.Tree);
				DebugLocation(678, 30);
				EMBEDDED_KW111=(IToken)Match(input,EMBEDDED_KW,Follow._EMBEDDED_KW_in_built_in_type2785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EMBEDDED_KW111_tree = (CommonTree)adaptor.Create(EMBEDDED_KW111);
				adaptor.AddChild(root_0, EMBEDDED_KW111_tree);
				}
				DebugLocation(678, 42);
				PDV_KW112=(IToken)Match(input,PDV_KW,Follow._PDV_KW_in_built_in_type2787); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PDV_KW112_tree = (CommonTree)adaptor.Create(PDV_KW112);
				adaptor.AddChild(root_0, PDV_KW112_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:679:16: enum_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(679, 16);
				PushFollow(Follow._enum_type_in_built_in_type2805);
				enum_type113=enum_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_type113.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:680:16: external_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(680, 16);
				PushFollow(Follow._external_type_in_built_in_type2822);
				external_type114=external_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, external_type114.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:681:9: integer_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(681, 9);
				PushFollow(Follow._integer_type_in_built_in_type2832);
				integer_type115=integer_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, integer_type115.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:682:9: null_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(682, 9);
				PushFollow(Follow._null_type_in_built_in_type2842);
				null_type116=null_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, null_type116.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:683:9: object_identifier_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(683, 9);
				PushFollow(Follow._object_identifier_type_in_built_in_type2852);
				object_identifier_type117=object_identifier_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_identifier_type117.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:684:9: octetString_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(684, 9);
				PushFollow(Follow._octetString_type_in_built_in_type2862);
				octetString_type118=octetString_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octetString_type118.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Smi.g:685:9: real_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(685, 9);
				PushFollow(Follow._real_type_in_built_in_type2872);
				real_type119=real_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, real_type119.Tree);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Smi.g:686:9: relativeOid_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(686, 9);
				PushFollow(Follow._relativeOid_type_in_built_in_type2882);
				relativeOid_type120=relativeOid_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, relativeOid_type120.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Smi.g:687:9: sequence_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(687, 9);
				PushFollow(Follow._sequence_type_in_built_in_type2892);
				sequence_type121=sequence_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sequence_type121.Tree);

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Smi.g:688:9: sequenceof_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(688, 9);
				PushFollow(Follow._sequenceof_type_in_built_in_type2902);
				sequenceof_type122=sequenceof_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sequenceof_type122.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Smi.g:689:9: set_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(689, 9);
				PushFollow(Follow._set_type_in_built_in_type2912);
				set_type123=set_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_type123.Tree);

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Smi.g:690:9: setof_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(690, 9);
				PushFollow(Follow._setof_type_in_built_in_type2922);
				setof_type124=setof_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, setof_type124.Tree);

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Smi.g:691:9: tagged_type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(691, 9);
				PushFollow(Follow._tagged_type_in_built_in_type2932);
				tagged_type125=tagged_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tagged_type125.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("built_in_type", 18);
			LeaveRule("built_in_type", 18);
			LeaveRule_built_in_type();
	    }
	 	DebugLocation(691, 19);
		} finally { DebugExitRule(GrammarFileName, "built_in_type"); }
		return retval;

	}
	// $ANTLR end "built_in_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_defined_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_defined_type() {}
	// $ANTLR start "defined_type"
	// Smi.g:693:1: defined_type : ( UPPER DOT )? UPPER ( constraint )? ;
	[GrammarRule("defined_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> defined_type()
	{
		EnterRule_defined_type();
		EnterRule("defined_type", 19);
		TraceIn("defined_type", 19);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken UPPER126 = default(IToken);
	    IToken DOT127 = default(IToken);
	    IToken UPPER128 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree UPPER126_tree = default(CommonTree);
	    CommonTree DOT127_tree = default(CommonTree);
	    CommonTree UPPER128_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "defined_type");
		DebugLocation(693, 47);
		try
		{
			// Smi.g:693:13: ( ( UPPER DOT )? UPPER ( constraint )? )
			DebugEnterAlt(1);
			// Smi.g:693:15: ( UPPER DOT )? UPPER ( constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(693, 15);
			// Smi.g:693:15: ( UPPER DOT )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_1 = input.LA(1);

			if ((LA26_1==UPPER))
			{
				int LA26_2 = input.LA(2);

				if ((LA26_2==DOT))
				{
					alt26 = 1;
				}
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:693:16: UPPER DOT
				{
				DebugLocation(693, 16);
				UPPER126=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_type2940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER126_tree = (CommonTree)adaptor.Create(UPPER126);
				adaptor.AddChild(root_0, UPPER126_tree);
				}
				DebugLocation(693, 22);
				DOT127=(IToken)Match(input,DOT,Follow._DOT_in_defined_type2942); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT127_tree = (CommonTree)adaptor.Create(DOT127);
				adaptor.AddChild(root_0, DOT127_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(693, 28);
			UPPER128=(IToken)Match(input,UPPER,Follow._UPPER_in_defined_type2946); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UPPER128_tree = (CommonTree)adaptor.Create(UPPER128);
			adaptor.AddChild(root_0, UPPER128_tree);
			}
			DebugLocation(693, 34);
			// Smi.g:693:34: ( constraint )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_1 = input.LA(1);

			if ((LA27_1==L_PAREN))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:693:35: constraint
				{
				DebugLocation(693, 35);
				PushFollow(Follow._constraint_in_defined_type2949);
				constraint129=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defined_type", 19);
			LeaveRule("defined_type", 19);
			LeaveRule_defined_type();
	    }
	 	DebugLocation(693, 47);
		} finally { DebugExitRule(GrammarFileName, "defined_type"); }
		return retval;

	}
	// $ANTLR end "defined_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selection_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selection_type() {}
	// $ANTLR start "selection_type"
	// Smi.g:695:1: selection_type : LOWER LESS type ;
	[GrammarRule("selection_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> selection_type()
	{
		EnterRule_selection_type();
		EnterRule("selection_type", 20);
		TraceIn("selection_type", 20);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER130 = default(IToken);
	    IToken LESS131 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> type132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER130_tree = default(CommonTree);
	    CommonTree LESS131_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "selection_type");
		DebugLocation(695, 31);
		try
		{
			// Smi.g:695:15: ( LOWER LESS type )
			DebugEnterAlt(1);
			// Smi.g:695:17: LOWER LESS type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(695, 17);
			LOWER130=(IToken)Match(input,LOWER,Follow._LOWER_in_selection_type2959); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER130_tree = (CommonTree)adaptor.Create(LOWER130);
			adaptor.AddChild(root_0, LOWER130_tree);
			}
			DebugLocation(695, 23);
			LESS131=(IToken)Match(input,LESS,Follow._LESS_in_selection_type2961); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LESS131_tree = (CommonTree)adaptor.Create(LESS131);
			adaptor.AddChild(root_0, LESS131_tree);
			}
			DebugLocation(695, 28);
			PushFollow(Follow._type_in_selection_type2963);
			type132=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type132.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_type", 20);
			LeaveRule("selection_type", 20);
			LeaveRule_selection_type();
	    }
	 	DebugLocation(695, 31);
		} finally { DebugExitRule(GrammarFileName, "selection_type"); }
		return retval;

	}
	// $ANTLR end "selection_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_any_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_any_type() {}
	// $ANTLR start "any_type"
	// Smi.g:697:1: any_type : ANY_KW ( DEFINED_KW BY_KW LOWER )? ;
	[GrammarRule("any_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> any_type()
	{
		EnterRule_any_type();
		EnterRule("any_type", 21);
		TraceIn("any_type", 21);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken ANY_KW133 = default(IToken);
	    IToken DEFINED_KW134 = default(IToken);
	    IToken BY_KW135 = default(IToken);
	    IToken LOWER136 = default(IToken);

	    CommonTree ANY_KW133_tree = default(CommonTree);
	    CommonTree DEFINED_KW134_tree = default(CommonTree);
	    CommonTree BY_KW135_tree = default(CommonTree);
	    CommonTree LOWER136_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "any_type");
		DebugLocation(697, 43);
		try
		{
			// Smi.g:697:9: ( ANY_KW ( DEFINED_KW BY_KW LOWER )? )
			DebugEnterAlt(1);
			// Smi.g:697:11: ANY_KW ( DEFINED_KW BY_KW LOWER )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(697, 11);
			ANY_KW133=(IToken)Match(input,ANY_KW,Follow._ANY_KW_in_any_type2970); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ANY_KW133_tree = (CommonTree)adaptor.Create(ANY_KW133);
			adaptor.AddChild(root_0, ANY_KW133_tree);
			}
			DebugLocation(697, 18);
			// Smi.g:697:18: ( DEFINED_KW BY_KW LOWER )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_1 = input.LA(1);

			if ((LA28_1==DEFINED_KW))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:697:19: DEFINED_KW BY_KW LOWER
				{
				DebugLocation(697, 19);
				DEFINED_KW134=(IToken)Match(input,DEFINED_KW,Follow._DEFINED_KW_in_any_type2973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DEFINED_KW134_tree = (CommonTree)adaptor.Create(DEFINED_KW134);
				adaptor.AddChild(root_0, DEFINED_KW134_tree);
				}
				DebugLocation(697, 30);
				BY_KW135=(IToken)Match(input,BY_KW,Follow._BY_KW_in_any_type2975); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BY_KW135_tree = (CommonTree)adaptor.Create(BY_KW135);
				adaptor.AddChild(root_0, BY_KW135_tree);
				}
				DebugLocation(697, 36);
				LOWER136=(IToken)Match(input,LOWER,Follow._LOWER_in_any_type2977); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER136_tree = (CommonTree)adaptor.Create(LOWER136);
				adaptor.AddChild(root_0, LOWER136_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("any_type", 21);
			LeaveRule("any_type", 21);
			LeaveRule_any_type();
	    }
	 	DebugLocation(697, 43);
		} finally { DebugExitRule(GrammarFileName, "any_type"); }
		return retval;

	}
	// $ANTLR end "any_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bit_string_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bit_string_type() {}
	// $ANTLR start "bit_string_type"
	// Smi.g:700:1: bit_string_type : BIT_KW STRING_KW ( ( L_BRACE namedNumber )=> namedNumber_list )? ( constraint )? ;
	[GrammarRule("bit_string_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_string_type()
	{
		EnterRule_bit_string_type();
		EnterRule("bit_string_type", 22);
		TraceIn("bit_string_type", 22);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken BIT_KW137 = default(IToken);
	    IToken STRING_KW138 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> namedNumber_list139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree BIT_KW137_tree = default(CommonTree);
	    CommonTree STRING_KW138_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "bit_string_type");
		DebugLocation(700, 93);
		try
		{
			// Smi.g:700:16: ( BIT_KW STRING_KW ( ( L_BRACE namedNumber )=> namedNumber_list )? ( constraint )? )
			DebugEnterAlt(1);
			// Smi.g:700:18: BIT_KW STRING_KW ( ( L_BRACE namedNumber )=> namedNumber_list )? ( constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(700, 18);
			BIT_KW137=(IToken)Match(input,BIT_KW,Follow._BIT_KW_in_bit_string_type2989); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BIT_KW137_tree = (CommonTree)adaptor.Create(BIT_KW137);
			adaptor.AddChild(root_0, BIT_KW137_tree);
			}
			DebugLocation(700, 25);
			STRING_KW138=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_bit_string_type2991); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_KW138_tree = (CommonTree)adaptor.Create(STRING_KW138);
			adaptor.AddChild(root_0, STRING_KW138_tree);
			}
			DebugLocation(700, 35);
			// Smi.g:700:35: ( ( L_BRACE namedNumber )=> namedNumber_list )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_1 = input.LA(1);

			if ((LA29_1==L_BRACE) && (EvaluatePredicate(synpred16_Smi_fragment)))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:700:36: ( L_BRACE namedNumber )=> namedNumber_list
				{
				DebugLocation(700, 61);
				PushFollow(Follow._namedNumber_list_in_bit_string_type3002);
				namedNumber_list139=namedNumber_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namedNumber_list139.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(700, 80);
			// Smi.g:700:80: ( constraint )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_1 = input.LA(1);

			if ((LA30_1==L_PAREN))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:700:81: constraint
				{
				DebugLocation(700, 81);
				PushFollow(Follow._constraint_in_bit_string_type3007);
				constraint140=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_string_type", 22);
			LeaveRule("bit_string_type", 22);
			LeaveRule_bit_string_type();
	    }
	 	DebugLocation(700, 93);
		} finally { DebugExitRule(GrammarFileName, "bit_string_type"); }
		return retval;

	}
	// $ANTLR end "bit_string_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_boolean_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_boolean_type() {}
	// $ANTLR start "boolean_type"
	// Smi.g:703:1: boolean_type : BOOLEAN_KW ;
	[GrammarRule("boolean_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> boolean_type()
	{
		EnterRule_boolean_type();
		EnterRule("boolean_type", 23);
		TraceIn("boolean_type", 23);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken BOOLEAN_KW141 = default(IToken);

	    CommonTree BOOLEAN_KW141_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "boolean_type");
		DebugLocation(703, 24);
		try
		{
			// Smi.g:703:13: ( BOOLEAN_KW )
			DebugEnterAlt(1);
			// Smi.g:703:15: BOOLEAN_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(703, 15);
			BOOLEAN_KW141=(IToken)Match(input,BOOLEAN_KW,Follow._BOOLEAN_KW_in_boolean_type3018); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BOOLEAN_KW141_tree = (CommonTree)adaptor.Create(BOOLEAN_KW141);
			adaptor.AddChild(root_0, BOOLEAN_KW141_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_type", 23);
			LeaveRule("boolean_type", 23);
			LeaveRule_boolean_type();
	    }
	 	DebugLocation(703, 24);
		} finally { DebugExitRule(GrammarFileName, "boolean_type"); }
		return retval;

	}
	// $ANTLR end "boolean_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_character_str_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_character_str_type() {}
	// $ANTLR start "character_str_type"
	// Smi.g:705:1: character_str_type : ( CHARACTER_KW STRING_KW | character_set ( constraint )? );
	[GrammarRule("character_str_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> character_str_type()
	{
		EnterRule_character_str_type();
		EnterRule("character_str_type", 24);
		TraceIn("character_str_type", 24);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken CHARACTER_KW142 = default(IToken);
	    IToken STRING_KW143 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> character_set144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree CHARACTER_KW142_tree = default(CommonTree);
	    CommonTree STRING_KW143_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "character_str_type");
		DebugLocation(705, 73);
		try
		{
			// Smi.g:705:19: ( CHARACTER_KW STRING_KW | character_set ( constraint )? )
			int alt32=2;
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_1 = input.LA(1);

			if ((LA32_1==CHARACTER_KW))
			{
				alt32 = 1;
			}
			else if ((LA32_1==BMP_STR_KW||(LA32_1>=GENERALIZED_TIME_KW && LA32_1<=GRAPHIC_STR_KW)||LA32_1==IA5_STRING_KW||LA32_1==ISO646_STR_KW||LA32_1==NUMERIC_STR_KW||LA32_1==PRINTABLE_STR_KW||LA32_1==T61_STR_KW||LA32_1==TELETEX_STR_KW||LA32_1==UNIVERSAL_STR_KW||(LA32_1>=UTC_TIME_KW && LA32_1<=VISIBLE_STR_KW)))
			{
				alt32 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:705:21: CHARACTER_KW STRING_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(705, 21);
				CHARACTER_KW142=(IToken)Match(input,CHARACTER_KW,Follow._CHARACTER_KW_in_character_str_type3025); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARACTER_KW142_tree = (CommonTree)adaptor.Create(CHARACTER_KW142);
				adaptor.AddChild(root_0, CHARACTER_KW142_tree);
				}
				DebugLocation(705, 34);
				STRING_KW143=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_character_str_type3027); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_KW143_tree = (CommonTree)adaptor.Create(STRING_KW143);
				adaptor.AddChild(root_0, STRING_KW143_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:705:46: character_set ( constraint )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(705, 46);
				PushFollow(Follow._character_set_in_character_str_type3031);
				character_set144=character_set();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_set144.Tree);
				DebugLocation(705, 60);
				// Smi.g:705:60: ( constraint )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_1 = input.LA(1);

				if ((LA31_1==L_PAREN))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:705:61: constraint
					{
					DebugLocation(705, 61);
					PushFollow(Follow._constraint_in_character_str_type3034);
					constraint145=constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constraint145.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_str_type", 24);
			LeaveRule("character_str_type", 24);
			LeaveRule_character_str_type();
	    }
	 	DebugLocation(705, 73);
		} finally { DebugExitRule(GrammarFileName, "character_str_type"); }
		return retval;

	}
	// $ANTLR end "character_str_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_choice_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_choice_type() {}
	// $ANTLR start "choice_type"
	// Smi.g:707:1: choice_type : CHOICE_KW L_BRACE elementType_list R_BRACE ;
	[GrammarRule("choice_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> choice_type()
	{
		EnterRule_choice_type();
		EnterRule("choice_type", 25);
		TraceIn("choice_type", 25);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken CHOICE_KW146 = default(IToken);
	    IToken L_BRACE147 = default(IToken);
	    IToken R_BRACE149 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> elementType_list148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree CHOICE_KW146_tree = default(CommonTree);
	    CommonTree L_BRACE147_tree = default(CommonTree);
	    CommonTree R_BRACE149_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "choice_type");
		DebugLocation(707, 55);
		try
		{
			// Smi.g:707:12: ( CHOICE_KW L_BRACE elementType_list R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:707:14: CHOICE_KW L_BRACE elementType_list R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(707, 14);
			CHOICE_KW146=(IToken)Match(input,CHOICE_KW,Follow._CHOICE_KW_in_choice_type3044); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHOICE_KW146_tree = (CommonTree)adaptor.Create(CHOICE_KW146);
			adaptor.AddChild(root_0, CHOICE_KW146_tree);
			}
			DebugLocation(707, 24);
			L_BRACE147=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_choice_type3046); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE147_tree = (CommonTree)adaptor.Create(L_BRACE147);
			adaptor.AddChild(root_0, L_BRACE147_tree);
			}
			DebugLocation(707, 32);
			PushFollow(Follow._elementType_list_in_choice_type3048);
			elementType_list148=elementType_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementType_list148.Tree);
			DebugLocation(707, 49);
			R_BRACE149=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_choice_type3050); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE149_tree = (CommonTree)adaptor.Create(R_BRACE149);
			adaptor.AddChild(root_0, R_BRACE149_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("choice_type", 25);
			LeaveRule("choice_type", 25);
			LeaveRule_choice_type();
	    }
	 	DebugLocation(707, 55);
		} finally { DebugExitRule(GrammarFileName, "choice_type"); }
		return retval;

	}
	// $ANTLR end "choice_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_embedded_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_embedded_type() {}
	// $ANTLR start "embedded_type"
	// Smi.g:709:1: embedded_type : EMBEDDED_KW PDV_KW ;
	[GrammarRule("embedded_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> embedded_type()
	{
		EnterRule_embedded_type();
		EnterRule("embedded_type", 26);
		TraceIn("embedded_type", 26);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EMBEDDED_KW150 = default(IToken);
	    IToken PDV_KW151 = default(IToken);

	    CommonTree EMBEDDED_KW150_tree = default(CommonTree);
	    CommonTree PDV_KW151_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "embedded_type");
		DebugLocation(709, 33);
		try
		{
			// Smi.g:709:14: ( EMBEDDED_KW PDV_KW )
			DebugEnterAlt(1);
			// Smi.g:709:16: EMBEDDED_KW PDV_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(709, 16);
			EMBEDDED_KW150=(IToken)Match(input,EMBEDDED_KW,Follow._EMBEDDED_KW_in_embedded_type3057); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EMBEDDED_KW150_tree = (CommonTree)adaptor.Create(EMBEDDED_KW150);
			adaptor.AddChild(root_0, EMBEDDED_KW150_tree);
			}
			DebugLocation(709, 28);
			PDV_KW151=(IToken)Match(input,PDV_KW,Follow._PDV_KW_in_embedded_type3059); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PDV_KW151_tree = (CommonTree)adaptor.Create(PDV_KW151);
			adaptor.AddChild(root_0, PDV_KW151_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embedded_type", 26);
			LeaveRule("embedded_type", 26);
			LeaveRule_embedded_type();
	    }
	 	DebugLocation(709, 33);
		} finally { DebugExitRule(GrammarFileName, "embedded_type"); }
		return retval;

	}
	// $ANTLR end "embedded_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enum_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enum_type() {}
	// $ANTLR start "enum_type"
	// Smi.g:711:1: enum_type : ENUMERATED_KW namedNumber_list ;
	[GrammarRule("enum_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_type()
	{
		EnterRule_enum_type();
		EnterRule("enum_type", 27);
		TraceIn("enum_type", 27);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken ENUMERATED_KW152 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> namedNumber_list153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree ENUMERATED_KW152_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "enum_type");
		DebugLocation(711, 41);
		try
		{
			// Smi.g:711:10: ( ENUMERATED_KW namedNumber_list )
			DebugEnterAlt(1);
			// Smi.g:711:12: ENUMERATED_KW namedNumber_list
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(711, 12);
			ENUMERATED_KW152=(IToken)Match(input,ENUMERATED_KW,Follow._ENUMERATED_KW_in_enum_type3066); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ENUMERATED_KW152_tree = (CommonTree)adaptor.Create(ENUMERATED_KW152);
			adaptor.AddChild(root_0, ENUMERATED_KW152_tree);
			}
			DebugLocation(711, 26);
			PushFollow(Follow._namedNumber_list_in_enum_type3068);
			namedNumber_list153=namedNumber_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namedNumber_list153.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_type", 27);
			LeaveRule("enum_type", 27);
			LeaveRule_enum_type();
	    }
	 	DebugLocation(711, 41);
		} finally { DebugExitRule(GrammarFileName, "enum_type"); }
		return retval;

	}
	// $ANTLR end "enum_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_external_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_external_type() {}
	// $ANTLR start "external_type"
	// Smi.g:713:1: external_type : EXTERNAL_KW ;
	[GrammarRule("external_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> external_type()
	{
		EnterRule_external_type();
		EnterRule("external_type", 28);
		TraceIn("external_type", 28);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EXTERNAL_KW154 = default(IToken);

	    CommonTree EXTERNAL_KW154_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "external_type");
		DebugLocation(713, 26);
		try
		{
			// Smi.g:713:14: ( EXTERNAL_KW )
			DebugEnterAlt(1);
			// Smi.g:713:16: EXTERNAL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(713, 16);
			EXTERNAL_KW154=(IToken)Match(input,EXTERNAL_KW,Follow._EXTERNAL_KW_in_external_type3075); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXTERNAL_KW154_tree = (CommonTree)adaptor.Create(EXTERNAL_KW154);
			adaptor.AddChild(root_0, EXTERNAL_KW154_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_type", 28);
			LeaveRule("external_type", 28);
			LeaveRule_external_type();
	    }
	 	DebugLocation(713, 26);
		} finally { DebugExitRule(GrammarFileName, "external_type"); }
		return retval;

	}
	// $ANTLR end "external_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_integer_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_integer_type() {}
	// $ANTLR start "integer_type"
	// Smi.g:716:1: integer_type : INTEGER_KW ( ( L_BRACE namedNumber )=> namedNumber_list | constraint )? ;
	[GrammarRule("integer_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> integer_type()
	{
		EnterRule_integer_type();
		EnterRule("integer_type", 29);
		TraceIn("integer_type", 29);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken INTEGER_KW155 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> namedNumber_list156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree INTEGER_KW155_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "integer_type");
		DebugLocation(716, 83);
		try
		{
			// Smi.g:716:13: ( INTEGER_KW ( ( L_BRACE namedNumber )=> namedNumber_list | constraint )? )
			DebugEnterAlt(1);
			// Smi.g:716:15: INTEGER_KW ( ( L_BRACE namedNumber )=> namedNumber_list | constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(716, 15);
			INTEGER_KW155=(IToken)Match(input,INTEGER_KW,Follow._INTEGER_KW_in_integer_type3084); if (state.failed) return retval;
			if (state.backtracking == 0) {
			INTEGER_KW155_tree = (CommonTree)adaptor.Create(INTEGER_KW155);
			adaptor.AddChild(root_0, INTEGER_KW155_tree);
			}
			DebugLocation(716, 26);
			// Smi.g:716:26: ( ( L_BRACE namedNumber )=> namedNumber_list | constraint )?
			int alt33=3;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_1 = input.LA(1);

			if ((LA33_1==L_BRACE) && (EvaluatePredicate(synpred17_Smi_fragment)))
			{
				alt33 = 1;
			}
			else if ((LA33_1==L_PAREN))
			{
				alt33 = 2;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:716:27: ( L_BRACE namedNumber )=> namedNumber_list
				{
				DebugLocation(716, 52);
				PushFollow(Follow._namedNumber_list_in_integer_type3095);
				namedNumber_list156=namedNumber_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namedNumber_list156.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:716:71: constraint
				{
				DebugLocation(716, 71);
				PushFollow(Follow._constraint_in_integer_type3099);
				constraint157=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint157.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("integer_type", 29);
			LeaveRule("integer_type", 29);
			LeaveRule_integer_type();
	    }
	 	DebugLocation(716, 83);
		} finally { DebugExitRule(GrammarFileName, "integer_type"); }
		return retval;

	}
	// $ANTLR end "integer_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_null_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_null_type() {}
	// $ANTLR start "null_type"
	// Smi.g:719:1: null_type : NULL_KW ;
	[GrammarRule("null_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> null_type()
	{
		EnterRule_null_type();
		EnterRule("null_type", 30);
		TraceIn("null_type", 30);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken NULL_KW158 = default(IToken);

	    CommonTree NULL_KW158_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "null_type");
		DebugLocation(719, 18);
		try
		{
			// Smi.g:719:10: ( NULL_KW )
			DebugEnterAlt(1);
			// Smi.g:719:12: NULL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(719, 12);
			NULL_KW158=(IToken)Match(input,NULL_KW,Follow._NULL_KW_in_null_type3110); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_KW158_tree = (CommonTree)adaptor.Create(NULL_KW158);
			adaptor.AddChild(root_0, NULL_KW158_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("null_type", 30);
			LeaveRule("null_type", 30);
			LeaveRule_null_type();
	    }
	 	DebugLocation(719, 18);
		} finally { DebugExitRule(GrammarFileName, "null_type"); }
		return retval;

	}
	// $ANTLR end "null_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_object_identifier_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_object_identifier_type() {}
	// $ANTLR start "object_identifier_type"
	// Smi.g:721:1: object_identifier_type : OBJECT_KW IDENTIFIER_KW ;
	[GrammarRule("object_identifier_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_identifier_type()
	{
		EnterRule_object_identifier_type();
		EnterRule("object_identifier_type", 31);
		TraceIn("object_identifier_type", 31);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken OBJECT_KW159 = default(IToken);
	    IToken IDENTIFIER_KW160 = default(IToken);

	    CommonTree OBJECT_KW159_tree = default(CommonTree);
	    CommonTree IDENTIFIER_KW160_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "object_identifier_type");
		DebugLocation(721, 47);
		try
		{
			// Smi.g:721:23: ( OBJECT_KW IDENTIFIER_KW )
			DebugEnterAlt(1);
			// Smi.g:721:25: OBJECT_KW IDENTIFIER_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(721, 25);
			OBJECT_KW159=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_object_identifier_type3117); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OBJECT_KW159_tree = (CommonTree)adaptor.Create(OBJECT_KW159);
			adaptor.AddChild(root_0, OBJECT_KW159_tree);
			}
			DebugLocation(721, 35);
			IDENTIFIER_KW160=(IToken)Match(input,IDENTIFIER_KW,Follow._IDENTIFIER_KW_in_object_identifier_type3119); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER_KW160_tree = (CommonTree)adaptor.Create(IDENTIFIER_KW160);
			adaptor.AddChild(root_0, IDENTIFIER_KW160_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_identifier_type", 31);
			LeaveRule("object_identifier_type", 31);
			LeaveRule_object_identifier_type();
	    }
	 	DebugLocation(721, 47);
		} finally { DebugExitRule(GrammarFileName, "object_identifier_type"); }
		return retval;

	}
	// $ANTLR end "object_identifier_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_octetString_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_octetString_type() {}
	// $ANTLR start "octetString_type"
	// Smi.g:723:1: octetString_type : OCTET_KW STRING_KW ( constraint )? ;
	[GrammarRule("octetString_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> octetString_type()
	{
		EnterRule_octetString_type();
		EnterRule("octetString_type", 32);
		TraceIn("octetString_type", 32);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken OCTET_KW161 = default(IToken);
	    IToken STRING_KW162 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree OCTET_KW161_tree = default(CommonTree);
	    CommonTree STRING_KW162_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "octetString_type");
		DebugLocation(723, 51);
		try
		{
			// Smi.g:723:17: ( OCTET_KW STRING_KW ( constraint )? )
			DebugEnterAlt(1);
			// Smi.g:723:19: OCTET_KW STRING_KW ( constraint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(723, 19);
			OCTET_KW161=(IToken)Match(input,OCTET_KW,Follow._OCTET_KW_in_octetString_type3126); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTET_KW161_tree = (CommonTree)adaptor.Create(OCTET_KW161);
			adaptor.AddChild(root_0, OCTET_KW161_tree);
			}
			DebugLocation(723, 28);
			STRING_KW162=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_octetString_type3128); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_KW162_tree = (CommonTree)adaptor.Create(STRING_KW162);
			adaptor.AddChild(root_0, STRING_KW162_tree);
			}
			DebugLocation(723, 38);
			// Smi.g:723:38: ( constraint )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_1 = input.LA(1);

			if ((LA34_1==L_PAREN))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:723:39: constraint
				{
				DebugLocation(723, 39);
				PushFollow(Follow._constraint_in_octetString_type3131);
				constraint163=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint163.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octetString_type", 32);
			LeaveRule("octetString_type", 32);
			LeaveRule_octetString_type();
	    }
	 	DebugLocation(723, 51);
		} finally { DebugExitRule(GrammarFileName, "octetString_type"); }
		return retval;

	}
	// $ANTLR end "octetString_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_real_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_real_type() {}
	// $ANTLR start "real_type"
	// Smi.g:725:1: real_type : REAL_KW ;
	[GrammarRule("real_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> real_type()
	{
		EnterRule_real_type();
		EnterRule("real_type", 33);
		TraceIn("real_type", 33);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken REAL_KW164 = default(IToken);

	    CommonTree REAL_KW164_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "real_type");
		DebugLocation(725, 18);
		try
		{
			// Smi.g:725:10: ( REAL_KW )
			DebugEnterAlt(1);
			// Smi.g:725:12: REAL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(725, 12);
			REAL_KW164=(IToken)Match(input,REAL_KW,Follow._REAL_KW_in_real_type3141); if (state.failed) return retval;
			if (state.backtracking == 0) {
			REAL_KW164_tree = (CommonTree)adaptor.Create(REAL_KW164);
			adaptor.AddChild(root_0, REAL_KW164_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("real_type", 33);
			LeaveRule("real_type", 33);
			LeaveRule_real_type();
	    }
	 	DebugLocation(725, 18);
		} finally { DebugExitRule(GrammarFileName, "real_type"); }
		return retval;

	}
	// $ANTLR end "real_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relativeOid_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relativeOid_type() {}
	// $ANTLR start "relativeOid_type"
	// Smi.g:728:1: relativeOid_type : 'RELATIVE-OID' ;
	[GrammarRule("relativeOid_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> relativeOid_type()
	{
		EnterRule_relativeOid_type();
		EnterRule("relativeOid_type", 34);
		TraceIn("relativeOid_type", 34);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal165 = default(IToken);

	    CommonTree string_literal165_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "relativeOid_type");
		DebugLocation(728, 32);
		try
		{
			// Smi.g:728:17: ( 'RELATIVE-OID' )
			DebugEnterAlt(1);
			// Smi.g:728:19: 'RELATIVE-OID'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(728, 19);
			string_literal165=(IToken)Match(input,179,Follow._179_in_relativeOid_type3150); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal165_tree = (CommonTree)adaptor.Create(string_literal165);
			adaptor.AddChild(root_0, string_literal165_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relativeOid_type", 34);
			LeaveRule("relativeOid_type", 34);
			LeaveRule_relativeOid_type();
	    }
	 	DebugLocation(728, 32);
		} finally { DebugExitRule(GrammarFileName, "relativeOid_type"); }
		return retval;

	}
	// $ANTLR end "relativeOid_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sequence_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sequence_type() {}
	// $ANTLR start "sequence_type"
	// Smi.g:731:1: sequence_type : SEQUENCE_KW L_BRACE ( elementType_list )? R_BRACE ;
	[GrammarRule("sequence_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> sequence_type()
	{
		EnterRule_sequence_type();
		EnterRule("sequence_type", 35);
		TraceIn("sequence_type", 35);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SEQUENCE_KW166 = default(IToken);
	    IToken L_BRACE167 = default(IToken);
	    IToken R_BRACE169 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> elementType_list168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SEQUENCE_KW166_tree = default(CommonTree);
	    CommonTree L_BRACE167_tree = default(CommonTree);
	    CommonTree R_BRACE169_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "sequence_type");
		DebugLocation(731, 63);
		try
		{
			// Smi.g:731:14: ( SEQUENCE_KW L_BRACE ( elementType_list )? R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:731:16: SEQUENCE_KW L_BRACE ( elementType_list )? R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(731, 16);
			SEQUENCE_KW166=(IToken)Match(input,SEQUENCE_KW,Follow._SEQUENCE_KW_in_sequence_type3158); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEQUENCE_KW166_tree = (CommonTree)adaptor.Create(SEQUENCE_KW166);
			adaptor.AddChild(root_0, SEQUENCE_KW166_tree);
			}
			DebugLocation(731, 28);
			L_BRACE167=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequence_type3160); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE167_tree = (CommonTree)adaptor.Create(L_BRACE167);
			adaptor.AddChild(root_0, L_BRACE167_tree);
			}
			DebugLocation(731, 36);
			// Smi.g:731:36: ( elementType_list )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			int LA35_1 = input.LA(1);

			if ((LA35_1==COMPONENTS_KW||LA35_1==LOWER))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:731:37: elementType_list
				{
				DebugLocation(731, 37);
				PushFollow(Follow._elementType_list_in_sequence_type3163);
				elementType_list168=elementType_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementType_list168.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(731, 56);
			R_BRACE169=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequence_type3167); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE169_tree = (CommonTree)adaptor.Create(R_BRACE169);
			adaptor.AddChild(root_0, R_BRACE169_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequence_type", 35);
			LeaveRule("sequence_type", 35);
			LeaveRule_sequence_type();
	    }
	 	DebugLocation(731, 63);
		} finally { DebugExitRule(GrammarFileName, "sequence_type"); }
		return retval;

	}
	// $ANTLR end "sequence_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sequenceof_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sequenceof_type() {}
	// $ANTLR start "sequenceof_type"
	// Smi.g:733:1: sequenceof_type : SEQUENCE_KW ( SIZE_KW constraint )? OF_KW type ;
	[GrammarRule("sequenceof_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> sequenceof_type()
	{
		EnterRule_sequenceof_type();
		EnterRule("sequenceof_type", 36);
		TraceIn("sequenceof_type", 36);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SEQUENCE_KW170 = default(IToken);
	    IToken SIZE_KW171 = default(IToken);
	    IToken OF_KW173 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SEQUENCE_KW170_tree = default(CommonTree);
	    CommonTree SIZE_KW171_tree = default(CommonTree);
	    CommonTree OF_KW173_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "sequenceof_type");
		DebugLocation(733, 61);
		try
		{
			// Smi.g:733:16: ( SEQUENCE_KW ( SIZE_KW constraint )? OF_KW type )
			DebugEnterAlt(1);
			// Smi.g:733:18: SEQUENCE_KW ( SIZE_KW constraint )? OF_KW type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(733, 18);
			SEQUENCE_KW170=(IToken)Match(input,SEQUENCE_KW,Follow._SEQUENCE_KW_in_sequenceof_type3175); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEQUENCE_KW170_tree = (CommonTree)adaptor.Create(SEQUENCE_KW170);
			adaptor.AddChild(root_0, SEQUENCE_KW170_tree);
			}
			DebugLocation(733, 30);
			// Smi.g:733:30: ( SIZE_KW constraint )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_1 = input.LA(1);

			if ((LA36_1==SIZE_KW))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:733:31: SIZE_KW constraint
				{
				DebugLocation(733, 31);
				SIZE_KW171=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_sequenceof_type3178); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW171_tree = (CommonTree)adaptor.Create(SIZE_KW171);
				adaptor.AddChild(root_0, SIZE_KW171_tree);
				}
				DebugLocation(733, 39);
				PushFollow(Follow._constraint_in_sequenceof_type3180);
				constraint172=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint172.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(733, 52);
			OF_KW173=(IToken)Match(input,OF_KW,Follow._OF_KW_in_sequenceof_type3184); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OF_KW173_tree = (CommonTree)adaptor.Create(OF_KW173);
			adaptor.AddChild(root_0, OF_KW173_tree);
			}
			DebugLocation(733, 58);
			PushFollow(Follow._type_in_sequenceof_type3186);
			type174=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type174.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequenceof_type", 36);
			LeaveRule("sequenceof_type", 36);
			LeaveRule_sequenceof_type();
	    }
	 	DebugLocation(733, 61);
		} finally { DebugExitRule(GrammarFileName, "sequenceof_type"); }
		return retval;

	}
	// $ANTLR end "sequenceof_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_type() {}
	// $ANTLR start "set_type"
	// Smi.g:735:1: set_type : SET_KW L_BRACE ( elementType_list )? R_BRACE ;
	[GrammarRule("set_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> set_type()
	{
		EnterRule_set_type();
		EnterRule("set_type", 37);
		TraceIn("set_type", 37);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SET_KW175 = default(IToken);
	    IToken L_BRACE176 = default(IToken);
	    IToken R_BRACE178 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> elementType_list177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SET_KW175_tree = default(CommonTree);
	    CommonTree L_BRACE176_tree = default(CommonTree);
	    CommonTree R_BRACE178_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "set_type");
		DebugLocation(735, 52);
		try
		{
			// Smi.g:735:9: ( SET_KW L_BRACE ( elementType_list )? R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:735:11: SET_KW L_BRACE ( elementType_list )? R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(735, 11);
			SET_KW175=(IToken)Match(input,SET_KW,Follow._SET_KW_in_set_type3193); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SET_KW175_tree = (CommonTree)adaptor.Create(SET_KW175);
			adaptor.AddChild(root_0, SET_KW175_tree);
			}
			DebugLocation(735, 18);
			L_BRACE176=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_set_type3195); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE176_tree = (CommonTree)adaptor.Create(L_BRACE176);
			adaptor.AddChild(root_0, L_BRACE176_tree);
			}
			DebugLocation(735, 26);
			// Smi.g:735:26: ( elementType_list )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_1 = input.LA(1);

			if ((LA37_1==COMPONENTS_KW||LA37_1==LOWER))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:735:27: elementType_list
				{
				DebugLocation(735, 27);
				PushFollow(Follow._elementType_list_in_set_type3198);
				elementType_list177=elementType_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementType_list177.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(735, 46);
			R_BRACE178=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_set_type3202); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE178_tree = (CommonTree)adaptor.Create(R_BRACE178);
			adaptor.AddChild(root_0, R_BRACE178_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_type", 37);
			LeaveRule("set_type", 37);
			LeaveRule_set_type();
	    }
	 	DebugLocation(735, 52);
		} finally { DebugExitRule(GrammarFileName, "set_type"); }
		return retval;

	}
	// $ANTLR end "set_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_setof_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_setof_type() {}
	// $ANTLR start "setof_type"
	// Smi.g:737:1: setof_type : SET_KW ( SIZE_KW constraint )? OF_KW type ;
	[GrammarRule("setof_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> setof_type()
	{
		EnterRule_setof_type();
		EnterRule("setof_type", 38);
		TraceIn("setof_type", 38);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SET_KW179 = default(IToken);
	    IToken SIZE_KW180 = default(IToken);
	    IToken OF_KW182 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SET_KW179_tree = default(CommonTree);
	    CommonTree SIZE_KW180_tree = default(CommonTree);
	    CommonTree OF_KW182_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "setof_type");
		DebugLocation(737, 51);
		try
		{
			// Smi.g:737:11: ( SET_KW ( SIZE_KW constraint )? OF_KW type )
			DebugEnterAlt(1);
			// Smi.g:737:13: SET_KW ( SIZE_KW constraint )? OF_KW type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(737, 13);
			SET_KW179=(IToken)Match(input,SET_KW,Follow._SET_KW_in_setof_type3209); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SET_KW179_tree = (CommonTree)adaptor.Create(SET_KW179);
			adaptor.AddChild(root_0, SET_KW179_tree);
			}
			DebugLocation(737, 20);
			// Smi.g:737:20: ( SIZE_KW constraint )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_1 = input.LA(1);

			if ((LA38_1==SIZE_KW))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:737:21: SIZE_KW constraint
				{
				DebugLocation(737, 21);
				SIZE_KW180=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_setof_type3212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW180_tree = (CommonTree)adaptor.Create(SIZE_KW180);
				adaptor.AddChild(root_0, SIZE_KW180_tree);
				}
				DebugLocation(737, 29);
				PushFollow(Follow._constraint_in_setof_type3214);
				constraint181=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(737, 42);
			OF_KW182=(IToken)Match(input,OF_KW,Follow._OF_KW_in_setof_type3218); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OF_KW182_tree = (CommonTree)adaptor.Create(OF_KW182);
			adaptor.AddChild(root_0, OF_KW182_tree);
			}
			DebugLocation(737, 48);
			PushFollow(Follow._type_in_setof_type3220);
			type183=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type183.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setof_type", 38);
			LeaveRule("setof_type", 38);
			LeaveRule_setof_type();
	    }
	 	DebugLocation(737, 51);
		} finally { DebugExitRule(GrammarFileName, "setof_type"); }
		return retval;

	}
	// $ANTLR end "setof_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_tagged_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_tagged_type() {}
	// $ANTLR start "tagged_type"
	// Smi.g:739:1: tagged_type : tag ( tag_default )? type ;
	[GrammarRule("tagged_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagged_type()
	{
		EnterRule_tagged_type();
		EnterRule("tagged_type", 39);
		TraceIn("tagged_type", 39);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> tag184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> tag_default185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type186 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "tagged_type");
		DebugLocation(739, 36);
		try
		{
			// Smi.g:739:12: ( tag ( tag_default )? type )
			DebugEnterAlt(1);
			// Smi.g:739:14: tag ( tag_default )? type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(739, 14);
			PushFollow(Follow._tag_in_tagged_type3227);
			tag184=tag();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, tag184.Tree);
			DebugLocation(739, 18);
			// Smi.g:739:18: ( tag_default )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_1 = input.LA(1);

			if ((LA39_1==AUTOMATIC_KW||LA39_1==EXPLICIT_KW||LA39_1==IMPLICIT_KW))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:739:19: tag_default
				{
				DebugLocation(739, 19);
				PushFollow(Follow._tag_default_in_tagged_type3230);
				tag_default185=tag_default();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tag_default185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(739, 33);
			PushFollow(Follow._type_in_tagged_type3234);
			type186=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type186.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagged_type", 39);
			LeaveRule("tagged_type", 39);
			LeaveRule_tagged_type();
	    }
	 	DebugLocation(739, 36);
		} finally { DebugExitRule(GrammarFileName, "tagged_type"); }
		return retval;

	}
	// $ANTLR end "tagged_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namedNumber_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namedNumber_list() {}
	// $ANTLR start "namedNumber_list"
	// Smi.g:741:1: namedNumber_list : L_BRACE namedNumber ( COMMA namedNumber )* R_BRACE ;
	[GrammarRule("namedNumber_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> namedNumber_list()
	{
		EnterRule_namedNumber_list();
		EnterRule("namedNumber_list", 40);
		TraceIn("namedNumber_list", 40);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE187 = default(IToken);
	    IToken COMMA189 = default(IToken);
	    IToken R_BRACE191 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> namedNumber188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> namedNumber190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE187_tree = default(CommonTree);
	    CommonTree COMMA189_tree = default(CommonTree);
	    CommonTree R_BRACE191_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "namedNumber_list");
		DebugLocation(741, 66);
		try
		{
			// Smi.g:741:17: ( L_BRACE namedNumber ( COMMA namedNumber )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:741:19: L_BRACE namedNumber ( COMMA namedNumber )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(741, 19);
			L_BRACE187=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_namedNumber_list3241); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE187_tree = (CommonTree)adaptor.Create(L_BRACE187);
			adaptor.AddChild(root_0, L_BRACE187_tree);
			}
			DebugLocation(741, 27);
			PushFollow(Follow._namedNumber_in_namedNumber_list3243);
			namedNumber188=namedNumber();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namedNumber188.Tree);
			DebugLocation(741, 39);
			// Smi.g:741:39: ( COMMA namedNumber )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_1 = input.LA(1);

				if ((LA40_1==COMMA))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:741:40: COMMA namedNumber
					{
					DebugLocation(741, 40);
					COMMA189=(IToken)Match(input,COMMA,Follow._COMMA_in_namedNumber_list3246); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA189_tree = (CommonTree)adaptor.Create(COMMA189);
					adaptor.AddChild(root_0, COMMA189_tree);
					}
					DebugLocation(741, 46);
					PushFollow(Follow._namedNumber_in_namedNumber_list3248);
					namedNumber190=namedNumber();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, namedNumber190.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(741, 60);
			R_BRACE191=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_namedNumber_list3252); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE191_tree = (CommonTree)adaptor.Create(R_BRACE191);
			adaptor.AddChild(root_0, R_BRACE191_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namedNumber_list", 40);
			LeaveRule("namedNumber_list", 40);
			LeaveRule_namedNumber_list();
	    }
	 	DebugLocation(741, 66);
		} finally { DebugExitRule(GrammarFileName, "namedNumber_list"); }
		return retval;

	}
	// $ANTLR end "namedNumber_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constraint() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constraint() {}
	// $ANTLR start "constraint"
	// Smi.g:743:1: constraint : L_PAREN ( element_set_specs )? ( exception_spec )? R_PAREN ;
	[GrammarRule("constraint")]
	private AstParserRuleReturnScope<CommonTree, IToken> constraint()
	{
		EnterRule_constraint();
		EnterRule("constraint", 41);
		TraceIn("constraint", 41);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_PAREN192 = default(IToken);
	    IToken R_PAREN195 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> element_set_specs193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> exception_spec194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_PAREN192_tree = default(CommonTree);
	    CommonTree R_PAREN195_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "constraint");
		DebugLocation(743, 66);
		try
		{
			// Smi.g:743:11: ( L_PAREN ( element_set_specs )? ( exception_spec )? R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:743:13: L_PAREN ( element_set_specs )? ( exception_spec )? R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(743, 13);
			L_PAREN192=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_constraint3259); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN192_tree = (CommonTree)adaptor.Create(L_PAREN192);
			adaptor.AddChild(root_0, L_PAREN192_tree);
			}
			DebugLocation(743, 21);
			// Smi.g:743:21: ( element_set_specs )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_1 = input.LA(1);

			if (((LA41_1>=ALL_KW && LA41_1<=ANY_KW)||(LA41_1>=BIT_KW && LA41_1<=BOOLEAN_KW)||(LA41_1>=B_STRING && LA41_1<=CHARACTER_KW)||LA41_1==CHOICE_KW||LA41_1==C_STRING||LA41_1==EMBEDDED_KW||LA41_1==ENUMERATED_KW||LA41_1==ERROR_KW||(LA41_1>=EXTERNAL_KW && LA41_1<=GRAPHIC_STR_KW)||(LA41_1>=H_STRING && LA41_1<=IA5_STRING_KW)||LA41_1==INCLUDES_KW||LA41_1==INTEGER_KW||LA41_1==ISO646_STR_KW||(LA41_1>=LOWER && LA41_1<=L_PAREN)||(LA41_1>=MINUS && LA41_1<=NUMERIC_STR_KW)||(LA41_1>=OBJECT_KW && LA41_1<=OCTET_KW)||LA41_1==OPERATION_KW||LA41_1==PATTERN_KW||LA41_1==PLUS_INFINITY_KW||LA41_1==PRINTABLE_STR_KW||LA41_1==REAL_KW||(LA41_1>=SEQUENCE_KW && LA41_1<=SET_KW)||LA41_1==SIZE_KW||LA41_1==T61_STR_KW||(LA41_1>=TELETEX_STR_KW && LA41_1<=TRUE_KW)||(LA41_1>=UNIVERSAL_STR_KW && LA41_1<=WITH_KW)||LA41_1==131||LA41_1==137||(LA41_1>=158 && LA41_1<=161)||(LA41_1>=163 && LA41_1<=165)||LA41_1==179||LA41_1==188||LA41_1==191))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:743:22: element_set_specs
				{
				DebugLocation(743, 22);
				PushFollow(Follow._element_set_specs_in_constraint3262);
				element_set_specs193=element_set_specs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, element_set_specs193.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(743, 42);
			// Smi.g:743:42: ( exception_spec )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_1 = input.LA(1);

			if ((LA42_1==EXCLAMATION))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:743:43: exception_spec
				{
				DebugLocation(743, 43);
				PushFollow(Follow._exception_spec_in_constraint3267);
				exception_spec194=exception_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exception_spec194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(743, 60);
			R_PAREN195=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_constraint3271); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN195_tree = (CommonTree)adaptor.Create(R_PAREN195);
			adaptor.AddChild(root_0, R_PAREN195_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint", 41);
			LeaveRule("constraint", 41);
			LeaveRule_constraint();
	    }
	 	DebugLocation(743, 66);
		} finally { DebugExitRule(GrammarFileName, "constraint"); }
		return retval;

	}
	// $ANTLR end "constraint"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_character_set() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_character_set() {}
	// $ANTLR start "character_set"
	// Smi.g:745:1: character_set : ( BMP_STR_KW | GENERALIZED_TIME_KW | GENERAL_STR_KW | GRAPHIC_STR_KW | IA5_STRING_KW | ISO646_STR_KW | NUMERIC_STR_KW | PRINTABLE_STR_KW | TELETEX_STR_KW | T61_STR_KW | UNIVERSAL_STR_KW | UTF8_STR_KW | UTC_TIME_KW | VIDEOTEX_STR_KW | VISIBLE_STR_KW );
	[GrammarRule("character_set")]
	private AstParserRuleReturnScope<CommonTree, IToken> character_set()
	{
		EnterRule_character_set();
		EnterRule("character_set", 42);
		TraceIn("character_set", 42);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set196 = default(IToken);

	    CommonTree set196_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "character_set");
		DebugLocation(745, 61);
		try
		{
			// Smi.g:745:14: ( BMP_STR_KW | GENERALIZED_TIME_KW | GENERAL_STR_KW | GRAPHIC_STR_KW | IA5_STRING_KW | ISO646_STR_KW | NUMERIC_STR_KW | PRINTABLE_STR_KW | TELETEX_STR_KW | T61_STR_KW | UNIVERSAL_STR_KW | UTF8_STR_KW | UTC_TIME_KW | VIDEOTEX_STR_KW | VISIBLE_STR_KW )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(745, 14);

			set196=(IToken)input.LT(1);
			if (input.LA(1)==BMP_STR_KW||(input.LA(1)>=GENERALIZED_TIME_KW && input.LA(1)<=GRAPHIC_STR_KW)||input.LA(1)==IA5_STRING_KW||input.LA(1)==ISO646_STR_KW||input.LA(1)==NUMERIC_STR_KW||input.LA(1)==PRINTABLE_STR_KW||input.LA(1)==T61_STR_KW||input.LA(1)==TELETEX_STR_KW||input.LA(1)==UNIVERSAL_STR_KW||(input.LA(1)>=UTC_TIME_KW && input.LA(1)<=VISIBLE_STR_KW))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set196));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_set", 42);
			LeaveRule("character_set", 42);
			LeaveRule_character_set();
	    }
	 	DebugLocation(748, 61);
		} finally { DebugExitRule(GrammarFileName, "character_set"); }
		return retval;

	}
	// $ANTLR end "character_set"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementType_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementType_list() {}
	// $ANTLR start "elementType_list"
	// Smi.g:750:1: elementType_list : elementType ( COMMA elementType )* ;
	[GrammarRule("elementType_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> elementType_list()
	{
		EnterRule_elementType_list();
		EnterRule("elementType_list", 43);
		TraceIn("elementType_list", 43);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA198 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> elementType197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> elementType199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA198_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "elementType_list");
		DebugLocation(750, 51);
		try
		{
			// Smi.g:750:17: ( elementType ( COMMA elementType )* )
			DebugEnterAlt(1);
			// Smi.g:750:19: elementType ( COMMA elementType )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(750, 19);
			PushFollow(Follow._elementType_in_elementType_list3380);
			elementType197=elementType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementType197.Tree);
			DebugLocation(750, 31);
			// Smi.g:750:31: ( COMMA elementType )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_1 = input.LA(1);

				if ((LA43_1==COMMA))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:750:32: COMMA elementType
					{
					DebugLocation(750, 32);
					COMMA198=(IToken)Match(input,COMMA,Follow._COMMA_in_elementType_list3383); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA198_tree = (CommonTree)adaptor.Create(COMMA198);
					adaptor.AddChild(root_0, COMMA198_tree);
					}
					DebugLocation(750, 38);
					PushFollow(Follow._elementType_in_elementType_list3385);
					elementType199=elementType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementType199.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementType_list", 43);
			LeaveRule("elementType_list", 43);
			LeaveRule_elementType_list();
	    }
	 	DebugLocation(750, 51);
		} finally { DebugExitRule(GrammarFileName, "elementType_list"); }
		return retval;

	}
	// $ANTLR end "elementType_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_tag() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_tag() {}
	// $ANTLR start "tag"
	// Smi.g:752:1: tag : L_BRACKET ( clazz )? class_NUMBER R_BRACKET ;
	[GrammarRule("tag")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag()
	{
		EnterRule_tag();
		EnterRule("tag", 44);
		TraceIn("tag", 44);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACKET200 = default(IToken);
	    IToken R_BRACKET203 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> clazz201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> class_NUMBER202 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACKET200_tree = default(CommonTree);
	    CommonTree R_BRACKET203_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(752, 46);
		try
		{
			// Smi.g:752:4: ( L_BRACKET ( clazz )? class_NUMBER R_BRACKET )
			DebugEnterAlt(1);
			// Smi.g:752:6: L_BRACKET ( clazz )? class_NUMBER R_BRACKET
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(752, 6);
			L_BRACKET200=(IToken)Match(input,L_BRACKET,Follow._L_BRACKET_in_tag3395); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACKET200_tree = (CommonTree)adaptor.Create(L_BRACKET200);
			adaptor.AddChild(root_0, L_BRACKET200_tree);
			}
			DebugLocation(752, 16);
			// Smi.g:752:16: ( clazz )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			int LA44_1 = input.LA(1);

			if ((LA44_1==APPLICATION_KW||LA44_1==PRIVATE_KW||LA44_1==UNIVERSAL_KW))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:752:17: clazz
				{
				DebugLocation(752, 17);
				PushFollow(Follow._clazz_in_tag3398);
				clazz201=clazz();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, clazz201.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(752, 25);
			PushFollow(Follow._class_NUMBER_in_tag3402);
			class_NUMBER202=class_NUMBER();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_NUMBER202.Tree);
			DebugLocation(752, 38);
			R_BRACKET203=(IToken)Match(input,R_BRACKET,Follow._R_BRACKET_in_tag3404); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACKET203_tree = (CommonTree)adaptor.Create(R_BRACKET203);
			adaptor.AddChild(root_0, R_BRACKET203_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 44);
			LeaveRule("tag", 44);
			LeaveRule_tag();
	    }
	 	DebugLocation(752, 46);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_clazz() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_clazz() {}
	// $ANTLR start "clazz"
	// Smi.g:754:1: clazz : ( UNIVERSAL_KW | APPLICATION_KW | PRIVATE_KW );
	[GrammarRule("clazz")]
	private AstParserRuleReturnScope<CommonTree, IToken> clazz()
	{
		EnterRule_clazz();
		EnterRule("clazz", 45);
		TraceIn("clazz", 45);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set204 = default(IToken);

	    CommonTree set204_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "clazz");
		DebugLocation(754, 49);
		try
		{
			// Smi.g:754:6: ( UNIVERSAL_KW | APPLICATION_KW | PRIVATE_KW )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(754, 6);

			set204=(IToken)input.LT(1);
			if (input.LA(1)==APPLICATION_KW||input.LA(1)==PRIVATE_KW||input.LA(1)==UNIVERSAL_KW)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set204));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("clazz", 45);
			LeaveRule("clazz", 45);
			LeaveRule_clazz();
	    }
	 	DebugLocation(754, 49);
		} finally { DebugExitRule(GrammarFileName, "clazz"); }
		return retval;

	}
	// $ANTLR end "clazz"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_NUMBER() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_NUMBER() {}
	// $ANTLR start "class_NUMBER"
	// Smi.g:757:1: class_NUMBER : ( NUMBER | defined_value );
	[GrammarRule("class_NUMBER")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_NUMBER()
	{
		EnterRule_class_NUMBER();
		EnterRule("class_NUMBER", 46);
		TraceIn("class_NUMBER", 46);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken NUMBER205 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree NUMBER205_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "class_NUMBER");
		DebugLocation(757, 36);
		try
		{
			// Smi.g:757:13: ( NUMBER | defined_value )
			int alt45=2;
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_1 = input.LA(1);

			if ((LA45_1==NUMBER))
			{
				alt45 = 1;
			}
			else if ((LA45_1==LOWER||LA45_1==UPPER))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:757:15: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(757, 15);
				NUMBER205=(IToken)Match(input,NUMBER,Follow._NUMBER_in_class_NUMBER3428); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER205_tree = (CommonTree)adaptor.Create(NUMBER205);
				adaptor.AddChild(root_0, NUMBER205_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:757:24: defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(757, 24);
				PushFollow(Follow._defined_value_in_class_NUMBER3432);
				defined_value206=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value206.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_NUMBER", 46);
			LeaveRule("class_NUMBER", 46);
			LeaveRule_class_NUMBER();
	    }
	 	DebugLocation(757, 36);
		} finally { DebugExitRule(GrammarFileName, "class_NUMBER"); }
		return retval;

	}
	// $ANTLR end "class_NUMBER"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_operation_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_operation_macro() {}
	// $ANTLR start "operation_macro"
	// Smi.g:760:1: operation_macro : 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=> LOWER )? type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE ( operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE ( linkedOp_list )? R_BRACE )? ;
	[GrammarRule("operation_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> operation_macro()
	{
		EnterRule_operation_macro();
		EnterRule("operation_macro", 47);
		TraceIn("operation_macro", 47);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal207 = default(IToken);
	    IToken ARGUMENT_KW208 = default(IToken);
	    IToken LOWER209 = default(IToken);
	    IToken RESULT_KW211 = default(IToken);
	    IToken LOWER212 = default(IToken);
	    IToken ERRORS_KW214 = default(IToken);
	    IToken L_BRACE215 = default(IToken);
	    IToken R_BRACE217 = default(IToken);
	    IToken LINKED_KW218 = default(IToken);
	    IToken L_BRACE219 = default(IToken);
	    IToken R_BRACE221 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> type210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> operation_errorlist216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> linkedOp_list220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal207_tree = default(CommonTree);
	    CommonTree ARGUMENT_KW208_tree = default(CommonTree);
	    CommonTree LOWER209_tree = default(CommonTree);
	    CommonTree RESULT_KW211_tree = default(CommonTree);
	    CommonTree LOWER212_tree = default(CommonTree);
	    CommonTree ERRORS_KW214_tree = default(CommonTree);
	    CommonTree L_BRACE215_tree = default(CommonTree);
	    CommonTree R_BRACE217_tree = default(CommonTree);
	    CommonTree LINKED_KW218_tree = default(CommonTree);
	    CommonTree L_BRACE219_tree = default(CommonTree);
	    CommonTree R_BRACE221_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "operation_macro");
		DebugLocation(760, 83);
		try
		{
			// Smi.g:760:16: ( 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=> LOWER )? type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE ( operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE ( linkedOp_list )? R_BRACE )? )
			DebugEnterAlt(1);
			// Smi.g:760:18: 'OPERATION' ( ARGUMENT_KW ( ( LOWER )=> LOWER )? type )? ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )? )? ( ( ERRORS_KW )=> ERRORS_KW L_BRACE ( operation_errorlist )? R_BRACE )? ( ( LINKED_KW )=> LINKED_KW L_BRACE ( linkedOp_list )? R_BRACE )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(760, 18);
			string_literal207=(IToken)Match(input,OPERATION_KW,Follow._OPERATION_KW_in_operation_macro3441); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal207_tree = (CommonTree)adaptor.Create(string_literal207);
			adaptor.AddChild(root_0, string_literal207_tree);
			}
			DebugLocation(760, 30);
			// Smi.g:760:30: ( ARGUMENT_KW ( ( LOWER )=> LOWER )? type )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_1 = input.LA(1);

			if ((LA47_1==ARGUMENT_KW))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:760:31: ARGUMENT_KW ( ( LOWER )=> LOWER )? type
				{
				DebugLocation(760, 31);
				ARGUMENT_KW208=(IToken)Match(input,ARGUMENT_KW,Follow._ARGUMENT_KW_in_operation_macro3444); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ARGUMENT_KW208_tree = (CommonTree)adaptor.Create(ARGUMENT_KW208);
				adaptor.AddChild(root_0, ARGUMENT_KW208_tree);
				}
				DebugLocation(760, 43);
				// Smi.g:760:43: ( ( LOWER )=> LOWER )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_1 = input.LA(1);

				if ((LA46_1==LOWER))
				{
					int LA46_2 = input.LA(2);

					if ((LA46_2==ANY_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==BIT_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==BOOLEAN_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==CHARACTER_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==BMP_STR_KW||(LA46_2>=GENERALIZED_TIME_KW && LA46_2<=GRAPHIC_STR_KW)||LA46_2==IA5_STRING_KW||LA46_2==ISO646_STR_KW||LA46_2==NUMERIC_STR_KW||LA46_2==PRINTABLE_STR_KW||LA46_2==T61_STR_KW||LA46_2==TELETEX_STR_KW||LA46_2==UNIVERSAL_STR_KW||(LA46_2>=UTC_TIME_KW && LA46_2<=VISIBLE_STR_KW)) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==CHOICE_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==EMBEDDED_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==ENUMERATED_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==EXTERNAL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==INTEGER_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==NULL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==OBJECT_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==OCTET_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==REAL_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==179) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==SEQUENCE_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==SET_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==L_BRACKET) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==UPPER) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==LOWER) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==OPERATION_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==ERROR_KW) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==165) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==159) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==164) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==161) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==188) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==163) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==160) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==158) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==131) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==191) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
					else if ((LA46_2==137) && (EvaluatePredicate(synpred18_Smi_fragment)))
					{
						alt46 = 1;
					}
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:760:44: ( LOWER )=> LOWER
					{
					DebugLocation(760, 55);
					LOWER209=(IToken)Match(input,LOWER,Follow._LOWER_in_operation_macro3453); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOWER209_tree = (CommonTree)adaptor.Create(LOWER209);
					adaptor.AddChild(root_0, LOWER209_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(760, 63);
				PushFollow(Follow._type_in_operation_macro3457);
				type210=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type210.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(761, 21);
			// Smi.g:761:21: ( ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )? )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			int LA50_1 = input.LA(1);

			if ((LA50_1==RESULT_KW))
			{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_Smi_fragment)))
				{
					alt50 = 1;
				}
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:761:23: ( RESULT_KW )=> RESULT_KW ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )?
				{
				DebugLocation(761, 38);
				RESULT_KW211=(IToken)Match(input,RESULT_KW,Follow._RESULT_KW_in_operation_macro3491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RESULT_KW211_tree = (CommonTree)adaptor.Create(RESULT_KW211);
				adaptor.AddChild(root_0, RESULT_KW211_tree);
				}
				DebugLocation(762, 25);
				// Smi.g:762:25: ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, decisionCanBacktrack[49]);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:762:26: ( LOWER )=> ( ( LOWER )=> LOWER )? type
					{
					DebugLocation(762, 37);
					// Smi.g:762:37: ( ( LOWER )=> LOWER )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, decisionCanBacktrack[48]);
					int LA48_1 = input.LA(1);

					if ((LA48_1==LOWER))
					{
						int LA48_2 = input.LA(2);

						if ((LA48_2==ANY_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==BIT_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==BOOLEAN_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==CHARACTER_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==BMP_STR_KW||(LA48_2>=GENERALIZED_TIME_KW && LA48_2<=GRAPHIC_STR_KW)||LA48_2==IA5_STRING_KW||LA48_2==ISO646_STR_KW||LA48_2==NUMERIC_STR_KW||LA48_2==PRINTABLE_STR_KW||LA48_2==T61_STR_KW||LA48_2==TELETEX_STR_KW||LA48_2==UNIVERSAL_STR_KW||(LA48_2>=UTC_TIME_KW && LA48_2<=VISIBLE_STR_KW)) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==CHOICE_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==EMBEDDED_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==ENUMERATED_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==EXTERNAL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==INTEGER_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==NULL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==OBJECT_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==OCTET_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==REAL_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==179) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==SEQUENCE_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==SET_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==L_BRACKET) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==UPPER) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==LOWER) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==OPERATION_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==ERROR_KW) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==165) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==159) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==164) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==161) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==188) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==163) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==160) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==158) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==131) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==191) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
						else if ((LA48_2==137) && (EvaluatePredicate(synpred21_Smi_fragment)))
						{
							alt48 = 1;
						}
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:762:38: ( LOWER )=> LOWER
						{
						DebugLocation(762, 49);
						LOWER212=(IToken)Match(input,LOWER,Follow._LOWER_in_operation_macro3532); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LOWER212_tree = (CommonTree)adaptor.Create(LOWER212);
						adaptor.AddChild(root_0, LOWER212_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(762, 57);
					PushFollow(Follow._type_in_operation_macro3536);
					type213=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type213.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(764, 21);
			// Smi.g:764:21: ( ( ERRORS_KW )=> ERRORS_KW L_BRACE ( operation_errorlist )? R_BRACE )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ERRORS_KW))
			{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred22_Smi_fragment)))
				{
					alt52 = 1;
				}
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:764:23: ( ERRORS_KW )=> ERRORS_KW L_BRACE ( operation_errorlist )? R_BRACE
				{
				DebugLocation(764, 38);
				ERRORS_KW214=(IToken)Match(input,ERRORS_KW,Follow._ERRORS_KW_in_operation_macro3578); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ERRORS_KW214_tree = (CommonTree)adaptor.Create(ERRORS_KW214);
				adaptor.AddChild(root_0, ERRORS_KW214_tree);
				}
				DebugLocation(764, 48);
				L_BRACE215=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_operation_macro3580); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE215_tree = (CommonTree)adaptor.Create(L_BRACE215);
				adaptor.AddChild(root_0, L_BRACE215_tree);
				}
				DebugLocation(764, 56);
				// Smi.g:764:56: ( operation_errorlist )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_1 = input.LA(1);

				if ((LA51_1==ANY_KW||(LA51_1>=BIT_KW && LA51_1<=BOOLEAN_KW)||(LA51_1>=B_STRING && LA51_1<=CHARACTER_KW)||LA51_1==CHOICE_KW||LA51_1==C_STRING||LA51_1==EMBEDDED_KW||LA51_1==ENUMERATED_KW||LA51_1==ERROR_KW||(LA51_1>=EXTERNAL_KW && LA51_1<=FALSE_KW)||(LA51_1>=GENERALIZED_TIME_KW && LA51_1<=GRAPHIC_STR_KW)||(LA51_1>=H_STRING && LA51_1<=IA5_STRING_KW)||LA51_1==INTEGER_KW||LA51_1==ISO646_STR_KW||(LA51_1>=LOWER && LA51_1<=L_BRACKET)||(LA51_1>=MINUS && LA51_1<=MINUS_INFINITY_KW)||(LA51_1>=NULL_KW && LA51_1<=NUMERIC_STR_KW)||(LA51_1>=OBJECT_KW && LA51_1<=OCTET_KW)||LA51_1==OPERATION_KW||LA51_1==PLUS_INFINITY_KW||LA51_1==PRINTABLE_STR_KW||LA51_1==REAL_KW||(LA51_1>=SEQUENCE_KW && LA51_1<=SET_KW)||LA51_1==T61_STR_KW||(LA51_1>=TELETEX_STR_KW && LA51_1<=TRUE_KW)||(LA51_1>=UNIVERSAL_STR_KW && LA51_1<=VISIBLE_STR_KW)||LA51_1==131||LA51_1==137||(LA51_1>=158 && LA51_1<=161)||(LA51_1>=163 && LA51_1<=165)||LA51_1==179||LA51_1==188||LA51_1==191))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:764:57: operation_errorlist
					{
					DebugLocation(764, 57);
					PushFollow(Follow._operation_errorlist_in_operation_macro3583);
					operation_errorlist216=operation_errorlist();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operation_errorlist216.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }

				DebugLocation(764, 79);
				R_BRACE217=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_operation_macro3587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE217_tree = (CommonTree)adaptor.Create(R_BRACE217);
				adaptor.AddChild(root_0, R_BRACE217_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(765, 21);
			// Smi.g:765:21: ( ( LINKED_KW )=> LINKED_KW L_BRACE ( linkedOp_list )? R_BRACE )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_1 = input.LA(1);

			if ((LA54_1==LINKED_KW))
			{
				int LA54_2 = input.LA(2);

				if ((EvaluatePredicate(synpred23_Smi_fragment)))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:765:23: ( LINKED_KW )=> LINKED_KW L_BRACE ( linkedOp_list )? R_BRACE
				{
				DebugLocation(765, 38);
				LINKED_KW218=(IToken)Match(input,LINKED_KW,Follow._LINKED_KW_in_operation_macro3621); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LINKED_KW218_tree = (CommonTree)adaptor.Create(LINKED_KW218);
				adaptor.AddChild(root_0, LINKED_KW218_tree);
				}
				DebugLocation(765, 48);
				L_BRACE219=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_operation_macro3623); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE219_tree = (CommonTree)adaptor.Create(L_BRACE219);
				adaptor.AddChild(root_0, L_BRACE219_tree);
				}
				DebugLocation(765, 56);
				// Smi.g:765:56: ( linkedOp_list )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ANY_KW||(LA53_1>=BIT_KW && LA53_1<=BOOLEAN_KW)||(LA53_1>=B_STRING && LA53_1<=CHARACTER_KW)||LA53_1==CHOICE_KW||LA53_1==C_STRING||LA53_1==EMBEDDED_KW||LA53_1==ENUMERATED_KW||LA53_1==ERROR_KW||(LA53_1>=EXTERNAL_KW && LA53_1<=FALSE_KW)||(LA53_1>=GENERALIZED_TIME_KW && LA53_1<=GRAPHIC_STR_KW)||(LA53_1>=H_STRING && LA53_1<=IA5_STRING_KW)||LA53_1==INTEGER_KW||LA53_1==ISO646_STR_KW||(LA53_1>=LOWER && LA53_1<=L_BRACKET)||(LA53_1>=MINUS && LA53_1<=MINUS_INFINITY_KW)||(LA53_1>=NULL_KW && LA53_1<=NUMERIC_STR_KW)||(LA53_1>=OBJECT_KW && LA53_1<=OCTET_KW)||LA53_1==OPERATION_KW||LA53_1==PLUS_INFINITY_KW||LA53_1==PRINTABLE_STR_KW||LA53_1==REAL_KW||(LA53_1>=SEQUENCE_KW && LA53_1<=SET_KW)||LA53_1==T61_STR_KW||(LA53_1>=TELETEX_STR_KW && LA53_1<=TRUE_KW)||(LA53_1>=UNIVERSAL_STR_KW && LA53_1<=VISIBLE_STR_KW)||LA53_1==131||LA53_1==137||(LA53_1>=158 && LA53_1<=161)||(LA53_1>=163 && LA53_1<=165)||LA53_1==179||LA53_1==188||LA53_1==191))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:765:57: linkedOp_list
					{
					DebugLocation(765, 57);
					PushFollow(Follow._linkedOp_list_in_operation_macro3626);
					linkedOp_list220=linkedOp_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, linkedOp_list220.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(765, 73);
				R_BRACE221=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_operation_macro3630); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE221_tree = (CommonTree)adaptor.Create(R_BRACE221);
				adaptor.AddChild(root_0, R_BRACE221_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation_macro", 47);
			LeaveRule("operation_macro", 47);
			LeaveRule_operation_macro();
	    }
	 	DebugLocation(765, 83);
		} finally { DebugExitRule(GrammarFileName, "operation_macro"); }
		return retval;

	}
	// $ANTLR end "operation_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_error_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_error_macro() {}
	// $ANTLR start "error_macro"
	// Smi.g:775:1: error_macro : ERROR_KW ( PARAMETER_KW ( ( LOWER )=> LOWER )? type )? ;
	[GrammarRule("error_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> error_macro()
	{
		EnterRule_error_macro();
		EnterRule("error_macro", 48);
		TraceIn("error_macro", 48);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken ERROR_KW222 = default(IToken);
	    IToken PARAMETER_KW223 = default(IToken);
	    IToken LOWER224 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> type225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree ERROR_KW222_tree = default(CommonTree);
	    CommonTree PARAMETER_KW223_tree = default(CommonTree);
	    CommonTree LOWER224_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "error_macro");
		DebugLocation(775, 65);
		try
		{
			// Smi.g:775:12: ( ERROR_KW ( PARAMETER_KW ( ( LOWER )=> LOWER )? type )? )
			DebugEnterAlt(1);
			// Smi.g:775:14: ERROR_KW ( PARAMETER_KW ( ( LOWER )=> LOWER )? type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(775, 14);
			ERROR_KW222=(IToken)Match(input,ERROR_KW,Follow._ERROR_KW_in_error_macro3650); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ERROR_KW222_tree = (CommonTree)adaptor.Create(ERROR_KW222);
			adaptor.AddChild(root_0, ERROR_KW222_tree);
			}
			DebugLocation(775, 23);
			// Smi.g:775:23: ( PARAMETER_KW ( ( LOWER )=> LOWER )? type )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_1 = input.LA(1);

			if ((LA56_1==PARAMETER_KW))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:775:25: PARAMETER_KW ( ( LOWER )=> LOWER )? type
				{
				DebugLocation(775, 25);
				PARAMETER_KW223=(IToken)Match(input,PARAMETER_KW,Follow._PARAMETER_KW_in_error_macro3654); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PARAMETER_KW223_tree = (CommonTree)adaptor.Create(PARAMETER_KW223);
				adaptor.AddChild(root_0, PARAMETER_KW223_tree);
				}
				DebugLocation(775, 38);
				// Smi.g:775:38: ( ( LOWER )=> LOWER )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_1 = input.LA(1);

				if ((LA55_1==LOWER))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==ANY_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==BIT_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==BOOLEAN_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==CHARACTER_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==BMP_STR_KW||(LA55_2>=GENERALIZED_TIME_KW && LA55_2<=GRAPHIC_STR_KW)||LA55_2==IA5_STRING_KW||LA55_2==ISO646_STR_KW||LA55_2==NUMERIC_STR_KW||LA55_2==PRINTABLE_STR_KW||LA55_2==T61_STR_KW||LA55_2==TELETEX_STR_KW||LA55_2==UNIVERSAL_STR_KW||(LA55_2>=UTC_TIME_KW && LA55_2<=VISIBLE_STR_KW)) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==CHOICE_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==EMBEDDED_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==ENUMERATED_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==EXTERNAL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==INTEGER_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==NULL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==OBJECT_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==OCTET_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==REAL_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==179) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==SEQUENCE_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==SET_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==L_BRACKET) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==UPPER) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==LOWER) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==OPERATION_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==ERROR_KW) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==165) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==159) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==164) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==161) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==188) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==163) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==160) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==158) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==131) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==191) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
					else if ((LA55_2==137) && (EvaluatePredicate(synpred24_Smi_fragment)))
					{
						alt55 = 1;
					}
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:775:39: ( LOWER )=> LOWER
					{
					DebugLocation(775, 50);
					LOWER224=(IToken)Match(input,LOWER,Follow._LOWER_in_error_macro3663); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOWER224_tree = (CommonTree)adaptor.Create(LOWER224);
					adaptor.AddChild(root_0, LOWER224_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(775, 58);
				PushFollow(Follow._type_in_error_macro3667);
				type225=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("error_macro", 48);
			LeaveRule("error_macro", 48);
			LeaveRule_error_macro();
	    }
	 	DebugLocation(775, 65);
		} finally { DebugExitRule(GrammarFileName, "error_macro"); }
		return retval;

	}
	// $ANTLR end "error_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_macros_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_macros_type() {}
	// $ANTLR start "macros_type"
	// Smi.g:782:1: macros_type : ( operation_macro | error_macro | objecttype_macro | moduleidentity_macro | objectidentity_macro | notificationtype_macro | textualconvention_macro | objectgroup_macro | notificationgroup_macro | modulecompliance_macro | agentcapabilities_macro | traptype_macro );
	[GrammarRule("macros_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> macros_type()
	{
		EnterRule_macros_type();
		EnterRule("macros_type", 49);
		TraceIn("macros_type", 49);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> operation_macro226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> error_macro227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objectidentity_macro230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> notificationtype_macro231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objectgroup_macro233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> notificationgroup_macro234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> traptype_macro237 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "macros_type");
		DebugLocation(782, 53);
		try
		{
			// Smi.g:782:12: ( operation_macro | error_macro | objecttype_macro | moduleidentity_macro | objectidentity_macro | notificationtype_macro | textualconvention_macro | objectgroup_macro | notificationgroup_macro | modulecompliance_macro | agentcapabilities_macro | traptype_macro )
			int alt57=12;
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			switch (input.LA(1))
			{
			case OPERATION_KW:
				{
				alt57 = 1;
				}
				break;
			case ERROR_KW:
				{
				alt57 = 2;
				}
				break;
			case 165:
				{
				alt57 = 3;
				}
				break;
			case 159:
				{
				alt57 = 4;
				}
				break;
			case 164:
				{
				alt57 = 5;
				}
				break;
			case 161:
				{
				alt57 = 6;
				}
				break;
			case 188:
				{
				alt57 = 7;
				}
				break;
			case 163:
				{
				alt57 = 8;
				}
				break;
			case 160:
				{
				alt57 = 9;
				}
				break;
			case 158:
				{
				alt57 = 10;
				}
				break;
			case 131:
				{
				alt57 = 11;
				}
				break;
			case 191:
				{
				alt57 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:782:14: operation_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(782, 14);
				PushFollow(Follow._operation_macro_in_macros_type3685);
				operation_macro226=operation_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, operation_macro226.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:782:32: error_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(782, 32);
				PushFollow(Follow._error_macro_in_macros_type3689);
				error_macro227=error_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, error_macro227.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:782:46: objecttype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(782, 46);
				PushFollow(Follow._objecttype_macro_in_macros_type3693);
				objecttype_macro228=objecttype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro228.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:782:65: moduleidentity_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(782, 65);
				PushFollow(Follow._moduleidentity_macro_in_macros_type3697);
				moduleidentity_macro229=moduleidentity_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, moduleidentity_macro229.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:783:14: objectidentity_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(783, 14);
				PushFollow(Follow._objectidentity_macro_in_macros_type3713);
				objectidentity_macro230=objectidentity_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectidentity_macro230.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:783:37: notificationtype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(783, 37);
				PushFollow(Follow._notificationtype_macro_in_macros_type3717);
				notificationtype_macro231=notificationtype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, notificationtype_macro231.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:783:62: textualconvention_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(783, 62);
				PushFollow(Follow._textualconvention_macro_in_macros_type3721);
				textualconvention_macro232=textualconvention_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, textualconvention_macro232.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:784:14: objectgroup_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(784, 14);
				PushFollow(Follow._objectgroup_macro_in_macros_type3737);
				objectgroup_macro233=objectgroup_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectgroup_macro233.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Smi.g:784:34: notificationgroup_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(784, 34);
				PushFollow(Follow._notificationgroup_macro_in_macros_type3741);
				notificationgroup_macro234=notificationgroup_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, notificationgroup_macro234.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Smi.g:784:60: modulecompliance_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(784, 60);
				PushFollow(Follow._modulecompliance_macro_in_macros_type3745);
				modulecompliance_macro235=modulecompliance_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro235.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Smi.g:785:14: agentcapabilities_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(785, 14);
				PushFollow(Follow._agentcapabilities_macro_in_macros_type3761);
				agentcapabilities_macro236=agentcapabilities_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro236.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Smi.g:785:40: traptype_macro
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(785, 40);
				PushFollow(Follow._traptype_macro_in_macros_type3765);
				traptype_macro237=traptype_macro();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, traptype_macro237.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("macros_type", 49);
			LeaveRule("macros_type", 49);
			LeaveRule_macros_type();
	    }
	 	DebugLocation(785, 53);
		} finally { DebugExitRule(GrammarFileName, "macros_type"); }
		return retval;

	}
	// $ANTLR end "macros_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_smi_macros() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_smi_macros() {}
	// $ANTLR start "smi_macros"
	// Smi.g:787:1: smi_macros : ( 'OBJECT-TYPE' | 'MODULE-IDENTITY' | 'OBJECT-IDENTITY' | 'NOTIFICATION-TYPE' | 'TEXTUAL-CONVENTION' | 'OBJECT-GROUP' | 'NOTIFICATION-GROUP' | 'MODULE-COMPLIANCE' | 'AGENT-CAPABILITIES' | 'TRAP-TYPE' );
	[GrammarRule("smi_macros")]
	private AstParserRuleReturnScope<CommonTree, IToken> smi_macros()
	{
		EnterRule_smi_macros();
		EnterRule("smi_macros", 50);
		TraceIn("smi_macros", 50);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set238 = default(IToken);

	    CommonTree set238_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "smi_macros");
		DebugLocation(787, 45);
		try
		{
			// Smi.g:787:11: ( 'OBJECT-TYPE' | 'MODULE-IDENTITY' | 'OBJECT-IDENTITY' | 'NOTIFICATION-TYPE' | 'TEXTUAL-CONVENTION' | 'OBJECT-GROUP' | 'NOTIFICATION-GROUP' | 'MODULE-COMPLIANCE' | 'AGENT-CAPABILITIES' | 'TRAP-TYPE' )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(787, 11);

			set238=(IToken)input.LT(1);
			if (input.LA(1)==131||(input.LA(1)>=158 && input.LA(1)<=161)||(input.LA(1)>=163 && input.LA(1)<=165)||input.LA(1)==188||input.LA(1)==191)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set238));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_macros", 50);
			LeaveRule("smi_macros", 50);
			LeaveRule_smi_macros();
	    }
	 	DebugLocation(789, 45);
		} finally { DebugExitRule(GrammarFileName, "smi_macros"); }
		return retval;

	}
	// $ANTLR end "smi_macros"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_smi_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_smi_type() {}
	// $ANTLR start "smi_type"
	// Smi.g:793:1: smi_type : ( 'BITS' | INTEGER_KW | OCTET_KW STRING_KW | OBJECT_KW IDENTIFIER_KW | UPPER );
	[GrammarRule("smi_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> smi_type()
	{
		EnterRule_smi_type();
		EnterRule("smi_type", 51);
		TraceIn("smi_type", 51);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal239 = default(IToken);
	    IToken INTEGER_KW240 = default(IToken);
	    IToken OCTET_KW241 = default(IToken);
	    IToken STRING_KW242 = default(IToken);
	    IToken OBJECT_KW243 = default(IToken);
	    IToken IDENTIFIER_KW244 = default(IToken);
	    IToken UPPER245 = default(IToken);

	    CommonTree string_literal239_tree = default(CommonTree);
	    CommonTree INTEGER_KW240_tree = default(CommonTree);
	    CommonTree OCTET_KW241_tree = default(CommonTree);
	    CommonTree STRING_KW242_tree = default(CommonTree);
	    CommonTree OBJECT_KW243_tree = default(CommonTree);
	    CommonTree IDENTIFIER_KW244_tree = default(CommonTree);
	    CommonTree UPPER245_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "smi_type");
		DebugLocation(793, 84);
		try
		{
			// Smi.g:793:9: ( 'BITS' | INTEGER_KW | OCTET_KW STRING_KW | OBJECT_KW IDENTIFIER_KW | UPPER )
			int alt58=5;
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			switch (input.LA(1))
			{
			case 137:
				{
				alt58 = 1;
				}
				break;
			case INTEGER_KW:
				{
				alt58 = 2;
				}
				break;
			case OCTET_KW:
				{
				alt58 = 3;
				}
				break;
			case OBJECT_KW:
				{
				alt58 = 4;
				}
				break;
			case UPPER:
				{
				alt58 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:793:11: 'BITS'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 11);
				string_literal239=(IToken)Match(input,137,Follow._137_in_smi_type3839); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal239_tree = (CommonTree)adaptor.Create(string_literal239);
				adaptor.AddChild(root_0, string_literal239_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:793:20: INTEGER_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 20);
				INTEGER_KW240=(IToken)Match(input,INTEGER_KW,Follow._INTEGER_KW_in_smi_type3843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INTEGER_KW240_tree = (CommonTree)adaptor.Create(INTEGER_KW240);
				adaptor.AddChild(root_0, INTEGER_KW240_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:793:33: OCTET_KW STRING_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 33);
				OCTET_KW241=(IToken)Match(input,OCTET_KW,Follow._OCTET_KW_in_smi_type3847); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OCTET_KW241_tree = (CommonTree)adaptor.Create(OCTET_KW241);
				adaptor.AddChild(root_0, OCTET_KW241_tree);
				}
				DebugLocation(793, 42);
				STRING_KW242=(IToken)Match(input,STRING_KW,Follow._STRING_KW_in_smi_type3849); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_KW242_tree = (CommonTree)adaptor.Create(STRING_KW242);
				adaptor.AddChild(root_0, STRING_KW242_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:793:54: OBJECT_KW IDENTIFIER_KW
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 54);
				OBJECT_KW243=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_smi_type3853); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OBJECT_KW243_tree = (CommonTree)adaptor.Create(OBJECT_KW243);
				adaptor.AddChild(root_0, OBJECT_KW243_tree);
				}
				DebugLocation(793, 64);
				IDENTIFIER_KW244=(IToken)Match(input,IDENTIFIER_KW,Follow._IDENTIFIER_KW_in_smi_type3855); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER_KW244_tree = (CommonTree)adaptor.Create(IDENTIFIER_KW244);
				adaptor.AddChild(root_0, IDENTIFIER_KW244_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:793:80: UPPER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 80);
				UPPER245=(IToken)Match(input,UPPER,Follow._UPPER_in_smi_type3859); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER245_tree = (CommonTree)adaptor.Create(UPPER245);
				adaptor.AddChild(root_0, UPPER245_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_type", 51);
			LeaveRule("smi_type", 51);
			LeaveRule_smi_type();
	    }
	 	DebugLocation(793, 84);
		} finally { DebugExitRule(GrammarFileName, "smi_type"); }
		return retval;

	}
	// $ANTLR end "smi_type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_smi_subtyping() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_smi_subtyping() {}
	// $ANTLR start "smi_subtyping"
	// Smi.g:799:1: smi_subtyping : ( L_PAREN subtype_range ( BAR subtype_range )* R_PAREN | L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN );
	[GrammarRule("smi_subtyping")]
	private AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping()
	{
		EnterRule_smi_subtyping();
		EnterRule("smi_subtyping", 52);
		TraceIn("smi_subtyping", 52);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_PAREN246 = default(IToken);
	    IToken BAR248 = default(IToken);
	    IToken R_PAREN250 = default(IToken);
	    IToken L_PAREN251 = default(IToken);
	    IToken string_literal252 = default(IToken);
	    IToken L_PAREN253 = default(IToken);
	    IToken BAR255 = default(IToken);
	    IToken R_PAREN257 = default(IToken);
	    IToken R_PAREN258 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_range247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_range249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_range254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_range256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_PAREN246_tree = default(CommonTree);
	    CommonTree BAR248_tree = default(CommonTree);
	    CommonTree R_PAREN250_tree = default(CommonTree);
	    CommonTree L_PAREN251_tree = default(CommonTree);
	    CommonTree string_literal252_tree = default(CommonTree);
	    CommonTree L_PAREN253_tree = default(CommonTree);
	    CommonTree BAR255_tree = default(CommonTree);
	    CommonTree R_PAREN257_tree = default(CommonTree);
	    CommonTree R_PAREN258_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "smi_subtyping");
		DebugLocation(799, 88);
		try
		{
			// Smi.g:799:14: ( L_PAREN subtype_range ( BAR subtype_range )* R_PAREN | L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN )
			int alt61=2;
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_1 = input.LA(1);

			if ((LA61_1==L_PAREN))
			{
				int LA61_2 = input.LA(2);

				if ((LA61_2==SIZE_KW))
				{
					alt61 = 2;
				}
				else if ((LA61_2==B_STRING||LA61_2==H_STRING||LA61_2==MINUS||LA61_2==NUMBER))
				{
					alt61 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:799:16: L_PAREN subtype_range ( BAR subtype_range )* R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(799, 16);
				L_PAREN246=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping3873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN246_tree = (CommonTree)adaptor.Create(L_PAREN246);
				adaptor.AddChild(root_0, L_PAREN246_tree);
				}
				DebugLocation(799, 24);
				PushFollow(Follow._subtype_range_in_smi_subtyping3875);
				subtype_range247=subtype_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range247.Tree);
				DebugLocation(799, 38);
				// Smi.g:799:38: ( BAR subtype_range )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, decisionCanBacktrack[59]);
					int LA59_1 = input.LA(1);

					if ((LA59_1==BAR))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:799:39: BAR subtype_range
						{
						DebugLocation(799, 39);
						BAR248=(IToken)Match(input,BAR,Follow._BAR_in_smi_subtyping3878); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BAR248_tree = (CommonTree)adaptor.Create(BAR248);
						adaptor.AddChild(root_0, BAR248_tree);
						}
						DebugLocation(799, 43);
						PushFollow(Follow._subtype_range_in_smi_subtyping3880);
						subtype_range249=subtype_range();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range249.Tree);

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }

				DebugLocation(799, 59);
				R_PAREN250=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping3884); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN250_tree = (CommonTree)adaptor.Create(R_PAREN250);
				adaptor.AddChild(root_0, R_PAREN250_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:800:16: L_PAREN 'SIZE' L_PAREN subtype_range ( BAR subtype_range )* R_PAREN R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(800, 16);
				L_PAREN251=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping3901); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN251_tree = (CommonTree)adaptor.Create(L_PAREN251);
				adaptor.AddChild(root_0, L_PAREN251_tree);
				}
				DebugLocation(800, 24);
				string_literal252=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_smi_subtyping3903); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal252_tree = (CommonTree)adaptor.Create(string_literal252);
				adaptor.AddChild(root_0, string_literal252_tree);
				}
				DebugLocation(800, 31);
				L_PAREN253=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_smi_subtyping3905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN253_tree = (CommonTree)adaptor.Create(L_PAREN253);
				adaptor.AddChild(root_0, L_PAREN253_tree);
				}
				DebugLocation(800, 39);
				PushFollow(Follow._subtype_range_in_smi_subtyping3907);
				subtype_range254=subtype_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range254.Tree);
				DebugLocation(800, 53);
				// Smi.g:800:53: ( BAR subtype_range )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, decisionCanBacktrack[60]);
					int LA60_1 = input.LA(1);

					if ((LA60_1==BAR))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:800:54: BAR subtype_range
						{
						DebugLocation(800, 54);
						BAR255=(IToken)Match(input,BAR,Follow._BAR_in_smi_subtyping3910); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BAR255_tree = (CommonTree)adaptor.Create(BAR255);
						adaptor.AddChild(root_0, BAR255_tree);
						}
						DebugLocation(800, 58);
						PushFollow(Follow._subtype_range_in_smi_subtyping3912);
						subtype_range256=subtype_range();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_range256.Tree);

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }

				DebugLocation(800, 74);
				R_PAREN257=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping3916); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN257_tree = (CommonTree)adaptor.Create(R_PAREN257);
				adaptor.AddChild(root_0, R_PAREN257_tree);
				}
				DebugLocation(800, 82);
				R_PAREN258=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_smi_subtyping3918); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN258_tree = (CommonTree)adaptor.Create(R_PAREN258);
				adaptor.AddChild(root_0, R_PAREN258_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("smi_subtyping", 52);
			LeaveRule("smi_subtyping", 52);
			LeaveRule_smi_subtyping();
	    }
	 	DebugLocation(800, 88);
		} finally { DebugExitRule(GrammarFileName, "smi_subtyping"); }
		return retval;

	}
	// $ANTLR end "smi_subtyping"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subtype_range() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subtype_range() {}
	// $ANTLR start "subtype_range"
	// Smi.g:801:1: subtype_range : subtype_value ( DOTDOT subtype_value )? ;
	[GrammarRule("subtype_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> subtype_range()
	{
		EnterRule_subtype_range();
		EnterRule("subtype_range", 53);
		TraceIn("subtype_range", 53);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken DOTDOT260 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_value259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> subtype_value261 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree DOTDOT260_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "subtype_range");
		DebugLocation(801, 53);
		try
		{
			// Smi.g:801:14: ( subtype_value ( DOTDOT subtype_value )? )
			DebugEnterAlt(1);
			// Smi.g:801:16: subtype_value ( DOTDOT subtype_value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(801, 16);
			PushFollow(Follow._subtype_value_in_subtype_range3924);
			subtype_value259=subtype_value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_value259.Tree);
			DebugLocation(801, 30);
			// Smi.g:801:30: ( DOTDOT subtype_value )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, decisionCanBacktrack[62]);
			int LA62_1 = input.LA(1);

			if ((LA62_1==DOTDOT))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:801:31: DOTDOT subtype_value
				{
				DebugLocation(801, 31);
				DOTDOT260=(IToken)Match(input,DOTDOT,Follow._DOTDOT_in_subtype_range3927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTDOT260_tree = (CommonTree)adaptor.Create(DOTDOT260);
				adaptor.AddChild(root_0, DOTDOT260_tree);
				}
				DebugLocation(801, 38);
				PushFollow(Follow._subtype_value_in_subtype_range3929);
				subtype_value261=subtype_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subtype_value261.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subtype_range", 53);
			LeaveRule("subtype_range", 53);
			LeaveRule_subtype_range();
	    }
	 	DebugLocation(801, 53);
		} finally { DebugExitRule(GrammarFileName, "subtype_range"); }
		return retval;

	}
	// $ANTLR end "subtype_range"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subtype_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subtype_value() {}
	// $ANTLR start "subtype_value"
	// Smi.g:802:1: subtype_value : ( ( MINUS )? NUMBER | B_STRING | H_STRING );
	[GrammarRule("subtype_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> subtype_value()
	{
		EnterRule_subtype_value();
		EnterRule("subtype_value", 54);
		TraceIn("subtype_value", 54);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken MINUS262 = default(IToken);
	    IToken NUMBER263 = default(IToken);
	    IToken B_STRING264 = default(IToken);
	    IToken H_STRING265 = default(IToken);

	    CommonTree MINUS262_tree = default(CommonTree);
	    CommonTree NUMBER263_tree = default(CommonTree);
	    CommonTree B_STRING264_tree = default(CommonTree);
	    CommonTree H_STRING265_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "subtype_value");
		DebugLocation(802, 52);
		try
		{
			// Smi.g:802:14: ( ( MINUS )? NUMBER | B_STRING | H_STRING )
			int alt64=3;
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			switch (input.LA(1))
			{
			case MINUS:
			case NUMBER:
				{
				alt64 = 1;
				}
				break;
			case B_STRING:
				{
				alt64 = 2;
				}
				break;
			case H_STRING:
				{
				alt64 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:802:16: ( MINUS )? NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(802, 16);
				// Smi.g:802:16: ( MINUS )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, decisionCanBacktrack[63]);
				int LA63_1 = input.LA(1);

				if ((LA63_1==MINUS))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:802:17: MINUS
					{
					DebugLocation(802, 17);
					MINUS262=(IToken)Match(input,MINUS,Follow._MINUS_in_subtype_value3939); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS262_tree = (CommonTree)adaptor.Create(MINUS262);
					adaptor.AddChild(root_0, MINUS262_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(63); }

				DebugLocation(802, 25);
				NUMBER263=(IToken)Match(input,NUMBER,Follow._NUMBER_in_subtype_value3943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER263_tree = (CommonTree)adaptor.Create(NUMBER263);
				adaptor.AddChild(root_0, NUMBER263_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:802:34: B_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(802, 34);
				B_STRING264=(IToken)Match(input,B_STRING,Follow._B_STRING_in_subtype_value3947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				B_STRING264_tree = (CommonTree)adaptor.Create(B_STRING264);
				adaptor.AddChild(root_0, B_STRING264_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:802:45: H_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(802, 45);
				H_STRING265=(IToken)Match(input,H_STRING,Follow._H_STRING_in_subtype_value3951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				H_STRING265_tree = (CommonTree)adaptor.Create(H_STRING265);
				adaptor.AddChild(root_0, H_STRING265_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subtype_value", 54);
			LeaveRule("subtype_value", 54);
			LeaveRule_subtype_value();
	    }
	 	DebugLocation(802, 52);
		} finally { DebugExitRule(GrammarFileName, "subtype_value"); }
		return retval;

	}
	// $ANTLR end "subtype_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro() {}
	// $ANTLR start "objecttype_macro"
	// Smi.g:805:1: objecttype_macro : 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type objecttype_macro_namedbits | ( smi_type )=> smi_type ( smi_subtyping )? | type ) ( 'UNITS' C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) objecttype_macro_accesstypes | 'PIB-ACCESS' objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE value R_BRACE )? ( 'PIB-TAG' L_BRACE value R_BRACE )? 'STATUS' objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' C_STRING )? ( 'INSTALL-ERRORS' L_BRACE objecttype_macro_error ( COMMA objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index | 'AUGMENTS' objecttype_macro_augments | 'PIB-INDEX' L_BRACE value R_BRACE | 'EXTENDS' L_BRACE value R_BRACE )? ( 'INDEX' objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE ( value ( COMMA value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value ) R_BRACE )? ;
	[GrammarRule("objecttype_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro()
	{
		EnterRule_objecttype_macro();
		EnterRule("objecttype_macro", 55);
		TraceIn("objecttype_macro", 55);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal266 = default(IToken);
	    IToken string_literal267 = default(IToken);
	    IToken string_literal273 = default(IToken);
	    IToken C_STRING274 = default(IToken);
	    IToken set275 = default(IToken);
	    IToken string_literal277 = default(IToken);
	    IToken string_literal279 = default(IToken);
	    IToken L_BRACE280 = default(IToken);
	    IToken R_BRACE282 = default(IToken);
	    IToken string_literal283 = default(IToken);
	    IToken L_BRACE284 = default(IToken);
	    IToken R_BRACE286 = default(IToken);
	    IToken string_literal287 = default(IToken);
	    IToken string_literal289 = default(IToken);
	    IToken C_STRING290 = default(IToken);
	    IToken string_literal291 = default(IToken);
	    IToken L_BRACE292 = default(IToken);
	    IToken COMMA294 = default(IToken);
	    IToken R_BRACE296 = default(IToken);
	    IToken string_literal297 = default(IToken);
	    IToken C_STRING298 = default(IToken);
	    IToken string_literal299 = default(IToken);
	    IToken string_literal301 = default(IToken);
	    IToken string_literal303 = default(IToken);
	    IToken L_BRACE304 = default(IToken);
	    IToken R_BRACE306 = default(IToken);
	    IToken string_literal307 = default(IToken);
	    IToken L_BRACE308 = default(IToken);
	    IToken R_BRACE310 = default(IToken);
	    IToken string_literal311 = default(IToken);
	    IToken string_literal313 = default(IToken);
	    IToken L_BRACE314 = default(IToken);
	    IToken COMMA316 = default(IToken);
	    IToken R_BRACE318 = default(IToken);
	    IToken string_literal319 = default(IToken);
	    IToken L_BRACE320 = default(IToken);
	    IToken R_BRACE323 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_namedbits269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_accesstypes276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_pibaccess278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_statustypes288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_error293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_error295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_index300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_augments302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_index312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_bitsvalue321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value322 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal266_tree = default(CommonTree);
	    CommonTree string_literal267_tree = default(CommonTree);
	    CommonTree string_literal273_tree = default(CommonTree);
	    CommonTree C_STRING274_tree = default(CommonTree);
	    CommonTree set275_tree = default(CommonTree);
	    CommonTree string_literal277_tree = default(CommonTree);
	    CommonTree string_literal279_tree = default(CommonTree);
	    CommonTree L_BRACE280_tree = default(CommonTree);
	    CommonTree R_BRACE282_tree = default(CommonTree);
	    CommonTree string_literal283_tree = default(CommonTree);
	    CommonTree L_BRACE284_tree = default(CommonTree);
	    CommonTree R_BRACE286_tree = default(CommonTree);
	    CommonTree string_literal287_tree = default(CommonTree);
	    CommonTree string_literal289_tree = default(CommonTree);
	    CommonTree C_STRING290_tree = default(CommonTree);
	    CommonTree string_literal291_tree = default(CommonTree);
	    CommonTree L_BRACE292_tree = default(CommonTree);
	    CommonTree COMMA294_tree = default(CommonTree);
	    CommonTree R_BRACE296_tree = default(CommonTree);
	    CommonTree string_literal297_tree = default(CommonTree);
	    CommonTree C_STRING298_tree = default(CommonTree);
	    CommonTree string_literal299_tree = default(CommonTree);
	    CommonTree string_literal301_tree = default(CommonTree);
	    CommonTree string_literal303_tree = default(CommonTree);
	    CommonTree L_BRACE304_tree = default(CommonTree);
	    CommonTree R_BRACE306_tree = default(CommonTree);
	    CommonTree string_literal307_tree = default(CommonTree);
	    CommonTree L_BRACE308_tree = default(CommonTree);
	    CommonTree R_BRACE310_tree = default(CommonTree);
	    CommonTree string_literal311_tree = default(CommonTree);
	    CommonTree string_literal313_tree = default(CommonTree);
	    CommonTree L_BRACE314_tree = default(CommonTree);
	    CommonTree COMMA316_tree = default(CommonTree);
	    CommonTree R_BRACE318_tree = default(CommonTree);
	    CommonTree string_literal319_tree = default(CommonTree);
	    CommonTree L_BRACE320_tree = default(CommonTree);
	    CommonTree R_BRACE323_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro");
		DebugLocation(805, 31);
		try
		{
			// Smi.g:805:17: ( 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type objecttype_macro_namedbits | ( smi_type )=> smi_type ( smi_subtyping )? | type ) ( 'UNITS' C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) objecttype_macro_accesstypes | 'PIB-ACCESS' objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE value R_BRACE )? ( 'PIB-TAG' L_BRACE value R_BRACE )? 'STATUS' objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' C_STRING )? ( 'INSTALL-ERRORS' L_BRACE objecttype_macro_error ( COMMA objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index | 'AUGMENTS' objecttype_macro_augments | 'PIB-INDEX' L_BRACE value R_BRACE | 'EXTENDS' L_BRACE value R_BRACE )? ( 'INDEX' objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE ( value ( COMMA value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value ) R_BRACE )? )
			DebugEnterAlt(1);
			// Smi.g:805:19: 'OBJECT-TYPE' 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type objecttype_macro_namedbits | ( smi_type )=> smi_type ( smi_subtyping )? | type ) ( 'UNITS' C_STRING )? ( ( 'MAX-ACCESS' | 'ACCESS' ) objecttype_macro_accesstypes | 'PIB-ACCESS' objecttype_macro_pibaccess )? ( 'PIB-REFERENCES' L_BRACE value R_BRACE )? ( 'PIB-TAG' L_BRACE value R_BRACE )? 'STATUS' objecttype_macro_statustypes ( ( 'DESCRIPTION' )=> 'DESCRIPTION' C_STRING )? ( 'INSTALL-ERRORS' L_BRACE objecttype_macro_error ( COMMA objecttype_macro_error )* R_BRACE )? ( 'REFERENCE' C_STRING )? ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index | 'AUGMENTS' objecttype_macro_augments | 'PIB-INDEX' L_BRACE value R_BRACE | 'EXTENDS' L_BRACE value R_BRACE )? ( 'INDEX' objecttype_macro_index )? ( 'UNIQUENESS' L_BRACE ( value ( COMMA value )* )? R_BRACE )? ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value ) R_BRACE )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(805, 19);
			string_literal266=(IToken)Match(input,165,Follow._165_in_objecttype_macro3960); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal266_tree = (CommonTree)adaptor.Create(string_literal266);
			adaptor.AddChild(root_0, string_literal266_tree);
			}
			DebugLocation(805, 33);
			string_literal267=(IToken)Match(input,187,Follow._187_in_objecttype_macro3962); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal267_tree = (CommonTree)adaptor.Create(string_literal267);
			adaptor.AddChild(root_0, string_literal267_tree);
			}
			DebugLocation(806, 21);
			// Smi.g:806:21: ( ( smi_type L_BRACE )=> smi_type objecttype_macro_namedbits | ( smi_type )=> smi_type ( smi_subtyping )? | type )
			int alt66=3;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, decisionCanBacktrack[66]);
			switch (input.LA(1))
			{
			case 137:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt66 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt66 = 2;
				}
				else if ((true))
				{
					alt66 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER_KW:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt66 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt66 = 2;
				}
				else if ((true))
				{
					alt66 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==STRING_KW))
				{
					int LA66_3 = input.LA(3);

					if ((LA66_3==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
					{
						alt66 = 1;
					}
					else if ((EvaluatePredicate(synpred26_Smi_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 9, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OBJECT_KW:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==IDENTIFIER_KW))
				{
					int LA66_3 = input.LA(3);

					if ((LA66_3==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
					{
						alt66 = 1;
					}
					else if ((EvaluatePredicate(synpred26_Smi_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==L_BRACE) && (EvaluatePredicate(synpred25_Smi_fragment)))
				{
					alt66 = 1;
				}
				else if ((EvaluatePredicate(synpred26_Smi_fragment)))
				{
					alt66 = 2;
				}
				else if ((true))
				{
					alt66 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case ERROR_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case LOWER:
			case L_BRACKET:
			case NULL_KW:
			case NUMERIC_STR_KW:
			case OPERATION_KW:
			case PRINTABLE_STR_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 179:
			case 188:
			case 191:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:806:23: ( smi_type L_BRACE )=> smi_type objecttype_macro_namedbits
				{
				DebugLocation(806, 45);
				PushFollow(Follow._smi_type_in_objecttype_macro3995);
				smi_type268=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type268.Tree);
				DebugLocation(806, 54);
				PushFollow(Follow._objecttype_macro_namedbits_in_objecttype_macro3997);
				objecttype_macro_namedbits269=objecttype_macro_namedbits();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_namedbits269.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:807:24: ( smi_type )=> smi_type ( smi_subtyping )?
				{
				DebugLocation(807, 38);
				PushFollow(Follow._smi_type_in_objecttype_macro4029);
				smi_type270=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type270.Tree);
				DebugLocation(807, 47);
				// Smi.g:807:47: ( smi_subtyping )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, decisionCanBacktrack[65]);
				int LA65_1 = input.LA(1);

				if ((LA65_1==L_PAREN))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:807:48: smi_subtyping
					{
					DebugLocation(807, 48);
					PushFollow(Follow._smi_subtyping_in_objecttype_macro4032);
					smi_subtyping271=smi_subtyping();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, smi_subtyping271.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:808:24: type
				{
				DebugLocation(808, 24);
				PushFollow(Follow._type_in_objecttype_macro4059);
				type272=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type272.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(810, 19);
			// Smi.g:810:19: ( 'UNITS' C_STRING )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_1 = input.LA(1);

			if ((LA67_1==194))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:810:20: 'UNITS' C_STRING
				{
				DebugLocation(810, 20);
				string_literal273=(IToken)Match(input,194,Follow._194_in_objecttype_macro4103); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal273_tree = (CommonTree)adaptor.Create(string_literal273);
				adaptor.AddChild(root_0, string_literal273_tree);
				}
				DebugLocation(810, 28);
				C_STRING274=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro4105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING274_tree = (CommonTree)adaptor.Create(C_STRING274);
				adaptor.AddChild(root_0, C_STRING274_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(811, 19);
			// Smi.g:811:19: ( ( 'MAX-ACCESS' | 'ACCESS' ) objecttype_macro_accesstypes | 'PIB-ACCESS' objecttype_macro_pibaccess )?
			int alt68=3;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			int LA68_1 = input.LA(1);

			if ((LA68_1==130||LA68_1==155))
			{
				alt68 = 1;
			}
			else if ((LA68_1==168))
			{
				alt68 = 2;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:811:21: ( 'MAX-ACCESS' | 'ACCESS' ) objecttype_macro_accesstypes
				{
				DebugLocation(811, 21);

				set275=(IToken)input.LT(1);
				if (input.LA(1)==130||input.LA(1)==155)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set275));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(811, 47);
				PushFollow(Follow._objecttype_macro_accesstypes_in_objecttype_macro4138);
				objecttype_macro_accesstypes276=objecttype_macro_accesstypes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_accesstypes276.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:812:22: 'PIB-ACCESS' objecttype_macro_pibaccess
				{
				DebugLocation(812, 22);
				string_literal277=(IToken)Match(input,168,Follow._168_in_objecttype_macro4162); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal277_tree = (CommonTree)adaptor.Create(string_literal277);
				adaptor.AddChild(root_0, string_literal277_tree);
				}
				DebugLocation(812, 35);
				PushFollow(Follow._objecttype_macro_pibaccess_in_objecttype_macro4164);
				objecttype_macro_pibaccess278=objecttype_macro_pibaccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_pibaccess278.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(813, 19);
			// Smi.g:813:19: ( 'PIB-REFERENCES' L_BRACE value R_BRACE )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, decisionCanBacktrack[69]);
			int LA69_1 = input.LA(1);

			if ((LA69_1==172))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:813:20: 'PIB-REFERENCES' L_BRACE value R_BRACE
				{
				DebugLocation(813, 20);
				string_literal279=(IToken)Match(input,172,Follow._172_in_objecttype_macro4202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal279_tree = (CommonTree)adaptor.Create(string_literal279);
				adaptor.AddChild(root_0, string_literal279_tree);
				}
				DebugLocation(813, 37);
				L_BRACE280=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE280_tree = (CommonTree)adaptor.Create(L_BRACE280);
				adaptor.AddChild(root_0, L_BRACE280_tree);
				}
				DebugLocation(813, 45);
				PushFollow(Follow._value_in_objecttype_macro4206);
				value281=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value281.Tree);
				DebugLocation(813, 51);
				R_BRACE282=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4208); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE282_tree = (CommonTree)adaptor.Create(R_BRACE282);
				adaptor.AddChild(root_0, R_BRACE282_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(814, 19);
			// Smi.g:814:19: ( 'PIB-TAG' L_BRACE value R_BRACE )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			int LA70_1 = input.LA(1);

			if ((LA70_1==173))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:814:20: 'PIB-TAG' L_BRACE value R_BRACE
				{
				DebugLocation(814, 20);
				string_literal283=(IToken)Match(input,173,Follow._173_in_objecttype_macro4249); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal283_tree = (CommonTree)adaptor.Create(string_literal283);
				adaptor.AddChild(root_0, string_literal283_tree);
				}
				DebugLocation(814, 30);
				L_BRACE284=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4251); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE284_tree = (CommonTree)adaptor.Create(L_BRACE284);
				adaptor.AddChild(root_0, L_BRACE284_tree);
				}
				DebugLocation(814, 38);
				PushFollow(Follow._value_in_objecttype_macro4253);
				value285=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value285.Tree);
				DebugLocation(814, 44);
				R_BRACE286=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4255); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE286_tree = (CommonTree)adaptor.Create(R_BRACE286);
				adaptor.AddChild(root_0, R_BRACE286_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(815, 19);
			string_literal287=(IToken)Match(input,184,Follow._184_in_objecttype_macro4302); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal287_tree = (CommonTree)adaptor.Create(string_literal287);
			adaptor.AddChild(root_0, string_literal287_tree);
			}
			DebugLocation(815, 28);
			PushFollow(Follow._objecttype_macro_statustypes_in_objecttype_macro4304);
			objecttype_macro_statustypes288=objecttype_macro_statustypes();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_statustypes288.Tree);
			DebugLocation(816, 19);
			// Smi.g:816:19: ( ( 'DESCRIPTION' )=> 'DESCRIPTION' C_STRING )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			int LA71_1 = input.LA(1);

			if ((LA71_1==141))
			{
				int LA71_2 = input.LA(2);

				if ((LA71_2==C_STRING))
				{
					int LA71_3 = input.LA(3);

					if ((EvaluatePredicate(synpred27_Smi_fragment)))
					{
						alt71 = 1;
					}
				}
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:816:21: ( 'DESCRIPTION' )=> 'DESCRIPTION' C_STRING
				{
				DebugLocation(816, 40);
				string_literal289=(IToken)Match(input,141,Follow._141_in_objecttype_macro4333); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal289_tree = (CommonTree)adaptor.Create(string_literal289);
				adaptor.AddChild(root_0, string_literal289_tree);
				}
				DebugLocation(816, 54);
				C_STRING290=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro4335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING290_tree = (CommonTree)adaptor.Create(C_STRING290);
				adaptor.AddChild(root_0, C_STRING290_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(817, 19);
			// Smi.g:817:19: ( 'INSTALL-ERRORS' L_BRACE objecttype_macro_error ( COMMA objecttype_macro_error )* R_BRACE )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			int LA73_1 = input.LA(1);

			if ((LA73_1==151))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:817:20: 'INSTALL-ERRORS' L_BRACE objecttype_macro_error ( COMMA objecttype_macro_error )* R_BRACE
				{
				DebugLocation(817, 20);
				string_literal291=(IToken)Match(input,151,Follow._151_in_objecttype_macro4391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal291_tree = (CommonTree)adaptor.Create(string_literal291);
				adaptor.AddChild(root_0, string_literal291_tree);
				}
				DebugLocation(817, 37);
				L_BRACE292=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4393); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE292_tree = (CommonTree)adaptor.Create(L_BRACE292);
				adaptor.AddChild(root_0, L_BRACE292_tree);
				}
				DebugLocation(817, 45);
				PushFollow(Follow._objecttype_macro_error_in_objecttype_macro4395);
				objecttype_macro_error293=objecttype_macro_error();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_error293.Tree);
				DebugLocation(817, 68);
				// Smi.g:817:68: ( COMMA objecttype_macro_error )*
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					int LA72_1 = input.LA(1);

					if ((LA72_1==COMMA))
					{
						alt72 = 1;
					}


					} finally { DebugExitDecision(72); }
					switch ( alt72 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:817:69: COMMA objecttype_macro_error
						{
						DebugLocation(817, 69);
						COMMA294=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro4398); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA294_tree = (CommonTree)adaptor.Create(COMMA294);
						adaptor.AddChild(root_0, COMMA294_tree);
						}
						DebugLocation(817, 75);
						PushFollow(Follow._objecttype_macro_error_in_objecttype_macro4400);
						objecttype_macro_error295=objecttype_macro_error();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_error295.Tree);

						}
						break;

					default:
						goto loop72;
					}
				}

				loop72:
					;

				} finally { DebugExitSubRule(72); }

				DebugLocation(817, 100);
				R_BRACE296=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE296_tree = (CommonTree)adaptor.Create(R_BRACE296);
				adaptor.AddChild(root_0, R_BRACE296_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(818, 5);
			// Smi.g:818:5: ( 'REFERENCE' C_STRING )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			int LA74_1 = input.LA(1);

			if ((LA74_1==177))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:818:7: 'REFERENCE' C_STRING
				{
				DebugLocation(818, 7);
				string_literal297=(IToken)Match(input,177,Follow._177_in_objecttype_macro4419); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal297_tree = (CommonTree)adaptor.Create(string_literal297);
				adaptor.AddChild(root_0, string_literal297_tree);
				}
				DebugLocation(818, 19);
				C_STRING298=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objecttype_macro4421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING298_tree = (CommonTree)adaptor.Create(C_STRING298);
				adaptor.AddChild(root_0, C_STRING298_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(819, 5);
			// Smi.g:819:5: ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index | 'AUGMENTS' objecttype_macro_augments | 'PIB-INDEX' L_BRACE value R_BRACE | 'EXTENDS' L_BRACE value R_BRACE )?
			int alt75=5;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			try
			{
				alt75 = dfa75.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:819:7: (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index
				{
				DebugLocation(819, 27);
				string_literal299=(IToken)Match(input,150,Follow._150_in_objecttype_macro4442); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal299_tree = (CommonTree)adaptor.Create(string_literal299);
				adaptor.AddChild(root_0, string_literal299_tree);
				}
				DebugLocation(819, 35);
				PushFollow(Follow._objecttype_macro_index_in_objecttype_macro4444);
				objecttype_macro_index300=objecttype_macro_index();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_index300.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:820:23: 'AUGMENTS' objecttype_macro_augments
				{
				DebugLocation(820, 23);
				string_literal301=(IToken)Match(input,135,Follow._135_in_objecttype_macro4469); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal301_tree = (CommonTree)adaptor.Create(string_literal301);
				adaptor.AddChild(root_0, string_literal301_tree);
				}
				DebugLocation(820, 34);
				PushFollow(Follow._objecttype_macro_augments_in_objecttype_macro4471);
				objecttype_macro_augments302=objecttype_macro_augments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_augments302.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:821:23: 'PIB-INDEX' L_BRACE value R_BRACE
				{
				DebugLocation(821, 23);
				string_literal303=(IToken)Match(input,170,Follow._170_in_objecttype_macro4496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal303_tree = (CommonTree)adaptor.Create(string_literal303);
				adaptor.AddChild(root_0, string_literal303_tree);
				}
				DebugLocation(821, 35);
				L_BRACE304=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4498); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE304_tree = (CommonTree)adaptor.Create(L_BRACE304);
				adaptor.AddChild(root_0, L_BRACE304_tree);
				}
				DebugLocation(821, 43);
				PushFollow(Follow._value_in_objecttype_macro4500);
				value305=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value305.Tree);
				DebugLocation(821, 49);
				R_BRACE306=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4502); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE306_tree = (CommonTree)adaptor.Create(R_BRACE306);
				adaptor.AddChild(root_0, R_BRACE306_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:822:23: 'EXTENDS' L_BRACE value R_BRACE
				{
				DebugLocation(822, 23);
				string_literal307=(IToken)Match(input,145,Follow._145_in_objecttype_macro4548); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (CommonTree)adaptor.Create(string_literal307);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(822, 33);
				L_BRACE308=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4550); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE308_tree = (CommonTree)adaptor.Create(L_BRACE308);
				adaptor.AddChild(root_0, L_BRACE308_tree);
				}
				DebugLocation(822, 41);
				PushFollow(Follow._value_in_objecttype_macro4552);
				value309=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value309.Tree);
				DebugLocation(822, 47);
				R_BRACE310=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4554); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE310_tree = (CommonTree)adaptor.Create(R_BRACE310);
				adaptor.AddChild(root_0, R_BRACE310_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(824, 19);
			// Smi.g:824:19: ( 'INDEX' objecttype_macro_index )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_1 = input.LA(1);

			if ((LA76_1==150))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:824:21: 'INDEX' objecttype_macro_index
				{
				DebugLocation(824, 21);
				string_literal311=(IToken)Match(input,150,Follow._150_in_objecttype_macro4622); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (CommonTree)adaptor.Create(string_literal311);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(824, 29);
				PushFollow(Follow._objecttype_macro_index_in_objecttype_macro4624);
				objecttype_macro_index312=objecttype_macro_index();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_index312.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(825, 19);
			// Smi.g:825:19: ( 'UNIQUENESS' L_BRACE ( value ( COMMA value )* )? R_BRACE )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			int LA79_1 = input.LA(1);

			if ((LA79_1==193))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:825:21: 'UNIQUENESS' L_BRACE ( value ( COMMA value )* )? R_BRACE
				{
				DebugLocation(825, 21);
				string_literal313=(IToken)Match(input,193,Follow._193_in_objecttype_macro4673); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal313_tree = (CommonTree)adaptor.Create(string_literal313);
				adaptor.AddChild(root_0, string_literal313_tree);
				}
				DebugLocation(825, 34);
				L_BRACE314=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4675); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE314_tree = (CommonTree)adaptor.Create(L_BRACE314);
				adaptor.AddChild(root_0, L_BRACE314_tree);
				}
				DebugLocation(825, 42);
				// Smi.g:825:42: ( value ( COMMA value )* )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_1 = input.LA(1);

				if ((LA78_1==B_STRING||LA78_1==C_STRING||LA78_1==FALSE_KW||LA78_1==H_STRING||(LA78_1>=LOWER && LA78_1<=L_BRACE)||(LA78_1>=MINUS && LA78_1<=MINUS_INFINITY_KW)||(LA78_1>=NULL_KW && LA78_1<=NUMBER)||LA78_1==PLUS_INFINITY_KW||LA78_1==TRUE_KW||LA78_1==UPPER))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:825:43: value ( COMMA value )*
					{
					DebugLocation(825, 43);
					PushFollow(Follow._value_in_objecttype_macro4678);
					value315=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value315.Tree);
					DebugLocation(825, 49);
					// Smi.g:825:49: ( COMMA value )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, decisionCanBacktrack[77]);
						int LA77_1 = input.LA(1);

						if ((LA77_1==COMMA))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// Smi.g:825:50: COMMA value
							{
							DebugLocation(825, 50);
							COMMA316=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro4681); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA316_tree = (CommonTree)adaptor.Create(COMMA316);
							adaptor.AddChild(root_0, COMMA316_tree);
							}
							DebugLocation(825, 56);
							PushFollow(Follow._value_in_objecttype_macro4683);
							value317=value();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, value317.Tree);

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(825, 67);
				R_BRACE318=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4690); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE318_tree = (CommonTree)adaptor.Create(R_BRACE318);
				adaptor.AddChild(root_0, R_BRACE318_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(826, 5);
			// Smi.g:826:5: ( ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value ) R_BRACE )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			int LA81_1 = input.LA(1);

			if ((LA81_1==140))
			{
				int LA81_2 = input.LA(2);

				if ((EvaluatePredicate(synpred29_Smi_fragment)))
				{
					alt81 = 1;
				}
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:826:7: ( 'DEFVAL' )=> 'DEFVAL' L_BRACE ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value ) R_BRACE
				{
				DebugLocation(826, 21);
				string_literal319=(IToken)Match(input,140,Follow._140_in_objecttype_macro4729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal319_tree = (CommonTree)adaptor.Create(string_literal319);
				adaptor.AddChild(root_0, string_literal319_tree);
				}
				DebugLocation(826, 30);
				L_BRACE320=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro4731); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE320_tree = (CommonTree)adaptor.Create(L_BRACE320);
				adaptor.AddChild(root_0, L_BRACE320_tree);
				}
				DebugLocation(827, 21);
				// Smi.g:827:21: ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value )
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				try
				{
					alt80 = dfa80.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:827:23: ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue
					{
					DebugLocation(827, 60);
					PushFollow(Follow._objecttype_macro_bitsvalue_in_objecttype_macro4772);
					objecttype_macro_bitsvalue321=objecttype_macro_bitsvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_bitsvalue321.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:828:26: value
					{
					DebugLocation(828, 26);
					PushFollow(Follow._value_in_objecttype_macro4799);
					value322=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value322.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(829, 21);
				R_BRACE323=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro4823); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE323_tree = (CommonTree)adaptor.Create(R_BRACE323);
				adaptor.AddChild(root_0, R_BRACE323_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro", 55);
			LeaveRule("objecttype_macro", 55);
			LeaveRule_objecttype_macro();
	    }
	 	DebugLocation(829, 31);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_accesstypes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_accesstypes() {}
	// $ANTLR start "objecttype_macro_accesstypes"
	// Smi.g:830:11: protected objecttype_macro_accesstypes : l= LOWER ;
	[GrammarRule("objecttype_macro_accesstypes")]
	protected AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_accesstypes()
	{
		EnterRule_objecttype_macro_accesstypes();
		EnterRule("objecttype_macro_accesstypes", 56);
		TraceIn("objecttype_macro_accesstypes", 56);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_accesstypes");
		DebugLocation(830, 111);
		try
		{
			// Smi.g:830:39: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:830:41: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(830, 42);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_accesstypes4837); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(831, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("read-only") || l.Text == ("read-write") 
				                                            || l.Text == ("write-only") || l.Text == ("read-create") 
				                                            || l.Text == ("not-accessible") || l.Text == ("accessible-for-notify"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_accesstypes", 56);
			LeaveRule("objecttype_macro_accesstypes", 56);
			LeaveRule_objecttype_macro_accesstypes();
	    }
	 	DebugLocation(834, 111);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_accesstypes"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_accesstypes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_pibaccess() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_pibaccess() {}
	// $ANTLR start "objecttype_macro_pibaccess"
	// Smi.g:835:11: protected objecttype_macro_pibaccess : l= LOWER ;
	[GrammarRule("objecttype_macro_pibaccess")]
	protected AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_pibaccess()
	{
		EnterRule_objecttype_macro_pibaccess();
		EnterRule("objecttype_macro_pibaccess", 57);
		TraceIn("objecttype_macro_pibaccess", 57);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_pibaccess");
		DebugLocation(835, 111);
		try
		{
			// Smi.g:835:37: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:835:39: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(835, 40);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_pibaccess4890); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(836, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("install") 
				                                            || l.Text == ("notify") 
				                                            || l.Text == ("install-notify") 
				                                            || l.Text == ("report-only"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_pibaccess", 57);
			LeaveRule("objecttype_macro_pibaccess", 57);
			LeaveRule_objecttype_macro_pibaccess();
	    }
	 	DebugLocation(840, 111);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_pibaccess"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_pibaccess"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_statustypes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_statustypes() {}
	// $ANTLR start "objecttype_macro_statustypes"
	// Smi.g:841:11: protected objecttype_macro_statustypes : l= LOWER ;
	[GrammarRule("objecttype_macro_statustypes")]
	protected AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_statustypes()
	{
		EnterRule_objecttype_macro_statustypes();
		EnterRule("objecttype_macro_statustypes", 58);
		TraceIn("objecttype_macro_statustypes", 58);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_statustypes");
		DebugLocation(841, 111);
		try
		{
			// Smi.g:841:39: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:841:41: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(841, 42);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_statustypes4943); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(842, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("mandatory") 
				                                            || l.Text == ("optional") 
				                                            || l.Text == ("obsolete") 
				                                            || l.Text == ("current") 
				                                            || l.Text == ("deprecated"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_statustypes", 58);
			LeaveRule("objecttype_macro_statustypes", 58);
			LeaveRule_objecttype_macro_statustypes();
	    }
	 	DebugLocation(847, 111);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_statustypes"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_statustypes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_index() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_index() {}
	// $ANTLR start "objecttype_macro_index"
	// Smi.g:850:1: objecttype_macro_index : L_BRACE objecttype_macro_indextype ( COMMA objecttype_macro_indextype )* R_BRACE ;
	[GrammarRule("objecttype_macro_index")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_index()
	{
		EnterRule_objecttype_macro_index();
		EnterRule("objecttype_macro_index", 59);
		TraceIn("objecttype_macro_index", 59);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE324 = default(IToken);
	    IToken COMMA326 = default(IToken);
	    IToken R_BRACE328 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_indextype325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_indextype327 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE324_tree = default(CommonTree);
	    CommonTree COMMA326_tree = default(CommonTree);
	    CommonTree R_BRACE328_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_index");
		DebugLocation(850, 102);
		try
		{
			// Smi.g:850:23: ( L_BRACE objecttype_macro_indextype ( COMMA objecttype_macro_indextype )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:850:25: L_BRACE objecttype_macro_indextype ( COMMA objecttype_macro_indextype )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(850, 25);
			L_BRACE324=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_index4993); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE324_tree = (CommonTree)adaptor.Create(L_BRACE324);
			adaptor.AddChild(root_0, L_BRACE324_tree);
			}
			DebugLocation(850, 33);
			PushFollow(Follow._objecttype_macro_indextype_in_objecttype_macro_index4995);
			objecttype_macro_indextype325=objecttype_macro_indextype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_indextype325.Tree);
			DebugLocation(850, 60);
			// Smi.g:850:60: ( COMMA objecttype_macro_indextype )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_1 = input.LA(1);

				if ((LA82_1==COMMA))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:850:61: COMMA objecttype_macro_indextype
					{
					DebugLocation(850, 61);
					COMMA326=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_index4998); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA326_tree = (CommonTree)adaptor.Create(COMMA326);
					adaptor.AddChild(root_0, COMMA326_tree);
					}
					DebugLocation(850, 67);
					PushFollow(Follow._objecttype_macro_indextype_in_objecttype_macro_index5000);
					objecttype_macro_indextype327=objecttype_macro_indextype();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, objecttype_macro_indextype327.Tree);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(850, 96);
			R_BRACE328=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_index5004); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE328_tree = (CommonTree)adaptor.Create(R_BRACE328);
			adaptor.AddChild(root_0, R_BRACE328_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_index", 59);
			LeaveRule("objecttype_macro_index", 59);
			LeaveRule_objecttype_macro_index();
	    }
	 	DebugLocation(850, 102);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_index"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_index"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_indextype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_indextype() {}
	// $ANTLR start "objecttype_macro_indextype"
	// Smi.g:851:1: objecttype_macro_indextype : ( 'IMPLIED' )? value ;
	[GrammarRule("objecttype_macro_indextype")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_indextype()
	{
		EnterRule_objecttype_macro_indextype();
		EnterRule("objecttype_macro_indextype", 60);
		TraceIn("objecttype_macro_indextype", 60);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal329 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value330 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal329_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_indextype");
		DebugLocation(851, 46);
		try
		{
			// Smi.g:851:27: ( ( 'IMPLIED' )? value )
			DebugEnterAlt(1);
			// Smi.g:851:29: ( 'IMPLIED' )? value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(851, 29);
			// Smi.g:851:29: ( 'IMPLIED' )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			int LA83_1 = input.LA(1);

			if ((LA83_1==IMPLIED_KW))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:851:30: 'IMPLIED'
				{
				DebugLocation(851, 30);
				string_literal329=(IToken)Match(input,IMPLIED_KW,Follow._IMPLIED_KW_in_objecttype_macro_indextype5018); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal329_tree = (CommonTree)adaptor.Create(string_literal329);
				adaptor.AddChild(root_0, string_literal329_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(851, 42);
			PushFollow(Follow._value_in_objecttype_macro_indextype5022);
			value330=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value330.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_indextype", 60);
			LeaveRule("objecttype_macro_indextype", 60);
			LeaveRule_objecttype_macro_indextype();
	    }
	 	DebugLocation(851, 46);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_indextype"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_indextype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_augments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_augments() {}
	// $ANTLR start "objecttype_macro_augments"
	// Smi.g:852:1: objecttype_macro_augments : L_BRACE value R_BRACE ;
	[GrammarRule("objecttype_macro_augments")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_augments()
	{
		EnterRule_objecttype_macro_augments();
		EnterRule("objecttype_macro_augments", 61);
		TraceIn("objecttype_macro_augments", 61);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE331 = default(IToken);
	    IToken R_BRACE333 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value332 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE331_tree = default(CommonTree);
	    CommonTree R_BRACE333_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_augments");
		DebugLocation(852, 48);
		try
		{
			// Smi.g:852:26: ( L_BRACE value R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:852:28: L_BRACE value R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(852, 28);
			L_BRACE331=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_augments5028); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE331_tree = (CommonTree)adaptor.Create(L_BRACE331);
			adaptor.AddChild(root_0, L_BRACE331_tree);
			}
			DebugLocation(852, 36);
			PushFollow(Follow._value_in_objecttype_macro_augments5030);
			value332=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value332.Tree);
			DebugLocation(852, 42);
			R_BRACE333=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_augments5032); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE333_tree = (CommonTree)adaptor.Create(R_BRACE333);
			adaptor.AddChild(root_0, R_BRACE333_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_augments", 61);
			LeaveRule("objecttype_macro_augments", 61);
			LeaveRule_objecttype_macro_augments();
	    }
	 	DebugLocation(852, 48);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_augments"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_augments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_namedbits() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_namedbits() {}
	// $ANTLR start "objecttype_macro_namedbits"
	// Smi.g:854:1: objecttype_macro_namedbits : L_BRACE ( LOWER ) L_PAREN NUMBER R_PAREN ( COMMA ( LOWER ) L_PAREN NUMBER R_PAREN )* R_BRACE ;
	[GrammarRule("objecttype_macro_namedbits")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_namedbits()
	{
		EnterRule_objecttype_macro_namedbits();
		EnterRule("objecttype_macro_namedbits", 62);
		TraceIn("objecttype_macro_namedbits", 62);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE334 = default(IToken);
	    IToken LOWER335 = default(IToken);
	    IToken L_PAREN336 = default(IToken);
	    IToken NUMBER337 = default(IToken);
	    IToken R_PAREN338 = default(IToken);
	    IToken COMMA339 = default(IToken);
	    IToken LOWER340 = default(IToken);
	    IToken L_PAREN341 = default(IToken);
	    IToken NUMBER342 = default(IToken);
	    IToken R_PAREN343 = default(IToken);
	    IToken R_BRACE344 = default(IToken);

	    CommonTree L_BRACE334_tree = default(CommonTree);
	    CommonTree LOWER335_tree = default(CommonTree);
	    CommonTree L_PAREN336_tree = default(CommonTree);
	    CommonTree NUMBER337_tree = default(CommonTree);
	    CommonTree R_PAREN338_tree = default(CommonTree);
	    CommonTree COMMA339_tree = default(CommonTree);
	    CommonTree LOWER340_tree = default(CommonTree);
	    CommonTree L_PAREN341_tree = default(CommonTree);
	    CommonTree NUMBER342_tree = default(CommonTree);
	    CommonTree R_PAREN343_tree = default(CommonTree);
	    CommonTree R_BRACE344_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_namedbits");
		DebugLocation(854, 114);
		try
		{
			// Smi.g:854:27: ( L_BRACE ( LOWER ) L_PAREN NUMBER R_PAREN ( COMMA ( LOWER ) L_PAREN NUMBER R_PAREN )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:854:29: L_BRACE ( LOWER ) L_PAREN NUMBER R_PAREN ( COMMA ( LOWER ) L_PAREN NUMBER R_PAREN )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(854, 29);
			L_BRACE334=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_namedbits5042); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE334_tree = (CommonTree)adaptor.Create(L_BRACE334);
			adaptor.AddChild(root_0, L_BRACE334_tree);
			}
			DebugLocation(854, 37);
			// Smi.g:854:37: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:854:38: LOWER
			{
			DebugLocation(854, 38);
			LOWER335=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_namedbits5045); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER335_tree = (CommonTree)adaptor.Create(LOWER335);
			adaptor.AddChild(root_0, LOWER335_tree);
			}

			}

			DebugLocation(854, 45);
			L_PAREN336=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_objecttype_macro_namedbits5048); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN336_tree = (CommonTree)adaptor.Create(L_PAREN336);
			adaptor.AddChild(root_0, L_PAREN336_tree);
			}
			DebugLocation(854, 53);
			NUMBER337=(IToken)Match(input,NUMBER,Follow._NUMBER_in_objecttype_macro_namedbits5050); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER337_tree = (CommonTree)adaptor.Create(NUMBER337);
			adaptor.AddChild(root_0, NUMBER337_tree);
			}
			DebugLocation(854, 60);
			R_PAREN338=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_objecttype_macro_namedbits5052); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN338_tree = (CommonTree)adaptor.Create(R_PAREN338);
			adaptor.AddChild(root_0, R_PAREN338_tree);
			}
			DebugLocation(854, 68);
			// Smi.g:854:68: ( COMMA ( LOWER ) L_PAREN NUMBER R_PAREN )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, decisionCanBacktrack[84]);
				int LA84_1 = input.LA(1);

				if ((LA84_1==COMMA))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:854:69: COMMA ( LOWER ) L_PAREN NUMBER R_PAREN
					{
					DebugLocation(854, 69);
					COMMA339=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_namedbits5055); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA339_tree = (CommonTree)adaptor.Create(COMMA339);
					adaptor.AddChild(root_0, COMMA339_tree);
					}
					DebugLocation(854, 75);
					// Smi.g:854:75: ( LOWER )
					DebugEnterAlt(1);
					// Smi.g:854:76: LOWER
					{
					DebugLocation(854, 76);
					LOWER340=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_namedbits5058); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOWER340_tree = (CommonTree)adaptor.Create(LOWER340);
					adaptor.AddChild(root_0, LOWER340_tree);
					}

					}

					DebugLocation(854, 83);
					L_PAREN341=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_objecttype_macro_namedbits5061); if (state.failed) return retval;
					if (state.backtracking == 0) {
					L_PAREN341_tree = (CommonTree)adaptor.Create(L_PAREN341);
					adaptor.AddChild(root_0, L_PAREN341_tree);
					}
					DebugLocation(854, 91);
					NUMBER342=(IToken)Match(input,NUMBER,Follow._NUMBER_in_objecttype_macro_namedbits5063); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NUMBER342_tree = (CommonTree)adaptor.Create(NUMBER342);
					adaptor.AddChild(root_0, NUMBER342_tree);
					}
					DebugLocation(854, 98);
					R_PAREN343=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_objecttype_macro_namedbits5065); if (state.failed) return retval;
					if (state.backtracking == 0) {
					R_PAREN343_tree = (CommonTree)adaptor.Create(R_PAREN343);
					adaptor.AddChild(root_0, R_PAREN343_tree);
					}

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }

			DebugLocation(854, 108);
			R_BRACE344=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_namedbits5069); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE344_tree = (CommonTree)adaptor.Create(R_BRACE344);
			adaptor.AddChild(root_0, R_BRACE344_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_namedbits", 62);
			LeaveRule("objecttype_macro_namedbits", 62);
			LeaveRule_objecttype_macro_namedbits();
	    }
	 	DebugLocation(854, 114);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_namedbits"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_namedbits"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_bitsvalue() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_bitsvalue() {}
	// $ANTLR start "objecttype_macro_bitsvalue"
	// Smi.g:855:1: objecttype_macro_bitsvalue : L_BRACE LOWER ( COMMA LOWER )* R_BRACE ;
	[GrammarRule("objecttype_macro_bitsvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_bitsvalue()
	{
		EnterRule_objecttype_macro_bitsvalue();
		EnterRule("objecttype_macro_bitsvalue", 63);
		TraceIn("objecttype_macro_bitsvalue", 63);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE345 = default(IToken);
	    IToken LOWER346 = default(IToken);
	    IToken COMMA347 = default(IToken);
	    IToken LOWER348 = default(IToken);
	    IToken R_BRACE349 = default(IToken);

	    CommonTree L_BRACE345_tree = default(CommonTree);
	    CommonTree LOWER346_tree = default(CommonTree);
	    CommonTree COMMA347_tree = default(CommonTree);
	    CommonTree LOWER348_tree = default(CommonTree);
	    CommonTree R_BRACE349_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_bitsvalue");
		DebugLocation(855, 64);
		try
		{
			// Smi.g:855:27: ( L_BRACE LOWER ( COMMA LOWER )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:855:29: L_BRACE LOWER ( COMMA LOWER )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(855, 29);
			L_BRACE345=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objecttype_macro_bitsvalue5080); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE345_tree = (CommonTree)adaptor.Create(L_BRACE345);
			adaptor.AddChild(root_0, L_BRACE345_tree);
			}
			DebugLocation(855, 37);
			LOWER346=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_bitsvalue5082); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER346_tree = (CommonTree)adaptor.Create(LOWER346);
			adaptor.AddChild(root_0, LOWER346_tree);
			}
			DebugLocation(855, 43);
			// Smi.g:855:43: ( COMMA LOWER )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_1 = input.LA(1);

				if ((LA85_1==COMMA))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:855:44: COMMA LOWER
					{
					DebugLocation(855, 44);
					COMMA347=(IToken)Match(input,COMMA,Follow._COMMA_in_objecttype_macro_bitsvalue5085); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA347_tree = (CommonTree)adaptor.Create(COMMA347);
					adaptor.AddChild(root_0, COMMA347_tree);
					}
					DebugLocation(855, 50);
					LOWER348=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_bitsvalue5087); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOWER348_tree = (CommonTree)adaptor.Create(LOWER348);
					adaptor.AddChild(root_0, LOWER348_tree);
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(855, 58);
			R_BRACE349=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objecttype_macro_bitsvalue5091); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE349_tree = (CommonTree)adaptor.Create(R_BRACE349);
			adaptor.AddChild(root_0, R_BRACE349_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_bitsvalue", 63);
			LeaveRule("objecttype_macro_bitsvalue", 63);
			LeaveRule_objecttype_macro_bitsvalue();
	    }
	 	DebugLocation(855, 64);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_bitsvalue"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_bitsvalue"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objecttype_macro_error() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objecttype_macro_error() {}
	// $ANTLR start "objecttype_macro_error"
	// Smi.g:856:1: objecttype_macro_error : LOWER L_PAREN NUMBER R_PAREN ;
	[GrammarRule("objecttype_macro_error")]
	private AstParserRuleReturnScope<CommonTree, IToken> objecttype_macro_error()
	{
		EnterRule_objecttype_macro_error();
		EnterRule("objecttype_macro_error", 64);
		TraceIn("objecttype_macro_error", 64);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER350 = default(IToken);
	    IToken L_PAREN351 = default(IToken);
	    IToken NUMBER352 = default(IToken);
	    IToken R_PAREN353 = default(IToken);

	    CommonTree LOWER350_tree = default(CommonTree);
	    CommonTree L_PAREN351_tree = default(CommonTree);
	    CommonTree NUMBER352_tree = default(CommonTree);
	    CommonTree R_PAREN353_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objecttype_macro_error");
		DebugLocation(856, 52);
		try
		{
			// Smi.g:856:23: ( LOWER L_PAREN NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:856:25: LOWER L_PAREN NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(856, 25);
			LOWER350=(IToken)Match(input,LOWER,Follow._LOWER_in_objecttype_macro_error5102); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER350_tree = (CommonTree)adaptor.Create(LOWER350);
			adaptor.AddChild(root_0, LOWER350_tree);
			}
			DebugLocation(856, 31);
			L_PAREN351=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_objecttype_macro_error5104); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN351_tree = (CommonTree)adaptor.Create(L_PAREN351);
			adaptor.AddChild(root_0, L_PAREN351_tree);
			}
			DebugLocation(856, 39);
			NUMBER352=(IToken)Match(input,NUMBER,Follow._NUMBER_in_objecttype_macro_error5106); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER352_tree = (CommonTree)adaptor.Create(NUMBER352);
			adaptor.AddChild(root_0, NUMBER352_tree);
			}
			DebugLocation(856, 46);
			R_PAREN353=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_objecttype_macro_error5108); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN353_tree = (CommonTree)adaptor.Create(R_PAREN353);
			adaptor.AddChild(root_0, R_PAREN353_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objecttype_macro_error", 64);
			LeaveRule("objecttype_macro_error", 64);
			LeaveRule_objecttype_macro_error();
	    }
	 	DebugLocation(856, 52);
		} finally { DebugExitRule(GrammarFileName, "objecttype_macro_error"); }
		return retval;

	}
	// $ANTLR end "objecttype_macro_error"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_moduleidentity_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_moduleidentity_macro() {}
	// $ANTLR start "moduleidentity_macro"
	// Smi.g:859:1: moduleidentity_macro : 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' C_STRING 'ORGANIZATION' C_STRING 'CONTACT-INFO' C_STRING 'DESCRIPTION' C_STRING ( moduleidentity_macro_revision )* ;
	[GrammarRule("moduleidentity_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro()
	{
		EnterRule_moduleidentity_macro();
		EnterRule("moduleidentity_macro", 65);
		TraceIn("moduleidentity_macro", 65);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal354 = default(IToken);
	    IToken string_literal355 = default(IToken);
	    IToken L_BRACE356 = default(IToken);
	    IToken R_BRACE358 = default(IToken);
	    IToken string_literal359 = default(IToken);
	    IToken C_STRING360 = default(IToken);
	    IToken string_literal361 = default(IToken);
	    IToken C_STRING362 = default(IToken);
	    IToken string_literal363 = default(IToken);
	    IToken C_STRING364 = default(IToken);
	    IToken string_literal365 = default(IToken);
	    IToken C_STRING366 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_categories357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_revision367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal354_tree = default(CommonTree);
	    CommonTree string_literal355_tree = default(CommonTree);
	    CommonTree L_BRACE356_tree = default(CommonTree);
	    CommonTree R_BRACE358_tree = default(CommonTree);
	    CommonTree string_literal359_tree = default(CommonTree);
	    CommonTree C_STRING360_tree = default(CommonTree);
	    CommonTree string_literal361_tree = default(CommonTree);
	    CommonTree C_STRING362_tree = default(CommonTree);
	    CommonTree string_literal363_tree = default(CommonTree);
	    CommonTree C_STRING364_tree = default(CommonTree);
	    CommonTree string_literal365_tree = default(CommonTree);
	    CommonTree C_STRING366_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro");
		DebugLocation(859, 80);
		try
		{
			// Smi.g:859:21: ( 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' C_STRING 'ORGANIZATION' C_STRING 'CONTACT-INFO' C_STRING 'DESCRIPTION' C_STRING ( moduleidentity_macro_revision )* )
			DebugEnterAlt(1);
			// Smi.g:859:23: 'MODULE-IDENTITY' ( 'SUBJECT-CATEGORIES' L_BRACE moduleidentity_macro_categories R_BRACE )? 'LAST-UPDATED' C_STRING 'ORGANIZATION' C_STRING 'CONTACT-INFO' C_STRING 'DESCRIPTION' C_STRING ( moduleidentity_macro_revision )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(859, 23);
			string_literal354=(IToken)Match(input,159,Follow._159_in_moduleidentity_macro5117); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal354_tree = (CommonTree)adaptor.Create(string_literal354);
			adaptor.AddChild(root_0, string_literal354_tree);
			}
			DebugLocation(860, 25);
			// Smi.g:860:25: ( 'SUBJECT-CATEGORIES' L_BRACE moduleidentity_macro_categories R_BRACE )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
			int LA86_1 = input.LA(1);

			if ((LA86_1==185))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:860:26: 'SUBJECT-CATEGORIES' L_BRACE moduleidentity_macro_categories R_BRACE
				{
				DebugLocation(860, 26);
				string_literal355=(IToken)Match(input,185,Follow._185_in_moduleidentity_macro5145); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal355_tree = (CommonTree)adaptor.Create(string_literal355);
				adaptor.AddChild(root_0, string_literal355_tree);
				}
				DebugLocation(860, 47);
				L_BRACE356=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_moduleidentity_macro5147); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE356_tree = (CommonTree)adaptor.Create(L_BRACE356);
				adaptor.AddChild(root_0, L_BRACE356_tree);
				}
				DebugLocation(860, 55);
				PushFollow(Follow._moduleidentity_macro_categories_in_moduleidentity_macro5149);
				moduleidentity_macro_categories357=moduleidentity_macro_categories();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, moduleidentity_macro_categories357.Tree);
				DebugLocation(860, 87);
				R_BRACE358=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_moduleidentity_macro5151); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE358_tree = (CommonTree)adaptor.Create(R_BRACE358);
				adaptor.AddChild(root_0, R_BRACE358_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(861, 25);
			string_literal359=(IToken)Match(input,152,Follow._152_in_moduleidentity_macro5181); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal359_tree = (CommonTree)adaptor.Create(string_literal359);
			adaptor.AddChild(root_0, string_literal359_tree);
			}
			DebugLocation(861, 40);
			C_STRING360=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro5183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING360_tree = (CommonTree)adaptor.Create(C_STRING360);
			adaptor.AddChild(root_0, C_STRING360_tree);
			}
			DebugLocation(861, 49);
			string_literal361=(IToken)Match(input,167,Follow._167_in_moduleidentity_macro5185); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal361_tree = (CommonTree)adaptor.Create(string_literal361);
			adaptor.AddChild(root_0, string_literal361_tree);
			}
			DebugLocation(861, 64);
			C_STRING362=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro5187); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING362_tree = (CommonTree)adaptor.Create(C_STRING362);
			adaptor.AddChild(root_0, C_STRING362_tree);
			}
			DebugLocation(861, 73);
			string_literal363=(IToken)Match(input,138,Follow._138_in_moduleidentity_macro5189); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal363_tree = (CommonTree)adaptor.Create(string_literal363);
			adaptor.AddChild(root_0, string_literal363_tree);
			}
			DebugLocation(861, 88);
			C_STRING364=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro5191); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING364_tree = (CommonTree)adaptor.Create(C_STRING364);
			adaptor.AddChild(root_0, C_STRING364_tree);
			}
			DebugLocation(862, 25);
			string_literal365=(IToken)Match(input,141,Follow._141_in_moduleidentity_macro5218); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal365_tree = (CommonTree)adaptor.Create(string_literal365);
			adaptor.AddChild(root_0, string_literal365_tree);
			}
			DebugLocation(862, 39);
			C_STRING366=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro5220); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING366_tree = (CommonTree)adaptor.Create(C_STRING366);
			adaptor.AddChild(root_0, C_STRING366_tree);
			}
			DebugLocation(862, 48);
			// Smi.g:862:48: ( moduleidentity_macro_revision )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_1 = input.LA(1);

				if ((LA87_1==180))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:862:49: moduleidentity_macro_revision
					{
					DebugLocation(862, 49);
					PushFollow(Follow._moduleidentity_macro_revision_in_moduleidentity_macro5223);
					moduleidentity_macro_revision367=moduleidentity_macro_revision();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, moduleidentity_macro_revision367.Tree);

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro", 65);
			LeaveRule("moduleidentity_macro", 65);
			LeaveRule_moduleidentity_macro();
	    }
	 	DebugLocation(862, 80);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_moduleidentity_macro_revision() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_moduleidentity_macro_revision() {}
	// $ANTLR start "moduleidentity_macro_revision"
	// Smi.g:863:1: moduleidentity_macro_revision : 'REVISION' C_STRING 'DESCRIPTION' C_STRING ;
	[GrammarRule("moduleidentity_macro_revision")]
	private AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_revision()
	{
		EnterRule_moduleidentity_macro_revision();
		EnterRule("moduleidentity_macro_revision", 66);
		TraceIn("moduleidentity_macro_revision", 66);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal368 = default(IToken);
	    IToken C_STRING369 = default(IToken);
	    IToken string_literal370 = default(IToken);
	    IToken C_STRING371 = default(IToken);

	    CommonTree string_literal368_tree = default(CommonTree);
	    CommonTree C_STRING369_tree = default(CommonTree);
	    CommonTree string_literal370_tree = default(CommonTree);
	    CommonTree C_STRING371_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_revision");
		DebugLocation(863, 73);
		try
		{
			// Smi.g:863:30: ( 'REVISION' C_STRING 'DESCRIPTION' C_STRING )
			DebugEnterAlt(1);
			// Smi.g:863:32: 'REVISION' C_STRING 'DESCRIPTION' C_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(863, 32);
			string_literal368=(IToken)Match(input,180,Follow._180_in_moduleidentity_macro_revision5232); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal368_tree = (CommonTree)adaptor.Create(string_literal368);
			adaptor.AddChild(root_0, string_literal368_tree);
			}
			DebugLocation(863, 43);
			C_STRING369=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro_revision5234); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING369_tree = (CommonTree)adaptor.Create(C_STRING369);
			adaptor.AddChild(root_0, C_STRING369_tree);
			}
			DebugLocation(863, 52);
			string_literal370=(IToken)Match(input,141,Follow._141_in_moduleidentity_macro_revision5236); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal370_tree = (CommonTree)adaptor.Create(string_literal370);
			adaptor.AddChild(root_0, string_literal370_tree);
			}
			DebugLocation(863, 66);
			C_STRING371=(IToken)Match(input,C_STRING,Follow._C_STRING_in_moduleidentity_macro_revision5238); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING371_tree = (CommonTree)adaptor.Create(C_STRING371);
			adaptor.AddChild(root_0, C_STRING371_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_revision", 66);
			LeaveRule("moduleidentity_macro_revision", 66);
			LeaveRule_moduleidentity_macro_revision();
	    }
	 	DebugLocation(863, 73);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_revision"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_revision"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_moduleidentity_macro_categories() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_moduleidentity_macro_categories() {}
	// $ANTLR start "moduleidentity_macro_categories"
	// Smi.g:864:1: moduleidentity_macro_categories : (l= LOWER | moduleidentity_macro_categoryid ( COMMA moduleidentity_macro_categoryid )* );
	[GrammarRule("moduleidentity_macro_categories")]
	private AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_categories()
	{
		EnterRule_moduleidentity_macro_categories();
		EnterRule("moduleidentity_macro_categories", 67);
		TraceIn("moduleidentity_macro_categories", 67);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);
	    IToken COMMA373 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_categoryid372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_categoryid374 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree l_tree = default(CommonTree);
	    CommonTree COMMA373_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_categories");
		DebugLocation(864, 105);
		try
		{
			// Smi.g:864:32: (l= LOWER | moduleidentity_macro_categoryid ( COMMA moduleidentity_macro_categoryid )* )
			int alt89=2;
			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
			int LA89_1 = input.LA(1);

			if ((LA89_1==LOWER))
			{
				int LA89_2 = input.LA(2);

				if ((LA89_2==L_PAREN))
				{
					alt89 = 2;
				}
				else if ((LA89_2==R_BRACE))
				{
					alt89 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:864:34: l= LOWER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(864, 35);
				l=(IToken)Match(input,LOWER,Follow._LOWER_in_moduleidentity_macro_categories5247); if (state.failed) return retval;
				if (state.backtracking == 0) {
				l_tree = (CommonTree)adaptor.Create(l);
				adaptor.AddChild(root_0, l_tree);
				}
				DebugLocation(864, 42);
				if (state.backtracking == 0)
				{
					if (l.Text !=  ("all")) {throw new SemanticException ("(invalid)");}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:865:34: moduleidentity_macro_categoryid ( COMMA moduleidentity_macro_categoryid )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(865, 34);
				PushFollow(Follow._moduleidentity_macro_categoryid_in_moduleidentity_macro_categories5285);
				moduleidentity_macro_categoryid372=moduleidentity_macro_categoryid();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, moduleidentity_macro_categoryid372.Tree);
				DebugLocation(865, 66);
				// Smi.g:865:66: ( COMMA moduleidentity_macro_categoryid )*
				try { DebugEnterSubRule(88);
				while (true)
				{
					int alt88=2;
					try { DebugEnterDecision(88, decisionCanBacktrack[88]);
					int LA88_1 = input.LA(1);

					if ((LA88_1==COMMA))
					{
						alt88 = 1;
					}


					} finally { DebugExitDecision(88); }
					switch ( alt88 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:865:67: COMMA moduleidentity_macro_categoryid
						{
						DebugLocation(865, 67);
						COMMA373=(IToken)Match(input,COMMA,Follow._COMMA_in_moduleidentity_macro_categories5288); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA373_tree = (CommonTree)adaptor.Create(COMMA373);
						adaptor.AddChild(root_0, COMMA373_tree);
						}
						DebugLocation(865, 73);
						PushFollow(Follow._moduleidentity_macro_categoryid_in_moduleidentity_macro_categories5290);
						moduleidentity_macro_categoryid374=moduleidentity_macro_categoryid();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, moduleidentity_macro_categoryid374.Tree);

						}
						break;

					default:
						goto loop88;
					}
				}

				loop88:
					;

				} finally { DebugExitSubRule(88); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_categories", 67);
			LeaveRule("moduleidentity_macro_categories", 67);
			LeaveRule_moduleidentity_macro_categories();
	    }
	 	DebugLocation(865, 105);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_categories"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_categories"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_moduleidentity_macro_categoryid() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_moduleidentity_macro_categoryid() {}
	// $ANTLR start "moduleidentity_macro_categoryid"
	// Smi.g:866:1: moduleidentity_macro_categoryid : LOWER L_PAREN NUMBER R_PAREN ;
	[GrammarRule("moduleidentity_macro_categoryid")]
	private AstParserRuleReturnScope<CommonTree, IToken> moduleidentity_macro_categoryid()
	{
		EnterRule_moduleidentity_macro_categoryid();
		EnterRule("moduleidentity_macro_categoryid", 68);
		TraceIn("moduleidentity_macro_categoryid", 68);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER375 = default(IToken);
	    IToken L_PAREN376 = default(IToken);
	    IToken NUMBER377 = default(IToken);
	    IToken R_PAREN378 = default(IToken);

	    CommonTree LOWER375_tree = default(CommonTree);
	    CommonTree L_PAREN376_tree = default(CommonTree);
	    CommonTree NUMBER377_tree = default(CommonTree);
	    CommonTree R_PAREN378_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moduleidentity_macro_categoryid");
		DebugLocation(866, 61);
		try
		{
			// Smi.g:866:32: ( LOWER L_PAREN NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:866:34: LOWER L_PAREN NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(866, 34);
			LOWER375=(IToken)Match(input,LOWER,Follow._LOWER_in_moduleidentity_macro_categoryid5298); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER375_tree = (CommonTree)adaptor.Create(LOWER375);
			adaptor.AddChild(root_0, LOWER375_tree);
			}
			DebugLocation(866, 40);
			L_PAREN376=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_moduleidentity_macro_categoryid5300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN376_tree = (CommonTree)adaptor.Create(L_PAREN376);
			adaptor.AddChild(root_0, L_PAREN376_tree);
			}
			DebugLocation(866, 48);
			NUMBER377=(IToken)Match(input,NUMBER,Follow._NUMBER_in_moduleidentity_macro_categoryid5302); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER377_tree = (CommonTree)adaptor.Create(NUMBER377);
			adaptor.AddChild(root_0, NUMBER377_tree);
			}
			DebugLocation(866, 55);
			R_PAREN378=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_moduleidentity_macro_categoryid5304); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN378_tree = (CommonTree)adaptor.Create(R_PAREN378);
			adaptor.AddChild(root_0, R_PAREN378_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleidentity_macro_categoryid", 68);
			LeaveRule("moduleidentity_macro_categoryid", 68);
			LeaveRule_moduleidentity_macro_categoryid();
	    }
	 	DebugLocation(866, 61);
		} finally { DebugExitRule(GrammarFileName, "moduleidentity_macro_categoryid"); }
		return retval;

	}
	// $ANTLR end "moduleidentity_macro_categoryid"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objectidentity_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objectidentity_macro() {}
	// $ANTLR start "objectidentity_macro"
	// Smi.g:869:1: objectidentity_macro : 'OBJECT-IDENTITY' 'STATUS' objectidentity_macro_statustypes 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ;
	[GrammarRule("objectidentity_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectidentity_macro()
	{
		EnterRule_objectidentity_macro();
		EnterRule("objectidentity_macro", 69);
		TraceIn("objectidentity_macro", 69);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal379 = default(IToken);
	    IToken string_literal380 = default(IToken);
	    IToken string_literal382 = default(IToken);
	    IToken C_STRING383 = default(IToken);
	    IToken string_literal384 = default(IToken);
	    IToken C_STRING385 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> objectidentity_macro_statustypes381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal379_tree = default(CommonTree);
	    CommonTree string_literal380_tree = default(CommonTree);
	    CommonTree string_literal382_tree = default(CommonTree);
	    CommonTree C_STRING383_tree = default(CommonTree);
	    CommonTree string_literal384_tree = default(CommonTree);
	    CommonTree C_STRING385_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objectidentity_macro");
		DebugLocation(869, 129);
		try
		{
			// Smi.g:869:21: ( 'OBJECT-IDENTITY' 'STATUS' objectidentity_macro_statustypes 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:869:23: 'OBJECT-IDENTITY' 'STATUS' objectidentity_macro_statustypes 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(869, 23);
			string_literal379=(IToken)Match(input,164,Follow._164_in_objectidentity_macro5314); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal379_tree = (CommonTree)adaptor.Create(string_literal379);
			adaptor.AddChild(root_0, string_literal379_tree);
			}
			DebugLocation(869, 41);
			string_literal380=(IToken)Match(input,184,Follow._184_in_objectidentity_macro5316); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal380_tree = (CommonTree)adaptor.Create(string_literal380);
			adaptor.AddChild(root_0, string_literal380_tree);
			}
			DebugLocation(869, 50);
			PushFollow(Follow._objectidentity_macro_statustypes_in_objectidentity_macro5318);
			objectidentity_macro_statustypes381=objectidentity_macro_statustypes();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, objectidentity_macro_statustypes381.Tree);
			DebugLocation(869, 83);
			string_literal382=(IToken)Match(input,141,Follow._141_in_objectidentity_macro5320); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal382_tree = (CommonTree)adaptor.Create(string_literal382);
			adaptor.AddChild(root_0, string_literal382_tree);
			}
			DebugLocation(869, 97);
			C_STRING383=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectidentity_macro5322); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING383_tree = (CommonTree)adaptor.Create(C_STRING383);
			adaptor.AddChild(root_0, C_STRING383_tree);
			}
			DebugLocation(869, 106);
			// Smi.g:869:106: ( 'REFERENCE' C_STRING )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			int LA90_1 = input.LA(1);

			if ((LA90_1==177))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:869:107: 'REFERENCE' C_STRING
				{
				DebugLocation(869, 107);
				string_literal384=(IToken)Match(input,177,Follow._177_in_objectidentity_macro5325); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal384_tree = (CommonTree)adaptor.Create(string_literal384);
				adaptor.AddChild(root_0, string_literal384_tree);
				}
				DebugLocation(869, 119);
				C_STRING385=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectidentity_macro5327); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING385_tree = (CommonTree)adaptor.Create(C_STRING385);
				adaptor.AddChild(root_0, C_STRING385_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectidentity_macro", 69);
			LeaveRule("objectidentity_macro", 69);
			LeaveRule_objectidentity_macro();
	    }
	 	DebugLocation(869, 129);
		} finally { DebugExitRule(GrammarFileName, "objectidentity_macro"); }
		return retval;

	}
	// $ANTLR end "objectidentity_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objectidentity_macro_statustypes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objectidentity_macro_statustypes() {}
	// $ANTLR start "objectidentity_macro_statustypes"
	// Smi.g:870:11: protected objectidentity_macro_statustypes : l= LOWER ;
	[GrammarRule("objectidentity_macro_statustypes")]
	protected AstParserRuleReturnScope<CommonTree, IToken> objectidentity_macro_statustypes()
	{
		EnterRule_objectidentity_macro_statustypes();
		EnterRule("objectidentity_macro_statustypes", 70);
		TraceIn("objectidentity_macro_statustypes", 70);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objectidentity_macro_statustypes");
		DebugLocation(870, 111);
		try
		{
			// Smi.g:870:43: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:870:45: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(870, 46);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objectidentity_macro_statustypes5340); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(871, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectidentity_macro_statustypes", 70);
			LeaveRule("objectidentity_macro_statustypes", 70);
			LeaveRule_objectidentity_macro_statustypes();
	    }
	 	DebugLocation(874, 111);
		} finally { DebugExitRule(GrammarFileName, "objectidentity_macro_statustypes"); }
		return retval;

	}
	// $ANTLR end "objectidentity_macro_statustypes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_notificationtype_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_notificationtype_macro() {}
	// $ANTLR start "notificationtype_macro"
	// Smi.g:878:1: notificationtype_macro : 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE )? 'STATUS' notificationtype_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ;
	[GrammarRule("notificationtype_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> notificationtype_macro()
	{
		EnterRule_notificationtype_macro();
		EnterRule("notificationtype_macro", 71);
		TraceIn("notificationtype_macro", 71);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal386 = default(IToken);
	    IToken string_literal387 = default(IToken);
	    IToken L_BRACE388 = default(IToken);
	    IToken COMMA390 = default(IToken);
	    IToken R_BRACE392 = default(IToken);
	    IToken string_literal393 = default(IToken);
	    IToken string_literal395 = default(IToken);
	    IToken C_STRING396 = default(IToken);
	    IToken string_literal397 = default(IToken);
	    IToken C_STRING398 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value389 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value391 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> notificationtype_macro_status394 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal386_tree = default(CommonTree);
	    CommonTree string_literal387_tree = default(CommonTree);
	    CommonTree L_BRACE388_tree = default(CommonTree);
	    CommonTree COMMA390_tree = default(CommonTree);
	    CommonTree R_BRACE392_tree = default(CommonTree);
	    CommonTree string_literal393_tree = default(CommonTree);
	    CommonTree string_literal395_tree = default(CommonTree);
	    CommonTree C_STRING396_tree = default(CommonTree);
	    CommonTree string_literal397_tree = default(CommonTree);
	    CommonTree C_STRING398_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "notificationtype_macro");
		DebugLocation(878, 130);
		try
		{
			// Smi.g:878:23: ( 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE )? 'STATUS' notificationtype_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:878:25: 'NOTIFICATION-TYPE' ( 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE )? 'STATUS' notificationtype_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(878, 25);
			string_literal386=(IToken)Match(input,161,Follow._161_in_notificationtype_macro5393); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal386_tree = (CommonTree)adaptor.Create(string_literal386);
			adaptor.AddChild(root_0, string_literal386_tree);
			}
			DebugLocation(878, 45);
			// Smi.g:878:45: ( 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE )?
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			int LA92_1 = input.LA(1);

			if ((LA92_1==166))
			{
				alt92 = 1;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:878:46: 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE
				{
				DebugLocation(878, 46);
				string_literal387=(IToken)Match(input,166,Follow._166_in_notificationtype_macro5396); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal387_tree = (CommonTree)adaptor.Create(string_literal387);
				adaptor.AddChild(root_0, string_literal387_tree);
				}
				DebugLocation(878, 56);
				L_BRACE388=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_notificationtype_macro5398); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE388_tree = (CommonTree)adaptor.Create(L_BRACE388);
				adaptor.AddChild(root_0, L_BRACE388_tree);
				}
				DebugLocation(878, 64);
				PushFollow(Follow._value_in_notificationtype_macro5400);
				value389=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value389.Tree);
				DebugLocation(878, 70);
				// Smi.g:878:70: ( COMMA value )*
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_1 = input.LA(1);

					if ((LA91_1==COMMA))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch ( alt91 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:878:71: COMMA value
						{
						DebugLocation(878, 71);
						COMMA390=(IToken)Match(input,COMMA,Follow._COMMA_in_notificationtype_macro5403); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA390_tree = (CommonTree)adaptor.Create(COMMA390);
						adaptor.AddChild(root_0, COMMA390_tree);
						}
						DebugLocation(878, 77);
						PushFollow(Follow._value_in_notificationtype_macro5405);
						value391=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, value391.Tree);

						}
						break;

					default:
						goto loop91;
					}
				}

				loop91:
					;

				} finally { DebugExitSubRule(91); }

				DebugLocation(878, 85);
				R_BRACE392=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_notificationtype_macro5409); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE392_tree = (CommonTree)adaptor.Create(R_BRACE392);
				adaptor.AddChild(root_0, R_BRACE392_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }

			DebugLocation(879, 45);
			string_literal393=(IToken)Match(input,184,Follow._184_in_notificationtype_macro5458); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal393_tree = (CommonTree)adaptor.Create(string_literal393);
			adaptor.AddChild(root_0, string_literal393_tree);
			}
			DebugLocation(879, 54);
			PushFollow(Follow._notificationtype_macro_status_in_notificationtype_macro5460);
			notificationtype_macro_status394=notificationtype_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, notificationtype_macro_status394.Tree);
			DebugLocation(879, 84);
			string_literal395=(IToken)Match(input,141,Follow._141_in_notificationtype_macro5462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal395_tree = (CommonTree)adaptor.Create(string_literal395);
			adaptor.AddChild(root_0, string_literal395_tree);
			}
			DebugLocation(879, 98);
			C_STRING396=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationtype_macro5464); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING396_tree = (CommonTree)adaptor.Create(C_STRING396);
			adaptor.AddChild(root_0, C_STRING396_tree);
			}
			DebugLocation(879, 107);
			// Smi.g:879:107: ( 'REFERENCE' C_STRING )?
			int alt93=2;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, decisionCanBacktrack[93]);
			int LA93_1 = input.LA(1);

			if ((LA93_1==177))
			{
				alt93 = 1;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:879:108: 'REFERENCE' C_STRING
				{
				DebugLocation(879, 108);
				string_literal397=(IToken)Match(input,177,Follow._177_in_notificationtype_macro5467); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal397_tree = (CommonTree)adaptor.Create(string_literal397);
				adaptor.AddChild(root_0, string_literal397_tree);
				}
				DebugLocation(879, 120);
				C_STRING398=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationtype_macro5469); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING398_tree = (CommonTree)adaptor.Create(C_STRING398);
				adaptor.AddChild(root_0, C_STRING398_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationtype_macro", 71);
			LeaveRule("notificationtype_macro", 71);
			LeaveRule_notificationtype_macro();
	    }
	 	DebugLocation(879, 130);
		} finally { DebugExitRule(GrammarFileName, "notificationtype_macro"); }
		return retval;

	}
	// $ANTLR end "notificationtype_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_notificationtype_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_notificationtype_macro_status() {}
	// $ANTLR start "notificationtype_macro_status"
	// Smi.g:880:11: protected notificationtype_macro_status : l= LOWER ;
	[GrammarRule("notificationtype_macro_status")]
	protected AstParserRuleReturnScope<CommonTree, IToken> notificationtype_macro_status()
	{
		EnterRule_notificationtype_macro_status();
		EnterRule("notificationtype_macro_status", 72);
		TraceIn("notificationtype_macro_status", 72);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "notificationtype_macro_status");
		DebugLocation(880, 111);
		try
		{
			// Smi.g:880:40: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:880:42: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(880, 43);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_notificationtype_macro_status5482); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(881, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationtype_macro_status", 72);
			LeaveRule("notificationtype_macro_status", 72);
			LeaveRule_notificationtype_macro_status();
	    }
	 	DebugLocation(884, 111);
		} finally { DebugExitRule(GrammarFileName, "notificationtype_macro_status"); }
		return retval;

	}
	// $ANTLR end "notificationtype_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_textualconvention_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_textualconvention_macro() {}
	// $ANTLR start "textualconvention_macro"
	// Smi.g:887:1: textualconvention_macro : 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' C_STRING )? 'STATUS' textualconvention_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE | type ) ;
	[GrammarRule("textualconvention_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro()
	{
		EnterRule_textualconvention_macro();
		EnterRule("textualconvention_macro", 73);
		TraceIn("textualconvention_macro", 73);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal399 = default(IToken);
	    IToken string_literal400 = default(IToken);
	    IToken C_STRING401 = default(IToken);
	    IToken string_literal402 = default(IToken);
	    IToken string_literal404 = default(IToken);
	    IToken C_STRING405 = default(IToken);
	    IToken string_literal406 = default(IToken);
	    IToken C_STRING407 = default(IToken);
	    IToken string_literal408 = default(IToken);
	    IToken L_BRACE410 = default(IToken);
	    IToken COMMA412 = default(IToken);
	    IToken R_BRACE414 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro_status403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro_namedbit411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro_namedbit413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type415 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal399_tree = default(CommonTree);
	    CommonTree string_literal400_tree = default(CommonTree);
	    CommonTree C_STRING401_tree = default(CommonTree);
	    CommonTree string_literal402_tree = default(CommonTree);
	    CommonTree string_literal404_tree = default(CommonTree);
	    CommonTree C_STRING405_tree = default(CommonTree);
	    CommonTree string_literal406_tree = default(CommonTree);
	    CommonTree C_STRING407_tree = default(CommonTree);
	    CommonTree string_literal408_tree = default(CommonTree);
	    CommonTree L_BRACE410_tree = default(CommonTree);
	    CommonTree COMMA412_tree = default(CommonTree);
	    CommonTree R_BRACE414_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "textualconvention_macro");
		DebugLocation(887, 93);
		try
		{
			// Smi.g:887:24: ( 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' C_STRING )? 'STATUS' textualconvention_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE | type ) )
			DebugEnterAlt(1);
			// Smi.g:887:26: 'TEXTUAL-CONVENTION' ( 'DISPLAY-HINT' C_STRING )? 'STATUS' textualconvention_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? 'SYNTAX' ( ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE | type )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(887, 26);
			string_literal399=(IToken)Match(input,188,Follow._188_in_textualconvention_macro5534); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal399_tree = (CommonTree)adaptor.Create(string_literal399);
			adaptor.AddChild(root_0, string_literal399_tree);
			}
			DebugLocation(887, 47);
			// Smi.g:887:47: ( 'DISPLAY-HINT' C_STRING )?
			int alt94=2;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, decisionCanBacktrack[94]);
			int LA94_1 = input.LA(1);

			if ((LA94_1==142))
			{
				alt94 = 1;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:887:48: 'DISPLAY-HINT' C_STRING
				{
				DebugLocation(887, 48);
				string_literal400=(IToken)Match(input,142,Follow._142_in_textualconvention_macro5537); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal400_tree = (CommonTree)adaptor.Create(string_literal400);
				adaptor.AddChild(root_0, string_literal400_tree);
				}
				DebugLocation(887, 63);
				C_STRING401=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro5539); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING401_tree = (CommonTree)adaptor.Create(C_STRING401);
				adaptor.AddChild(root_0, C_STRING401_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(94); }

			DebugLocation(888, 29);
			string_literal402=(IToken)Match(input,184,Follow._184_in_textualconvention_macro5572); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal402_tree = (CommonTree)adaptor.Create(string_literal402);
			adaptor.AddChild(root_0, string_literal402_tree);
			}
			DebugLocation(888, 38);
			PushFollow(Follow._textualconvention_macro_status_in_textualconvention_macro5574);
			textualconvention_macro_status403=textualconvention_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, textualconvention_macro_status403.Tree);
			DebugLocation(889, 29);
			string_literal404=(IToken)Match(input,141,Follow._141_in_textualconvention_macro5605); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal404_tree = (CommonTree)adaptor.Create(string_literal404);
			adaptor.AddChild(root_0, string_literal404_tree);
			}
			DebugLocation(889, 43);
			C_STRING405=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro5607); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING405_tree = (CommonTree)adaptor.Create(C_STRING405);
			adaptor.AddChild(root_0, C_STRING405_tree);
			}
			DebugLocation(890, 29);
			// Smi.g:890:29: ( 'REFERENCE' C_STRING )?
			int alt95=2;
			try { DebugEnterSubRule(95);
			try { DebugEnterDecision(95, decisionCanBacktrack[95]);
			int LA95_1 = input.LA(1);

			if ((LA95_1==177))
			{
				alt95 = 1;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:890:30: 'REFERENCE' C_STRING
				{
				DebugLocation(890, 30);
				string_literal406=(IToken)Match(input,177,Follow._177_in_textualconvention_macro5639); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal406_tree = (CommonTree)adaptor.Create(string_literal406);
				adaptor.AddChild(root_0, string_literal406_tree);
				}
				DebugLocation(890, 42);
				C_STRING407=(IToken)Match(input,C_STRING,Follow._C_STRING_in_textualconvention_macro5641); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING407_tree = (CommonTree)adaptor.Create(C_STRING407);
				adaptor.AddChild(root_0, C_STRING407_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(95); }

			DebugLocation(891, 29);
			string_literal408=(IToken)Match(input,187,Follow._187_in_textualconvention_macro5674); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal408_tree = (CommonTree)adaptor.Create(string_literal408);
			adaptor.AddChild(root_0, string_literal408_tree);
			}
			DebugLocation(891, 38);
			// Smi.g:891:38: ( ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE | type )
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			try
			{
				alt97 = dfa97.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:891:40: ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE
				{
				DebugLocation(891, 62);
				PushFollow(Follow._smi_type_in_textualconvention_macro5686);
				smi_type409=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type409.Tree);
				DebugLocation(891, 71);
				L_BRACE410=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_textualconvention_macro5688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE410_tree = (CommonTree)adaptor.Create(L_BRACE410);
				adaptor.AddChild(root_0, L_BRACE410_tree);
				}
				DebugLocation(891, 79);
				PushFollow(Follow._textualconvention_macro_namedbit_in_textualconvention_macro5690);
				textualconvention_macro_namedbit411=textualconvention_macro_namedbit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, textualconvention_macro_namedbit411.Tree);
				DebugLocation(892, 37);
				// Smi.g:892:37: ( COMMA textualconvention_macro_namedbit )*
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, decisionCanBacktrack[96]);
					int LA96_1 = input.LA(1);

					if ((LA96_1==COMMA))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch ( alt96 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:892:38: COMMA textualconvention_macro_namedbit
						{
						DebugLocation(892, 38);
						COMMA412=(IToken)Match(input,COMMA,Follow._COMMA_in_textualconvention_macro5730); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA412_tree = (CommonTree)adaptor.Create(COMMA412);
						adaptor.AddChild(root_0, COMMA412_tree);
						}
						DebugLocation(892, 44);
						PushFollow(Follow._textualconvention_macro_namedbit_in_textualconvention_macro5732);
						textualconvention_macro_namedbit413=textualconvention_macro_namedbit();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, textualconvention_macro_namedbit413.Tree);

						}
						break;

					default:
						goto loop96;
					}
				}

				loop96:
					;

				} finally { DebugExitSubRule(96); }

				DebugLocation(892, 79);
				R_BRACE414=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_textualconvention_macro5736); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE414_tree = (CommonTree)adaptor.Create(R_BRACE414);
				adaptor.AddChild(root_0, R_BRACE414_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:892:89: type
				{
				DebugLocation(892, 89);
				PushFollow(Follow._type_in_textualconvention_macro5740);
				type415=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type415.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textualconvention_macro", 73);
			LeaveRule("textualconvention_macro", 73);
			LeaveRule_textualconvention_macro();
	    }
	 	DebugLocation(892, 93);
		} finally { DebugExitRule(GrammarFileName, "textualconvention_macro"); }
		return retval;

	}
	// $ANTLR end "textualconvention_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_textualconvention_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_textualconvention_macro_status() {}
	// $ANTLR start "textualconvention_macro_status"
	// Smi.g:893:10: fragment textualconvention_macro_status : l= LOWER ;
	[GrammarRule("textualconvention_macro_status")]
	private AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro_status()
	{
		EnterRule_textualconvention_macro_status();
		EnterRule("textualconvention_macro_status", 74);
		TraceIn("textualconvention_macro_status", 74);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "textualconvention_macro_status");
		DebugLocation(893, 111);
		try
		{
			// Smi.g:893:40: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:893:42: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(893, 43);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_textualconvention_macro_status5751); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(894, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textualconvention_macro_status", 74);
			LeaveRule("textualconvention_macro_status", 74);
			LeaveRule_textualconvention_macro_status();
	    }
	 	DebugLocation(897, 111);
		} finally { DebugExitRule(GrammarFileName, "textualconvention_macro_status"); }
		return retval;

	}
	// $ANTLR end "textualconvention_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_textualconvention_macro_namedbit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_textualconvention_macro_namedbit() {}
	// $ANTLR start "textualconvention_macro_namedbit"
	// Smi.g:898:1: textualconvention_macro_namedbit : LOWER L_PAREN ( MINUS )? NUMBER R_PAREN ;
	[GrammarRule("textualconvention_macro_namedbit")]
	private AstParserRuleReturnScope<CommonTree, IToken> textualconvention_macro_namedbit()
	{
		EnterRule_textualconvention_macro_namedbit();
		EnterRule("textualconvention_macro_namedbit", 75);
		TraceIn("textualconvention_macro_namedbit", 75);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER416 = default(IToken);
	    IToken L_PAREN417 = default(IToken);
	    IToken MINUS418 = default(IToken);
	    IToken NUMBER419 = default(IToken);
	    IToken R_PAREN420 = default(IToken);

	    CommonTree LOWER416_tree = default(CommonTree);
	    CommonTree L_PAREN417_tree = default(CommonTree);
	    CommonTree MINUS418_tree = default(CommonTree);
	    CommonTree NUMBER419_tree = default(CommonTree);
	    CommonTree R_PAREN420_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "textualconvention_macro_namedbit");
		DebugLocation(898, 71);
		try
		{
			// Smi.g:898:33: ( LOWER L_PAREN ( MINUS )? NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:898:35: LOWER L_PAREN ( MINUS )? NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(898, 35);
			LOWER416=(IToken)Match(input,LOWER,Follow._LOWER_in_textualconvention_macro_namedbit5800); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER416_tree = (CommonTree)adaptor.Create(LOWER416);
			adaptor.AddChild(root_0, LOWER416_tree);
			}
			DebugLocation(898, 41);
			L_PAREN417=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_textualconvention_macro_namedbit5802); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN417_tree = (CommonTree)adaptor.Create(L_PAREN417);
			adaptor.AddChild(root_0, L_PAREN417_tree);
			}
			DebugLocation(898, 49);
			// Smi.g:898:49: ( MINUS )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			int LA98_1 = input.LA(1);

			if ((LA98_1==MINUS))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:898:50: MINUS
				{
				DebugLocation(898, 50);
				MINUS418=(IToken)Match(input,MINUS,Follow._MINUS_in_textualconvention_macro_namedbit5805); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS418_tree = (CommonTree)adaptor.Create(MINUS418);
				adaptor.AddChild(root_0, MINUS418_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(898, 58);
			NUMBER419=(IToken)Match(input,NUMBER,Follow._NUMBER_in_textualconvention_macro_namedbit5809); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER419_tree = (CommonTree)adaptor.Create(NUMBER419);
			adaptor.AddChild(root_0, NUMBER419_tree);
			}
			DebugLocation(898, 65);
			R_PAREN420=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_textualconvention_macro_namedbit5811); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN420_tree = (CommonTree)adaptor.Create(R_PAREN420);
			adaptor.AddChild(root_0, R_PAREN420_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textualconvention_macro_namedbit", 75);
			LeaveRule("textualconvention_macro_namedbit", 75);
			LeaveRule_textualconvention_macro_namedbit();
	    }
	 	DebugLocation(898, 71);
		} finally { DebugExitRule(GrammarFileName, "textualconvention_macro_namedbit"); }
		return retval;

	}
	// $ANTLR end "textualconvention_macro_namedbit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objectgroup_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objectgroup_macro() {}
	// $ANTLR start "objectgroup_macro"
	// Smi.g:901:1: objectgroup_macro : 'OBJECT-GROUP' 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' objectgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ;
	[GrammarRule("objectgroup_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectgroup_macro()
	{
		EnterRule_objectgroup_macro();
		EnterRule("objectgroup_macro", 76);
		TraceIn("objectgroup_macro", 76);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal421 = default(IToken);
	    IToken string_literal422 = default(IToken);
	    IToken L_BRACE423 = default(IToken);
	    IToken COMMA425 = default(IToken);
	    IToken R_BRACE427 = default(IToken);
	    IToken string_literal428 = default(IToken);
	    IToken string_literal430 = default(IToken);
	    IToken C_STRING431 = default(IToken);
	    IToken string_literal432 = default(IToken);
	    IToken C_STRING433 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> objectgroup_macro_status429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal421_tree = default(CommonTree);
	    CommonTree string_literal422_tree = default(CommonTree);
	    CommonTree L_BRACE423_tree = default(CommonTree);
	    CommonTree COMMA425_tree = default(CommonTree);
	    CommonTree R_BRACE427_tree = default(CommonTree);
	    CommonTree string_literal428_tree = default(CommonTree);
	    CommonTree string_literal430_tree = default(CommonTree);
	    CommonTree C_STRING431_tree = default(CommonTree);
	    CommonTree string_literal432_tree = default(CommonTree);
	    CommonTree C_STRING433_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objectgroup_macro");
		DebugLocation(901, 105);
		try
		{
			// Smi.g:901:18: ( 'OBJECT-GROUP' 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' objectgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:901:20: 'OBJECT-GROUP' 'OBJECTS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' objectgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(901, 20);
			string_literal421=(IToken)Match(input,163,Follow._163_in_objectgroup_macro5820); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal421_tree = (CommonTree)adaptor.Create(string_literal421);
			adaptor.AddChild(root_0, string_literal421_tree);
			}
			DebugLocation(901, 35);
			string_literal422=(IToken)Match(input,166,Follow._166_in_objectgroup_macro5822); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal422_tree = (CommonTree)adaptor.Create(string_literal422);
			adaptor.AddChild(root_0, string_literal422_tree);
			}
			DebugLocation(901, 45);
			L_BRACE423=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_objectgroup_macro5824); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE423_tree = (CommonTree)adaptor.Create(L_BRACE423);
			adaptor.AddChild(root_0, L_BRACE423_tree);
			}
			DebugLocation(901, 53);
			PushFollow(Follow._value_in_objectgroup_macro5826);
			value424=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value424.Tree);
			DebugLocation(901, 59);
			// Smi.g:901:59: ( COMMA value )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_1 = input.LA(1);

				if ((LA99_1==COMMA))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:901:60: COMMA value
					{
					DebugLocation(901, 60);
					COMMA425=(IToken)Match(input,COMMA,Follow._COMMA_in_objectgroup_macro5829); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA425_tree = (CommonTree)adaptor.Create(COMMA425);
					adaptor.AddChild(root_0, COMMA425_tree);
					}
					DebugLocation(901, 66);
					PushFollow(Follow._value_in_objectgroup_macro5831);
					value426=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value426.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(901, 74);
			R_BRACE427=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_objectgroup_macro5835); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE427_tree = (CommonTree)adaptor.Create(R_BRACE427);
			adaptor.AddChild(root_0, R_BRACE427_tree);
			}
			DebugLocation(902, 25);
			string_literal428=(IToken)Match(input,184,Follow._184_in_objectgroup_macro5862); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal428_tree = (CommonTree)adaptor.Create(string_literal428);
			adaptor.AddChild(root_0, string_literal428_tree);
			}
			DebugLocation(902, 34);
			PushFollow(Follow._objectgroup_macro_status_in_objectgroup_macro5864);
			objectgroup_macro_status429=objectgroup_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, objectgroup_macro_status429.Tree);
			DebugLocation(902, 59);
			string_literal430=(IToken)Match(input,141,Follow._141_in_objectgroup_macro5866); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal430_tree = (CommonTree)adaptor.Create(string_literal430);
			adaptor.AddChild(root_0, string_literal430_tree);
			}
			DebugLocation(902, 73);
			C_STRING431=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectgroup_macro5868); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING431_tree = (CommonTree)adaptor.Create(C_STRING431);
			adaptor.AddChild(root_0, C_STRING431_tree);
			}
			DebugLocation(902, 82);
			// Smi.g:902:82: ( 'REFERENCE' C_STRING )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			int LA100_1 = input.LA(1);

			if ((LA100_1==177))
			{
				alt100 = 1;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:902:83: 'REFERENCE' C_STRING
				{
				DebugLocation(902, 83);
				string_literal432=(IToken)Match(input,177,Follow._177_in_objectgroup_macro5871); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal432_tree = (CommonTree)adaptor.Create(string_literal432);
				adaptor.AddChild(root_0, string_literal432_tree);
				}
				DebugLocation(902, 95);
				C_STRING433=(IToken)Match(input,C_STRING,Follow._C_STRING_in_objectgroup_macro5873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING433_tree = (CommonTree)adaptor.Create(C_STRING433);
				adaptor.AddChild(root_0, C_STRING433_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectgroup_macro", 76);
			LeaveRule("objectgroup_macro", 76);
			LeaveRule_objectgroup_macro();
	    }
	 	DebugLocation(902, 105);
		} finally { DebugExitRule(GrammarFileName, "objectgroup_macro"); }
		return retval;

	}
	// $ANTLR end "objectgroup_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_objectgroup_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_objectgroup_macro_status() {}
	// $ANTLR start "objectgroup_macro_status"
	// Smi.g:903:1: objectgroup_macro_status : l= LOWER ;
	[GrammarRule("objectgroup_macro_status")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectgroup_macro_status()
	{
		EnterRule_objectgroup_macro_status();
		EnterRule("objectgroup_macro_status", 77);
		TraceIn("objectgroup_macro_status", 77);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "objectgroup_macro_status");
		DebugLocation(903, 111);
		try
		{
			// Smi.g:903:25: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:903:27: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(903, 28);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_objectgroup_macro_status5884); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(904, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectgroup_macro_status", 77);
			LeaveRule("objectgroup_macro_status", 77);
			LeaveRule_objectgroup_macro_status();
	    }
	 	DebugLocation(907, 111);
		} finally { DebugExitRule(GrammarFileName, "objectgroup_macro_status"); }
		return retval;

	}
	// $ANTLR end "objectgroup_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_notificationgroup_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_notificationgroup_macro() {}
	// $ANTLR start "notificationgroup_macro"
	// Smi.g:910:1: notificationgroup_macro : 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' notificationgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ;
	[GrammarRule("notificationgroup_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> notificationgroup_macro()
	{
		EnterRule_notificationgroup_macro();
		EnterRule("notificationgroup_macro", 78);
		TraceIn("notificationgroup_macro", 78);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal434 = default(IToken);
	    IToken string_literal435 = default(IToken);
	    IToken L_BRACE436 = default(IToken);
	    IToken COMMA438 = default(IToken);
	    IToken R_BRACE440 = default(IToken);
	    IToken string_literal441 = default(IToken);
	    IToken string_literal443 = default(IToken);
	    IToken C_STRING444 = default(IToken);
	    IToken string_literal445 = default(IToken);
	    IToken C_STRING446 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> notificationgroup_macro_status442 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal434_tree = default(CommonTree);
	    CommonTree string_literal435_tree = default(CommonTree);
	    CommonTree L_BRACE436_tree = default(CommonTree);
	    CommonTree COMMA438_tree = default(CommonTree);
	    CommonTree R_BRACE440_tree = default(CommonTree);
	    CommonTree string_literal441_tree = default(CommonTree);
	    CommonTree string_literal443_tree = default(CommonTree);
	    CommonTree C_STRING444_tree = default(CommonTree);
	    CommonTree string_literal445_tree = default(CommonTree);
	    CommonTree C_STRING446_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "notificationgroup_macro");
		DebugLocation(910, 111);
		try
		{
			// Smi.g:910:24: ( 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' notificationgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? )
			DebugEnterAlt(1);
			// Smi.g:910:26: 'NOTIFICATION-GROUP' 'NOTIFICATIONS' L_BRACE value ( COMMA value )* R_BRACE 'STATUS' notificationgroup_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(910, 26);
			string_literal434=(IToken)Match(input,160,Follow._160_in_notificationgroup_macro5936); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal434_tree = (CommonTree)adaptor.Create(string_literal434);
			adaptor.AddChild(root_0, string_literal434_tree);
			}
			DebugLocation(910, 47);
			string_literal435=(IToken)Match(input,162,Follow._162_in_notificationgroup_macro5938); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal435_tree = (CommonTree)adaptor.Create(string_literal435);
			adaptor.AddChild(root_0, string_literal435_tree);
			}
			DebugLocation(910, 63);
			L_BRACE436=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_notificationgroup_macro5940); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE436_tree = (CommonTree)adaptor.Create(L_BRACE436);
			adaptor.AddChild(root_0, L_BRACE436_tree);
			}
			DebugLocation(910, 71);
			PushFollow(Follow._value_in_notificationgroup_macro5942);
			value437=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value437.Tree);
			DebugLocation(910, 77);
			// Smi.g:910:77: ( COMMA value )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_1 = input.LA(1);

				if ((LA101_1==COMMA))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:910:78: COMMA value
					{
					DebugLocation(910, 78);
					COMMA438=(IToken)Match(input,COMMA,Follow._COMMA_in_notificationgroup_macro5945); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA438_tree = (CommonTree)adaptor.Create(COMMA438);
					adaptor.AddChild(root_0, COMMA438_tree);
					}
					DebugLocation(910, 84);
					PushFollow(Follow._value_in_notificationgroup_macro5947);
					value439=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value439.Tree);

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }

			DebugLocation(910, 92);
			R_BRACE440=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_notificationgroup_macro5951); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE440_tree = (CommonTree)adaptor.Create(R_BRACE440);
			adaptor.AddChild(root_0, R_BRACE440_tree);
			}
			DebugLocation(911, 25);
			string_literal441=(IToken)Match(input,184,Follow._184_in_notificationgroup_macro5978); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal441_tree = (CommonTree)adaptor.Create(string_literal441);
			adaptor.AddChild(root_0, string_literal441_tree);
			}
			DebugLocation(911, 34);
			PushFollow(Follow._notificationgroup_macro_status_in_notificationgroup_macro5980);
			notificationgroup_macro_status442=notificationgroup_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, notificationgroup_macro_status442.Tree);
			DebugLocation(911, 65);
			string_literal443=(IToken)Match(input,141,Follow._141_in_notificationgroup_macro5982); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal443_tree = (CommonTree)adaptor.Create(string_literal443);
			adaptor.AddChild(root_0, string_literal443_tree);
			}
			DebugLocation(911, 79);
			C_STRING444=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationgroup_macro5984); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING444_tree = (CommonTree)adaptor.Create(C_STRING444);
			adaptor.AddChild(root_0, C_STRING444_tree);
			}
			DebugLocation(911, 88);
			// Smi.g:911:88: ( 'REFERENCE' C_STRING )?
			int alt102=2;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, decisionCanBacktrack[102]);
			int LA102_1 = input.LA(1);

			if ((LA102_1==177))
			{
				alt102 = 1;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:911:89: 'REFERENCE' C_STRING
				{
				DebugLocation(911, 89);
				string_literal445=(IToken)Match(input,177,Follow._177_in_notificationgroup_macro5987); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal445_tree = (CommonTree)adaptor.Create(string_literal445);
				adaptor.AddChild(root_0, string_literal445_tree);
				}
				DebugLocation(911, 101);
				C_STRING446=(IToken)Match(input,C_STRING,Follow._C_STRING_in_notificationgroup_macro5989); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING446_tree = (CommonTree)adaptor.Create(C_STRING446);
				adaptor.AddChild(root_0, C_STRING446_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationgroup_macro", 78);
			LeaveRule("notificationgroup_macro", 78);
			LeaveRule_notificationgroup_macro();
	    }
	 	DebugLocation(911, 111);
		} finally { DebugExitRule(GrammarFileName, "notificationgroup_macro"); }
		return retval;

	}
	// $ANTLR end "notificationgroup_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_notificationgroup_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_notificationgroup_macro_status() {}
	// $ANTLR start "notificationgroup_macro_status"
	// Smi.g:912:1: notificationgroup_macro_status : l= LOWER ;
	[GrammarRule("notificationgroup_macro_status")]
	private AstParserRuleReturnScope<CommonTree, IToken> notificationgroup_macro_status()
	{
		EnterRule_notificationgroup_macro_status();
		EnterRule("notificationgroup_macro_status", 79);
		TraceIn("notificationgroup_macro_status", 79);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "notificationgroup_macro_status");
		DebugLocation(912, 111);
		try
		{
			// Smi.g:912:31: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:912:33: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(912, 34);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_notificationgroup_macro_status6000); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(913, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("notificationgroup_macro_status", 79);
			LeaveRule("notificationgroup_macro_status", 79);
			LeaveRule_notificationgroup_macro_status();
	    }
	 	DebugLocation(916, 111);
		} finally { DebugExitRule(GrammarFileName, "notificationgroup_macro_status"); }
		return retval;

	}
	// $ANTLR end "notificationgroup_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro() {}
	// $ANTLR start "modulecompliance_macro"
	// Smi.g:919:1: modulecompliance_macro : 'MODULE-COMPLIANCE' 'STATUS' modulecompliance_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( modulecompliance_macro_module )+ ;
	[GrammarRule("modulecompliance_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro()
	{
		EnterRule_modulecompliance_macro();
		EnterRule("modulecompliance_macro", 80);
		TraceIn("modulecompliance_macro", 80);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal447 = default(IToken);
	    IToken string_literal448 = default(IToken);
	    IToken string_literal450 = default(IToken);
	    IToken C_STRING451 = default(IToken);
	    IToken string_literal452 = default(IToken);
	    IToken C_STRING453 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_status449 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_module454 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal447_tree = default(CommonTree);
	    CommonTree string_literal448_tree = default(CommonTree);
	    CommonTree string_literal450_tree = default(CommonTree);
	    CommonTree C_STRING451_tree = default(CommonTree);
	    CommonTree string_literal452_tree = default(CommonTree);
	    CommonTree C_STRING453_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro");
		DebugLocation(919, 104);
		try
		{
			// Smi.g:919:23: ( 'MODULE-COMPLIANCE' 'STATUS' modulecompliance_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( modulecompliance_macro_module )+ )
			DebugEnterAlt(1);
			// Smi.g:919:25: 'MODULE-COMPLIANCE' 'STATUS' modulecompliance_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( modulecompliance_macro_module )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(919, 25);
			string_literal447=(IToken)Match(input,158,Follow._158_in_modulecompliance_macro6052); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal447_tree = (CommonTree)adaptor.Create(string_literal447);
			adaptor.AddChild(root_0, string_literal447_tree);
			}
			DebugLocation(919, 45);
			string_literal448=(IToken)Match(input,184,Follow._184_in_modulecompliance_macro6054); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal448_tree = (CommonTree)adaptor.Create(string_literal448);
			adaptor.AddChild(root_0, string_literal448_tree);
			}
			DebugLocation(919, 54);
			PushFollow(Follow._modulecompliance_macro_status_in_modulecompliance_macro6056);
			modulecompliance_macro_status449=modulecompliance_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_status449.Tree);
			DebugLocation(920, 25);
			string_literal450=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro6082); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal450_tree = (CommonTree)adaptor.Create(string_literal450);
			adaptor.AddChild(root_0, string_literal450_tree);
			}
			DebugLocation(920, 39);
			C_STRING451=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro6084); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING451_tree = (CommonTree)adaptor.Create(C_STRING451);
			adaptor.AddChild(root_0, C_STRING451_tree);
			}
			DebugLocation(920, 48);
			// Smi.g:920:48: ( 'REFERENCE' C_STRING )?
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, decisionCanBacktrack[103]);
			int LA103_1 = input.LA(1);

			if ((LA103_1==177))
			{
				alt103 = 1;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:920:49: 'REFERENCE' C_STRING
				{
				DebugLocation(920, 49);
				string_literal452=(IToken)Match(input,177,Follow._177_in_modulecompliance_macro6087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal452_tree = (CommonTree)adaptor.Create(string_literal452);
				adaptor.AddChild(root_0, string_literal452_tree);
				}
				DebugLocation(920, 61);
				C_STRING453=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro6089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING453_tree = (CommonTree)adaptor.Create(C_STRING453);
				adaptor.AddChild(root_0, C_STRING453_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(103); }

			DebugLocation(920, 72);
			// Smi.g:920:72: ( modulecompliance_macro_module )+
			int cnt104=0;
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_1 = input.LA(1);

				if ((LA104_1==157))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:920:73: modulecompliance_macro_module
					{
					DebugLocation(920, 73);
					PushFollow(Follow._modulecompliance_macro_module_in_modulecompliance_macro6094);
					modulecompliance_macro_module454=modulecompliance_macro_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_module454.Tree);

					}
					break;

				default:
					if (cnt104 >= 1)
						goto loop104;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee104 = new EarlyExitException( 104, input );
					DebugRecognitionException(eee104);
					throw eee104;
				}
				cnt104++;
			}
			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro", 80);
			LeaveRule("modulecompliance_macro", 80);
			LeaveRule_modulecompliance_macro();
	    }
	 	DebugLocation(920, 104);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_status() {}
	// $ANTLR start "modulecompliance_macro_status"
	// Smi.g:921:1: modulecompliance_macro_status : l= LOWER ;
	[GrammarRule("modulecompliance_macro_status")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_status()
	{
		EnterRule_modulecompliance_macro_status();
		EnterRule("modulecompliance_macro_status", 81);
		TraceIn("modulecompliance_macro_status", 81);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_status");
		DebugLocation(921, 111);
		try
		{
			// Smi.g:921:30: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:921:32: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(921, 33);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_status6105); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(922, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("deprecated") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_status", 81);
			LeaveRule("modulecompliance_macro_status", 81);
			LeaveRule_modulecompliance_macro_status();
	    }
	 	DebugLocation(925, 111);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_status"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_module() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_module() {}
	// $ANTLR start "modulecompliance_macro_module"
	// Smi.g:926:1: modulecompliance_macro_module : 'MODULE' ( ( UPPER )=> UPPER ( ( value )=> value )? )? ( 'MANDATORY-GROUPS' L_BRACE value ( COMMA value )* R_BRACE )? ( modulecompliance_macro_compliance )* ;
	[GrammarRule("modulecompliance_macro_module")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_module()
	{
		EnterRule_modulecompliance_macro_module();
		EnterRule("modulecompliance_macro_module", 82);
		TraceIn("modulecompliance_macro_module", 82);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal455 = default(IToken);
	    IToken UPPER456 = default(IToken);
	    IToken string_literal458 = default(IToken);
	    IToken L_BRACE459 = default(IToken);
	    IToken COMMA461 = default(IToken);
	    IToken R_BRACE463 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_compliance464 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal455_tree = default(CommonTree);
	    CommonTree UPPER456_tree = default(CommonTree);
	    CommonTree string_literal458_tree = default(CommonTree);
	    CommonTree L_BRACE459_tree = default(CommonTree);
	    CommonTree COMMA461_tree = default(CommonTree);
	    CommonTree R_BRACE463_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_module");
		DebugLocation(926, 69);
		try
		{
			// Smi.g:926:30: ( 'MODULE' ( ( UPPER )=> UPPER ( ( value )=> value )? )? ( 'MANDATORY-GROUPS' L_BRACE value ( COMMA value )* R_BRACE )? ( modulecompliance_macro_compliance )* )
			DebugEnterAlt(1);
			// Smi.g:926:32: 'MODULE' ( ( UPPER )=> UPPER ( ( value )=> value )? )? ( 'MANDATORY-GROUPS' L_BRACE value ( COMMA value )* R_BRACE )? ( modulecompliance_macro_compliance )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(926, 32);
			string_literal455=(IToken)Match(input,157,Follow._157_in_modulecompliance_macro_module6153); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal455_tree = (CommonTree)adaptor.Create(string_literal455);
			adaptor.AddChild(root_0, string_literal455_tree);
			}
			DebugLocation(926, 41);
			// Smi.g:926:41: ( ( UPPER )=> UPPER ( ( value )=> value )? )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, decisionCanBacktrack[106]);
			try
			{
				alt106 = dfa106.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:926:42: ( UPPER )=> UPPER ( ( value )=> value )?
				{
				DebugLocation(926, 53);
				UPPER456=(IToken)Match(input,UPPER,Follow._UPPER_in_modulecompliance_macro_module6162); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPPER456_tree = (CommonTree)adaptor.Create(UPPER456);
				adaptor.AddChild(root_0, UPPER456_tree);
				}
				DebugLocation(926, 59);
				// Smi.g:926:59: ( ( value )=> value )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				try
				{
					alt105 = dfa105.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:926:60: ( value )=> value
					{
					DebugLocation(926, 71);
					PushFollow(Follow._value_in_modulecompliance_macro_module6171);
					value457=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value457.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(927, 33);
			// Smi.g:927:33: ( 'MANDATORY-GROUPS' L_BRACE value ( COMMA value )* R_BRACE )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
			int LA108_1 = input.LA(1);

			if ((LA108_1==154))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:927:34: 'MANDATORY-GROUPS' L_BRACE value ( COMMA value )* R_BRACE
				{
				DebugLocation(927, 34);
				string_literal458=(IToken)Match(input,154,Follow._154_in_modulecompliance_macro_module6212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal458_tree = (CommonTree)adaptor.Create(string_literal458);
				adaptor.AddChild(root_0, string_literal458_tree);
				}
				DebugLocation(927, 53);
				L_BRACE459=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_modulecompliance_macro_module6214); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE459_tree = (CommonTree)adaptor.Create(L_BRACE459);
				adaptor.AddChild(root_0, L_BRACE459_tree);
				}
				DebugLocation(927, 61);
				PushFollow(Follow._value_in_modulecompliance_macro_module6216);
				value460=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value460.Tree);
				DebugLocation(927, 67);
				// Smi.g:927:67: ( COMMA value )*
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, decisionCanBacktrack[107]);
					int LA107_1 = input.LA(1);

					if ((LA107_1==COMMA))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch ( alt107 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:927:68: COMMA value
						{
						DebugLocation(927, 68);
						COMMA461=(IToken)Match(input,COMMA,Follow._COMMA_in_modulecompliance_macro_module6219); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA461_tree = (CommonTree)adaptor.Create(COMMA461);
						adaptor.AddChild(root_0, COMMA461_tree);
						}
						DebugLocation(927, 74);
						PushFollow(Follow._value_in_modulecompliance_macro_module6221);
						value462=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, value462.Tree);

						}
						break;

					default:
						goto loop107;
					}
				}

				loop107:
					;

				} finally { DebugExitSubRule(107); }

				DebugLocation(927, 82);
				R_BRACE463=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_modulecompliance_macro_module6225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE463_tree = (CommonTree)adaptor.Create(R_BRACE463);
				adaptor.AddChild(root_0, R_BRACE463_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(928, 33);
			// Smi.g:928:33: ( modulecompliance_macro_compliance )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_1 = input.LA(1);

				if ((LA109_1==OBJECT_KW))
				{
					int LA109_2 = input.LA(2);

					if ((LA109_2==B_STRING||LA109_2==C_STRING||LA109_2==FALSE_KW||LA109_2==H_STRING||(LA109_2>=LOWER && LA109_2<=L_BRACE)||(LA109_2>=MINUS && LA109_2<=MINUS_INFINITY_KW)||(LA109_2>=NULL_KW && LA109_2<=NUMBER)||LA109_2==PLUS_INFINITY_KW||LA109_2==TRUE_KW||LA109_2==UPPER))
					{
						alt109 = 1;
					}


				}
				else if ((LA109_1==149))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:928:34: modulecompliance_macro_compliance
					{
					DebugLocation(928, 34);
					PushFollow(Follow._modulecompliance_macro_compliance_in_modulecompliance_macro_module6262);
					modulecompliance_macro_compliance464=modulecompliance_macro_compliance();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_compliance464.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_module", 82);
			LeaveRule("modulecompliance_macro_module", 82);
			LeaveRule_modulecompliance_macro_module();
	    }
	 	DebugLocation(928, 69);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_module"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_module"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_compliance() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_compliance() {}
	// $ANTLR start "modulecompliance_macro_compliance"
	// Smi.g:929:1: modulecompliance_macro_compliance : ( 'GROUP' value 'DESCRIPTION' C_STRING | 'OBJECT' value ( 'SYNTAX' modulecompliance_macro_syntax )? ( 'WRITE-SYNTAX' modulecompliance_macro_syntax )? ( 'MIN-ACCESS' modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' modulecompliance_macro_pibaccess )? 'DESCRIPTION' C_STRING );
	[GrammarRule("modulecompliance_macro_compliance")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_compliance()
	{
		EnterRule_modulecompliance_macro_compliance();
		EnterRule("modulecompliance_macro_compliance", 83);
		TraceIn("modulecompliance_macro_compliance", 83);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal465 = default(IToken);
	    IToken string_literal467 = default(IToken);
	    IToken C_STRING468 = default(IToken);
	    IToken string_literal469 = default(IToken);
	    IToken string_literal471 = default(IToken);
	    IToken string_literal473 = default(IToken);
	    IToken string_literal475 = default(IToken);
	    IToken string_literal477 = default(IToken);
	    IToken string_literal479 = default(IToken);
	    IToken C_STRING480 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_syntax472 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_syntax474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_access476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_pibaccess478 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal465_tree = default(CommonTree);
	    CommonTree string_literal467_tree = default(CommonTree);
	    CommonTree C_STRING468_tree = default(CommonTree);
	    CommonTree string_literal469_tree = default(CommonTree);
	    CommonTree string_literal471_tree = default(CommonTree);
	    CommonTree string_literal473_tree = default(CommonTree);
	    CommonTree string_literal475_tree = default(CommonTree);
	    CommonTree string_literal477_tree = default(CommonTree);
	    CommonTree string_literal479_tree = default(CommonTree);
	    CommonTree C_STRING480_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_compliance");
		DebugLocation(929, 58);
		try
		{
			// Smi.g:929:34: ( 'GROUP' value 'DESCRIPTION' C_STRING | 'OBJECT' value ( 'SYNTAX' modulecompliance_macro_syntax )? ( 'WRITE-SYNTAX' modulecompliance_macro_syntax )? ( 'MIN-ACCESS' modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' modulecompliance_macro_pibaccess )? 'DESCRIPTION' C_STRING )
			int alt114=2;
			try { DebugEnterDecision(114, decisionCanBacktrack[114]);
			int LA114_1 = input.LA(1);

			if ((LA114_1==149))
			{
				alt114 = 1;
			}
			else if ((LA114_1==OBJECT_KW))
			{
				alt114 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 114, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:929:36: 'GROUP' value 'DESCRIPTION' C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(929, 36);
				string_literal465=(IToken)Match(input,149,Follow._149_in_modulecompliance_macro_compliance6271); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal465_tree = (CommonTree)adaptor.Create(string_literal465);
				adaptor.AddChild(root_0, string_literal465_tree);
				}
				DebugLocation(929, 44);
				PushFollow(Follow._value_in_modulecompliance_macro_compliance6273);
				value466=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value466.Tree);
				DebugLocation(929, 50);
				string_literal467=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro_compliance6275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal467_tree = (CommonTree)adaptor.Create(string_literal467);
				adaptor.AddChild(root_0, string_literal467_tree);
				}
				DebugLocation(929, 64);
				C_STRING468=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro_compliance6277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING468_tree = (CommonTree)adaptor.Create(C_STRING468);
				adaptor.AddChild(root_0, C_STRING468_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:930:36: 'OBJECT' value ( 'SYNTAX' modulecompliance_macro_syntax )? ( 'WRITE-SYNTAX' modulecompliance_macro_syntax )? ( 'MIN-ACCESS' modulecompliance_macro_access )? ( 'PIB-MIN-ACCESS' modulecompliance_macro_pibaccess )? 'DESCRIPTION' C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(930, 36);
				string_literal469=(IToken)Match(input,OBJECT_KW,Follow._OBJECT_KW_in_modulecompliance_macro_compliance6314); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal469_tree = (CommonTree)adaptor.Create(string_literal469);
				adaptor.AddChild(root_0, string_literal469_tree);
				}
				DebugLocation(930, 45);
				PushFollow(Follow._value_in_modulecompliance_macro_compliance6316);
				value470=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value470.Tree);
				DebugLocation(931, 37);
				// Smi.g:931:37: ( 'SYNTAX' modulecompliance_macro_syntax )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_1 = input.LA(1);

				if ((LA110_1==187))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:931:38: 'SYNTAX' modulecompliance_macro_syntax
					{
					DebugLocation(931, 38);
					string_literal471=(IToken)Match(input,187,Follow._187_in_modulecompliance_macro_compliance6356); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal471_tree = (CommonTree)adaptor.Create(string_literal471);
					adaptor.AddChild(root_0, string_literal471_tree);
					}
					DebugLocation(931, 47);
					PushFollow(Follow._modulecompliance_macro_syntax_in_modulecompliance_macro_compliance6358);
					modulecompliance_macro_syntax472=modulecompliance_macro_syntax();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_syntax472.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(932, 37);
				// Smi.g:932:37: ( 'WRITE-SYNTAX' modulecompliance_macro_syntax )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_1 = input.LA(1);

				if ((LA111_1==197))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:932:38: 'WRITE-SYNTAX' modulecompliance_macro_syntax
					{
					DebugLocation(932, 38);
					string_literal473=(IToken)Match(input,197,Follow._197_in_modulecompliance_macro_compliance6400); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal473_tree = (CommonTree)adaptor.Create(string_literal473);
					adaptor.AddChild(root_0, string_literal473_tree);
					}
					DebugLocation(932, 53);
					PushFollow(Follow._modulecompliance_macro_syntax_in_modulecompliance_macro_compliance6402);
					modulecompliance_macro_syntax474=modulecompliance_macro_syntax();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_syntax474.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(933, 37);
				// Smi.g:933:37: ( 'MIN-ACCESS' modulecompliance_macro_access )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_1 = input.LA(1);

				if ((LA112_1==156))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:933:38: 'MIN-ACCESS' modulecompliance_macro_access
					{
					DebugLocation(933, 38);
					string_literal475=(IToken)Match(input,156,Follow._156_in_modulecompliance_macro_compliance6449); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal475_tree = (CommonTree)adaptor.Create(string_literal475);
					adaptor.AddChild(root_0, string_literal475_tree);
					}
					DebugLocation(933, 51);
					PushFollow(Follow._modulecompliance_macro_access_in_modulecompliance_macro_compliance6451);
					modulecompliance_macro_access476=modulecompliance_macro_access();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_access476.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(934, 37);
				// Smi.g:934:37: ( 'PIB-MIN-ACCESS' modulecompliance_macro_pibaccess )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_1 = input.LA(1);

				if ((LA113_1==171))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:934:38: 'PIB-MIN-ACCESS' modulecompliance_macro_pibaccess
					{
					DebugLocation(934, 38);
					string_literal477=(IToken)Match(input,171,Follow._171_in_modulecompliance_macro_compliance6493); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal477_tree = (CommonTree)adaptor.Create(string_literal477);
					adaptor.AddChild(root_0, string_literal477_tree);
					}
					DebugLocation(934, 55);
					PushFollow(Follow._modulecompliance_macro_pibaccess_in_modulecompliance_macro_compliance6495);
					modulecompliance_macro_pibaccess478=modulecompliance_macro_pibaccess();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_pibaccess478.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(935, 37);
				string_literal479=(IToken)Match(input,141,Follow._141_in_modulecompliance_macro_compliance6540); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal479_tree = (CommonTree)adaptor.Create(string_literal479);
				adaptor.AddChild(root_0, string_literal479_tree);
				}
				DebugLocation(935, 51);
				C_STRING480=(IToken)Match(input,C_STRING,Follow._C_STRING_in_modulecompliance_macro_compliance6542); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING480_tree = (CommonTree)adaptor.Create(C_STRING480);
				adaptor.AddChild(root_0, C_STRING480_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_compliance", 83);
			LeaveRule("modulecompliance_macro_compliance", 83);
			LeaveRule_modulecompliance_macro_compliance();
	    }
	 	DebugLocation(935, 58);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_compliance"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_compliance"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_syntax() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_syntax() {}
	// $ANTLR start "modulecompliance_macro_syntax"
	// Smi.g:936:1: modulecompliance_macro_syntax : ( ( smi_type L_BRACE )=> smi_type L_BRACE modulecompliance_macro_namedbit ( COMMA modulecompliance_macro_namedbit )* R_BRACE | ( smi_type )=> smi_type ( smi_subtyping )? | type );
	[GrammarRule("modulecompliance_macro_syntax")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_syntax()
	{
		EnterRule_modulecompliance_macro_syntax();
		EnterRule("modulecompliance_macro_syntax", 84);
		TraceIn("modulecompliance_macro_syntax", 84);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE482 = default(IToken);
	    IToken COMMA484 = default(IToken);
	    IToken R_BRACE486 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type481 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_namedbit483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_namedbit485 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type487 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type489 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE482_tree = default(CommonTree);
	    CommonTree COMMA484_tree = default(CommonTree);
	    CommonTree R_BRACE486_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_syntax");
		DebugLocation(936, 35);
		try
		{
			// Smi.g:936:30: ( ( smi_type L_BRACE )=> smi_type L_BRACE modulecompliance_macro_namedbit ( COMMA modulecompliance_macro_namedbit )* R_BRACE | ( smi_type )=> smi_type ( smi_subtyping )? | type )
			int alt117=3;
			try { DebugEnterDecision(117, decisionCanBacktrack[117]);
			switch (input.LA(1))
			{
			case 137:
				{
				int LA117_2 = input.LA(2);

				if ((LA117_2==L_BRACE) && (EvaluatePredicate(synpred34_Smi_fragment)))
				{
					alt117 = 1;
				}
				else if ((EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt117 = 2;
				}
				else if ((true))
				{
					alt117 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER_KW:
				{
				int LA117_2 = input.LA(2);

				if ((LA117_2==L_BRACE) && (EvaluatePredicate(synpred34_Smi_fragment)))
				{
					alt117 = 1;
				}
				else if ((EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt117 = 2;
				}
				else if ((true))
				{
					alt117 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA117_2 = input.LA(2);

				if ((LA117_2==STRING_KW))
				{
					int LA117_3 = input.LA(3);

					if ((LA117_3==L_BRACE) && (EvaluatePredicate(synpred34_Smi_fragment)))
					{
						alt117 = 1;
					}
					else if ((EvaluatePredicate(synpred35_Smi_fragment)))
					{
						alt117 = 2;
					}
					else if ((true))
					{
						alt117 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 117, 9, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OBJECT_KW:
				{
				int LA117_2 = input.LA(2);

				if ((LA117_2==IDENTIFIER_KW))
				{
					int LA117_3 = input.LA(3);

					if ((LA117_3==L_BRACE) && (EvaluatePredicate(synpred34_Smi_fragment)))
					{
						alt117 = 1;
					}
					else if ((EvaluatePredicate(synpred35_Smi_fragment)))
					{
						alt117 = 2;
					}
					else if ((true))
					{
						alt117 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 117, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				int LA117_2 = input.LA(2);

				if ((LA117_2==L_BRACE) && (EvaluatePredicate(synpred34_Smi_fragment)))
				{
					alt117 = 1;
				}
				else if ((EvaluatePredicate(synpred35_Smi_fragment)))
				{
					alt117 = 2;
				}
				else if ((true))
				{
					alt117 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case ERROR_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case LOWER:
			case L_BRACKET:
			case NULL_KW:
			case NUMERIC_STR_KW:
			case OPERATION_KW:
			case PRINTABLE_STR_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 179:
			case 188:
			case 191:
				{
				alt117 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:936:32: ( smi_type L_BRACE )=> smi_type L_BRACE modulecompliance_macro_namedbit ( COMMA modulecompliance_macro_namedbit )* R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(936, 54);
				PushFollow(Follow._smi_type_in_modulecompliance_macro_syntax6556);
				smi_type481=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type481.Tree);
				DebugLocation(936, 63);
				L_BRACE482=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_modulecompliance_macro_syntax6558); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE482_tree = (CommonTree)adaptor.Create(L_BRACE482);
				adaptor.AddChild(root_0, L_BRACE482_tree);
				}
				DebugLocation(936, 71);
				PushFollow(Follow._modulecompliance_macro_namedbit_in_modulecompliance_macro_syntax6560);
				modulecompliance_macro_namedbit483=modulecompliance_macro_namedbit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_namedbit483.Tree);
				DebugLocation(936, 103);
				// Smi.g:936:103: ( COMMA modulecompliance_macro_namedbit )*
				try { DebugEnterSubRule(115);
				while (true)
				{
					int alt115=2;
					try { DebugEnterDecision(115, decisionCanBacktrack[115]);
					int LA115_1 = input.LA(1);

					if ((LA115_1==COMMA))
					{
						alt115 = 1;
					}


					} finally { DebugExitDecision(115); }
					switch ( alt115 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:936:104: COMMA modulecompliance_macro_namedbit
						{
						DebugLocation(936, 104);
						COMMA484=(IToken)Match(input,COMMA,Follow._COMMA_in_modulecompliance_macro_syntax6563); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA484_tree = (CommonTree)adaptor.Create(COMMA484);
						adaptor.AddChild(root_0, COMMA484_tree);
						}
						DebugLocation(936, 110);
						PushFollow(Follow._modulecompliance_macro_namedbit_in_modulecompliance_macro_syntax6565);
						modulecompliance_macro_namedbit485=modulecompliance_macro_namedbit();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modulecompliance_macro_namedbit485.Tree);

						}
						break;

					default:
						goto loop115;
					}
				}

				loop115:
					;

				} finally { DebugExitSubRule(115); }

				DebugLocation(936, 144);
				R_BRACE486=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_modulecompliance_macro_syntax6569); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE486_tree = (CommonTree)adaptor.Create(R_BRACE486);
				adaptor.AddChild(root_0, R_BRACE486_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:937:32: ( smi_type )=> smi_type ( smi_subtyping )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(937, 46);
				PushFollow(Follow._smi_type_in_modulecompliance_macro_syntax6608);
				smi_type487=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type487.Tree);
				DebugLocation(937, 55);
				// Smi.g:937:55: ( smi_subtyping )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_1 = input.LA(1);

				if ((LA116_1==L_PAREN))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:937:56: smi_subtyping
					{
					DebugLocation(937, 56);
					PushFollow(Follow._smi_subtyping_in_modulecompliance_macro_syntax6611);
					smi_subtyping488=smi_subtyping();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, smi_subtyping488.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(116); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:938:32: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(938, 32);
				PushFollow(Follow._type_in_modulecompliance_macro_syntax6646);
				type489=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type489.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_syntax", 84);
			LeaveRule("modulecompliance_macro_syntax", 84);
			LeaveRule_modulecompliance_macro_syntax();
	    }
	 	DebugLocation(938, 35);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_syntax"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_syntax"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_namedbit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_namedbit() {}
	// $ANTLR start "modulecompliance_macro_namedbit"
	// Smi.g:939:1: modulecompliance_macro_namedbit : LOWER L_PAREN NUMBER R_PAREN ;
	[GrammarRule("modulecompliance_macro_namedbit")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_namedbit()
	{
		EnterRule_modulecompliance_macro_namedbit();
		EnterRule("modulecompliance_macro_namedbit", 85);
		TraceIn("modulecompliance_macro_namedbit", 85);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER490 = default(IToken);
	    IToken L_PAREN491 = default(IToken);
	    IToken NUMBER492 = default(IToken);
	    IToken R_PAREN493 = default(IToken);

	    CommonTree LOWER490_tree = default(CommonTree);
	    CommonTree L_PAREN491_tree = default(CommonTree);
	    CommonTree NUMBER492_tree = default(CommonTree);
	    CommonTree R_PAREN493_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_namedbit");
		DebugLocation(939, 61);
		try
		{
			// Smi.g:939:32: ( LOWER L_PAREN NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:939:34: LOWER L_PAREN NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(939, 34);
			LOWER490=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_namedbit6652); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER490_tree = (CommonTree)adaptor.Create(LOWER490);
			adaptor.AddChild(root_0, LOWER490_tree);
			}
			DebugLocation(939, 40);
			L_PAREN491=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_modulecompliance_macro_namedbit6654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN491_tree = (CommonTree)adaptor.Create(L_PAREN491);
			adaptor.AddChild(root_0, L_PAREN491_tree);
			}
			DebugLocation(939, 48);
			NUMBER492=(IToken)Match(input,NUMBER,Follow._NUMBER_in_modulecompliance_macro_namedbit6656); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER492_tree = (CommonTree)adaptor.Create(NUMBER492);
			adaptor.AddChild(root_0, NUMBER492_tree);
			}
			DebugLocation(939, 55);
			R_PAREN493=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_modulecompliance_macro_namedbit6658); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN493_tree = (CommonTree)adaptor.Create(R_PAREN493);
			adaptor.AddChild(root_0, R_PAREN493_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_namedbit", 85);
			LeaveRule("modulecompliance_macro_namedbit", 85);
			LeaveRule_modulecompliance_macro_namedbit();
	    }
	 	DebugLocation(939, 61);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_namedbit"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_namedbit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_access() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_access() {}
	// $ANTLR start "modulecompliance_macro_access"
	// Smi.g:940:1: modulecompliance_macro_access : l= LOWER ;
	[GrammarRule("modulecompliance_macro_access")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_access()
	{
		EnterRule_modulecompliance_macro_access();
		EnterRule("modulecompliance_macro_access", 86);
		TraceIn("modulecompliance_macro_access", 86);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_access");
		DebugLocation(940, 111);
		try
		{
			// Smi.g:940:30: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:940:32: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(940, 33);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_access6666); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(941, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-accessible") 
				                                                || l.Text == ("accessible-for-notify") 
				                                                || l.Text == ("read-only")
				                                                || l.Text == ("read-write")
				                                                || l.Text == ("read-create"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_access", 86);
			LeaveRule("modulecompliance_macro_access", 86);
			LeaveRule_modulecompliance_macro_access();
	    }
	 	DebugLocation(946, 111);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_access"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_access"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modulecompliance_macro_pibaccess() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modulecompliance_macro_pibaccess() {}
	// $ANTLR start "modulecompliance_macro_pibaccess"
	// Smi.g:947:1: modulecompliance_macro_pibaccess : l= LOWER ;
	[GrammarRule("modulecompliance_macro_pibaccess")]
	private AstParserRuleReturnScope<CommonTree, IToken> modulecompliance_macro_pibaccess()
	{
		EnterRule_modulecompliance_macro_pibaccess();
		EnterRule("modulecompliance_macro_pibaccess", 87);
		TraceIn("modulecompliance_macro_pibaccess", 87);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "modulecompliance_macro_pibaccess");
		DebugLocation(947, 111);
		try
		{
			// Smi.g:947:33: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:947:35: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(947, 36);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_modulecompliance_macro_pibaccess6716); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(948, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-accessible") 
				                                                || l.Text == ("install") 
				                                                || l.Text == ("notify")
				                                                || l.Text == ("install-notify")
				                                                || l.Text == ("report-only"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modulecompliance_macro_pibaccess", 87);
			LeaveRule("modulecompliance_macro_pibaccess", 87);
			LeaveRule_modulecompliance_macro_pibaccess();
	    }
	 	DebugLocation(953, 111);
		} finally { DebugExitRule(GrammarFileName, "modulecompliance_macro_pibaccess"); }
		return retval;

	}
	// $ANTLR end "modulecompliance_macro_pibaccess"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro() {}
	// $ANTLR start "agentcapabilities_macro"
	// Smi.g:956:1: agentcapabilities_macro : 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' C_STRING 'STATUS' agentcapabilities_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( agentcapabilities_macro_module )* ;
	[GrammarRule("agentcapabilities_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro()
	{
		EnterRule_agentcapabilities_macro();
		EnterRule("agentcapabilities_macro", 88);
		TraceIn("agentcapabilities_macro", 88);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal494 = default(IToken);
	    IToken string_literal495 = default(IToken);
	    IToken C_STRING496 = default(IToken);
	    IToken string_literal497 = default(IToken);
	    IToken string_literal499 = default(IToken);
	    IToken C_STRING500 = default(IToken);
	    IToken string_literal501 = default(IToken);
	    IToken C_STRING502 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_status498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_module503 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal494_tree = default(CommonTree);
	    CommonTree string_literal495_tree = default(CommonTree);
	    CommonTree C_STRING496_tree = default(CommonTree);
	    CommonTree string_literal497_tree = default(CommonTree);
	    CommonTree string_literal499_tree = default(CommonTree);
	    CommonTree C_STRING500_tree = default(CommonTree);
	    CommonTree string_literal501_tree = default(CommonTree);
	    CommonTree C_STRING502_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro");
		DebugLocation(956, 105);
		try
		{
			// Smi.g:956:24: ( 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' C_STRING 'STATUS' agentcapabilities_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( agentcapabilities_macro_module )* )
			DebugEnterAlt(1);
			// Smi.g:956:26: 'AGENT-CAPABILITIES' 'PRODUCT-RELEASE' C_STRING 'STATUS' agentcapabilities_macro_status 'DESCRIPTION' C_STRING ( 'REFERENCE' C_STRING )? ( agentcapabilities_macro_module )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(956, 26);
			string_literal494=(IToken)Match(input,131,Follow._131_in_agentcapabilities_macro6767); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal494_tree = (CommonTree)adaptor.Create(string_literal494);
			adaptor.AddChild(root_0, string_literal494_tree);
			}
			DebugLocation(956, 47);
			string_literal495=(IToken)Match(input,175,Follow._175_in_agentcapabilities_macro6769); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal495_tree = (CommonTree)adaptor.Create(string_literal495);
			adaptor.AddChild(root_0, string_literal495_tree);
			}
			DebugLocation(956, 65);
			C_STRING496=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro6771); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING496_tree = (CommonTree)adaptor.Create(C_STRING496);
			adaptor.AddChild(root_0, C_STRING496_tree);
			}
			DebugLocation(956, 74);
			string_literal497=(IToken)Match(input,184,Follow._184_in_agentcapabilities_macro6773); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal497_tree = (CommonTree)adaptor.Create(string_literal497);
			adaptor.AddChild(root_0, string_literal497_tree);
			}
			DebugLocation(956, 83);
			PushFollow(Follow._agentcapabilities_macro_status_in_agentcapabilities_macro6775);
			agentcapabilities_macro_status498=agentcapabilities_macro_status();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_status498.Tree);
			DebugLocation(957, 26);
			string_literal499=(IToken)Match(input,141,Follow._141_in_agentcapabilities_macro6802); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal499_tree = (CommonTree)adaptor.Create(string_literal499);
			adaptor.AddChild(root_0, string_literal499_tree);
			}
			DebugLocation(957, 40);
			C_STRING500=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro6804); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING500_tree = (CommonTree)adaptor.Create(C_STRING500);
			adaptor.AddChild(root_0, C_STRING500_tree);
			}
			DebugLocation(957, 49);
			// Smi.g:957:49: ( 'REFERENCE' C_STRING )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, decisionCanBacktrack[118]);
			int LA118_1 = input.LA(1);

			if ((LA118_1==177))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:957:50: 'REFERENCE' C_STRING
				{
				DebugLocation(957, 50);
				string_literal501=(IToken)Match(input,177,Follow._177_in_agentcapabilities_macro6807); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal501_tree = (CommonTree)adaptor.Create(string_literal501);
				adaptor.AddChild(root_0, string_literal501_tree);
				}
				DebugLocation(957, 62);
				C_STRING502=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro6809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING502_tree = (CommonTree)adaptor.Create(C_STRING502);
				adaptor.AddChild(root_0, C_STRING502_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(118); }

			DebugLocation(957, 73);
			// Smi.g:957:73: ( agentcapabilities_macro_module )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_1 = input.LA(1);

				if ((LA119_1==186))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:957:74: agentcapabilities_macro_module
					{
					DebugLocation(957, 74);
					PushFollow(Follow._agentcapabilities_macro_module_in_agentcapabilities_macro6814);
					agentcapabilities_macro_module503=agentcapabilities_macro_module();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_module503.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro", 88);
			LeaveRule("agentcapabilities_macro", 88);
			LeaveRule_agentcapabilities_macro();
	    }
	 	DebugLocation(957, 105);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_status() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_status() {}
	// $ANTLR start "agentcapabilities_macro_status"
	// Smi.g:958:1: agentcapabilities_macro_status : l= LOWER ;
	[GrammarRule("agentcapabilities_macro_status")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_status()
	{
		EnterRule_agentcapabilities_macro_status();
		EnterRule("agentcapabilities_macro_status", 89);
		TraceIn("agentcapabilities_macro_status", 89);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_status");
		DebugLocation(958, 111);
		try
		{
			// Smi.g:958:31: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:958:33: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(958, 34);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_status6824); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(959, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("current") 
				                                                || l.Text == ("obsolete"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_status", 89);
			LeaveRule("agentcapabilities_macro_status", 89);
			LeaveRule_agentcapabilities_macro_status();
	    }
	 	DebugLocation(961, 111);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_status"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_status"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_module() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_module() {}
	// $ANTLR start "agentcapabilities_macro_module"
	// Smi.g:962:1: agentcapabilities_macro_module : 'SUPPORTS' LOWER ( value )? 'INCLUDES' L_BRACE value ( COMMA value )* R_BRACE ( agentcapabilities_macro_variation )* ;
	[GrammarRule("agentcapabilities_macro_module")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_module()
	{
		EnterRule_agentcapabilities_macro_module();
		EnterRule("agentcapabilities_macro_module", 90);
		TraceIn("agentcapabilities_macro_module", 90);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal504 = default(IToken);
	    IToken LOWER505 = default(IToken);
	    IToken string_literal507 = default(IToken);
	    IToken L_BRACE508 = default(IToken);
	    IToken COMMA510 = default(IToken);
	    IToken R_BRACE512 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value506 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value511 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_variation513 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal504_tree = default(CommonTree);
	    CommonTree LOWER505_tree = default(CommonTree);
	    CommonTree string_literal507_tree = default(CommonTree);
	    CommonTree L_BRACE508_tree = default(CommonTree);
	    CommonTree COMMA510_tree = default(CommonTree);
	    CommonTree R_BRACE512_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_module");
		DebugLocation(962, 68);
		try
		{
			// Smi.g:962:31: ( 'SUPPORTS' LOWER ( value )? 'INCLUDES' L_BRACE value ( COMMA value )* R_BRACE ( agentcapabilities_macro_variation )* )
			DebugEnterAlt(1);
			// Smi.g:962:33: 'SUPPORTS' LOWER ( value )? 'INCLUDES' L_BRACE value ( COMMA value )* R_BRACE ( agentcapabilities_macro_variation )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(962, 33);
			string_literal504=(IToken)Match(input,186,Follow._186_in_agentcapabilities_macro_module6872); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal504_tree = (CommonTree)adaptor.Create(string_literal504);
			adaptor.AddChild(root_0, string_literal504_tree);
			}
			DebugLocation(962, 44);
			LOWER505=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_module6874); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER505_tree = (CommonTree)adaptor.Create(LOWER505);
			adaptor.AddChild(root_0, LOWER505_tree);
			}
			DebugLocation(962, 50);
			// Smi.g:962:50: ( value )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, decisionCanBacktrack[120]);
			int LA120_1 = input.LA(1);

			if ((LA120_1==B_STRING||LA120_1==C_STRING||LA120_1==FALSE_KW||LA120_1==H_STRING||(LA120_1>=LOWER && LA120_1<=L_BRACE)||(LA120_1>=MINUS && LA120_1<=MINUS_INFINITY_KW)||(LA120_1>=NULL_KW && LA120_1<=NUMBER)||LA120_1==PLUS_INFINITY_KW||LA120_1==TRUE_KW||LA120_1==UPPER))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:962:51: value
				{
				DebugLocation(962, 51);
				PushFollow(Follow._value_in_agentcapabilities_macro_module6877);
				value506=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value506.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(963, 33);
			string_literal507=(IToken)Match(input,INCLUDES_KW,Follow._INCLUDES_KW_in_agentcapabilities_macro_module6914); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal507_tree = (CommonTree)adaptor.Create(string_literal507);
			adaptor.AddChild(root_0, string_literal507_tree);
			}
			DebugLocation(963, 44);
			L_BRACE508=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_module6916); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE508_tree = (CommonTree)adaptor.Create(L_BRACE508);
			adaptor.AddChild(root_0, L_BRACE508_tree);
			}
			DebugLocation(963, 52);
			PushFollow(Follow._value_in_agentcapabilities_macro_module6918);
			value509=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value509.Tree);
			DebugLocation(963, 58);
			// Smi.g:963:58: ( COMMA value )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_1 = input.LA(1);

				if ((LA121_1==COMMA))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:963:59: COMMA value
					{
					DebugLocation(963, 59);
					COMMA510=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_module6921); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA510_tree = (CommonTree)adaptor.Create(COMMA510);
					adaptor.AddChild(root_0, COMMA510_tree);
					}
					DebugLocation(963, 65);
					PushFollow(Follow._value_in_agentcapabilities_macro_module6923);
					value511=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value511.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }

			DebugLocation(963, 73);
			R_BRACE512=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_module6927); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE512_tree = (CommonTree)adaptor.Create(R_BRACE512);
			adaptor.AddChild(root_0, R_BRACE512_tree);
			}
			DebugLocation(964, 33);
			// Smi.g:964:33: ( agentcapabilities_macro_variation )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_1 = input.LA(1);

				if ((LA122_1==196))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:964:34: agentcapabilities_macro_variation
					{
					DebugLocation(964, 34);
					PushFollow(Follow._agentcapabilities_macro_variation_in_agentcapabilities_macro_module6963);
					agentcapabilities_macro_variation513=agentcapabilities_macro_variation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_variation513.Tree);

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_module", 90);
			LeaveRule("agentcapabilities_macro_module", 90);
			LeaveRule_agentcapabilities_macro_module();
	    }
	 	DebugLocation(964, 68);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_module"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_module"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_variation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_variation() {}
	// $ANTLR start "agentcapabilities_macro_variation"
	// Smi.g:965:1: agentcapabilities_macro_variation : 'VARIATION' value ( 'SYNTAX' agentcapabilities_macro_syntax )? ( 'WRITE-SYNTAX' agentcapabilities_macro_syntax )? ( 'ACCESS' agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE value ( COMMA value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value ) )? 'DESCRIPTION' C_STRING ;
	[GrammarRule("agentcapabilities_macro_variation")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_variation()
	{
		EnterRule_agentcapabilities_macro_variation();
		EnterRule("agentcapabilities_macro_variation", 91);
		TraceIn("agentcapabilities_macro_variation", 91);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal514 = default(IToken);
	    IToken string_literal516 = default(IToken);
	    IToken string_literal518 = default(IToken);
	    IToken string_literal520 = default(IToken);
	    IToken string_literal522 = default(IToken);
	    IToken L_BRACE523 = default(IToken);
	    IToken COMMA525 = default(IToken);
	    IToken R_BRACE527 = default(IToken);
	    IToken string_literal528 = default(IToken);
	    IToken L_BRACE529 = default(IToken);
	    IToken L_BRACE530 = default(IToken);
	    IToken LOWER531 = default(IToken);
	    IToken COMMA532 = default(IToken);
	    IToken LOWER533 = default(IToken);
	    IToken R_BRACE534 = default(IToken);
	    IToken string_literal536 = default(IToken);
	    IToken C_STRING537 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_syntax517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_syntax519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_access521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value524 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value535 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal514_tree = default(CommonTree);
	    CommonTree string_literal516_tree = default(CommonTree);
	    CommonTree string_literal518_tree = default(CommonTree);
	    CommonTree string_literal520_tree = default(CommonTree);
	    CommonTree string_literal522_tree = default(CommonTree);
	    CommonTree L_BRACE523_tree = default(CommonTree);
	    CommonTree COMMA525_tree = default(CommonTree);
	    CommonTree R_BRACE527_tree = default(CommonTree);
	    CommonTree string_literal528_tree = default(CommonTree);
	    CommonTree L_BRACE529_tree = default(CommonTree);
	    CommonTree L_BRACE530_tree = default(CommonTree);
	    CommonTree LOWER531_tree = default(CommonTree);
	    CommonTree COMMA532_tree = default(CommonTree);
	    CommonTree LOWER533_tree = default(CommonTree);
	    CommonTree R_BRACE534_tree = default(CommonTree);
	    CommonTree string_literal536_tree = default(CommonTree);
	    CommonTree C_STRING537_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_variation");
		DebugLocation(965, 58);
		try
		{
			// Smi.g:965:34: ( 'VARIATION' value ( 'SYNTAX' agentcapabilities_macro_syntax )? ( 'WRITE-SYNTAX' agentcapabilities_macro_syntax )? ( 'ACCESS' agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE value ( COMMA value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value ) )? 'DESCRIPTION' C_STRING )
			DebugEnterAlt(1);
			// Smi.g:965:36: 'VARIATION' value ( 'SYNTAX' agentcapabilities_macro_syntax )? ( 'WRITE-SYNTAX' agentcapabilities_macro_syntax )? ( 'ACCESS' agentcapabilities_macro_access )? ( 'CREATION-REQUIRES' L_BRACE value ( COMMA value )* R_BRACE )? ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value ) )? 'DESCRIPTION' C_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(965, 36);
			string_literal514=(IToken)Match(input,196,Follow._196_in_agentcapabilities_macro_variation6971); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal514_tree = (CommonTree)adaptor.Create(string_literal514);
			adaptor.AddChild(root_0, string_literal514_tree);
			}
			DebugLocation(965, 48);
			PushFollow(Follow._value_in_agentcapabilities_macro_variation6973);
			value515=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value515.Tree);
			DebugLocation(965, 54);
			// Smi.g:965:54: ( 'SYNTAX' agentcapabilities_macro_syntax )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, decisionCanBacktrack[123]);
			int LA123_1 = input.LA(1);

			if ((LA123_1==187))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:965:55: 'SYNTAX' agentcapabilities_macro_syntax
				{
				DebugLocation(965, 55);
				string_literal516=(IToken)Match(input,187,Follow._187_in_agentcapabilities_macro_variation6976); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal516_tree = (CommonTree)adaptor.Create(string_literal516);
				adaptor.AddChild(root_0, string_literal516_tree);
				}
				DebugLocation(965, 64);
				PushFollow(Follow._agentcapabilities_macro_syntax_in_agentcapabilities_macro_variation6978);
				agentcapabilities_macro_syntax517=agentcapabilities_macro_syntax();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_syntax517.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(965, 97);
			// Smi.g:965:97: ( 'WRITE-SYNTAX' agentcapabilities_macro_syntax )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, decisionCanBacktrack[124]);
			int LA124_1 = input.LA(1);

			if ((LA124_1==197))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:965:98: 'WRITE-SYNTAX' agentcapabilities_macro_syntax
				{
				DebugLocation(965, 98);
				string_literal518=(IToken)Match(input,197,Follow._197_in_agentcapabilities_macro_variation6983); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal518_tree = (CommonTree)adaptor.Create(string_literal518);
				adaptor.AddChild(root_0, string_literal518_tree);
				}
				DebugLocation(965, 113);
				PushFollow(Follow._agentcapabilities_macro_syntax_in_agentcapabilities_macro_variation6985);
				agentcapabilities_macro_syntax519=agentcapabilities_macro_syntax();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_syntax519.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(965, 146);
			// Smi.g:965:146: ( 'ACCESS' agentcapabilities_macro_access )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, decisionCanBacktrack[125]);
			int LA125_1 = input.LA(1);

			if ((LA125_1==130))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:965:147: 'ACCESS' agentcapabilities_macro_access
				{
				DebugLocation(965, 147);
				string_literal520=(IToken)Match(input,130,Follow._130_in_agentcapabilities_macro_variation6990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal520_tree = (CommonTree)adaptor.Create(string_literal520);
				adaptor.AddChild(root_0, string_literal520_tree);
				}
				DebugLocation(965, 156);
				PushFollow(Follow._agentcapabilities_macro_access_in_agentcapabilities_macro_variation6992);
				agentcapabilities_macro_access521=agentcapabilities_macro_access();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_access521.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(966, 37);
			// Smi.g:966:37: ( 'CREATION-REQUIRES' L_BRACE value ( COMMA value )* R_BRACE )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, decisionCanBacktrack[127]);
			int LA127_1 = input.LA(1);

			if ((LA127_1==139))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:966:38: 'CREATION-REQUIRES' L_BRACE value ( COMMA value )* R_BRACE
				{
				DebugLocation(966, 38);
				string_literal522=(IToken)Match(input,139,Follow._139_in_agentcapabilities_macro_variation7034); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal522_tree = (CommonTree)adaptor.Create(string_literal522);
				adaptor.AddChild(root_0, string_literal522_tree);
				}
				DebugLocation(966, 58);
				L_BRACE523=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE523_tree = (CommonTree)adaptor.Create(L_BRACE523);
				adaptor.AddChild(root_0, L_BRACE523_tree);
				}
				DebugLocation(966, 66);
				PushFollow(Follow._value_in_agentcapabilities_macro_variation7038);
				value524=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value524.Tree);
				DebugLocation(966, 72);
				// Smi.g:966:72: ( COMMA value )*
				try { DebugEnterSubRule(126);
				while (true)
				{
					int alt126=2;
					try { DebugEnterDecision(126, decisionCanBacktrack[126]);
					int LA126_1 = input.LA(1);

					if ((LA126_1==COMMA))
					{
						alt126 = 1;
					}


					} finally { DebugExitDecision(126); }
					switch ( alt126 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:966:73: COMMA value
						{
						DebugLocation(966, 73);
						COMMA525=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_variation7041); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA525_tree = (CommonTree)adaptor.Create(COMMA525);
						adaptor.AddChild(root_0, COMMA525_tree);
						}
						DebugLocation(966, 79);
						PushFollow(Follow._value_in_agentcapabilities_macro_variation7043);
						value526=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, value526.Tree);

						}
						break;

					default:
						goto loop126;
					}
				}

				loop126:
					;

				} finally { DebugExitSubRule(126); }

				DebugLocation(966, 87);
				R_BRACE527=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_variation7047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE527_tree = (CommonTree)adaptor.Create(R_BRACE527);
				adaptor.AddChild(root_0, R_BRACE527_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(967, 37);
			// Smi.g:967:37: ( 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value ) )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, decisionCanBacktrack[131]);
			int LA131_1 = input.LA(1);

			if ((LA131_1==140))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:967:38: 'DEFVAL' L_BRACE ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value )
				{
				DebugLocation(967, 38);
				string_literal528=(IToken)Match(input,140,Follow._140_in_agentcapabilities_macro_variation7089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal528_tree = (CommonTree)adaptor.Create(string_literal528);
				adaptor.AddChild(root_0, string_literal528_tree);
				}
				DebugLocation(967, 47);
				L_BRACE529=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7091); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE529_tree = (CommonTree)adaptor.Create(L_BRACE529);
				adaptor.AddChild(root_0, L_BRACE529_tree);
				}
				DebugLocation(967, 55);
				// Smi.g:967:55: ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				try
				{
					alt130 = dfa130.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:967:56: ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE
					{
					DebugLocation(967, 95);
					L_BRACE530=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_variation7112); if (state.failed) return retval;
					if (state.backtracking == 0) {
					L_BRACE530_tree = (CommonTree)adaptor.Create(L_BRACE530);
					adaptor.AddChild(root_0, L_BRACE530_tree);
					}
					DebugLocation(967, 103);
					// Smi.g:967:103: ( LOWER )?
					int alt128=2;
					try { DebugEnterSubRule(128);
					try { DebugEnterDecision(128, decisionCanBacktrack[128]);
					int LA128_1 = input.LA(1);

					if ((LA128_1==LOWER))
					{
						alt128 = 1;
					}
					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:967:104: LOWER
						{
						DebugLocation(967, 104);
						LOWER531=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_variation7115); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LOWER531_tree = (CommonTree)adaptor.Create(LOWER531);
						adaptor.AddChild(root_0, LOWER531_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(128); }

					DebugLocation(967, 112);
					// Smi.g:967:112: ( COMMA LOWER )*
					try { DebugEnterSubRule(129);
					while (true)
					{
						int alt129=2;
						try { DebugEnterDecision(129, decisionCanBacktrack[129]);
						int LA129_1 = input.LA(1);

						if ((LA129_1==COMMA))
						{
							alt129 = 1;
						}


						} finally { DebugExitDecision(129); }
						switch ( alt129 )
						{
						case 1:
							DebugEnterAlt(1);
							// Smi.g:967:113: COMMA LOWER
							{
							DebugLocation(967, 113);
							COMMA532=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_variation7120); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA532_tree = (CommonTree)adaptor.Create(COMMA532);
							adaptor.AddChild(root_0, COMMA532_tree);
							}
							DebugLocation(967, 119);
							LOWER533=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_variation7122); if (state.failed) return retval;
							if (state.backtracking == 0) {
							LOWER533_tree = (CommonTree)adaptor.Create(LOWER533);
							adaptor.AddChild(root_0, LOWER533_tree);
							}

							}
							break;

						default:
							goto loop129;
						}
					}

					loop129:
						;

					} finally { DebugExitSubRule(129); }

					DebugLocation(967, 127);
					R_BRACE534=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_variation7126); if (state.failed) return retval;
					if (state.backtracking == 0) {
					R_BRACE534_tree = (CommonTree)adaptor.Create(R_BRACE534);
					adaptor.AddChild(root_0, R_BRACE534_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:967:137: value
					{
					DebugLocation(967, 137);
					PushFollow(Follow._value_in_agentcapabilities_macro_variation7130);
					value535=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value535.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;

			}
			} finally { DebugExitSubRule(131); }

			DebugLocation(968, 37);
			string_literal536=(IToken)Match(input,141,Follow._141_in_agentcapabilities_macro_variation7173); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal536_tree = (CommonTree)adaptor.Create(string_literal536);
			adaptor.AddChild(root_0, string_literal536_tree);
			}
			DebugLocation(968, 51);
			C_STRING537=(IToken)Match(input,C_STRING,Follow._C_STRING_in_agentcapabilities_macro_variation7175); if (state.failed) return retval;
			if (state.backtracking == 0) {
			C_STRING537_tree = (CommonTree)adaptor.Create(C_STRING537);
			adaptor.AddChild(root_0, C_STRING537_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_variation", 91);
			LeaveRule("agentcapabilities_macro_variation", 91);
			LeaveRule_agentcapabilities_macro_variation();
	    }
	 	DebugLocation(968, 58);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_variation"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_variation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_syntax() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_syntax() {}
	// $ANTLR start "agentcapabilities_macro_syntax"
	// Smi.g:969:1: agentcapabilities_macro_syntax : ( ( smi_type L_BRACE )=> smi_type L_BRACE agentcapabilities_macro_namedbit ( COMMA agentcapabilities_macro_namedbit )* R_BRACE | ( smi_type )=> smi_type ( smi_subtyping )? | type );
	[GrammarRule("agentcapabilities_macro_syntax")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_syntax()
	{
		EnterRule_agentcapabilities_macro_syntax();
		EnterRule("agentcapabilities_macro_syntax", 92);
		TraceIn("agentcapabilities_macro_syntax", 92);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE539 = default(IToken);
	    IToken COMMA541 = default(IToken);
	    IToken R_BRACE543 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type538 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_namedbit540 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_namedbit542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_type544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> smi_subtyping545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type546 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE539_tree = default(CommonTree);
	    CommonTree COMMA541_tree = default(CommonTree);
	    CommonTree R_BRACE543_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_syntax");
		DebugLocation(969, 37);
		try
		{
			// Smi.g:969:31: ( ( smi_type L_BRACE )=> smi_type L_BRACE agentcapabilities_macro_namedbit ( COMMA agentcapabilities_macro_namedbit )* R_BRACE | ( smi_type )=> smi_type ( smi_subtyping )? | type )
			int alt134=3;
			try { DebugEnterDecision(134, decisionCanBacktrack[134]);
			switch (input.LA(1))
			{
			case 137:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OCTET_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==STRING_KW))
				{
					int LA134_3 = input.LA(3);

					if ((LA134_3==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
					{
						alt134 = 1;
					}
					else if ((EvaluatePredicate(synpred38_Smi_fragment)))
					{
						alt134 = 2;
					}
					else if ((true))
					{
						alt134 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 9, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OBJECT_KW:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==IDENTIFIER_KW))
				{
					int LA134_3 = input.LA(3);

					if ((LA134_3==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
					{
						alt134 = 1;
					}
					else if ((EvaluatePredicate(synpred38_Smi_fragment)))
					{
						alt134 = 2;
					}
					else if ((true))
					{
						alt134 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UPPER:
				{
				int LA134_2 = input.LA(2);

				if ((LA134_2==L_BRACE) && (EvaluatePredicate(synpred37_Smi_fragment)))
				{
					alt134 = 1;
				}
				else if ((EvaluatePredicate(synpred38_Smi_fragment)))
				{
					alt134 = 2;
				}
				else if ((true))
				{
					alt134 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ANY_KW:
			case BIT_KW:
			case BMP_STR_KW:
			case BOOLEAN_KW:
			case CHARACTER_KW:
			case CHOICE_KW:
			case EMBEDDED_KW:
			case ENUMERATED_KW:
			case ERROR_KW:
			case EXTERNAL_KW:
			case GENERALIZED_TIME_KW:
			case GENERAL_STR_KW:
			case GRAPHIC_STR_KW:
			case IA5_STRING_KW:
			case ISO646_STR_KW:
			case LOWER:
			case L_BRACKET:
			case NULL_KW:
			case NUMERIC_STR_KW:
			case OPERATION_KW:
			case PRINTABLE_STR_KW:
			case REAL_KW:
			case SEQUENCE_KW:
			case SET_KW:
			case T61_STR_KW:
			case TELETEX_STR_KW:
			case UNIVERSAL_STR_KW:
			case UTC_TIME_KW:
			case UTF8_STR_KW:
			case VIDEOTEX_STR_KW:
			case VISIBLE_STR_KW:
			case 131:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 179:
			case 188:
			case 191:
				{
				alt134 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:969:33: ( smi_type L_BRACE )=> smi_type L_BRACE agentcapabilities_macro_namedbit ( COMMA agentcapabilities_macro_namedbit )* R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(970, 37);
				PushFollow(Follow._smi_type_in_agentcapabilities_macro_syntax7226);
				smi_type538=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type538.Tree);
				DebugLocation(970, 46);
				L_BRACE539=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_agentcapabilities_macro_syntax7228); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE539_tree = (CommonTree)adaptor.Create(L_BRACE539);
				adaptor.AddChild(root_0, L_BRACE539_tree);
				}
				DebugLocation(970, 54);
				PushFollow(Follow._agentcapabilities_macro_namedbit_in_agentcapabilities_macro_syntax7230);
				agentcapabilities_macro_namedbit540=agentcapabilities_macro_namedbit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_namedbit540.Tree);
				DebugLocation(970, 87);
				// Smi.g:970:87: ( COMMA agentcapabilities_macro_namedbit )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, decisionCanBacktrack[132]);
					int LA132_1 = input.LA(1);

					if ((LA132_1==COMMA))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:970:88: COMMA agentcapabilities_macro_namedbit
						{
						DebugLocation(970, 88);
						COMMA541=(IToken)Match(input,COMMA,Follow._COMMA_in_agentcapabilities_macro_syntax7233); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA541_tree = (CommonTree)adaptor.Create(COMMA541);
						adaptor.AddChild(root_0, COMMA541_tree);
						}
						DebugLocation(970, 94);
						PushFollow(Follow._agentcapabilities_macro_namedbit_in_agentcapabilities_macro_syntax7235);
						agentcapabilities_macro_namedbit542=agentcapabilities_macro_namedbit();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, agentcapabilities_macro_namedbit542.Tree);

						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(970, 129);
				R_BRACE543=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_agentcapabilities_macro_syntax7239); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE543_tree = (CommonTree)adaptor.Create(R_BRACE543);
				adaptor.AddChild(root_0, R_BRACE543_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:971:33: ( smi_type )=> smi_type ( smi_subtyping )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(971, 47);
				PushFollow(Follow._smi_type_in_agentcapabilities_macro_syntax7279);
				smi_type544=smi_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, smi_type544.Tree);
				DebugLocation(971, 56);
				// Smi.g:971:56: ( smi_subtyping )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_1 = input.LA(1);

				if ((LA133_1==L_PAREN))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:971:57: smi_subtyping
					{
					DebugLocation(971, 57);
					PushFollow(Follow._smi_subtyping_in_agentcapabilities_macro_syntax7282);
					smi_subtyping545=smi_subtyping();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, smi_subtyping545.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(133); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:972:33: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(972, 33);
				PushFollow(Follow._type_in_agentcapabilities_macro_syntax7318);
				type546=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type546.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_syntax", 92);
			LeaveRule("agentcapabilities_macro_syntax", 92);
			LeaveRule_agentcapabilities_macro_syntax();
	    }
	 	DebugLocation(972, 37);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_syntax"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_syntax"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_access() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_access() {}
	// $ANTLR start "agentcapabilities_macro_access"
	// Smi.g:973:1: agentcapabilities_macro_access : l= LOWER ;
	[GrammarRule("agentcapabilities_macro_access")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_access()
	{
		EnterRule_agentcapabilities_macro_access();
		EnterRule("agentcapabilities_macro_access", 93);
		TraceIn("agentcapabilities_macro_access", 93);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken l = default(IToken);

	    CommonTree l_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_access");
		DebugLocation(973, 111);
		try
		{
			// Smi.g:973:31: (l= LOWER )
			DebugEnterAlt(1);
			// Smi.g:973:33: l= LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(973, 34);
			l=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_access7327); if (state.failed) return retval;
			if (state.backtracking == 0) {
			l_tree = (CommonTree)adaptor.Create(l);
			adaptor.AddChild(root_0, l_tree);
			}
			DebugLocation(974, 41);
			if (state.backtracking == 0)
			{
				if (l.Text == ("not-implemented") 
				                                                || l.Text == ("accessible-for-notify") 
				                                                || l.Text == ("read-only")
				                                                || l.Text == ("read-write")
				                                                || l.Text == ("read-create")
				                                                || l.Text == ("write-only"))
				                                            {/*DOSOMETHING*/} else {throw new SemanticException("(invalid)");}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_access", 93);
			LeaveRule("agentcapabilities_macro_access", 93);
			LeaveRule_agentcapabilities_macro_access();
	    }
	 	DebugLocation(980, 111);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_access"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_access"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_agentcapabilities_macro_namedbit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_agentcapabilities_macro_namedbit() {}
	// $ANTLR start "agentcapabilities_macro_namedbit"
	// Smi.g:981:1: agentcapabilities_macro_namedbit : LOWER L_PAREN NUMBER R_PAREN ;
	[GrammarRule("agentcapabilities_macro_namedbit")]
	private AstParserRuleReturnScope<CommonTree, IToken> agentcapabilities_macro_namedbit()
	{
		EnterRule_agentcapabilities_macro_namedbit();
		EnterRule("agentcapabilities_macro_namedbit", 94);
		TraceIn("agentcapabilities_macro_namedbit", 94);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER547 = default(IToken);
	    IToken L_PAREN548 = default(IToken);
	    IToken NUMBER549 = default(IToken);
	    IToken R_PAREN550 = default(IToken);

	    CommonTree LOWER547_tree = default(CommonTree);
	    CommonTree L_PAREN548_tree = default(CommonTree);
	    CommonTree NUMBER549_tree = default(CommonTree);
	    CommonTree R_PAREN550_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "agentcapabilities_macro_namedbit");
		DebugLocation(981, 62);
		try
		{
			// Smi.g:981:33: ( LOWER L_PAREN NUMBER R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:981:35: LOWER L_PAREN NUMBER R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(981, 35);
			LOWER547=(IToken)Match(input,LOWER,Follow._LOWER_in_agentcapabilities_macro_namedbit7375); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER547_tree = (CommonTree)adaptor.Create(LOWER547);
			adaptor.AddChild(root_0, LOWER547_tree);
			}
			DebugLocation(981, 41);
			L_PAREN548=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_agentcapabilities_macro_namedbit7377); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN548_tree = (CommonTree)adaptor.Create(L_PAREN548);
			adaptor.AddChild(root_0, L_PAREN548_tree);
			}
			DebugLocation(981, 49);
			NUMBER549=(IToken)Match(input,NUMBER,Follow._NUMBER_in_agentcapabilities_macro_namedbit7379); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER549_tree = (CommonTree)adaptor.Create(NUMBER549);
			adaptor.AddChild(root_0, NUMBER549_tree);
			}
			DebugLocation(981, 56);
			R_PAREN550=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_agentcapabilities_macro_namedbit7381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN550_tree = (CommonTree)adaptor.Create(R_PAREN550);
			adaptor.AddChild(root_0, R_PAREN550_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("agentcapabilities_macro_namedbit", 94);
			LeaveRule("agentcapabilities_macro_namedbit", 94);
			LeaveRule_agentcapabilities_macro_namedbit();
	    }
	 	DebugLocation(981, 62);
		} finally { DebugExitRule(GrammarFileName, "agentcapabilities_macro_namedbit"); }
		return retval;

	}
	// $ANTLR end "agentcapabilities_macro_namedbit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_traptype_macro() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_traptype_macro() {}
	// $ANTLR start "traptype_macro"
	// Smi.g:985:1: traptype_macro : 'TRAP-TYPE' 'ENTERPRISE' value ( 'VARIABLES' L_BRACE value ( COMMA value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' value )? ( 'REFERENCE' value )? ;
	[GrammarRule("traptype_macro")]
	private AstParserRuleReturnScope<CommonTree, IToken> traptype_macro()
	{
		EnterRule_traptype_macro();
		EnterRule("traptype_macro", 95);
		TraceIn("traptype_macro", 95);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken string_literal551 = default(IToken);
	    IToken string_literal552 = default(IToken);
	    IToken string_literal554 = default(IToken);
	    IToken L_BRACE555 = default(IToken);
	    IToken COMMA557 = default(IToken);
	    IToken R_BRACE559 = default(IToken);
	    IToken string_literal560 = default(IToken);
	    IToken string_literal562 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value553 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value556 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value558 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value563 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree string_literal551_tree = default(CommonTree);
	    CommonTree string_literal552_tree = default(CommonTree);
	    CommonTree string_literal554_tree = default(CommonTree);
	    CommonTree L_BRACE555_tree = default(CommonTree);
	    CommonTree COMMA557_tree = default(CommonTree);
	    CommonTree R_BRACE559_tree = default(CommonTree);
	    CommonTree string_literal560_tree = default(CommonTree);
	    CommonTree string_literal562_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "traptype_macro");
		DebugLocation(985, 83);
		try
		{
			// Smi.g:985:15: ( 'TRAP-TYPE' 'ENTERPRISE' value ( 'VARIABLES' L_BRACE value ( COMMA value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' value )? ( 'REFERENCE' value )? )
			DebugEnterAlt(1);
			// Smi.g:985:17: 'TRAP-TYPE' 'ENTERPRISE' value ( 'VARIABLES' L_BRACE value ( COMMA value )* R_BRACE )? ( ( 'DESCRIPTION' )=> 'DESCRIPTION' value )? ( 'REFERENCE' value )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(985, 17);
			string_literal551=(IToken)Match(input,191,Follow._191_in_traptype_macro7391); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal551_tree = (CommonTree)adaptor.Create(string_literal551);
			adaptor.AddChild(root_0, string_literal551_tree);
			}
			DebugLocation(985, 29);
			string_literal552=(IToken)Match(input,144,Follow._144_in_traptype_macro7393); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal552_tree = (CommonTree)adaptor.Create(string_literal552);
			adaptor.AddChild(root_0, string_literal552_tree);
			}
			DebugLocation(985, 42);
			PushFollow(Follow._value_in_traptype_macro7395);
			value553=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value553.Tree);
			DebugLocation(985, 48);
			// Smi.g:985:48: ( 'VARIABLES' L_BRACE value ( COMMA value )* R_BRACE )?
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, decisionCanBacktrack[136]);
			int LA136_1 = input.LA(1);

			if ((LA136_1==195))
			{
				alt136 = 1;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:985:49: 'VARIABLES' L_BRACE value ( COMMA value )* R_BRACE
				{
				DebugLocation(985, 49);
				string_literal554=(IToken)Match(input,195,Follow._195_in_traptype_macro7398); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal554_tree = (CommonTree)adaptor.Create(string_literal554);
				adaptor.AddChild(root_0, string_literal554_tree);
				}
				DebugLocation(985, 61);
				L_BRACE555=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_traptype_macro7400); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE555_tree = (CommonTree)adaptor.Create(L_BRACE555);
				adaptor.AddChild(root_0, L_BRACE555_tree);
				}
				DebugLocation(985, 69);
				PushFollow(Follow._value_in_traptype_macro7402);
				value556=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value556.Tree);
				DebugLocation(985, 75);
				// Smi.g:985:75: ( COMMA value )*
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, decisionCanBacktrack[135]);
					int LA135_1 = input.LA(1);

					if ((LA135_1==COMMA))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch ( alt135 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:985:76: COMMA value
						{
						DebugLocation(985, 76);
						COMMA557=(IToken)Match(input,COMMA,Follow._COMMA_in_traptype_macro7405); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA557_tree = (CommonTree)adaptor.Create(COMMA557);
						adaptor.AddChild(root_0, COMMA557_tree);
						}
						DebugLocation(985, 82);
						PushFollow(Follow._value_in_traptype_macro7407);
						value558=value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, value558.Tree);

						}
						break;

					default:
						goto loop135;
					}
				}

				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(985, 90);
				R_BRACE559=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_traptype_macro7411); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE559_tree = (CommonTree)adaptor.Create(R_BRACE559);
				adaptor.AddChild(root_0, R_BRACE559_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }

			DebugLocation(986, 21);
			// Smi.g:986:21: ( ( 'DESCRIPTION' )=> 'DESCRIPTION' value )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, decisionCanBacktrack[137]);
			int LA137_1 = input.LA(1);

			if ((LA137_1==141))
			{
				int LA137_2 = input.LA(2);

				if ((LA137_2==C_STRING))
				{
					int LA137_3 = input.LA(3);

					if ((EvaluatePredicate(synpred39_Smi_fragment)))
					{
						alt137 = 1;
					}
				}
				else if ((LA137_2==TRUE_KW) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==FALSE_KW) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==NULL_KW) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==UPPER) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==LOWER) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==MINUS) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==NUMBER) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==L_BRACE) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==H_STRING) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==B_STRING) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
				else if ((LA137_2==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred39_Smi_fragment)))
				{
					alt137 = 1;
				}
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:986:22: ( 'DESCRIPTION' )=> 'DESCRIPTION' value
				{
				DebugLocation(986, 41);
				string_literal560=(IToken)Match(input,141,Follow._141_in_traptype_macro7443); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal560_tree = (CommonTree)adaptor.Create(string_literal560);
				adaptor.AddChild(root_0, string_literal560_tree);
				}
				DebugLocation(986, 55);
				PushFollow(Follow._value_in_traptype_macro7445);
				value561=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value561.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(986, 63);
			// Smi.g:986:63: ( 'REFERENCE' value )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, decisionCanBacktrack[138]);
			int LA138_1 = input.LA(1);

			if ((LA138_1==177))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:986:64: 'REFERENCE' value
				{
				DebugLocation(986, 64);
				string_literal562=(IToken)Match(input,177,Follow._177_in_traptype_macro7450); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal562_tree = (CommonTree)adaptor.Create(string_literal562);
				adaptor.AddChild(root_0, string_literal562_tree);
				}
				DebugLocation(986, 76);
				PushFollow(Follow._value_in_traptype_macro7452);
				value563=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value563.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("traptype_macro", 95);
			LeaveRule("traptype_macro", 95);
			LeaveRule_traptype_macro();
	    }
	 	DebugLocation(986, 83);
		} finally { DebugExitRule(GrammarFileName, "traptype_macro"); }
		return retval;

	}
	// $ANTLR end "traptype_macro"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_operation_errorlist() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_operation_errorlist() {}
	// $ANTLR start "operation_errorlist"
	// Smi.g:988:1: operation_errorlist : typeorvalue ( COMMA typeorvalue )* ;
	[GrammarRule("operation_errorlist")]
	private AstParserRuleReturnScope<CommonTree, IToken> operation_errorlist()
	{
		EnterRule_operation_errorlist();
		EnterRule("operation_errorlist", 96);
		TraceIn("operation_errorlist", 96);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA565 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue566 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA565_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "operation_errorlist");
		DebugLocation(988, 54);
		try
		{
			// Smi.g:988:20: ( typeorvalue ( COMMA typeorvalue )* )
			DebugEnterAlt(1);
			// Smi.g:988:22: typeorvalue ( COMMA typeorvalue )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(988, 22);
			PushFollow(Follow._typeorvalue_in_operation_errorlist7462);
			typeorvalue564=typeorvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue564.Tree);
			DebugLocation(988, 34);
			// Smi.g:988:34: ( COMMA typeorvalue )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_1 = input.LA(1);

				if ((LA139_1==COMMA))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:988:35: COMMA typeorvalue
					{
					DebugLocation(988, 35);
					COMMA565=(IToken)Match(input,COMMA,Follow._COMMA_in_operation_errorlist7465); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA565_tree = (CommonTree)adaptor.Create(COMMA565);
					adaptor.AddChild(root_0, COMMA565_tree);
					}
					DebugLocation(988, 41);
					PushFollow(Follow._typeorvalue_in_operation_errorlist7467);
					typeorvalue566=typeorvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue566.Tree);

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation_errorlist", 96);
			LeaveRule("operation_errorlist", 96);
			LeaveRule_operation_errorlist();
	    }
	 	DebugLocation(988, 54);
		} finally { DebugExitRule(GrammarFileName, "operation_errorlist"); }
		return retval;

	}
	// $ANTLR end "operation_errorlist"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_linkedOp_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_linkedOp_list() {}
	// $ANTLR start "linkedOp_list"
	// Smi.g:990:1: linkedOp_list : typeorvalue ( COMMA typeorvalue )* ;
	[GrammarRule("linkedOp_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> linkedOp_list()
	{
		EnterRule_linkedOp_list();
		EnterRule("linkedOp_list", 97);
		TraceIn("linkedOp_list", 97);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA568 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue567 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue569 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA568_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "linkedOp_list");
		DebugLocation(990, 48);
		try
		{
			// Smi.g:990:14: ( typeorvalue ( COMMA typeorvalue )* )
			DebugEnterAlt(1);
			// Smi.g:990:16: typeorvalue ( COMMA typeorvalue )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(990, 16);
			PushFollow(Follow._typeorvalue_in_linkedOp_list7477);
			typeorvalue567=typeorvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue567.Tree);
			DebugLocation(990, 28);
			// Smi.g:990:28: ( COMMA typeorvalue )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_1 = input.LA(1);

				if ((LA140_1==COMMA))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:990:29: COMMA typeorvalue
					{
					DebugLocation(990, 29);
					COMMA568=(IToken)Match(input,COMMA,Follow._COMMA_in_linkedOp_list7480); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA568_tree = (CommonTree)adaptor.Create(COMMA568);
					adaptor.AddChild(root_0, COMMA568_tree);
					}
					DebugLocation(990, 35);
					PushFollow(Follow._typeorvalue_in_linkedOp_list7482);
					typeorvalue569=typeorvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue569.Tree);

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linkedOp_list", 97);
			LeaveRule("linkedOp_list", 97);
			LeaveRule_linkedOp_list();
	    }
	 	DebugLocation(990, 48);
		} finally { DebugExitRule(GrammarFileName, "linkedOp_list"); }
		return retval;

	}
	// $ANTLR end "linkedOp_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeorvalue() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeorvalue() {}
	// $ANTLR start "typeorvalue"
	// Smi.g:992:1: typeorvalue : ( ( type )=> type | value );
	[GrammarRule("typeorvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeorvalue()
	{
		EnterRule_typeorvalue();
		EnterRule("typeorvalue", 98);
		TraceIn("typeorvalue", 98);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> type570 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value571 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "typeorvalue");
		DebugLocation(992, 35);
		try
		{
			// Smi.g:992:12: ( ( type )=> type | value )
			int alt141=2;
			try { DebugEnterDecision(141, decisionCanBacktrack[141]);
			int LA141_1 = input.LA(1);

			if ((LA141_1==ANY_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==BIT_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==BOOLEAN_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==CHARACTER_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==BMP_STR_KW||(LA141_1>=GENERALIZED_TIME_KW && LA141_1<=GRAPHIC_STR_KW)||LA141_1==IA5_STRING_KW||LA141_1==ISO646_STR_KW||LA141_1==NUMERIC_STR_KW||LA141_1==PRINTABLE_STR_KW||LA141_1==T61_STR_KW||LA141_1==TELETEX_STR_KW||LA141_1==UNIVERSAL_STR_KW||(LA141_1>=UTC_TIME_KW && LA141_1<=VISIBLE_STR_KW)) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==CHOICE_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==EMBEDDED_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==ENUMERATED_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==EXTERNAL_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==INTEGER_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==NULL_KW))
			{
				int LA141_2 = input.LA(2);

				if ((EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else if ((true))
				{
					alt141 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA141_1==OBJECT_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==OCTET_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==REAL_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==179) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==SEQUENCE_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==SET_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==L_BRACKET) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==UPPER))
			{
				int LA141_2 = input.LA(2);

				if ((LA141_2==DOT))
				{
					int LA141_3 = input.LA(3);

					if ((LA141_3==UPPER) && (EvaluatePredicate(synpred40_Smi_fragment)))
					{
						alt141 = 1;
					}
					else if ((LA141_3==LOWER))
					{
						alt141 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 141, 35, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA141_2==L_PAREN) && (EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else if ((LA141_2==COMMA) && (EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else if ((LA141_2==R_BRACE) && (EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else if ((LA141_2==EOF) && (EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA141_1==LOWER))
			{
				int LA141_2 = input.LA(2);

				if ((LA141_2==LESS) && (EvaluatePredicate(synpred40_Smi_fragment)))
				{
					alt141 = 1;
				}
				else if ((LA141_2==EOF||LA141_2==B_STRING||(LA141_2>=COLON && LA141_2<=COMMA)||LA141_2==C_STRING||LA141_2==FALSE_KW||LA141_2==H_STRING||(LA141_2>=LOWER && LA141_2<=L_BRACE)||(LA141_2>=MINUS && LA141_2<=MINUS_INFINITY_KW)||(LA141_2>=NULL_KW && LA141_2<=NUMBER)||LA141_2==PLUS_INFINITY_KW||LA141_2==R_BRACE||LA141_2==TRUE_KW||LA141_2==UPPER))
				{
					alt141 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA141_1==OPERATION_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==ERROR_KW) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==165) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==159) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==164) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==161) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==188) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==163) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==160) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==158) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==131) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==191) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==137) && (EvaluatePredicate(synpred40_Smi_fragment)))
			{
				alt141 = 1;
			}
			else if ((LA141_1==B_STRING||LA141_1==C_STRING||LA141_1==FALSE_KW||LA141_1==H_STRING||LA141_1==L_BRACE||(LA141_1>=MINUS && LA141_1<=MINUS_INFINITY_KW)||LA141_1==NUMBER||LA141_1==PLUS_INFINITY_KW||LA141_1==TRUE_KW))
			{
				alt141 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:992:14: ( type )=> type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(992, 24);
				PushFollow(Follow._type_in_typeorvalue7498);
				type570=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type570.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:992:31: value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(992, 31);
				PushFollow(Follow._value_in_typeorvalue7502);
				value571=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value571.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeorvalue", 98);
			LeaveRule("typeorvalue", 98);
			LeaveRule_typeorvalue();
	    }
	 	DebugLocation(992, 35);
		} finally { DebugExitRule(GrammarFileName, "typeorvalue"); }
		return retval;

	}
	// $ANTLR end "typeorvalue"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeorvaluelist() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeorvaluelist() {}
	// $ANTLR start "typeorvaluelist"
	// Smi.g:995:1: typeorvaluelist : typeorvalue ( COMMA typeorvalue )* ;
	[GrammarRule("typeorvaluelist")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeorvaluelist()
	{
		EnterRule_typeorvaluelist();
		EnterRule("typeorvaluelist", 99);
		TraceIn("typeorvaluelist", 99);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA573 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> typeorvalue574 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA573_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "typeorvaluelist");
		DebugLocation(995, 50);
		try
		{
			// Smi.g:995:16: ( typeorvalue ( COMMA typeorvalue )* )
			DebugEnterAlt(1);
			// Smi.g:995:18: typeorvalue ( COMMA typeorvalue )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(995, 18);
			PushFollow(Follow._typeorvalue_in_typeorvaluelist7510);
			typeorvalue572=typeorvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue572.Tree);
			DebugLocation(995, 30);
			// Smi.g:995:30: ( COMMA typeorvalue )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_1 = input.LA(1);

				if ((LA142_1==COMMA))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:995:31: COMMA typeorvalue
					{
					DebugLocation(995, 31);
					COMMA573=(IToken)Match(input,COMMA,Follow._COMMA_in_typeorvaluelist7513); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA573_tree = (CommonTree)adaptor.Create(COMMA573);
					adaptor.AddChild(root_0, COMMA573_tree);
					}
					DebugLocation(995, 37);
					PushFollow(Follow._typeorvalue_in_typeorvaluelist7515);
					typeorvalue574=typeorvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeorvalue574.Tree);

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeorvaluelist", 99);
			LeaveRule("typeorvaluelist", 99);
			LeaveRule_typeorvaluelist();
	    }
	 	DebugLocation(995, 50);
		} finally { DebugExitRule(GrammarFileName, "typeorvaluelist"); }
		return retval;

	}
	// $ANTLR end "typeorvaluelist"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementType() {}
	// $ANTLR start "elementType"
	// Smi.g:998:1: elementType : ( LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=> tag )? ( tag_default )? type ( OPTIONAL_KW | DEFAULT_KW value )? | COMPONENTS_KW OF_KW type );
	[GrammarRule("elementType")]
	private AstParserRuleReturnScope<CommonTree, IToken> elementType()
	{
		EnterRule_elementType();
		EnterRule("elementType", 100);
		TraceIn("elementType", 100);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER575 = default(IToken);
	    IToken OPTIONAL_KW579 = default(IToken);
	    IToken DEFAULT_KW580 = default(IToken);
	    IToken COMPONENTS_KW582 = default(IToken);
	    IToken OF_KW583 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> tag576 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> tag_default577 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type578 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value581 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type584 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER575_tree = default(CommonTree);
	    CommonTree OPTIONAL_KW579_tree = default(CommonTree);
	    CommonTree DEFAULT_KW580_tree = default(CommonTree);
	    CommonTree COMPONENTS_KW582_tree = default(CommonTree);
	    CommonTree OF_KW583_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "elementType");
		DebugLocation(998, 37);
		try
		{
			// Smi.g:998:12: ( LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=> tag )? ( tag_default )? type ( OPTIONAL_KW | DEFAULT_KW value )? | COMPONENTS_KW OF_KW type )
			int alt146=2;
			try { DebugEnterDecision(146, decisionCanBacktrack[146]);
			int LA146_1 = input.LA(1);

			if ((LA146_1==LOWER))
			{
				alt146 = 1;
			}
			else if ((LA146_1==COMPONENTS_KW))
			{
				alt146 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:998:14: LOWER ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=> tag )? ( tag_default )? type ( OPTIONAL_KW | DEFAULT_KW value )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(998, 14);
				LOWER575=(IToken)Match(input,LOWER,Follow._LOWER_in_elementType7527); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LOWER575_tree = (CommonTree)adaptor.Create(LOWER575);
				adaptor.AddChild(root_0, LOWER575_tree);
				}
				DebugLocation(998, 21);
				// Smi.g:998:21: ( ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=> tag )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_1 = input.LA(1);

				if ((LA143_1==L_BRACKET))
				{
					int LA143_2 = input.LA(2);

					if ((EvaluatePredicate(synpred41_Smi_fragment)))
					{
						alt143 = 1;
					}
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:998:22: ( L_BRACKET ( NUMBER | UPPER | LOWER ) )=> tag
					{
					DebugLocation(998, 58);
					PushFollow(Follow._tag_in_elementType7545);
					tag576=tag();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tag576.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(999, 21);
				// Smi.g:999:21: ( tag_default )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_1 = input.LA(1);

				if ((LA144_1==AUTOMATIC_KW||LA144_1==EXPLICIT_KW||LA144_1==IMPLICIT_KW))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:999:22: tag_default
					{
					DebugLocation(999, 22);
					PushFollow(Follow._tag_default_in_elementType7571);
					tag_default577=tag_default();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tag_default577.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(999, 36);
				PushFollow(Follow._type_in_elementType7575);
				type578=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type578.Tree);
				DebugLocation(999, 41);
				// Smi.g:999:41: ( OPTIONAL_KW | DEFAULT_KW value )?
				int alt145=3;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_1 = input.LA(1);

				if ((LA145_1==OPTIONAL_KW))
				{
					alt145 = 1;
				}
				else if ((LA145_1==DEFAULT_KW))
				{
					alt145 = 2;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:999:42: OPTIONAL_KW
					{
					DebugLocation(999, 42);
					OPTIONAL_KW579=(IToken)Match(input,OPTIONAL_KW,Follow._OPTIONAL_KW_in_elementType7578); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPTIONAL_KW579_tree = (CommonTree)adaptor.Create(OPTIONAL_KW579);
					adaptor.AddChild(root_0, OPTIONAL_KW579_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:999:56: DEFAULT_KW value
					{
					DebugLocation(999, 56);
					DEFAULT_KW580=(IToken)Match(input,DEFAULT_KW,Follow._DEFAULT_KW_in_elementType7582); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DEFAULT_KW580_tree = (CommonTree)adaptor.Create(DEFAULT_KW580);
					adaptor.AddChild(root_0, DEFAULT_KW580_tree);
					}
					DebugLocation(999, 67);
					PushFollow(Follow._value_in_elementType7584);
					value581=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value581.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1000:14: COMPONENTS_KW OF_KW type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1000, 14);
				COMPONENTS_KW582=(IToken)Match(input,COMPONENTS_KW,Follow._COMPONENTS_KW_in_elementType7602); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMPONENTS_KW582_tree = (CommonTree)adaptor.Create(COMPONENTS_KW582);
				adaptor.AddChild(root_0, COMPONENTS_KW582_tree);
				}
				DebugLocation(1000, 28);
				OF_KW583=(IToken)Match(input,OF_KW,Follow._OF_KW_in_elementType7604); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OF_KW583_tree = (CommonTree)adaptor.Create(OF_KW583);
				adaptor.AddChild(root_0, OF_KW583_tree);
				}
				DebugLocation(1000, 34);
				PushFollow(Follow._type_in_elementType7606);
				type584=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type584.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementType", 100);
			LeaveRule("elementType", 100);
			LeaveRule_elementType();
	    }
	 	DebugLocation(1000, 37);
		} finally { DebugExitRule(GrammarFileName, "elementType"); }
		return retval;

	}
	// $ANTLR end "elementType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namedNumber() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namedNumber() {}
	// $ANTLR start "namedNumber"
	// Smi.g:1004:1: namedNumber : LOWER L_PAREN ( signed_number | defined_value ) R_PAREN ;
	[GrammarRule("namedNumber")]
	private AstParserRuleReturnScope<CommonTree, IToken> namedNumber()
	{
		EnterRule_namedNumber();
		EnterRule("namedNumber", 101);
		TraceIn("namedNumber", 101);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER585 = default(IToken);
	    IToken L_PAREN586 = default(IToken);
	    IToken R_PAREN589 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number587 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value588 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER585_tree = default(CommonTree);
	    CommonTree L_PAREN586_tree = default(CommonTree);
	    CommonTree R_PAREN589_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "namedNumber");
		DebugLocation(1004, 66);
		try
		{
			// Smi.g:1004:12: ( LOWER L_PAREN ( signed_number | defined_value ) R_PAREN )
			DebugEnterAlt(1);
			// Smi.g:1004:14: LOWER L_PAREN ( signed_number | defined_value ) R_PAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1004, 14);
			LOWER585=(IToken)Match(input,LOWER,Follow._LOWER_in_namedNumber7615); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER585_tree = (CommonTree)adaptor.Create(LOWER585);
			adaptor.AddChild(root_0, LOWER585_tree);
			}
			DebugLocation(1004, 20);
			L_PAREN586=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_namedNumber7617); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_PAREN586_tree = (CommonTree)adaptor.Create(L_PAREN586);
			adaptor.AddChild(root_0, L_PAREN586_tree);
			}
			DebugLocation(1004, 28);
			// Smi.g:1004:28: ( signed_number | defined_value )
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, decisionCanBacktrack[147]);
			int LA147_1 = input.LA(1);

			if ((LA147_1==MINUS||LA147_1==NUMBER))
			{
				alt147 = 1;
			}
			else if ((LA147_1==LOWER||LA147_1==UPPER))
			{
				alt147 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1004:29: signed_number
				{
				DebugLocation(1004, 29);
				PushFollow(Follow._signed_number_in_namedNumber7620);
				signed_number587=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number587.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1004:45: defined_value
				{
				DebugLocation(1004, 45);
				PushFollow(Follow._defined_value_in_namedNumber7624);
				defined_value588=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value588.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(147); }

			DebugLocation(1004, 60);
			R_PAREN589=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_namedNumber7627); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_PAREN589_tree = (CommonTree)adaptor.Create(R_PAREN589);
			adaptor.AddChild(root_0, R_PAREN589_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namedNumber", 101);
			LeaveRule("namedNumber", 101);
			LeaveRule_namedNumber();
	    }
	 	DebugLocation(1004, 66);
		} finally { DebugExitRule(GrammarFileName, "namedNumber"); }
		return retval;

	}
	// $ANTLR end "namedNumber"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_signed_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_signed_number() {}
	// $ANTLR start "signed_number"
	// Smi.g:1006:1: signed_number : ( MINUS )? NUMBER ;
	[GrammarRule("signed_number")]
	private AstParserRuleReturnScope<CommonTree, IToken> signed_number()
	{
		EnterRule_signed_number();
		EnterRule("signed_number", 102);
		TraceIn("signed_number", 102);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken MINUS590 = default(IToken);
	    IToken NUMBER591 = default(IToken);

	    CommonTree MINUS590_tree = default(CommonTree);
	    CommonTree NUMBER591_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "signed_number");
		DebugLocation(1006, 30);
		try
		{
			// Smi.g:1006:14: ( ( MINUS )? NUMBER )
			DebugEnterAlt(1);
			// Smi.g:1006:16: ( MINUS )? NUMBER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1006, 16);
			// Smi.g:1006:16: ( MINUS )?
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, decisionCanBacktrack[148]);
			int LA148_1 = input.LA(1);

			if ((LA148_1==MINUS))
			{
				alt148 = 1;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1006:17: MINUS
				{
				DebugLocation(1006, 17);
				MINUS590=(IToken)Match(input,MINUS,Follow._MINUS_in_signed_number7635); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MINUS590_tree = (CommonTree)adaptor.Create(MINUS590);
				adaptor.AddChild(root_0, MINUS590_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(148); }

			DebugLocation(1006, 25);
			NUMBER591=(IToken)Match(input,NUMBER,Follow._NUMBER_in_signed_number7639); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER591_tree = (CommonTree)adaptor.Create(NUMBER591);
			adaptor.AddChild(root_0, NUMBER591_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("signed_number", 102);
			LeaveRule("signed_number", 102);
			LeaveRule_signed_number();
	    }
	 	DebugLocation(1006, 30);
		} finally { DebugExitRule(GrammarFileName, "signed_number"); }
		return retval;

	}
	// $ANTLR end "signed_number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_element_set_specs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_element_set_specs() {}
	// $ANTLR start "element_set_specs"
	// Smi.g:1008:1: element_set_specs : element_set_spec ( COMMA DOTDOTDOT )? ( COMMA element_set_spec )? ;
	[GrammarRule("element_set_specs")]
	private AstParserRuleReturnScope<CommonTree, IToken> element_set_specs()
	{
		EnterRule_element_set_specs();
		EnterRule("element_set_specs", 103);
		TraceIn("element_set_specs", 103);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA593 = default(IToken);
	    IToken DOTDOTDOT594 = default(IToken);
	    IToken COMMA595 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> element_set_spec592 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> element_set_spec596 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA593_tree = default(CommonTree);
	    CommonTree DOTDOTDOT594_tree = default(CommonTree);
	    CommonTree COMMA595_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "element_set_specs");
		DebugLocation(1008, 81);
		try
		{
			// Smi.g:1008:18: ( element_set_spec ( COMMA DOTDOTDOT )? ( COMMA element_set_spec )? )
			DebugEnterAlt(1);
			// Smi.g:1008:20: element_set_spec ( COMMA DOTDOTDOT )? ( COMMA element_set_spec )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1008, 20);
			PushFollow(Follow._element_set_spec_in_element_set_specs7646);
			element_set_spec592=element_set_spec();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_set_spec592.Tree);
			DebugLocation(1008, 37);
			// Smi.g:1008:37: ( COMMA DOTDOTDOT )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, decisionCanBacktrack[149]);
			int LA149_1 = input.LA(1);

			if ((LA149_1==COMMA))
			{
				int LA149_2 = input.LA(2);

				if ((LA149_2==DOTDOTDOT))
				{
					alt149 = 1;
				}
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1008:38: COMMA DOTDOTDOT
				{
				DebugLocation(1008, 38);
				COMMA593=(IToken)Match(input,COMMA,Follow._COMMA_in_element_set_specs7649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA593_tree = (CommonTree)adaptor.Create(COMMA593);
				adaptor.AddChild(root_0, COMMA593_tree);
				}
				DebugLocation(1008, 44);
				DOTDOTDOT594=(IToken)Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_element_set_specs7651); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTDOTDOT594_tree = (CommonTree)adaptor.Create(DOTDOTDOT594);
				adaptor.AddChild(root_0, DOTDOTDOT594_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(149); }

			DebugLocation(1008, 56);
			// Smi.g:1008:56: ( COMMA element_set_spec )?
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, decisionCanBacktrack[150]);
			int LA150_1 = input.LA(1);

			if ((LA150_1==COMMA))
			{
				alt150 = 1;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1008:57: COMMA element_set_spec
				{
				DebugLocation(1008, 57);
				COMMA595=(IToken)Match(input,COMMA,Follow._COMMA_in_element_set_specs7656); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA595_tree = (CommonTree)adaptor.Create(COMMA595);
				adaptor.AddChild(root_0, COMMA595_tree);
				}
				DebugLocation(1008, 63);
				PushFollow(Follow._element_set_spec_in_element_set_specs7658);
				element_set_spec596=element_set_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, element_set_spec596.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_set_specs", 103);
			LeaveRule("element_set_specs", 103);
			LeaveRule_element_set_specs();
	    }
	 	DebugLocation(1008, 81);
		} finally { DebugExitRule(GrammarFileName, "element_set_specs"); }
		return retval;

	}
	// $ANTLR end "element_set_specs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exception_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exception_spec() {}
	// $ANTLR start "exception_spec"
	// Smi.g:1010:1: exception_spec : EXCLAMATION ( ( signed_number )=> signed_number | ( defined_value )=> defined_value | type COLON value ) ;
	[GrammarRule("exception_spec")]
	private AstParserRuleReturnScope<CommonTree, IToken> exception_spec()
	{
		EnterRule_exception_spec();
		EnterRule("exception_spec", 104);
		TraceIn("exception_spec", 104);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EXCLAMATION597 = default(IToken);
	    IToken COLON601 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number598 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value599 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type600 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value602 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree EXCLAMATION597_tree = default(CommonTree);
	    CommonTree COLON601_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "exception_spec");
		DebugLocation(1010, 17);
		try
		{
			// Smi.g:1010:15: ( EXCLAMATION ( ( signed_number )=> signed_number | ( defined_value )=> defined_value | type COLON value ) )
			DebugEnterAlt(1);
			// Smi.g:1010:17: EXCLAMATION ( ( signed_number )=> signed_number | ( defined_value )=> defined_value | type COLON value )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1010, 17);
			EXCLAMATION597=(IToken)Match(input,EXCLAMATION,Follow._EXCLAMATION_in_exception_spec7668); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EXCLAMATION597_tree = (CommonTree)adaptor.Create(EXCLAMATION597);
			adaptor.AddChild(root_0, EXCLAMATION597_tree);
			}
			DebugLocation(1011, 17);
			// Smi.g:1011:17: ( ( signed_number )=> signed_number | ( defined_value )=> defined_value | type COLON value )
			int alt151=3;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, decisionCanBacktrack[151]);
			int LA151_1 = input.LA(1);

			if ((LA151_1==MINUS) && (EvaluatePredicate(synpred42_Smi_fragment)))
			{
				alt151 = 1;
			}
			else if ((LA151_1==NUMBER) && (EvaluatePredicate(synpred42_Smi_fragment)))
			{
				alt151 = 1;
			}
			else if ((LA151_1==UPPER))
			{
				int LA151_2 = input.LA(2);

				if ((LA151_2==DOT))
				{
					int LA151_3 = input.LA(3);

					if ((LA151_3==LOWER) && (EvaluatePredicate(synpred43_Smi_fragment)))
					{
						alt151 = 2;
					}
					else if ((LA151_3==UPPER))
					{
						alt151 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 151, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA151_2==COLON||LA151_2==L_PAREN))
				{
					alt151 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 151, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA151_1==LOWER))
			{
				int LA151_2 = input.LA(2);

				if ((LA151_2==LESS))
				{
					alt151 = 3;
				}
				else if ((LA151_2==R_PAREN) && (EvaluatePredicate(synpred43_Smi_fragment)))
				{
					alt151 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 151, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA151_1==ANY_KW||(LA151_1>=BIT_KW && LA151_1<=BOOLEAN_KW)||LA151_1==CHARACTER_KW||LA151_1==CHOICE_KW||LA151_1==EMBEDDED_KW||LA151_1==ENUMERATED_KW||LA151_1==ERROR_KW||LA151_1==EXTERNAL_KW||(LA151_1>=GENERALIZED_TIME_KW && LA151_1<=GRAPHIC_STR_KW)||LA151_1==IA5_STRING_KW||LA151_1==INTEGER_KW||LA151_1==ISO646_STR_KW||LA151_1==L_BRACKET||LA151_1==NULL_KW||LA151_1==NUMERIC_STR_KW||(LA151_1>=OBJECT_KW && LA151_1<=OCTET_KW)||LA151_1==OPERATION_KW||LA151_1==PRINTABLE_STR_KW||LA151_1==REAL_KW||(LA151_1>=SEQUENCE_KW && LA151_1<=SET_KW)||LA151_1==T61_STR_KW||LA151_1==TELETEX_STR_KW||LA151_1==UNIVERSAL_STR_KW||(LA151_1>=UTC_TIME_KW && LA151_1<=VISIBLE_STR_KW)||LA151_1==131||LA151_1==137||(LA151_1>=158 && LA151_1<=161)||(LA151_1>=163 && LA151_1<=165)||LA151_1==179||LA151_1==188||LA151_1==191))
			{
				alt151 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1011:19: ( signed_number )=> signed_number
				{
				DebugLocation(1011, 38);
				PushFollow(Follow._signed_number_in_exception_spec7695);
				signed_number598=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number598.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1012:21: ( defined_value )=> defined_value
				{
				DebugLocation(1012, 40);
				PushFollow(Follow._defined_value_in_exception_spec7724);
				defined_value599=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value599.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1013:21: type COLON value
				{
				DebugLocation(1013, 21);
				PushFollow(Follow._type_in_exception_spec7747);
				type600=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type600.Tree);
				DebugLocation(1013, 26);
				COLON601=(IToken)Match(input,COLON,Follow._COLON_in_exception_spec7749); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON601_tree = (CommonTree)adaptor.Create(COLON601);
				adaptor.AddChild(root_0, COLON601_tree);
				}
				DebugLocation(1013, 32);
				PushFollow(Follow._value_in_exception_spec7751);
				value602=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value602.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exception_spec", 104);
			LeaveRule("exception_spec", 104);
			LeaveRule_exception_spec();
	    }
	 	DebugLocation(1014, 17);
		} finally { DebugExitRule(GrammarFileName, "exception_spec"); }
		return retval;

	}
	// $ANTLR end "exception_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_element_set_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_element_set_spec() {}
	// $ANTLR start "element_set_spec"
	// Smi.g:1016:1: element_set_spec : ( intersections ( ( BAR | UNION_KW ) intersections )* | ALL_KW EXCEPT_KW constraint_elements );
	[GrammarRule("element_set_spec")]
	private AstParserRuleReturnScope<CommonTree, IToken> element_set_spec()
	{
		EnterRule_element_set_spec();
		EnterRule("element_set_spec", 105);
		TraceIn("element_set_spec", 105);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set604 = default(IToken);
	    IToken ALL_KW606 = default(IToken);
	    IToken EXCEPT_KW607 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> intersections603 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> intersections605 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint_elements608 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set604_tree = default(CommonTree);
	    CommonTree ALL_KW606_tree = default(CommonTree);
	    CommonTree EXCEPT_KW607_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "element_set_spec");
		DebugLocation(1016, 54);
		try
		{
			// Smi.g:1016:17: ( intersections ( ( BAR | UNION_KW ) intersections )* | ALL_KW EXCEPT_KW constraint_elements )
			int alt153=2;
			try { DebugEnterDecision(153, decisionCanBacktrack[153]);
			int LA153_1 = input.LA(1);

			if ((LA153_1==ANY_KW||(LA153_1>=BIT_KW && LA153_1<=BOOLEAN_KW)||(LA153_1>=B_STRING && LA153_1<=CHARACTER_KW)||LA153_1==CHOICE_KW||LA153_1==C_STRING||LA153_1==EMBEDDED_KW||LA153_1==ENUMERATED_KW||LA153_1==ERROR_KW||(LA153_1>=EXTERNAL_KW && LA153_1<=GRAPHIC_STR_KW)||(LA153_1>=H_STRING && LA153_1<=IA5_STRING_KW)||LA153_1==INCLUDES_KW||LA153_1==INTEGER_KW||LA153_1==ISO646_STR_KW||(LA153_1>=LOWER && LA153_1<=L_PAREN)||(LA153_1>=MINUS && LA153_1<=NUMERIC_STR_KW)||(LA153_1>=OBJECT_KW && LA153_1<=OCTET_KW)||LA153_1==OPERATION_KW||LA153_1==PATTERN_KW||LA153_1==PLUS_INFINITY_KW||LA153_1==PRINTABLE_STR_KW||LA153_1==REAL_KW||(LA153_1>=SEQUENCE_KW && LA153_1<=SET_KW)||LA153_1==SIZE_KW||LA153_1==T61_STR_KW||(LA153_1>=TELETEX_STR_KW && LA153_1<=TRUE_KW)||(LA153_1>=UNIVERSAL_STR_KW && LA153_1<=WITH_KW)||LA153_1==131||LA153_1==137||(LA153_1>=158 && LA153_1<=161)||(LA153_1>=163 && LA153_1<=165)||LA153_1==179||LA153_1==188||LA153_1==191))
			{
				alt153 = 1;
			}
			else if ((LA153_1==ALL_KW))
			{
				alt153 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 153, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1016:19: intersections ( ( BAR | UNION_KW ) intersections )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1016, 19);
				PushFollow(Follow._intersections_in_element_set_spec7776);
				intersections603=intersections();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, intersections603.Tree);
				DebugLocation(1016, 33);
				// Smi.g:1016:33: ( ( BAR | UNION_KW ) intersections )*
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, decisionCanBacktrack[152]);
					int LA152_1 = input.LA(1);

					if ((LA152_1==BAR||LA152_1==UNION_KW))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch ( alt152 )
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1016:35: ( BAR | UNION_KW ) intersections
						{
						DebugLocation(1016, 35);

						set604=(IToken)input.LT(1);
						if (input.LA(1)==BAR||input.LA(1)==UNION_KW)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set604));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(1016, 52);
						PushFollow(Follow._intersections_in_element_set_spec7788);
						intersections605=intersections();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, intersections605.Tree);

						}
						break;

					default:
						goto loop152;
					}
				}

				loop152:
					;

				} finally { DebugExitSubRule(152); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1017:19: ALL_KW EXCEPT_KW constraint_elements
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1017, 19);
				ALL_KW606=(IToken)Match(input,ALL_KW,Follow._ALL_KW_in_element_set_spec7812); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ALL_KW606_tree = (CommonTree)adaptor.Create(ALL_KW606);
				adaptor.AddChild(root_0, ALL_KW606_tree);
				}
				DebugLocation(1017, 26);
				EXCEPT_KW607=(IToken)Match(input,EXCEPT_KW,Follow._EXCEPT_KW_in_element_set_spec7814); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXCEPT_KW607_tree = (CommonTree)adaptor.Create(EXCEPT_KW607);
				adaptor.AddChild(root_0, EXCEPT_KW607_tree);
				}
				DebugLocation(1017, 36);
				PushFollow(Follow._constraint_elements_in_element_set_spec7816);
				constraint_elements608=constraint_elements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint_elements608.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_set_spec", 105);
			LeaveRule("element_set_spec", 105);
			LeaveRule_element_set_spec();
	    }
	 	DebugLocation(1017, 54);
		} finally { DebugExitRule(GrammarFileName, "element_set_spec"); }
		return retval;

	}
	// $ANTLR end "element_set_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_intersections() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_intersections() {}
	// $ANTLR start "intersections"
	// Smi.g:1019:1: intersections : constraint_elements ( EXCEPT_KW constraint_elements )? ( ( INTERSECTION | INTERSECTION_KW ) constraint_elements ( EXCEPT_KW constraint_elements )? )* ;
	[GrammarRule("intersections")]
	private AstParserRuleReturnScope<CommonTree, IToken> intersections()
	{
		EnterRule_intersections();
		EnterRule("intersections", 106);
		TraceIn("intersections", 106);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken EXCEPT_KW610 = default(IToken);
	    IToken set612 = default(IToken);
	    IToken EXCEPT_KW614 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint_elements609 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint_elements611 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint_elements613 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint_elements615 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree EXCEPT_KW610_tree = default(CommonTree);
	    CommonTree set612_tree = default(CommonTree);
	    CommonTree EXCEPT_KW614_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "intersections");
		DebugLocation(1019, 107);
		try
		{
			// Smi.g:1019:14: ( constraint_elements ( EXCEPT_KW constraint_elements )? ( ( INTERSECTION | INTERSECTION_KW ) constraint_elements ( EXCEPT_KW constraint_elements )? )* )
			DebugEnterAlt(1);
			// Smi.g:1019:16: constraint_elements ( EXCEPT_KW constraint_elements )? ( ( INTERSECTION | INTERSECTION_KW ) constraint_elements ( EXCEPT_KW constraint_elements )? )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1019, 16);
			PushFollow(Follow._constraint_elements_in_intersections7823);
			constraint_elements609=constraint_elements();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constraint_elements609.Tree);
			DebugLocation(1019, 36);
			// Smi.g:1019:36: ( EXCEPT_KW constraint_elements )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, decisionCanBacktrack[154]);
			int LA154_1 = input.LA(1);

			if ((LA154_1==EXCEPT_KW))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1019:37: EXCEPT_KW constraint_elements
				{
				DebugLocation(1019, 37);
				EXCEPT_KW610=(IToken)Match(input,EXCEPT_KW,Follow._EXCEPT_KW_in_intersections7826); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXCEPT_KW610_tree = (CommonTree)adaptor.Create(EXCEPT_KW610);
				adaptor.AddChild(root_0, EXCEPT_KW610_tree);
				}
				DebugLocation(1019, 47);
				PushFollow(Follow._constraint_elements_in_intersections7828);
				constraint_elements611=constraint_elements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint_elements611.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(1020, 17);
			// Smi.g:1020:17: ( ( INTERSECTION | INTERSECTION_KW ) constraint_elements ( EXCEPT_KW constraint_elements )? )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, decisionCanBacktrack[156]);
				int LA156_1 = input.LA(1);

				if (((LA156_1>=INTERSECTION && LA156_1<=INTERSECTION_KW)))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1020:19: ( INTERSECTION | INTERSECTION_KW ) constraint_elements ( EXCEPT_KW constraint_elements )?
					{
					DebugLocation(1020, 19);

					set612=(IToken)input.LT(1);
					if ((input.LA(1)>=INTERSECTION && input.LA(1)<=INTERSECTION_KW))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set612));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1020, 52);
					PushFollow(Follow._constraint_elements_in_intersections7859);
					constraint_elements613=constraint_elements();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constraint_elements613.Tree);
					DebugLocation(1020, 72);
					// Smi.g:1020:72: ( EXCEPT_KW constraint_elements )?
					int alt155=2;
					try { DebugEnterSubRule(155);
					try { DebugEnterDecision(155, decisionCanBacktrack[155]);
					int LA155_1 = input.LA(1);

					if ((LA155_1==EXCEPT_KW))
					{
						alt155 = 1;
					}
					} finally { DebugExitDecision(155); }
					switch (alt155)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1020:73: EXCEPT_KW constraint_elements
						{
						DebugLocation(1020, 73);
						EXCEPT_KW614=(IToken)Match(input,EXCEPT_KW,Follow._EXCEPT_KW_in_intersections7862); if (state.failed) return retval;
						if (state.backtracking == 0) {
						EXCEPT_KW614_tree = (CommonTree)adaptor.Create(EXCEPT_KW614);
						adaptor.AddChild(root_0, EXCEPT_KW614_tree);
						}
						DebugLocation(1020, 83);
						PushFollow(Follow._constraint_elements_in_intersections7864);
						constraint_elements615=constraint_elements();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, constraint_elements615.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(155); }


					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("intersections", 106);
			LeaveRule("intersections", 106);
			LeaveRule_intersections();
	    }
	 	DebugLocation(1020, 107);
		} finally { DebugExitRule(GrammarFileName, "intersections"); }
		return retval;

	}
	// $ANTLR end "intersections"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constraint_elements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constraint_elements() {}
	// $ANTLR start "constraint_elements"
	// Smi.g:1022:1: constraint_elements : ( ( value_range )=> value_range | ( value )=> value | SIZE_KW constraint | FROM_KW constraint | L_PAREN element_set_spec R_PAREN | ( INCLUDES_KW )? type | PATTERN_KW value | WITH_KW ( COMPONENT_KW constraint | COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? type_constraint_list R_BRACE ) );
	[GrammarRule("constraint_elements")]
	private AstParserRuleReturnScope<CommonTree, IToken> constraint_elements()
	{
		EnterRule_constraint_elements();
		EnterRule("constraint_elements", 107);
		TraceIn("constraint_elements", 107);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken SIZE_KW618 = default(IToken);
	    IToken FROM_KW620 = default(IToken);
	    IToken L_PAREN622 = default(IToken);
	    IToken R_PAREN624 = default(IToken);
	    IToken INCLUDES_KW625 = default(IToken);
	    IToken PATTERN_KW627 = default(IToken);
	    IToken WITH_KW629 = default(IToken);
	    IToken COMPONENT_KW630 = default(IToken);
	    IToken COMPONENTS_KW632 = default(IToken);
	    IToken L_BRACE633 = default(IToken);
	    IToken DOTDOTDOT634 = default(IToken);
	    IToken COMMA635 = default(IToken);
	    IToken R_BRACE637 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value_range616 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value617 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint619 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint621 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> element_set_spec623 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type626 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value628 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint631 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> type_constraint_list636 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree SIZE_KW618_tree = default(CommonTree);
	    CommonTree FROM_KW620_tree = default(CommonTree);
	    CommonTree L_PAREN622_tree = default(CommonTree);
	    CommonTree R_PAREN624_tree = default(CommonTree);
	    CommonTree INCLUDES_KW625_tree = default(CommonTree);
	    CommonTree PATTERN_KW627_tree = default(CommonTree);
	    CommonTree WITH_KW629_tree = default(CommonTree);
	    CommonTree COMPONENT_KW630_tree = default(CommonTree);
	    CommonTree COMPONENTS_KW632_tree = default(CommonTree);
	    CommonTree L_BRACE633_tree = default(CommonTree);
	    CommonTree DOTDOTDOT634_tree = default(CommonTree);
	    CommonTree COMMA635_tree = default(CommonTree);
	    CommonTree R_BRACE637_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "constraint_elements");
		DebugLocation(1022, 61);
		try
		{
			// Smi.g:1022:20: ( ( value_range )=> value_range | ( value )=> value | SIZE_KW constraint | FROM_KW constraint | L_PAREN element_set_spec R_PAREN | ( INCLUDES_KW )? type | PATTERN_KW value | WITH_KW ( COMPONENT_KW constraint | COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? type_constraint_list R_BRACE ) )
			int alt160=8;
			try { DebugEnterDecision(160, decisionCanBacktrack[160]);
			int LA160_1 = input.LA(1);

			if ((LA160_1==TRUE_KW))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==FALSE_KW))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==NULL_KW))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else if ((true))
				{
					alt160 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==C_STRING))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==UPPER))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else if ((true))
				{
					alt160 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==LOWER))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else if ((true))
				{
					alt160 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==MINUS))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==NUMBER))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==L_BRACE))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==H_STRING))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==B_STRING))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==PLUS_INFINITY_KW))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==MINUS_INFINITY_KW))
			{
				int LA160_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Smi_fragment)))
				{
					alt160 = 1;
				}
				else if ((EvaluatePredicate(synpred45_Smi_fragment)))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA160_1==MIN_KW) && (EvaluatePredicate(synpred44_Smi_fragment)))
			{
				alt160 = 1;
			}
			else if ((LA160_1==SIZE_KW))
			{
				alt160 = 3;
			}
			else if ((LA160_1==FROM_KW))
			{
				alt160 = 4;
			}
			else if ((LA160_1==L_PAREN))
			{
				alt160 = 5;
			}
			else if ((LA160_1==ANY_KW||(LA160_1>=BIT_KW && LA160_1<=BOOLEAN_KW)||LA160_1==CHARACTER_KW||LA160_1==CHOICE_KW||LA160_1==EMBEDDED_KW||LA160_1==ENUMERATED_KW||LA160_1==ERROR_KW||LA160_1==EXTERNAL_KW||(LA160_1>=GENERALIZED_TIME_KW && LA160_1<=GRAPHIC_STR_KW)||LA160_1==IA5_STRING_KW||LA160_1==INCLUDES_KW||LA160_1==INTEGER_KW||LA160_1==ISO646_STR_KW||LA160_1==L_BRACKET||LA160_1==NUMERIC_STR_KW||(LA160_1>=OBJECT_KW && LA160_1<=OCTET_KW)||LA160_1==OPERATION_KW||LA160_1==PRINTABLE_STR_KW||LA160_1==REAL_KW||(LA160_1>=SEQUENCE_KW && LA160_1<=SET_KW)||LA160_1==T61_STR_KW||LA160_1==TELETEX_STR_KW||LA160_1==UNIVERSAL_STR_KW||(LA160_1>=UTC_TIME_KW && LA160_1<=VISIBLE_STR_KW)||LA160_1==131||LA160_1==137||(LA160_1>=158 && LA160_1<=161)||(LA160_1>=163 && LA160_1<=165)||LA160_1==179||LA160_1==188||LA160_1==191))
			{
				alt160 = 6;
			}
			else if ((LA160_1==PATTERN_KW))
			{
				alt160 = 7;
			}
			else if ((LA160_1==WITH_KW))
			{
				alt160 = 8;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 160, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1022:22: ( value_range )=> value_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1022, 39);
				PushFollow(Follow._value_range_in_constraint_elements7883);
				value_range616=value_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value_range616.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1023:22: ( value )=> value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1023, 33);
				PushFollow(Follow._value_in_constraint_elements7912);
				value617=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value617.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1024:22: SIZE_KW constraint
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1024, 22);
				SIZE_KW618=(IToken)Match(input,SIZE_KW,Follow._SIZE_KW_in_constraint_elements7936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIZE_KW618_tree = (CommonTree)adaptor.Create(SIZE_KW618);
				adaptor.AddChild(root_0, SIZE_KW618_tree);
				}
				DebugLocation(1024, 30);
				PushFollow(Follow._constraint_in_constraint_elements7938);
				constraint619=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint619.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Smi.g:1025:22: FROM_KW constraint
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1025, 22);
				FROM_KW620=(IToken)Match(input,FROM_KW,Follow._FROM_KW_in_constraint_elements7962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM_KW620_tree = (CommonTree)adaptor.Create(FROM_KW620);
				adaptor.AddChild(root_0, FROM_KW620_tree);
				}
				DebugLocation(1025, 30);
				PushFollow(Follow._constraint_in_constraint_elements7964);
				constraint621=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint621.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Smi.g:1026:22: L_PAREN element_set_spec R_PAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1026, 22);
				L_PAREN622=(IToken)Match(input,L_PAREN,Follow._L_PAREN_in_constraint_elements7988); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_PAREN622_tree = (CommonTree)adaptor.Create(L_PAREN622);
				adaptor.AddChild(root_0, L_PAREN622_tree);
				}
				DebugLocation(1026, 30);
				PushFollow(Follow._element_set_spec_in_constraint_elements7990);
				element_set_spec623=element_set_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, element_set_spec623.Tree);
				DebugLocation(1026, 47);
				R_PAREN624=(IToken)Match(input,R_PAREN,Follow._R_PAREN_in_constraint_elements7992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_PAREN624_tree = (CommonTree)adaptor.Create(R_PAREN624);
				adaptor.AddChild(root_0, R_PAREN624_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Smi.g:1027:22: ( INCLUDES_KW )? type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1027, 22);
				// Smi.g:1027:22: ( INCLUDES_KW )?
				int alt157=2;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, decisionCanBacktrack[157]);
				int LA157_1 = input.LA(1);

				if ((LA157_1==INCLUDES_KW))
				{
					alt157 = 1;
				}
				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1027:23: INCLUDES_KW
					{
					DebugLocation(1027, 23);
					INCLUDES_KW625=(IToken)Match(input,INCLUDES_KW,Follow._INCLUDES_KW_in_constraint_elements8017); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INCLUDES_KW625_tree = (CommonTree)adaptor.Create(INCLUDES_KW625);
					adaptor.AddChild(root_0, INCLUDES_KW625_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(157); }

				DebugLocation(1027, 37);
				PushFollow(Follow._type_in_constraint_elements8021);
				type626=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type626.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Smi.g:1028:22: PATTERN_KW value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1028, 22);
				PATTERN_KW627=(IToken)Match(input,PATTERN_KW,Follow._PATTERN_KW_in_constraint_elements8045); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PATTERN_KW627_tree = (CommonTree)adaptor.Create(PATTERN_KW627);
				adaptor.AddChild(root_0, PATTERN_KW627_tree);
				}
				DebugLocation(1028, 33);
				PushFollow(Follow._value_in_constraint_elements8047);
				value628=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value628.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Smi.g:1029:22: WITH_KW ( COMPONENT_KW constraint | COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? type_constraint_list R_BRACE )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1029, 22);
				WITH_KW629=(IToken)Match(input,WITH_KW,Follow._WITH_KW_in_constraint_elements8071); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITH_KW629_tree = (CommonTree)adaptor.Create(WITH_KW629);
				adaptor.AddChild(root_0, WITH_KW629_tree);
				}
				DebugLocation(1029, 30);
				// Smi.g:1029:30: ( COMPONENT_KW constraint | COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? type_constraint_list R_BRACE )
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, decisionCanBacktrack[159]);
				int LA159_1 = input.LA(1);

				if ((LA159_1==COMPONENT_KW))
				{
					alt159 = 1;
				}
				else if ((LA159_1==COMPONENTS_KW))
				{
					alt159 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 159, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1029:31: COMPONENT_KW constraint
					{
					DebugLocation(1029, 31);
					COMPONENT_KW630=(IToken)Match(input,COMPONENT_KW,Follow._COMPONENT_KW_in_constraint_elements8074); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMPONENT_KW630_tree = (CommonTree)adaptor.Create(COMPONENT_KW630);
					adaptor.AddChild(root_0, COMPONENT_KW630_tree);
					}
					DebugLocation(1029, 44);
					PushFollow(Follow._constraint_in_constraint_elements8076);
					constraint631=constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constraint631.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1030:33: COMPONENTS_KW L_BRACE ( DOTDOTDOT COMMA )? type_constraint_list R_BRACE
					{
					DebugLocation(1030, 33);
					COMPONENTS_KW632=(IToken)Match(input,COMPONENTS_KW,Follow._COMPONENTS_KW_in_constraint_elements8111); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMPONENTS_KW632_tree = (CommonTree)adaptor.Create(COMPONENTS_KW632);
					adaptor.AddChild(root_0, COMPONENTS_KW632_tree);
					}
					DebugLocation(1030, 47);
					L_BRACE633=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_constraint_elements8113); if (state.failed) return retval;
					if (state.backtracking == 0) {
					L_BRACE633_tree = (CommonTree)adaptor.Create(L_BRACE633);
					adaptor.AddChild(root_0, L_BRACE633_tree);
					}
					DebugLocation(1030, 55);
					// Smi.g:1030:55: ( DOTDOTDOT COMMA )?
					int alt158=2;
					try { DebugEnterSubRule(158);
					try { DebugEnterDecision(158, decisionCanBacktrack[158]);
					int LA158_1 = input.LA(1);

					if ((LA158_1==DOTDOTDOT))
					{
						alt158 = 1;
					}
					} finally { DebugExitDecision(158); }
					switch (alt158)
					{
					case 1:
						DebugEnterAlt(1);
						// Smi.g:1030:56: DOTDOTDOT COMMA
						{
						DebugLocation(1030, 56);
						DOTDOTDOT634=(IToken)Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_constraint_elements8116); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DOTDOTDOT634_tree = (CommonTree)adaptor.Create(DOTDOTDOT634);
						adaptor.AddChild(root_0, DOTDOTDOT634_tree);
						}
						DebugLocation(1030, 66);
						COMMA635=(IToken)Match(input,COMMA,Follow._COMMA_in_constraint_elements8118); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA635_tree = (CommonTree)adaptor.Create(COMMA635);
						adaptor.AddChild(root_0, COMMA635_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(158); }

					DebugLocation(1031, 33);
					PushFollow(Follow._type_constraint_list_in_constraint_elements8155);
					type_constraint_list636=type_constraint_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_constraint_list636.Tree);
					DebugLocation(1031, 54);
					R_BRACE637=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_constraint_elements8157); if (state.failed) return retval;
					if (state.backtracking == 0) {
					R_BRACE637_tree = (CommonTree)adaptor.Create(R_BRACE637);
					adaptor.AddChild(root_0, R_BRACE637_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(159); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraint_elements", 107);
			LeaveRule("constraint_elements", 107);
			LeaveRule_constraint_elements();
	    }
	 	DebugLocation(1031, 61);
		} finally { DebugExitRule(GrammarFileName, "constraint_elements"); }
		return retval;

	}
	// $ANTLR end "constraint_elements"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_value_range() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_value_range() {}
	// $ANTLR start "value_range"
	// Smi.g:1033:1: value_range : ( value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? ( value | MAX_KW ) ;
	[GrammarRule("value_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> value_range()
	{
		EnterRule_value_range();
		EnterRule("value_range", 108);
		TraceIn("value_range", 108);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken MIN_KW639 = default(IToken);
	    IToken LESS640 = default(IToken);
	    IToken DOTDOT641 = default(IToken);
	    IToken LESS642 = default(IToken);
	    IToken MAX_KW644 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value638 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value643 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree MIN_KW639_tree = default(CommonTree);
	    CommonTree LESS640_tree = default(CommonTree);
	    CommonTree DOTDOT641_tree = default(CommonTree);
	    CommonTree LESS642_tree = default(CommonTree);
	    CommonTree MAX_KW644_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "value_range");
		DebugLocation(1033, 70);
		try
		{
			// Smi.g:1033:12: ( ( value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? ( value | MAX_KW ) )
			DebugEnterAlt(1);
			// Smi.g:1033:14: ( value | MIN_KW ) ( LESS )? DOTDOT ( LESS )? ( value | MAX_KW )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1033, 14);
			// Smi.g:1033:14: ( value | MIN_KW )
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, decisionCanBacktrack[161]);
			int LA161_1 = input.LA(1);

			if ((LA161_1==B_STRING||LA161_1==C_STRING||LA161_1==FALSE_KW||LA161_1==H_STRING||(LA161_1>=LOWER && LA161_1<=L_BRACE)||(LA161_1>=MINUS && LA161_1<=MINUS_INFINITY_KW)||(LA161_1>=NULL_KW && LA161_1<=NUMBER)||LA161_1==PLUS_INFINITY_KW||LA161_1==TRUE_KW||LA161_1==UPPER))
			{
				alt161 = 1;
			}
			else if ((LA161_1==MIN_KW))
			{
				alt161 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1033:15: value
				{
				DebugLocation(1033, 15);
				PushFollow(Follow._value_in_value_range8166);
				value638=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value638.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1033:23: MIN_KW
				{
				DebugLocation(1033, 23);
				MIN_KW639=(IToken)Match(input,MIN_KW,Follow._MIN_KW_in_value_range8170); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MIN_KW639_tree = (CommonTree)adaptor.Create(MIN_KW639);
				adaptor.AddChild(root_0, MIN_KW639_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(161); }

			DebugLocation(1033, 31);
			// Smi.g:1033:31: ( LESS )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, decisionCanBacktrack[162]);
			int LA162_1 = input.LA(1);

			if ((LA162_1==LESS))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1033:32: LESS
				{
				DebugLocation(1033, 32);
				LESS640=(IToken)Match(input,LESS,Follow._LESS_in_value_range8174); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LESS640_tree = (CommonTree)adaptor.Create(LESS640);
				adaptor.AddChild(root_0, LESS640_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(1033, 39);
			DOTDOT641=(IToken)Match(input,DOTDOT,Follow._DOTDOT_in_value_range8178); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOTDOT641_tree = (CommonTree)adaptor.Create(DOTDOT641);
			adaptor.AddChild(root_0, DOTDOT641_tree);
			}
			DebugLocation(1033, 46);
			// Smi.g:1033:46: ( LESS )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, decisionCanBacktrack[163]);
			int LA163_1 = input.LA(1);

			if ((LA163_1==LESS))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1033:47: LESS
				{
				DebugLocation(1033, 47);
				LESS642=(IToken)Match(input,LESS,Follow._LESS_in_value_range8181); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LESS642_tree = (CommonTree)adaptor.Create(LESS642);
				adaptor.AddChild(root_0, LESS642_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1033, 54);
			// Smi.g:1033:54: ( value | MAX_KW )
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, decisionCanBacktrack[164]);
			int LA164_1 = input.LA(1);

			if ((LA164_1==B_STRING||LA164_1==C_STRING||LA164_1==FALSE_KW||LA164_1==H_STRING||(LA164_1>=LOWER && LA164_1<=L_BRACE)||(LA164_1>=MINUS && LA164_1<=MINUS_INFINITY_KW)||(LA164_1>=NULL_KW && LA164_1<=NUMBER)||LA164_1==PLUS_INFINITY_KW||LA164_1==TRUE_KW||LA164_1==UPPER))
			{
				alt164 = 1;
			}
			else if ((LA164_1==MAX_KW))
			{
				alt164 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 164, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1033:55: value
				{
				DebugLocation(1033, 55);
				PushFollow(Follow._value_in_value_range8186);
				value643=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value643.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1033:63: MAX_KW
				{
				DebugLocation(1033, 63);
				MAX_KW644=(IToken)Match(input,MAX_KW,Follow._MAX_KW_in_value_range8190); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MAX_KW644_tree = (CommonTree)adaptor.Create(MAX_KW644);
				adaptor.AddChild(root_0, MAX_KW644_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value_range", 108);
			LeaveRule("value_range", 108);
			LeaveRule_value_range();
	    }
	 	DebugLocation(1033, 70);
		} finally { DebugExitRule(GrammarFileName, "value_range"); }
		return retval;

	}
	// $ANTLR end "value_range"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_constraint_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_constraint_list() {}
	// $ANTLR start "type_constraint_list"
	// Smi.g:1035:1: type_constraint_list : named_constraint ( COMMA named_constraint )* ;
	[GrammarRule("type_constraint_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_constraint_list()
	{
		EnterRule_type_constraint_list();
		EnterRule("type_constraint_list", 109);
		TraceIn("type_constraint_list", 109);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA646 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> named_constraint645 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> named_constraint647 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA646_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "type_constraint_list");
		DebugLocation(1035, 65);
		try
		{
			// Smi.g:1035:21: ( named_constraint ( COMMA named_constraint )* )
			DebugEnterAlt(1);
			// Smi.g:1035:23: named_constraint ( COMMA named_constraint )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1035, 23);
			PushFollow(Follow._named_constraint_in_type_constraint_list8199);
			named_constraint645=named_constraint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, named_constraint645.Tree);
			DebugLocation(1035, 40);
			// Smi.g:1035:40: ( COMMA named_constraint )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, decisionCanBacktrack[165]);
				int LA165_1 = input.LA(1);

				if ((LA165_1==COMMA))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1035:41: COMMA named_constraint
					{
					DebugLocation(1035, 41);
					COMMA646=(IToken)Match(input,COMMA,Follow._COMMA_in_type_constraint_list8202); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA646_tree = (CommonTree)adaptor.Create(COMMA646);
					adaptor.AddChild(root_0, COMMA646_tree);
					}
					DebugLocation(1035, 47);
					PushFollow(Follow._named_constraint_in_type_constraint_list8204);
					named_constraint647=named_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, named_constraint647.Tree);

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_constraint_list", 109);
			LeaveRule("type_constraint_list", 109);
			LeaveRule_type_constraint_list();
	    }
	 	DebugLocation(1035, 65);
		} finally { DebugExitRule(GrammarFileName, "type_constraint_list"); }
		return retval;

	}
	// $ANTLR end "type_constraint_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_named_constraint() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_named_constraint() {}
	// $ANTLR start "named_constraint"
	// Smi.g:1037:1: named_constraint : LOWER ( constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )? ;
	[GrammarRule("named_constraint")]
	private AstParserRuleReturnScope<CommonTree, IToken> named_constraint()
	{
		EnterRule_named_constraint();
		EnterRule("named_constraint", 110);
		TraceIn("named_constraint", 110);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER648 = default(IToken);
	    IToken set650 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> constraint649 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER648_tree = default(CommonTree);
	    CommonTree set650_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "named_constraint");
		DebugLocation(1037, 78);
		try
		{
			// Smi.g:1037:17: ( LOWER ( constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )? )
			DebugEnterAlt(1);
			// Smi.g:1037:19: LOWER ( constraint )? ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1037, 19);
			LOWER648=(IToken)Match(input,LOWER,Follow._LOWER_in_named_constraint8214); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER648_tree = (CommonTree)adaptor.Create(LOWER648);
			adaptor.AddChild(root_0, LOWER648_tree);
			}
			DebugLocation(1037, 25);
			// Smi.g:1037:25: ( constraint )?
			int alt166=2;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, decisionCanBacktrack[166]);
			int LA166_1 = input.LA(1);

			if ((LA166_1==L_PAREN))
			{
				alt166 = 1;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1037:26: constraint
				{
				DebugLocation(1037, 26);
				PushFollow(Follow._constraint_in_named_constraint8217);
				constraint649=constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constraint649.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(166); }

			DebugLocation(1037, 39);
			// Smi.g:1037:39: ( PRESENT_KW | ABSENT_KW | OPTIONAL_KW )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, decisionCanBacktrack[167]);
			int LA167_1 = input.LA(1);

			if ((LA167_1==ABSENT_KW||LA167_1==OPTIONAL_KW||LA167_1==PRESENT_KW))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:
				{
				DebugLocation(1037, 39);

				set650=(IToken)input.LT(1);
				if (input.LA(1)==ABSENT_KW||input.LA(1)==OPTIONAL_KW||input.LA(1)==PRESENT_KW)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set650));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(167); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_constraint", 110);
			LeaveRule("named_constraint", 110);
			LeaveRule_named_constraint();
	    }
	 	DebugLocation(1037, 78);
		} finally { DebugExitRule(GrammarFileName, "named_constraint"); }
		return retval;

	}
	// $ANTLR end "named_constraint"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_choice_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_choice_value() {}
	// $ANTLR start "choice_value"
	// Smi.g:1039:1: choice_value : LOWER ( COLON )? value ;
	[GrammarRule("choice_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> choice_value()
	{
		EnterRule_choice_value();
		EnterRule("choice_value", 111);
		TraceIn("choice_value", 111);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER651 = default(IToken);
	    IToken COLON652 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value653 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER651_tree = default(CommonTree);
	    CommonTree COLON652_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "choice_value");
		DebugLocation(1039, 34);
		try
		{
			// Smi.g:1039:13: ( LOWER ( COLON )? value )
			DebugEnterAlt(1);
			// Smi.g:1039:15: LOWER ( COLON )? value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1039, 15);
			LOWER651=(IToken)Match(input,LOWER,Follow._LOWER_in_choice_value8240); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER651_tree = (CommonTree)adaptor.Create(LOWER651);
			adaptor.AddChild(root_0, LOWER651_tree);
			}
			DebugLocation(1039, 21);
			// Smi.g:1039:21: ( COLON )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, decisionCanBacktrack[168]);
			int LA168_1 = input.LA(1);

			if ((LA168_1==COLON))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1039:22: COLON
				{
				DebugLocation(1039, 22);
				COLON652=(IToken)Match(input,COLON,Follow._COLON_in_choice_value8243); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON652_tree = (CommonTree)adaptor.Create(COLON652);
				adaptor.AddChild(root_0, COLON652_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(168); }

			DebugLocation(1039, 30);
			PushFollow(Follow._value_in_choice_value8247);
			value653=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value653.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("choice_value", 111);
			LeaveRule("choice_value", 111);
			LeaveRule_choice_value();
	    }
	 	DebugLocation(1039, 34);
		} finally { DebugExitRule(GrammarFileName, "choice_value"); }
		return retval;

	}
	// $ANTLR end "choice_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sequence_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sequence_value() {}
	// $ANTLR start "sequence_value"
	// Smi.g:1041:1: sequence_value : L_BRACE ( named_value )? ( COMMA named_value )* R_BRACE ;
	[GrammarRule("sequence_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> sequence_value()
	{
		EnterRule_sequence_value();
		EnterRule("sequence_value", 112);
		TraceIn("sequence_value", 112);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE654 = default(IToken);
	    IToken COMMA656 = default(IToken);
	    IToken R_BRACE658 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> named_value655 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> named_value657 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE654_tree = default(CommonTree);
	    CommonTree COMMA656_tree = default(CommonTree);
	    CommonTree R_BRACE658_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "sequence_value");
		DebugLocation(1041, 67);
		try
		{
			// Smi.g:1041:15: ( L_BRACE ( named_value )? ( COMMA named_value )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1041:17: L_BRACE ( named_value )? ( COMMA named_value )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1041, 17);
			L_BRACE654=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequence_value8254); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE654_tree = (CommonTree)adaptor.Create(L_BRACE654);
			adaptor.AddChild(root_0, L_BRACE654_tree);
			}
			DebugLocation(1041, 25);
			// Smi.g:1041:25: ( named_value )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, decisionCanBacktrack[169]);
			int LA169_1 = input.LA(1);

			if ((LA169_1==LOWER))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1041:26: named_value
				{
				DebugLocation(1041, 26);
				PushFollow(Follow._named_value_in_sequence_value8257);
				named_value655=named_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, named_value655.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(1041, 40);
			// Smi.g:1041:40: ( COMMA named_value )*
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, decisionCanBacktrack[170]);
				int LA170_1 = input.LA(1);

				if ((LA170_1==COMMA))
				{
					alt170 = 1;
				}


				} finally { DebugExitDecision(170); }
				switch ( alt170 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1041:41: COMMA named_value
					{
					DebugLocation(1041, 41);
					COMMA656=(IToken)Match(input,COMMA,Follow._COMMA_in_sequence_value8262); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA656_tree = (CommonTree)adaptor.Create(COMMA656);
					adaptor.AddChild(root_0, COMMA656_tree);
					}
					DebugLocation(1041, 47);
					PushFollow(Follow._named_value_in_sequence_value8264);
					named_value657=named_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, named_value657.Tree);

					}
					break;

				default:
					goto loop170;
				}
			}

			loop170:
				;

			} finally { DebugExitSubRule(170); }

			DebugLocation(1041, 61);
			R_BRACE658=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequence_value8268); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE658_tree = (CommonTree)adaptor.Create(R_BRACE658);
			adaptor.AddChild(root_0, R_BRACE658_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequence_value", 112);
			LeaveRule("sequence_value", 112);
			LeaveRule_sequence_value();
	    }
	 	DebugLocation(1041, 67);
		} finally { DebugExitRule(GrammarFileName, "sequence_value"); }
		return retval;

	}
	// $ANTLR end "sequence_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sequenceof_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sequenceof_value() {}
	// $ANTLR start "sequenceof_value"
	// Smi.g:1043:1: sequenceof_value : L_BRACE ( value )? ( COMMA value )* R_BRACE ;
	[GrammarRule("sequenceof_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> sequenceof_value()
	{
		EnterRule_sequenceof_value();
		EnterRule("sequenceof_value", 113);
		TraceIn("sequenceof_value", 113);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken L_BRACE659 = default(IToken);
	    IToken COMMA661 = default(IToken);
	    IToken R_BRACE663 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value660 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> value662 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree L_BRACE659_tree = default(CommonTree);
	    CommonTree COMMA661_tree = default(CommonTree);
	    CommonTree R_BRACE663_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "sequenceof_value");
		DebugLocation(1043, 57);
		try
		{
			// Smi.g:1043:17: ( L_BRACE ( value )? ( COMMA value )* R_BRACE )
			DebugEnterAlt(1);
			// Smi.g:1043:19: L_BRACE ( value )? ( COMMA value )* R_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1043, 19);
			L_BRACE659=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_sequenceof_value8275); if (state.failed) return retval;
			if (state.backtracking == 0) {
			L_BRACE659_tree = (CommonTree)adaptor.Create(L_BRACE659);
			adaptor.AddChild(root_0, L_BRACE659_tree);
			}
			DebugLocation(1043, 27);
			// Smi.g:1043:27: ( value )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, decisionCanBacktrack[171]);
			int LA171_1 = input.LA(1);

			if ((LA171_1==B_STRING||LA171_1==C_STRING||LA171_1==FALSE_KW||LA171_1==H_STRING||(LA171_1>=LOWER && LA171_1<=L_BRACE)||(LA171_1>=MINUS && LA171_1<=MINUS_INFINITY_KW)||(LA171_1>=NULL_KW && LA171_1<=NUMBER)||LA171_1==PLUS_INFINITY_KW||LA171_1==TRUE_KW||LA171_1==UPPER))
			{
				alt171 = 1;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1043:28: value
				{
				DebugLocation(1043, 28);
				PushFollow(Follow._value_in_sequenceof_value8278);
				value660=value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, value660.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(1043, 36);
			// Smi.g:1043:36: ( COMMA value )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, decisionCanBacktrack[172]);
				int LA172_1 = input.LA(1);

				if ((LA172_1==COMMA))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1043:37: COMMA value
					{
					DebugLocation(1043, 37);
					COMMA661=(IToken)Match(input,COMMA,Follow._COMMA_in_sequenceof_value8283); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA661_tree = (CommonTree)adaptor.Create(COMMA661);
					adaptor.AddChild(root_0, COMMA661_tree);
					}
					DebugLocation(1043, 43);
					PushFollow(Follow._value_in_sequenceof_value8285);
					value662=value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, value662.Tree);

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }

			DebugLocation(1043, 51);
			R_BRACE663=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_sequenceof_value8289); if (state.failed) return retval;
			if (state.backtracking == 0) {
			R_BRACE663_tree = (CommonTree)adaptor.Create(R_BRACE663);
			adaptor.AddChild(root_0, R_BRACE663_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sequenceof_value", 113);
			LeaveRule("sequenceof_value", 113);
			LeaveRule_sequenceof_value();
	    }
	 	DebugLocation(1043, 57);
		} finally { DebugExitRule(GrammarFileName, "sequenceof_value"); }
		return retval;

	}
	// $ANTLR end "sequenceof_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_cstr_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_cstr_value() {}
	// $ANTLR start "cstr_value"
	// Smi.g:1045:1: cstr_value : ( ( H_STRING )=> H_STRING | ( B_STRING )=> B_STRING | L_BRACE ( ( id_list )=> id_list | ( char_defs_list )=> char_defs_list | tuple_or_quad ) R_BRACE );
	[GrammarRule("cstr_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> cstr_value()
	{
		EnterRule_cstr_value();
		EnterRule("cstr_value", 114);
		TraceIn("cstr_value", 114);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken H_STRING664 = default(IToken);
	    IToken B_STRING665 = default(IToken);
	    IToken L_BRACE666 = default(IToken);
	    IToken R_BRACE670 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> id_list667 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> char_defs_list668 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> tuple_or_quad669 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree H_STRING664_tree = default(CommonTree);
	    CommonTree B_STRING665_tree = default(CommonTree);
	    CommonTree L_BRACE666_tree = default(CommonTree);
	    CommonTree R_BRACE670_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "cstr_value");
		DebugLocation(1045, 21);
		try
		{
			// Smi.g:1045:11: ( ( H_STRING )=> H_STRING | ( B_STRING )=> B_STRING | L_BRACE ( ( id_list )=> id_list | ( char_defs_list )=> char_defs_list | tuple_or_quad ) R_BRACE )
			int alt174=3;
			try { DebugEnterDecision(174, decisionCanBacktrack[174]);
			int LA174_1 = input.LA(1);

			if ((LA174_1==H_STRING) && (EvaluatePredicate(synpred46_Smi_fragment)))
			{
				alt174 = 1;
			}
			else if ((LA174_1==B_STRING) && (EvaluatePredicate(synpred47_Smi_fragment)))
			{
				alt174 = 2;
			}
			else if ((LA174_1==L_BRACE))
			{
				alt174 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 174, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1045:13: ( H_STRING )=> H_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1045, 27);
				H_STRING664=(IToken)Match(input,H_STRING,Follow._H_STRING_in_cstr_value8302); if (state.failed) return retval;
				if (state.backtracking == 0) {
				H_STRING664_tree = (CommonTree)adaptor.Create(H_STRING664);
				adaptor.AddChild(root_0, H_STRING664_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1046:13: ( B_STRING )=> B_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1046, 27);
				B_STRING665=(IToken)Match(input,B_STRING,Follow._B_STRING_in_cstr_value8323); if (state.failed) return retval;
				if (state.backtracking == 0) {
				B_STRING665_tree = (CommonTree)adaptor.Create(B_STRING665);
				adaptor.AddChild(root_0, B_STRING665_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1047:13: L_BRACE ( ( id_list )=> id_list | ( char_defs_list )=> char_defs_list | tuple_or_quad ) R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1047, 13);
				L_BRACE666=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_cstr_value8338); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE666_tree = (CommonTree)adaptor.Create(L_BRACE666);
				adaptor.AddChild(root_0, L_BRACE666_tree);
				}
				DebugLocation(1048, 13);
				// Smi.g:1048:13: ( ( id_list )=> id_list | ( char_defs_list )=> char_defs_list | tuple_or_quad )
				int alt173=3;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, decisionCanBacktrack[173]);
				int LA173_1 = input.LA(1);

				if ((LA173_1==LOWER))
				{
					int LA173_2 = input.LA(2);

					if ((EvaluatePredicate(synpred48_Smi_fragment)))
					{
						alt173 = 1;
					}
					else if ((EvaluatePredicate(synpred49_Smi_fragment)))
					{
						alt173 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 173, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA173_1==C_STRING) && (EvaluatePredicate(synpred49_Smi_fragment)))
				{
					alt173 = 2;
				}
				else if ((LA173_1==L_BRACE) && (EvaluatePredicate(synpred49_Smi_fragment)))
				{
					alt173 = 2;
				}
				else if ((LA173_1==UPPER) && (EvaluatePredicate(synpred49_Smi_fragment)))
				{
					alt173 = 2;
				}
				else if ((LA173_1==MINUS||LA173_1==NUMBER))
				{
					alt173 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 173, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1048:15: ( id_list )=> id_list
					{
					DebugLocation(1048, 28);
					PushFollow(Follow._id_list_in_cstr_value8361);
					id_list667=id_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, id_list667.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Smi.g:1049:17: ( char_defs_list )=> char_defs_list
					{
					DebugLocation(1049, 37);
					PushFollow(Follow._char_defs_list_in_cstr_value8386);
					char_defs_list668=char_defs_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, char_defs_list668.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Smi.g:1050:17: tuple_or_quad
					{
					DebugLocation(1050, 17);
					PushFollow(Follow._tuple_or_quad_in_cstr_value8405);
					tuple_or_quad669=tuple_or_quad();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tuple_or_quad669.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(173); }

				DebugLocation(1051, 15);
				R_BRACE670=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_cstr_value8421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE670_tree = (CommonTree)adaptor.Create(R_BRACE670);
				adaptor.AddChild(root_0, R_BRACE670_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cstr_value", 114);
			LeaveRule("cstr_value", 114);
			LeaveRule_cstr_value();
	    }
	 	DebugLocation(1051, 21);
		} finally { DebugExitRule(GrammarFileName, "cstr_value"); }
		return retval;

	}
	// $ANTLR end "cstr_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_id_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_id_list() {}
	// $ANTLR start "id_list"
	// Smi.g:1053:1: id_list : LOWER ( COMMA LOWER )* ;
	[GrammarRule("id_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> id_list()
	{
		EnterRule_id_list();
		EnterRule("id_list", 115);
		TraceIn("id_list", 115);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER671 = default(IToken);
	    IToken COMMA672 = default(IToken);
	    IToken LOWER673 = default(IToken);

	    CommonTree LOWER671_tree = default(CommonTree);
	    CommonTree COMMA672_tree = default(CommonTree);
	    CommonTree LOWER673_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "id_list");
		DebugLocation(1053, 30);
		try
		{
			// Smi.g:1053:8: ( LOWER ( COMMA LOWER )* )
			DebugEnterAlt(1);
			// Smi.g:1053:10: LOWER ( COMMA LOWER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1053, 10);
			LOWER671=(IToken)Match(input,LOWER,Follow._LOWER_in_id_list8428); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER671_tree = (CommonTree)adaptor.Create(LOWER671);
			adaptor.AddChild(root_0, LOWER671_tree);
			}
			DebugLocation(1053, 16);
			// Smi.g:1053:16: ( COMMA LOWER )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, decisionCanBacktrack[175]);
				int LA175_1 = input.LA(1);

				if ((LA175_1==COMMA))
				{
					alt175 = 1;
				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1053:17: COMMA LOWER
					{
					DebugLocation(1053, 17);
					COMMA672=(IToken)Match(input,COMMA,Follow._COMMA_in_id_list8431); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA672_tree = (CommonTree)adaptor.Create(COMMA672);
					adaptor.AddChild(root_0, COMMA672_tree);
					}
					DebugLocation(1053, 23);
					LOWER673=(IToken)Match(input,LOWER,Follow._LOWER_in_id_list8433); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOWER673_tree = (CommonTree)adaptor.Create(LOWER673);
					adaptor.AddChild(root_0, LOWER673_tree);
					}

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("id_list", 115);
			LeaveRule("id_list", 115);
			LeaveRule_id_list();
	    }
	 	DebugLocation(1053, 30);
		} finally { DebugExitRule(GrammarFileName, "id_list"); }
		return retval;

	}
	// $ANTLR end "id_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_char_defs_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_char_defs_list() {}
	// $ANTLR start "char_defs_list"
	// Smi.g:1055:1: char_defs_list : char_defs ( COMMA char_defs )* ;
	[GrammarRule("char_defs_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> char_defs_list()
	{
		EnterRule_char_defs_list();
		EnterRule("char_defs_list", 116);
		TraceIn("char_defs_list", 116);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA675 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> char_defs674 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> char_defs676 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA675_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "char_defs_list");
		DebugLocation(1055, 45);
		try
		{
			// Smi.g:1055:15: ( char_defs ( COMMA char_defs )* )
			DebugEnterAlt(1);
			// Smi.g:1055:17: char_defs ( COMMA char_defs )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1055, 17);
			PushFollow(Follow._char_defs_in_char_defs_list8443);
			char_defs674=char_defs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, char_defs674.Tree);
			DebugLocation(1055, 27);
			// Smi.g:1055:27: ( COMMA char_defs )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, decisionCanBacktrack[176]);
				int LA176_1 = input.LA(1);

				if ((LA176_1==COMMA))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// Smi.g:1055:28: COMMA char_defs
					{
					DebugLocation(1055, 28);
					COMMA675=(IToken)Match(input,COMMA,Follow._COMMA_in_char_defs_list8446); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA675_tree = (CommonTree)adaptor.Create(COMMA675);
					adaptor.AddChild(root_0, COMMA675_tree);
					}
					DebugLocation(1055, 34);
					PushFollow(Follow._char_defs_in_char_defs_list8448);
					char_defs676=char_defs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, char_defs676.Tree);

					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("char_defs_list", 116);
			LeaveRule("char_defs_list", 116);
			LeaveRule_char_defs_list();
	    }
	 	DebugLocation(1055, 45);
		} finally { DebugExitRule(GrammarFileName, "char_defs_list"); }
		return retval;

	}
	// $ANTLR end "char_defs_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_tuple_or_quad() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_tuple_or_quad() {}
	// $ANTLR start "tuple_or_quad"
	// Smi.g:1058:1: tuple_or_quad : signed_number COMMA signed_number ( COMMA signed_number COMMA signed_number )? ;
	[GrammarRule("tuple_or_quad")]
	private AstParserRuleReturnScope<CommonTree, IToken> tuple_or_quad()
	{
		EnterRule_tuple_or_quad();
		EnterRule("tuple_or_quad", 117);
		TraceIn("tuple_or_quad", 117);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken COMMA678 = default(IToken);
	    IToken COMMA680 = default(IToken);
	    IToken COMMA682 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number677 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number679 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number681 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> signed_number683 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree COMMA678_tree = default(CommonTree);
	    CommonTree COMMA680_tree = default(CommonTree);
	    CommonTree COMMA682_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "tuple_or_quad");
		DebugLocation(1058, 92);
		try
		{
			// Smi.g:1058:14: ( signed_number COMMA signed_number ( COMMA signed_number COMMA signed_number )? )
			DebugEnterAlt(1);
			// Smi.g:1058:16: signed_number COMMA signed_number ( COMMA signed_number COMMA signed_number )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1058, 16);
			PushFollow(Follow._signed_number_in_tuple_or_quad8459);
			signed_number677=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number677.Tree);
			DebugLocation(1058, 30);
			COMMA678=(IToken)Match(input,COMMA,Follow._COMMA_in_tuple_or_quad8461); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA678_tree = (CommonTree)adaptor.Create(COMMA678);
			adaptor.AddChild(root_0, COMMA678_tree);
			}
			DebugLocation(1058, 36);
			PushFollow(Follow._signed_number_in_tuple_or_quad8463);
			signed_number679=signed_number();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number679.Tree);
			DebugLocation(1058, 50);
			// Smi.g:1058:50: ( COMMA signed_number COMMA signed_number )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, decisionCanBacktrack[177]);
			int LA177_1 = input.LA(1);

			if ((LA177_1==COMMA))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1058:51: COMMA signed_number COMMA signed_number
				{
				DebugLocation(1058, 51);
				COMMA680=(IToken)Match(input,COMMA,Follow._COMMA_in_tuple_or_quad8466); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA680_tree = (CommonTree)adaptor.Create(COMMA680);
				adaptor.AddChild(root_0, COMMA680_tree);
				}
				DebugLocation(1058, 57);
				PushFollow(Follow._signed_number_in_tuple_or_quad8468);
				signed_number681=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number681.Tree);
				DebugLocation(1058, 71);
				COMMA682=(IToken)Match(input,COMMA,Follow._COMMA_in_tuple_or_quad8470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA682_tree = (CommonTree)adaptor.Create(COMMA682);
				adaptor.AddChild(root_0, COMMA682_tree);
				}
				DebugLocation(1058, 77);
				PushFollow(Follow._signed_number_in_tuple_or_quad8472);
				signed_number683=signed_number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, signed_number683.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(177); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tuple_or_quad", 117);
			LeaveRule("tuple_or_quad", 117);
			LeaveRule_tuple_or_quad();
	    }
	 	DebugLocation(1058, 92);
		} finally { DebugExitRule(GrammarFileName, "tuple_or_quad"); }
		return retval;

	}
	// $ANTLR end "tuple_or_quad"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_char_defs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_char_defs() {}
	// $ANTLR start "char_defs"
	// Smi.g:1061:1: char_defs : ( C_STRING | L_BRACE tuple_or_quad R_BRACE | defined_value );
	[GrammarRule("char_defs")]
	private AstParserRuleReturnScope<CommonTree, IToken> char_defs()
	{
		EnterRule_char_defs();
		EnterRule("char_defs", 118);
		TraceIn("char_defs", 118);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken C_STRING684 = default(IToken);
	    IToken L_BRACE685 = default(IToken);
	    IToken R_BRACE687 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> tuple_or_quad686 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> defined_value688 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree C_STRING684_tree = default(CommonTree);
	    CommonTree L_BRACE685_tree = default(CommonTree);
	    CommonTree R_BRACE687_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "char_defs");
		DebugLocation(1061, 24);
		try
		{
			// Smi.g:1061:10: ( C_STRING | L_BRACE tuple_or_quad R_BRACE | defined_value )
			int alt178=3;
			try { DebugEnterDecision(178, decisionCanBacktrack[178]);
			switch (input.LA(1))
			{
			case C_STRING:
				{
				alt178 = 1;
				}
				break;
			case L_BRACE:
				{
				alt178 = 2;
				}
				break;
			case LOWER:
			case UPPER:
				{
				alt178 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 178, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// Smi.g:1061:12: C_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1061, 12);
				C_STRING684=(IToken)Match(input,C_STRING,Follow._C_STRING_in_char_defs8483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				C_STRING684_tree = (CommonTree)adaptor.Create(C_STRING684);
				adaptor.AddChild(root_0, C_STRING684_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Smi.g:1062:12: L_BRACE tuple_or_quad R_BRACE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1062, 12);
				L_BRACE685=(IToken)Match(input,L_BRACE,Follow._L_BRACE_in_char_defs8497); if (state.failed) return retval;
				if (state.backtracking == 0) {
				L_BRACE685_tree = (CommonTree)adaptor.Create(L_BRACE685);
				adaptor.AddChild(root_0, L_BRACE685_tree);
				}
				DebugLocation(1062, 20);
				PushFollow(Follow._tuple_or_quad_in_char_defs8499);
				tuple_or_quad686=tuple_or_quad();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tuple_or_quad686.Tree);
				DebugLocation(1062, 34);
				R_BRACE687=(IToken)Match(input,R_BRACE,Follow._R_BRACE_in_char_defs8501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				R_BRACE687_tree = (CommonTree)adaptor.Create(R_BRACE687);
				adaptor.AddChild(root_0, R_BRACE687_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Smi.g:1063:12: defined_value
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1063, 12);
				PushFollow(Follow._defined_value_in_char_defs8514);
				defined_value688=defined_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defined_value688.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("char_defs", 118);
			LeaveRule("char_defs", 118);
			LeaveRule_char_defs();
	    }
	 	DebugLocation(1063, 24);
		} finally { DebugExitRule(GrammarFileName, "char_defs"); }
		return retval;

	}
	// $ANTLR end "char_defs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_named_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_named_value() {}
	// $ANTLR start "named_value"
	// Smi.g:1068:1: named_value : LOWER value ;
	[GrammarRule("named_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> named_value()
	{
		EnterRule_named_value();
		EnterRule("named_value", 119);
		TraceIn("named_value", 119);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken LOWER689 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> value690 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree LOWER689_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "named_value");
		DebugLocation(1068, 24);
		try
		{
			// Smi.g:1068:12: ( LOWER value )
			DebugEnterAlt(1);
			// Smi.g:1068:14: LOWER value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1068, 14);
			LOWER689=(IToken)Match(input,LOWER,Follow._LOWER_in_named_value8524); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOWER689_tree = (CommonTree)adaptor.Create(LOWER689);
			adaptor.AddChild(root_0, LOWER689_tree);
			}
			DebugLocation(1068, 20);
			PushFollow(Follow._value_in_named_value8526);
			value690=value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, value690.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_value", 119);
			LeaveRule("named_value", 119);
			LeaveRule_named_value();
	    }
	 	DebugLocation(1068, 24);
		} finally { DebugExitRule(GrammarFileName, "named_value"); }
		return retval;

	}
	// $ANTLR end "named_value"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_Smi_fragment() {}

	// $ANTLR start synpred1_Smi
	public void synpred1_Smi_fragment()
	{
		EnterRule_synpred1_Smi_fragment();
		EnterRule("synpred1_Smi_fragment", 120);
		TraceIn("synpred1_Smi_fragment", 120);
		try
		{
			// Smi.g:610:27: ( LOWER ( LOWER | NUMBER ) )
			DebugEnterAlt(1);
			// Smi.g:610:28: LOWER ( LOWER | NUMBER )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(610, 28);
			Match(input,LOWER,Follow._LOWER_in_synpred1_Smi1976); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(610, 34);
			if (input.LA(1)==LOWER||input.LA(1)==NUMBER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create());
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_Smi_fragment", 120);
			LeaveRule("synpred1_Smi_fragment", 120);
			LeaveRule_synpred1_Smi_fragment();
		}
	}
	// $ANTLR end synpred1_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_Smi_fragment() {}

	// $ANTLR start synpred2_Smi
	public void synpred2_Smi_fragment()
	{
		EnterRule_synpred2_Smi_fragment();
		EnterRule("synpred2_Smi_fragment", 121);
		TraceIn("synpred2_Smi_fragment", 121);
		try
		{
			// Smi.g:644:29: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:644:30: defined_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(644, 30);
			PushFollow(Follow._defined_value_in_synpred2_Smi2274);
			defined_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred2_Smi_fragment", 121);
			LeaveRule("synpred2_Smi_fragment", 121);
			LeaveRule_synpred2_Smi_fragment();
		}
	}
	// $ANTLR end synpred2_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_Smi_fragment() {}

	// $ANTLR start synpred3_Smi
	public void synpred3_Smi_fragment()
	{
		EnterRule_synpred3_Smi_fragment();
		EnterRule("synpred3_Smi_fragment", 122);
		TraceIn("synpred3_Smi_fragment", 122);
		try
		{
			// Smi.g:659:8: ( TRUE_KW )
			DebugEnterAlt(1);
			// Smi.g:659:9: TRUE_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(659, 9);
			Match(input,TRUE_KW,Follow._TRUE_KW_in_synpred3_Smi2490); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred3_Smi_fragment", 122);
			LeaveRule("synpred3_Smi_fragment", 122);
			LeaveRule_synpred3_Smi_fragment();
		}
	}
	// $ANTLR end synpred3_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred4_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred4_Smi_fragment() {}

	// $ANTLR start synpred4_Smi
	public void synpred4_Smi_fragment()
	{
		EnterRule_synpred4_Smi_fragment();
		EnterRule("synpred4_Smi_fragment", 123);
		TraceIn("synpred4_Smi_fragment", 123);
		try
		{
			// Smi.g:660:8: ( FALSE_KW )
			DebugEnterAlt(1);
			// Smi.g:660:9: FALSE_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(660, 9);
			Match(input,FALSE_KW,Follow._FALSE_KW_in_synpred4_Smi2506); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred4_Smi_fragment", 123);
			LeaveRule("synpred4_Smi_fragment", 123);
			LeaveRule_synpred4_Smi_fragment();
		}
	}
	// $ANTLR end synpred4_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred5_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred5_Smi_fragment() {}

	// $ANTLR start synpred5_Smi
	public void synpred5_Smi_fragment()
	{
		EnterRule_synpred5_Smi_fragment();
		EnterRule("synpred5_Smi_fragment", 124);
		TraceIn("synpred5_Smi_fragment", 124);
		try
		{
			// Smi.g:661:8: ( NULL_KW )
			DebugEnterAlt(1);
			// Smi.g:661:9: NULL_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(661, 9);
			Match(input,NULL_KW,Follow._NULL_KW_in_synpred5_Smi2522); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred5_Smi_fragment", 124);
			LeaveRule("synpred5_Smi_fragment", 124);
			LeaveRule_synpred5_Smi_fragment();
		}
	}
	// $ANTLR end synpred5_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred6_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred6_Smi_fragment() {}

	// $ANTLR start synpred6_Smi
	public void synpred6_Smi_fragment()
	{
		EnterRule_synpred6_Smi_fragment();
		EnterRule("synpred6_Smi_fragment", 125);
		TraceIn("synpred6_Smi_fragment", 125);
		try
		{
			// Smi.g:662:8: ( C_STRING )
			DebugEnterAlt(1);
			// Smi.g:662:9: C_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(662, 9);
			Match(input,C_STRING,Follow._C_STRING_in_synpred6_Smi2539); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred6_Smi_fragment", 125);
			LeaveRule("synpred6_Smi_fragment", 125);
			LeaveRule_synpred6_Smi_fragment();
		}
	}
	// $ANTLR end synpred6_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred7_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred7_Smi_fragment() {}

	// $ANTLR start synpred7_Smi
	public void synpred7_Smi_fragment()
	{
		EnterRule_synpred7_Smi_fragment();
		EnterRule("synpred7_Smi_fragment", 126);
		TraceIn("synpred7_Smi_fragment", 126);
		try
		{
			// Smi.g:663:8: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:663:9: defined_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(663, 9);
			PushFollow(Follow._defined_value_in_synpred7_Smi2555);
			defined_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred7_Smi_fragment", 126);
			LeaveRule("synpred7_Smi_fragment", 126);
			LeaveRule_synpred7_Smi_fragment();
		}
	}
	// $ANTLR end synpred7_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred8_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred8_Smi_fragment() {}

	// $ANTLR start synpred8_Smi
	public void synpred8_Smi_fragment()
	{
		EnterRule_synpred8_Smi_fragment();
		EnterRule("synpred8_Smi_fragment", 127);
		TraceIn("synpred8_Smi_fragment", 127);
		try
		{
			// Smi.g:664:8: ( signed_number )
			DebugEnterAlt(1);
			// Smi.g:664:9: signed_number
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(664, 9);
			PushFollow(Follow._signed_number_in_synpred8_Smi2571);
			signed_number();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred8_Smi_fragment", 127);
			LeaveRule("synpred8_Smi_fragment", 127);
			LeaveRule_synpred8_Smi_fragment();
		}
	}
	// $ANTLR end synpred8_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred9_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred9_Smi_fragment() {}

	// $ANTLR start synpred9_Smi
	public void synpred9_Smi_fragment()
	{
		EnterRule_synpred9_Smi_fragment();
		EnterRule("synpred9_Smi_fragment", 128);
		TraceIn("synpred9_Smi_fragment", 128);
		try
		{
			// Smi.g:665:8: ( choice_value )
			DebugEnterAlt(1);
			// Smi.g:665:9: choice_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(665, 9);
			PushFollow(Follow._choice_value_in_synpred9_Smi2586);
			choice_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred9_Smi_fragment", 128);
			LeaveRule("synpred9_Smi_fragment", 128);
			LeaveRule_synpred9_Smi_fragment();
		}
	}
	// $ANTLR end synpred9_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred10_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred10_Smi_fragment() {}

	// $ANTLR start synpred10_Smi
	public void synpred10_Smi_fragment()
	{
		EnterRule_synpred10_Smi_fragment();
		EnterRule("synpred10_Smi_fragment", 129);
		TraceIn("synpred10_Smi_fragment", 129);
		try
		{
			// Smi.g:666:8: ( sequence_value )
			DebugEnterAlt(1);
			// Smi.g:666:9: sequence_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(666, 9);
			PushFollow(Follow._sequence_value_in_synpred10_Smi2602);
			sequence_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred10_Smi_fragment", 129);
			LeaveRule("synpred10_Smi_fragment", 129);
			LeaveRule_synpred10_Smi_fragment();
		}
	}
	// $ANTLR end synpred10_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred11_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred11_Smi_fragment() {}

	// $ANTLR start synpred11_Smi
	public void synpred11_Smi_fragment()
	{
		EnterRule_synpred11_Smi_fragment();
		EnterRule("synpred11_Smi_fragment", 130);
		TraceIn("synpred11_Smi_fragment", 130);
		try
		{
			// Smi.g:667:8: ( sequenceof_value )
			DebugEnterAlt(1);
			// Smi.g:667:9: sequenceof_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(667, 9);
			PushFollow(Follow._sequenceof_value_in_synpred11_Smi2618);
			sequenceof_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred11_Smi_fragment", 130);
			LeaveRule("synpred11_Smi_fragment", 130);
			LeaveRule_synpred11_Smi_fragment();
		}
	}
	// $ANTLR end synpred11_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred12_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred12_Smi_fragment() {}

	// $ANTLR start synpred12_Smi
	public void synpred12_Smi_fragment()
	{
		EnterRule_synpred12_Smi_fragment();
		EnterRule("synpred12_Smi_fragment", 131);
		TraceIn("synpred12_Smi_fragment", 131);
		try
		{
			// Smi.g:668:8: ( cstr_value )
			DebugEnterAlt(1);
			// Smi.g:668:9: cstr_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(668, 9);
			PushFollow(Follow._cstr_value_in_synpred12_Smi2634);
			cstr_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred12_Smi_fragment", 131);
			LeaveRule("synpred12_Smi_fragment", 131);
			LeaveRule_synpred12_Smi_fragment();
		}
	}
	// $ANTLR end synpred12_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred13_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred13_Smi_fragment() {}

	// $ANTLR start synpred13_Smi
	public void synpred13_Smi_fragment()
	{
		EnterRule_synpred13_Smi_fragment();
		EnterRule("synpred13_Smi_fragment", 132);
		TraceIn("synpred13_Smi_fragment", 132);
		try
		{
			// Smi.g:669:8: ( obj_id_comp_lst )
			DebugEnterAlt(1);
			// Smi.g:669:9: obj_id_comp_lst
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(669, 9);
			PushFollow(Follow._obj_id_comp_lst_in_synpred13_Smi2650);
			obj_id_comp_lst();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred13_Smi_fragment", 132);
			LeaveRule("synpred13_Smi_fragment", 132);
			LeaveRule_synpred13_Smi_fragment();
		}
	}
	// $ANTLR end synpred13_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred14_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred14_Smi_fragment() {}

	// $ANTLR start synpred14_Smi
	public void synpred14_Smi_fragment()
	{
		EnterRule_synpred14_Smi_fragment();
		EnterRule("synpred14_Smi_fragment", 133);
		TraceIn("synpred14_Smi_fragment", 133);
		try
		{
			// Smi.g:670:8: ( PLUS_INFINITY_KW )
			DebugEnterAlt(1);
			// Smi.g:670:9: PLUS_INFINITY_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(670, 9);
			Match(input,PLUS_INFINITY_KW,Follow._PLUS_INFINITY_KW_in_synpred14_Smi2666); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred14_Smi_fragment", 133);
			LeaveRule("synpred14_Smi_fragment", 133);
			LeaveRule_synpred14_Smi_fragment();
		}
	}
	// $ANTLR end synpred14_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred15_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred15_Smi_fragment() {}

	// $ANTLR start synpred15_Smi
	public void synpred15_Smi_fragment()
	{
		EnterRule_synpred15_Smi_fragment();
		EnterRule("synpred15_Smi_fragment", 134);
		TraceIn("synpred15_Smi_fragment", 134);
		try
		{
			// Smi.g:671:8: ( MINUS_INFINITY_KW )
			DebugEnterAlt(1);
			// Smi.g:671:9: MINUS_INFINITY_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(671, 9);
			Match(input,MINUS_INFINITY_KW,Follow._MINUS_INFINITY_KW_in_synpred15_Smi2682); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred15_Smi_fragment", 134);
			LeaveRule("synpred15_Smi_fragment", 134);
			LeaveRule_synpred15_Smi_fragment();
		}
	}
	// $ANTLR end synpred15_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred16_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred16_Smi_fragment() {}

	// $ANTLR start synpred16_Smi
	public void synpred16_Smi_fragment()
	{
		EnterRule_synpred16_Smi_fragment();
		EnterRule("synpred16_Smi_fragment", 135);
		TraceIn("synpred16_Smi_fragment", 135);
		try
		{
			// Smi.g:700:36: ( L_BRACE namedNumber )
			DebugEnterAlt(1);
			// Smi.g:700:37: L_BRACE namedNumber
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(700, 37);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred16_Smi2995); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(700, 45);
			PushFollow(Follow._namedNumber_in_synpred16_Smi2997);
			namedNumber();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred16_Smi_fragment", 135);
			LeaveRule("synpred16_Smi_fragment", 135);
			LeaveRule_synpred16_Smi_fragment();
		}
	}
	// $ANTLR end synpred16_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred17_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred17_Smi_fragment() {}

	// $ANTLR start synpred17_Smi
	public void synpred17_Smi_fragment()
	{
		EnterRule_synpred17_Smi_fragment();
		EnterRule("synpred17_Smi_fragment", 136);
		TraceIn("synpred17_Smi_fragment", 136);
		try
		{
			// Smi.g:716:27: ( L_BRACE namedNumber )
			DebugEnterAlt(1);
			// Smi.g:716:28: L_BRACE namedNumber
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(716, 28);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred17_Smi3088); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(716, 36);
			PushFollow(Follow._namedNumber_in_synpred17_Smi3090);
			namedNumber();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred17_Smi_fragment", 136);
			LeaveRule("synpred17_Smi_fragment", 136);
			LeaveRule_synpred17_Smi_fragment();
		}
	}
	// $ANTLR end synpred17_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred18_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred18_Smi_fragment() {}

	// $ANTLR start synpred18_Smi
	public void synpred18_Smi_fragment()
	{
		EnterRule_synpred18_Smi_fragment();
		EnterRule("synpred18_Smi_fragment", 137);
		TraceIn("synpred18_Smi_fragment", 137);
		try
		{
			// Smi.g:760:44: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:760:45: LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(760, 45);
			Match(input,LOWER,Follow._LOWER_in_synpred18_Smi3448); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred18_Smi_fragment", 137);
			LeaveRule("synpred18_Smi_fragment", 137);
			LeaveRule_synpred18_Smi_fragment();
		}
	}
	// $ANTLR end synpred18_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred19_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred19_Smi_fragment() {}

	// $ANTLR start synpred19_Smi
	public void synpred19_Smi_fragment()
	{
		EnterRule_synpred19_Smi_fragment();
		EnterRule("synpred19_Smi_fragment", 138);
		TraceIn("synpred19_Smi_fragment", 138);
		try
		{
			// Smi.g:761:23: ( RESULT_KW )
			DebugEnterAlt(1);
			// Smi.g:761:24: RESULT_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(761, 24);
			Match(input,RESULT_KW,Follow._RESULT_KW_in_synpred19_Smi3486); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred19_Smi_fragment", 138);
			LeaveRule("synpred19_Smi_fragment", 138);
			LeaveRule_synpred19_Smi_fragment();
		}
	}
	// $ANTLR end synpred19_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred20_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred20_Smi_fragment() {}

	// $ANTLR start synpred20_Smi
	public void synpred20_Smi_fragment()
	{
		EnterRule_synpred20_Smi_fragment();
		EnterRule("synpred20_Smi_fragment", 139);
		TraceIn("synpred20_Smi_fragment", 139);
		try
		{
			// Smi.g:762:26: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:762:27: LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(762, 27);
			Match(input,LOWER,Follow._LOWER_in_synpred20_Smi3520); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred20_Smi_fragment", 139);
			LeaveRule("synpred20_Smi_fragment", 139);
			LeaveRule_synpred20_Smi_fragment();
		}
	}
	// $ANTLR end synpred20_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred21_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred21_Smi_fragment() {}

	// $ANTLR start synpred21_Smi
	public void synpred21_Smi_fragment()
	{
		EnterRule_synpred21_Smi_fragment();
		EnterRule("synpred21_Smi_fragment", 140);
		TraceIn("synpred21_Smi_fragment", 140);
		try
		{
			// Smi.g:762:38: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:762:39: LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(762, 39);
			Match(input,LOWER,Follow._LOWER_in_synpred21_Smi3527); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred21_Smi_fragment", 140);
			LeaveRule("synpred21_Smi_fragment", 140);
			LeaveRule_synpred21_Smi_fragment();
		}
	}
	// $ANTLR end synpred21_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred22_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred22_Smi_fragment() {}

	// $ANTLR start synpred22_Smi
	public void synpred22_Smi_fragment()
	{
		EnterRule_synpred22_Smi_fragment();
		EnterRule("synpred22_Smi_fragment", 141);
		TraceIn("synpred22_Smi_fragment", 141);
		try
		{
			// Smi.g:764:23: ( ERRORS_KW )
			DebugEnterAlt(1);
			// Smi.g:764:24: ERRORS_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(764, 24);
			Match(input,ERRORS_KW,Follow._ERRORS_KW_in_synpred22_Smi3573); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred22_Smi_fragment", 141);
			LeaveRule("synpred22_Smi_fragment", 141);
			LeaveRule_synpred22_Smi_fragment();
		}
	}
	// $ANTLR end synpred22_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred23_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred23_Smi_fragment() {}

	// $ANTLR start synpred23_Smi
	public void synpred23_Smi_fragment()
	{
		EnterRule_synpred23_Smi_fragment();
		EnterRule("synpred23_Smi_fragment", 142);
		TraceIn("synpred23_Smi_fragment", 142);
		try
		{
			// Smi.g:765:23: ( LINKED_KW )
			DebugEnterAlt(1);
			// Smi.g:765:24: LINKED_KW
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(765, 24);
			Match(input,LINKED_KW,Follow._LINKED_KW_in_synpred23_Smi3616); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred23_Smi_fragment", 142);
			LeaveRule("synpred23_Smi_fragment", 142);
			LeaveRule_synpred23_Smi_fragment();
		}
	}
	// $ANTLR end synpred23_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred24_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred24_Smi_fragment() {}

	// $ANTLR start synpred24_Smi
	public void synpred24_Smi_fragment()
	{
		EnterRule_synpred24_Smi_fragment();
		EnterRule("synpred24_Smi_fragment", 143);
		TraceIn("synpred24_Smi_fragment", 143);
		try
		{
			// Smi.g:775:39: ( LOWER )
			DebugEnterAlt(1);
			// Smi.g:775:40: LOWER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(775, 40);
			Match(input,LOWER,Follow._LOWER_in_synpred24_Smi3658); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred24_Smi_fragment", 143);
			LeaveRule("synpred24_Smi_fragment", 143);
			LeaveRule_synpred24_Smi_fragment();
		}
	}
	// $ANTLR end synpred24_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred25_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred25_Smi_fragment() {}

	// $ANTLR start synpred25_Smi
	public void synpred25_Smi_fragment()
	{
		EnterRule_synpred25_Smi_fragment();
		EnterRule("synpred25_Smi_fragment", 144);
		TraceIn("synpred25_Smi_fragment", 144);
		try
		{
			// Smi.g:806:23: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:806:24: smi_type L_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(806, 24);
			PushFollow(Follow._smi_type_in_synpred25_Smi3988);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);
			DebugLocation(806, 33);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred25_Smi3990); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred25_Smi_fragment", 144);
			LeaveRule("synpred25_Smi_fragment", 144);
			LeaveRule_synpred25_Smi_fragment();
		}
	}
	// $ANTLR end synpred25_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred26_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred26_Smi_fragment() {}

	// $ANTLR start synpred26_Smi
	public void synpred26_Smi_fragment()
	{
		EnterRule_synpred26_Smi_fragment();
		EnterRule("synpred26_Smi_fragment", 145);
		TraceIn("synpred26_Smi_fragment", 145);
		try
		{
			// Smi.g:807:24: ( smi_type )
			DebugEnterAlt(1);
			// Smi.g:807:25: smi_type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(807, 25);
			PushFollow(Follow._smi_type_in_synpred26_Smi4024);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred26_Smi_fragment", 145);
			LeaveRule("synpred26_Smi_fragment", 145);
			LeaveRule_synpred26_Smi_fragment();
		}
	}
	// $ANTLR end synpred26_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred27_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred27_Smi_fragment() {}

	// $ANTLR start synpred27_Smi
	public void synpred27_Smi_fragment()
	{
		EnterRule_synpred27_Smi_fragment();
		EnterRule("synpred27_Smi_fragment", 146);
		TraceIn("synpred27_Smi_fragment", 146);
		try
		{
			// Smi.g:816:21: ( 'DESCRIPTION' )
			DebugEnterAlt(1);
			// Smi.g:816:22: 'DESCRIPTION'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(816, 22);
			Match(input,141,Follow._141_in_synpred27_Smi4328); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred27_Smi_fragment", 146);
			LeaveRule("synpred27_Smi_fragment", 146);
			LeaveRule_synpred27_Smi_fragment();
		}
	}
	// $ANTLR end synpred27_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred28_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred28_Smi_fragment() {}

	// $ANTLR start synpred28_Smi
	public void synpred28_Smi_fragment()
	{
		EnterRule_synpred28_Smi_fragment();
		EnterRule("synpred28_Smi_fragment", 147);
		TraceIn("synpred28_Smi_fragment", 147);
		try
		{
			// Smi.g:819:7: (~ ( 'PIB-INDEX' ) )
			DebugEnterAlt(1);
			// Smi.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(819, 7);
			if ((input.LA(1)>=ABSENT_KW && input.LA(1)<=169)||(input.LA(1)>=171 && input.LA(1)<=197))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create());
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred28_Smi_fragment", 147);
			LeaveRule("synpred28_Smi_fragment", 147);
			LeaveRule_synpred28_Smi_fragment();
		}
	}
	// $ANTLR end synpred28_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred29_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred29_Smi_fragment() {}

	// $ANTLR start synpred29_Smi
	public void synpred29_Smi_fragment()
	{
		EnterRule_synpred29_Smi_fragment();
		EnterRule("synpred29_Smi_fragment", 148);
		TraceIn("synpred29_Smi_fragment", 148);
		try
		{
			// Smi.g:826:7: ( 'DEFVAL' )
			DebugEnterAlt(1);
			// Smi.g:826:8: 'DEFVAL'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(826, 8);
			Match(input,140,Follow._140_in_synpred29_Smi4724); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred29_Smi_fragment", 148);
			LeaveRule("synpred29_Smi_fragment", 148);
			LeaveRule_synpred29_Smi_fragment();
		}
	}
	// $ANTLR end synpred29_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred30_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred30_Smi_fragment() {}

	// $ANTLR start synpred30_Smi
	public void synpred30_Smi_fragment()
	{
		EnterRule_synpred30_Smi_fragment();
		EnterRule("synpred30_Smi_fragment", 149);
		TraceIn("synpred30_Smi_fragment", 149);
		try
		{
			// Smi.g:827:23: ( L_BRACE LOWER ( COMMA | R_BRACE ) )
			DebugEnterAlt(1);
			// Smi.g:827:24: L_BRACE LOWER ( COMMA | R_BRACE )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(827, 24);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred30_Smi4757); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(827, 32);
			Match(input,LOWER,Follow._LOWER_in_synpred30_Smi4759); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(827, 38);
			if (input.LA(1)==COMMA||input.LA(1)==R_BRACE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create());
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred30_Smi_fragment", 149);
			LeaveRule("synpred30_Smi_fragment", 149);
			LeaveRule_synpred30_Smi_fragment();
		}
	}
	// $ANTLR end synpred30_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred31_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred31_Smi_fragment() {}

	// $ANTLR start synpred31_Smi
	public void synpred31_Smi_fragment()
	{
		EnterRule_synpred31_Smi_fragment();
		EnterRule("synpred31_Smi_fragment", 150);
		TraceIn("synpred31_Smi_fragment", 150);
		try
		{
			// Smi.g:891:40: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:891:41: smi_type L_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(891, 41);
			PushFollow(Follow._smi_type_in_synpred31_Smi5679);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);
			DebugLocation(891, 50);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred31_Smi5681); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred31_Smi_fragment", 150);
			LeaveRule("synpred31_Smi_fragment", 150);
			LeaveRule_synpred31_Smi_fragment();
		}
	}
	// $ANTLR end synpred31_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred32_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred32_Smi_fragment() {}

	// $ANTLR start synpred32_Smi
	public void synpred32_Smi_fragment()
	{
		EnterRule_synpred32_Smi_fragment();
		EnterRule("synpred32_Smi_fragment", 151);
		TraceIn("synpred32_Smi_fragment", 151);
		try
		{
			// Smi.g:926:42: ( UPPER )
			DebugEnterAlt(1);
			// Smi.g:926:43: UPPER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(926, 43);
			Match(input,UPPER,Follow._UPPER_in_synpred32_Smi6157); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred32_Smi_fragment", 151);
			LeaveRule("synpred32_Smi_fragment", 151);
			LeaveRule_synpred32_Smi_fragment();
		}
	}
	// $ANTLR end synpred32_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred33_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred33_Smi_fragment() {}

	// $ANTLR start synpred33_Smi
	public void synpred33_Smi_fragment()
	{
		EnterRule_synpred33_Smi_fragment();
		EnterRule("synpred33_Smi_fragment", 152);
		TraceIn("synpred33_Smi_fragment", 152);
		try
		{
			// Smi.g:926:60: ( value )
			DebugEnterAlt(1);
			// Smi.g:926:61: value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(926, 61);
			PushFollow(Follow._value_in_synpred33_Smi6166);
			value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred33_Smi_fragment", 152);
			LeaveRule("synpred33_Smi_fragment", 152);
			LeaveRule_synpred33_Smi_fragment();
		}
	}
	// $ANTLR end synpred33_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred34_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred34_Smi_fragment() {}

	// $ANTLR start synpred34_Smi
	public void synpred34_Smi_fragment()
	{
		EnterRule_synpred34_Smi_fragment();
		EnterRule("synpred34_Smi_fragment", 153);
		TraceIn("synpred34_Smi_fragment", 153);
		try
		{
			// Smi.g:936:32: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:936:33: smi_type L_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(936, 33);
			PushFollow(Follow._smi_type_in_synpred34_Smi6549);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);
			DebugLocation(936, 42);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred34_Smi6551); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred34_Smi_fragment", 153);
			LeaveRule("synpred34_Smi_fragment", 153);
			LeaveRule_synpred34_Smi_fragment();
		}
	}
	// $ANTLR end synpred34_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred35_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred35_Smi_fragment() {}

	// $ANTLR start synpred35_Smi
	public void synpred35_Smi_fragment()
	{
		EnterRule_synpred35_Smi_fragment();
		EnterRule("synpred35_Smi_fragment", 154);
		TraceIn("synpred35_Smi_fragment", 154);
		try
		{
			// Smi.g:937:32: ( smi_type )
			DebugEnterAlt(1);
			// Smi.g:937:33: smi_type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(937, 33);
			PushFollow(Follow._smi_type_in_synpred35_Smi6603);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred35_Smi_fragment", 154);
			LeaveRule("synpred35_Smi_fragment", 154);
			LeaveRule_synpred35_Smi_fragment();
		}
	}
	// $ANTLR end synpred35_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred36_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred36_Smi_fragment() {}

	// $ANTLR start synpred36_Smi
	public void synpred36_Smi_fragment()
	{
		EnterRule_synpred36_Smi_fragment();
		EnterRule("synpred36_Smi_fragment", 155);
		TraceIn("synpred36_Smi_fragment", 155);
		try
		{
			// Smi.g:967:56: ( L_BRACE ( LOWER | COMMA | R_BRACE ) )
			DebugEnterAlt(1);
			// Smi.g:967:57: L_BRACE ( LOWER | COMMA | R_BRACE )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(967, 57);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred36_Smi7095); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(967, 65);
			if (input.LA(1)==COMMA||input.LA(1)==LOWER||input.LA(1)==R_BRACE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create());
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred36_Smi_fragment", 155);
			LeaveRule("synpred36_Smi_fragment", 155);
			LeaveRule_synpred36_Smi_fragment();
		}
	}
	// $ANTLR end synpred36_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred37_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred37_Smi_fragment() {}

	// $ANTLR start synpred37_Smi
	public void synpred37_Smi_fragment()
	{
		EnterRule_synpred37_Smi_fragment();
		EnterRule("synpred37_Smi_fragment", 156);
		TraceIn("synpred37_Smi_fragment", 156);
		try
		{
			// Smi.g:969:33: ( smi_type L_BRACE )
			DebugEnterAlt(1);
			// Smi.g:969:34: smi_type L_BRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(969, 34);
			PushFollow(Follow._smi_type_in_synpred37_Smi7182);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);
			DebugLocation(969, 43);
			Match(input,L_BRACE,Follow._L_BRACE_in_synpred37_Smi7184); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred37_Smi_fragment", 156);
			LeaveRule("synpred37_Smi_fragment", 156);
			LeaveRule_synpred37_Smi_fragment();
		}
	}
	// $ANTLR end synpred37_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred38_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred38_Smi_fragment() {}

	// $ANTLR start synpred38_Smi
	public void synpred38_Smi_fragment()
	{
		EnterRule_synpred38_Smi_fragment();
		EnterRule("synpred38_Smi_fragment", 157);
		TraceIn("synpred38_Smi_fragment", 157);
		try
		{
			// Smi.g:971:33: ( smi_type )
			DebugEnterAlt(1);
			// Smi.g:971:34: smi_type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(971, 34);
			PushFollow(Follow._smi_type_in_synpred38_Smi7274);
			smi_type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred38_Smi_fragment", 157);
			LeaveRule("synpred38_Smi_fragment", 157);
			LeaveRule_synpred38_Smi_fragment();
		}
	}
	// $ANTLR end synpred38_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred39_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred39_Smi_fragment() {}

	// $ANTLR start synpred39_Smi
	public void synpred39_Smi_fragment()
	{
		EnterRule_synpred39_Smi_fragment();
		EnterRule("synpred39_Smi_fragment", 158);
		TraceIn("synpred39_Smi_fragment", 158);
		try
		{
			// Smi.g:986:22: ( 'DESCRIPTION' )
			DebugEnterAlt(1);
			// Smi.g:986:23: 'DESCRIPTION'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(986, 23);
			Match(input,141,Follow._141_in_synpred39_Smi7438); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred39_Smi_fragment", 158);
			LeaveRule("synpred39_Smi_fragment", 158);
			LeaveRule_synpred39_Smi_fragment();
		}
	}
	// $ANTLR end synpred39_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred40_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred40_Smi_fragment() {}

	// $ANTLR start synpred40_Smi
	public void synpred40_Smi_fragment()
	{
		EnterRule_synpred40_Smi_fragment();
		EnterRule("synpred40_Smi_fragment", 159);
		TraceIn("synpred40_Smi_fragment", 159);
		try
		{
			// Smi.g:992:14: ( type )
			DebugEnterAlt(1);
			// Smi.g:992:15: type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(992, 15);
			PushFollow(Follow._type_in_synpred40_Smi7493);
			type();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred40_Smi_fragment", 159);
			LeaveRule("synpred40_Smi_fragment", 159);
			LeaveRule_synpred40_Smi_fragment();
		}
	}
	// $ANTLR end synpred40_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred41_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred41_Smi_fragment() {}

	// $ANTLR start synpred41_Smi
	public void synpred41_Smi_fragment()
	{
		EnterRule_synpred41_Smi_fragment();
		EnterRule("synpred41_Smi_fragment", 160);
		TraceIn("synpred41_Smi_fragment", 160);
		try
		{
			// Smi.g:998:22: ( L_BRACKET ( NUMBER | UPPER | LOWER ) )
			DebugEnterAlt(1);
			// Smi.g:998:23: L_BRACKET ( NUMBER | UPPER | LOWER )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(998, 23);
			Match(input,L_BRACKET,Follow._L_BRACKET_in_synpred41_Smi7532); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}
			DebugLocation(998, 33);
			if (input.LA(1)==LOWER||input.LA(1)==NUMBER||input.LA(1)==UPPER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create());
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred41_Smi_fragment", 160);
			LeaveRule("synpred41_Smi_fragment", 160);
			LeaveRule_synpred41_Smi_fragment();
		}
	}
	// $ANTLR end synpred41_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred42_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred42_Smi_fragment() {}

	// $ANTLR start synpred42_Smi
	public void synpred42_Smi_fragment()
	{
		EnterRule_synpred42_Smi_fragment();
		EnterRule("synpred42_Smi_fragment", 161);
		TraceIn("synpred42_Smi_fragment", 161);
		try
		{
			// Smi.g:1011:19: ( signed_number )
			DebugEnterAlt(1);
			// Smi.g:1011:20: signed_number
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1011, 20);
			PushFollow(Follow._signed_number_in_synpred42_Smi7690);
			signed_number();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred42_Smi_fragment", 161);
			LeaveRule("synpred42_Smi_fragment", 161);
			LeaveRule_synpred42_Smi_fragment();
		}
	}
	// $ANTLR end synpred42_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred43_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred43_Smi_fragment() {}

	// $ANTLR start synpred43_Smi
	public void synpred43_Smi_fragment()
	{
		EnterRule_synpred43_Smi_fragment();
		EnterRule("synpred43_Smi_fragment", 162);
		TraceIn("synpred43_Smi_fragment", 162);
		try
		{
			// Smi.g:1012:21: ( defined_value )
			DebugEnterAlt(1);
			// Smi.g:1012:22: defined_value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1012, 22);
			PushFollow(Follow._defined_value_in_synpred43_Smi7719);
			defined_value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred43_Smi_fragment", 162);
			LeaveRule("synpred43_Smi_fragment", 162);
			LeaveRule_synpred43_Smi_fragment();
		}
	}
	// $ANTLR end synpred43_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred44_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred44_Smi_fragment() {}

	// $ANTLR start synpred44_Smi
	public void synpred44_Smi_fragment()
	{
		EnterRule_synpred44_Smi_fragment();
		EnterRule("synpred44_Smi_fragment", 163);
		TraceIn("synpred44_Smi_fragment", 163);
		try
		{
			// Smi.g:1022:22: ( value_range )
			DebugEnterAlt(1);
			// Smi.g:1022:23: value_range
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1022, 23);
			PushFollow(Follow._value_range_in_synpred44_Smi7878);
			value_range();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred44_Smi_fragment", 163);
			LeaveRule("synpred44_Smi_fragment", 163);
			LeaveRule_synpred44_Smi_fragment();
		}
	}
	// $ANTLR end synpred44_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred45_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred45_Smi_fragment() {}

	// $ANTLR start synpred45_Smi
	public void synpred45_Smi_fragment()
	{
		EnterRule_synpred45_Smi_fragment();
		EnterRule("synpred45_Smi_fragment", 164);
		TraceIn("synpred45_Smi_fragment", 164);
		try
		{
			// Smi.g:1023:22: ( value )
			DebugEnterAlt(1);
			// Smi.g:1023:23: value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1023, 23);
			PushFollow(Follow._value_in_synpred45_Smi7907);
			value();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred45_Smi_fragment", 164);
			LeaveRule("synpred45_Smi_fragment", 164);
			LeaveRule_synpred45_Smi_fragment();
		}
	}
	// $ANTLR end synpred45_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred46_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred46_Smi_fragment() {}

	// $ANTLR start synpred46_Smi
	public void synpred46_Smi_fragment()
	{
		EnterRule_synpred46_Smi_fragment();
		EnterRule("synpred46_Smi_fragment", 165);
		TraceIn("synpred46_Smi_fragment", 165);
		try
		{
			// Smi.g:1045:13: ( H_STRING )
			DebugEnterAlt(1);
			// Smi.g:1045:14: H_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1045, 14);
			Match(input,H_STRING,Follow._H_STRING_in_synpred46_Smi8297); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred46_Smi_fragment", 165);
			LeaveRule("synpred46_Smi_fragment", 165);
			LeaveRule_synpred46_Smi_fragment();
		}
	}
	// $ANTLR end synpred46_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred47_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred47_Smi_fragment() {}

	// $ANTLR start synpred47_Smi
	public void synpred47_Smi_fragment()
	{
		EnterRule_synpred47_Smi_fragment();
		EnterRule("synpred47_Smi_fragment", 166);
		TraceIn("synpred47_Smi_fragment", 166);
		try
		{
			// Smi.g:1046:13: ( B_STRING )
			DebugEnterAlt(1);
			// Smi.g:1046:14: B_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1046, 14);
			Match(input,B_STRING,Follow._B_STRING_in_synpred47_Smi8318); if (state.failed) return;
			if (state.backtracking == 0) {
			_tree = (CommonTree)adaptor.Create();
			adaptor.AddChild(root_0, _tree);
			}

			}

		}
		finally
		{
			TraceOut("synpred47_Smi_fragment", 166);
			LeaveRule("synpred47_Smi_fragment", 166);
			LeaveRule_synpred47_Smi_fragment();
		}
	}
	// $ANTLR end synpred47_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred48_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred48_Smi_fragment() {}

	// $ANTLR start synpred48_Smi
	public void synpred48_Smi_fragment()
	{
		EnterRule_synpred48_Smi_fragment();
		EnterRule("synpred48_Smi_fragment", 167);
		TraceIn("synpred48_Smi_fragment", 167);
		try
		{
			// Smi.g:1048:15: ( id_list )
			DebugEnterAlt(1);
			// Smi.g:1048:16: id_list
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1048, 16);
			PushFollow(Follow._id_list_in_synpred48_Smi8356);
			id_list();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred48_Smi_fragment", 167);
			LeaveRule("synpred48_Smi_fragment", 167);
			LeaveRule_synpred48_Smi_fragment();
		}
	}
	// $ANTLR end synpred48_Smi
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred49_Smi_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred49_Smi_fragment() {}

	// $ANTLR start synpred49_Smi
	public void synpred49_Smi_fragment()
	{
		EnterRule_synpred49_Smi_fragment();
		EnterRule("synpred49_Smi_fragment", 168);
		TraceIn("synpred49_Smi_fragment", 168);
		try
		{
			// Smi.g:1049:17: ( char_defs_list )
			DebugEnterAlt(1);
			// Smi.g:1049:18: char_defs_list
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1049, 18);
			PushFollow(Follow._char_defs_list_in_synpred49_Smi8381);
			char_defs_list();
			PopFollow();
			if (state.failed) return;
			if (state.backtracking == 0) adaptor.AddChild(root_0, .Tree);

			}

		}
		finally
		{
			TraceOut("synpred49_Smi_fragment", 168);
			LeaveRule("synpred49_Smi_fragment", 168);
			LeaveRule_synpred49_Smi_fragment();
		}
	}
	// $ANTLR end synpred49_Smi
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA49 dfa49;
	private DFA75 dfa75;
	private DFA80 dfa80;
	private DFA97 dfa97;
	private DFA106 dfa106;
	private DFA105 dfa105;
	private DFA130 dfa130;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa49 = new DFA49( this, SpecialStateTransition49 );
		dfa75 = new DFA75( this, SpecialStateTransition75 );
		dfa80 = new DFA80( this, SpecialStateTransition80 );
		dfa97 = new DFA97( this, SpecialStateTransition97 );
		dfa106 = new DFA106( this, SpecialStateTransition106 );
		dfa105 = new DFA105( this, SpecialStateTransition105 );
		dfa130 = new DFA130( this, SpecialStateTransition130 );
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x54\xFFFF";
		private const string DFA49_eofS =
			"\x1\x22\x53\xFFFF";
		private const string DFA49_minS =
			"\x1\x7\x1\x0\xB\xFFFF\x1\x0\x6\xFFFF\xD\x0\x33\xFFFF";
		private const string DFA49_maxS =
			"\x1\xC5\x1\x0\xB\xFFFF\x1\x0\x6\xFFFF\xD\x0\x33\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\xB\x1\x1\xFFFF\x6\x1\xD\xFFFF\x1\x1\x1\x2\x31\xFFFF";
		private const string DFA49_specialS =
			"\x1\x0\x1\x1\xB\xFFFF\x1\x2\x6\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x33\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x22\x1\xFFFF\x1\x22\x3\xFFFF\x1\x3\x1\x6\x1\x4\x3"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x7\x1\xFFFF\x2\x22\x5\xFFFF\x1\x22\x5\xFFFF"+
				"\x1\x8\x1\x22\x1\x9\x1\x22\x1\x16\x2\x22\x3\xFFFF\x1\xA\x2\xFFFF\x3"+
				"\x6\x2\xFFFF\x1\x6\x6\xFFFF\x1\xB\x2\x22\x1\x6\x1\xFFFF\x1\x22\x1\x1"+
				"\x1\xFFFF\x1\x13\x5\xFFFF\x1\xC\x1\xFFFF\x1\x6\x1\xFFFF\x1\xD\x1\xE"+
				"\x2\xFFFF\x1\x15\x1\x22\x6\xFFFF\x1\x6\x1\xFFFF\x1\xF\x1\xFFFF\x2\x22"+
				"\x1\xFFFF\x1\x22\x1\xFFFF\x1\x11\x1\x12\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6"+
				"\x2\xFFFF\x1\x22\x2\xFFFF\x1\x6\x1\x14\x4\x6\x2\xFFFF\x5\x22\x1\x1F"+
				"\x3\x22\x1\xFFFF\x1\x22\x1\x21\x1\xFFFF\x3\x22\x1\xFFFF\x1\x22\x2\xFFFF"+
				"\x3\x22\x6\xFFFF\x2\x22\x1\xFFFF\x1\x1E\x1\x18\x1\x1D\x1\x1A\x1\xFFFF"+
				"\x1\x1C\x1\x19\x1\x17\x2\xFFFF\x1\x22\x2\xFFFF\x4\x22\x1\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x22\x1\x10\x1\xFFFF\x4\x22\x3\xFFFF\x1\x1B\x2\x22\x1\x20"+
				"\x1\x22\x1\xFFFF\x1\x22\x2\xFFFF\x1\x22",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "762:25: ( ( LOWER )=> ( ( LOWER )=> LOWER )? type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition49(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA49_1 = input.LA(1);
		int index49_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA49_1==LOWER)) {s = 1;}

				else if ((LA49_1==ANY_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 2;}

				else if ((LA49_1==BIT_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 3;}

				else if ((LA49_1==BOOLEAN_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 4;}

				else if ((LA49_1==CHARACTER_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 5;}

				else if ((LA49_1==BMP_STR_KW||(LA49_1>=GENERALIZED_TIME_KW && LA49_1<=GRAPHIC_STR_KW)||LA49_1==IA5_STRING_KW||LA49_1==ISO646_STR_KW||LA49_1==NUMERIC_STR_KW||LA49_1==PRINTABLE_STR_KW||LA49_1==T61_STR_KW||LA49_1==TELETEX_STR_KW||LA49_1==UNIVERSAL_STR_KW||(LA49_1>=UTC_TIME_KW && LA49_1<=VISIBLE_STR_KW)) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 6;}

				else if ((LA49_1==CHOICE_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 7;}

				else if ((LA49_1==EMBEDDED_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 8;}

				else if ((LA49_1==ENUMERATED_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 9;}

				else if ((LA49_1==EXTERNAL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 10;}

				else if ((LA49_1==INTEGER_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 11;}

				else if ((LA49_1==NULL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 12;}

				else if ((LA49_1==OBJECT_KW)) {s = 13;}

				else if ((LA49_1==OCTET_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 14;}

				else if ((LA49_1==REAL_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 15;}

				else if ((LA49_1==179) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 16;}

				else if ((LA49_1==SEQUENCE_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 17;}

				else if ((LA49_1==SET_KW) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 18;}

				else if ((LA49_1==L_BRACKET) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 19;}

				else if ((LA49_1==UPPER)) {s = 20;}

				else if ((LA49_1==OPERATION_KW)) {s = 21;}

				else if ((LA49_1==ERROR_KW)) {s = 22;}

				else if ((LA49_1==165)) {s = 23;}

				else if ((LA49_1==159)) {s = 24;}

				else if ((LA49_1==164)) {s = 25;}

				else if ((LA49_1==161)) {s = 26;}

				else if ((LA49_1==188)) {s = 27;}

				else if ((LA49_1==163)) {s = 28;}

				else if ((LA49_1==160)) {s = 29;}

				else if ((LA49_1==158)) {s = 30;}

				else if ((LA49_1==131)) {s = 31;}

				else if ((LA49_1==191)) {s = 32;}

				else if ((LA49_1==137) && (EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((LA49_1==EOF||LA49_1==ASSIGN_OP||LA49_1==BAR||(LA49_1>=COLON && LA49_1<=COMMA)||LA49_1==DEFAULT_KW||LA49_1==END_KW||LA49_1==ERRORS_KW||(LA49_1>=EXCEPT_KW && LA49_1<=EXCLAMATION)||(LA49_1>=INTERSECTION && LA49_1<=INTERSECTION_KW)||LA49_1==LINKED_KW||LA49_1==OPTIONAL_KW||(LA49_1>=RESULT_KW && LA49_1<=R_BRACE)||LA49_1==R_PAREN||LA49_1==UNION_KW||(LA49_1>=126 && LA49_1<=130)||(LA49_1>=132 && LA49_1<=134)||LA49_1==136||(LA49_1>=139 && LA49_1<=141)||LA49_1==143||(LA49_1>=146 && LA49_1<=148)||(LA49_1>=155 && LA49_1<=156)||LA49_1==168||(LA49_1>=171 && LA49_1<=174)||LA49_1==176||LA49_1==178||(LA49_1>=181 && LA49_1<=184)||(LA49_1>=189 && LA49_1<=190)||LA49_1==192||LA49_1==194||LA49_1==197)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred20_Smi_fragment))) {s = 33;}

				else if ((true)) {s = 34;}

				input.Seek(index49_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 49, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA75 : DFA
	{
		private const string DFA75_eotS =
			"\x3F\xFFFF";
		private const string DFA75_eofS =
			"\x1\x5\x3E\xFFFF";
		private const string DFA75_minS =
			"\x1\xA\x1\x0\x3D\xFFFF";
		private const string DFA75_maxS =
			"\x1\xC5\x1\x0\x3D\xFFFF";
		private const string DFA75_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x38\xFFFF\x1\x1";
		private const string DFA75_specialS =
			"\x1\xFFFF\x1\x0\x3D\xFFFF}>";
		private static readonly string[] DFA75_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x5\xE\xFFFF\x2\x5\x5\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1"+
				"\xFFFF\x4\x5\x13\xFFFF\x2\x5\x2\xFFFF\x2\x5\xB\xFFFF\x1\x5\x3\xFFFF"+
				"\x2\x5\xA\xFFFF\x2\x5\x1\xFFFF\x1\x5\xC\xFFFF\x1\x5\x3\xFFFF\x1\x5\x6"+
				"\xFFFF\x9\x5\x1\x2\x1\x5\x2\xFFFF\x3\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x4"+
				"\x3\x5\x1\xFFFF\x1\x1\x4\xFFFF\x2\x5\x1\xFFFF\x4\x5\x1\xFFFF\x3\x5\x2"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x3\x4\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF"+
				"\x4\x5\x3\xFFFF\x7\x5\x2\xFFFF\x1\x5",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
		private static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
		private static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
		private static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
		private static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
		private static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
		private static readonly short[][] DFA75_transition;

		static DFA75()
		{
			int numStates = DFA75_transitionS.Length;
			DFA75_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA75_transition[i] = DFA.UnpackEncodedString(DFA75_transitionS[i]);
			}
		}

		public DFA75( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}

		public override string Description { get { return "819:5: ( (~ ( 'PIB-INDEX' ) )=> 'INDEX' objecttype_macro_index | 'AUGMENTS' objecttype_macro_augments | 'PIB-INDEX' L_BRACE value R_BRACE | 'EXTENDS' L_BRACE value R_BRACE )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition75(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA75_1 = input.LA(1);
		int index75_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred28_Smi_fragment))) {s = 62;}

				else if ((true)) {s = 5;}

				input.Seek(index75_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 75, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA80 : DFA
	{
		private const string DFA80_eotS =
			"\xA\xFFFF";
		private const string DFA80_eofS =
			"\xA\xFFFF";
		private const string DFA80_minS =
			"\x2\x15\x1\xFFFF\x2\x15\x1\x0\x1\x15\x1\xFFFF\x1\x0\x1\x15";
		private const string DFA80_maxS =
			"\x2\x77\x1\xFFFF\x2\x77\x1\x0\x1\x77\x1\xFFFF\x1\x0\x1\x77";
		private const string DFA80_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA80_specialS =
			"\x5\xFFFF\x1\x0\x2\xFFFF\x1\x1\x1\xFFFF}>";
		private static readonly string[] DFA80_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x1\x1\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x3\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x4\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC"+
				"\xFFFF\x1\x2\x6\xFFFF\x1\x5\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x6"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x9\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x8\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x6"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2"
			};

		private static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
		private static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
		private static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
		private static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
		private static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
		private static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
		private static readonly short[][] DFA80_transition;

		static DFA80()
		{
			int numStates = DFA80_transitionS.Length;
			DFA80_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA80_transition[i] = DFA.UnpackEncodedString(DFA80_transitionS[i]);
			}
		}

		public DFA80( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 80;
			this.eot = DFA80_eot;
			this.eof = DFA80_eof;
			this.min = DFA80_min;
			this.max = DFA80_max;
			this.accept = DFA80_accept;
			this.special = DFA80_special;
			this.transition = DFA80_transition;
		}

		public override string Description { get { return "827:21: ( ( L_BRACE LOWER ( COMMA | R_BRACE ) )=> objecttype_macro_bitsvalue | value )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition80(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA80_1 = input.LA(1);
		int index80_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred30_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 2;}

				input.Seek(index80_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred30_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 2;}

				input.Seek(index80_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 80, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA97 : DFA
	{
		private const string DFA97_eotS =
			"\x18\xFFFF";
		private const string DFA97_eofS =
			"\x1\xFFFF\x2\x6\x2\xFFFF\x1\x6\x3\xFFFF\x2\x6\xD\xFFFF";
		private const string DFA97_minS =
			"\x1\x7\x2\xA\x1\x6D\x1\x3B\x1\xA\x2\xFFFF\x1\x47\x2\xA\x1\x4A\x1\x47"+
			"\x1\x50\x1\x66\x1\x1C\x1\x47\x1\x0\x1\x4A\x1\x47\x1\x50\x1\x66\x1\x1C"+
			"\x1\x0";
		private const string DFA97_maxS =
			"\x1\xBF\x2\xC5\x1\x6D\x1\x3B\x1\xC5\x2\xFFFF\x1\x47\x2\xC5\x1\x4A\x1"+
			"\x77\x1\x50\x1\x66\x1\x64\x1\x47\x1\x0\x1\x4A\x1\x77\x1\x50\x1\x66\x1"+
			"\x64\x1\x0";
		private const string DFA97_acceptS =
			"\x6\xFFFF\x1\x2\x1\x1\x10\xFFFF";
		private const string DFA97_specialS =
			"\x1\xFFFF\x1\x0\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\x3\x6\xFFFF\x1\x4\x5"+
			"\xFFFF\x1\x5}>";
		private static readonly string[] DFA97_transitionS =
			{
				"\x1\x6\x8\xFFFF\x3\x6\x3\xFFFF\x1\x6\x2\xFFFF\x1\x6\xE\xFFFF\x1\x6\x1"+
				"\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x2\xFFFF\x3\x6\x2\xFFFF\x1"+
				"\x6\x6\xFFFF\x1\x2\x2\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF"+
				"\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x4\x1\x3\x2\xFFFF\x1\x6\x7\xFFFF\x1"+
				"\x6\x1\xFFFF\x1\x6\x6\xFFFF\x2\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF"+
				"\x1\x6\x1\x5\x4\x6\x7\xFFFF\x1\x6\x5\xFFFF\x1\x1\x14\xFFFF\x4\x6\x1"+
				"\xFFFF\x3\x6\xD\xFFFF\x1\x6\x8\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xE\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6\xFFFF\x1\x6\x1"+
				"\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\xA\xFFFF\x1\x6\x3"+
				"\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1"+
				"\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2"+
				"\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5"+
				"\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xE\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6\xFFFF\x1\x6\x1"+
				"\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x8\x1\xFFFF\x1\x6\x8"+
				"\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1"+
				"\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF"+
				"\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2"+
				"\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4"+
				"\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x9",
				"\x1\xA",
				"\x1\x6\x1\xFFFF\x1\x6\xE\xFFFF\x2\x6\x5\xFFFF\x1\x6\x2\xFFFF\x1\x6\x3"+
				"\xFFFF\x1\x6\x1\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\x1"+
				"\xFFFF\x1\x6\x8\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1"+
				"\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1"+
				"\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1"+
				"\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"",
				"",
				"\x1\xB",
				"\x1\x6\x1\xFFFF\x1\x6\xE\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6\xFFFF\x1\x6\x1"+
				"\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\x1\xFFFF\x1\x6\x8"+
				"\xFFFF\x1\x6\x3\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1"+
				"\x6\x3\xFFFF\x1\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF"+
				"\x1\x6\x2\xFFFF\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2"+
				"\xFFFF\x1\x6\x2\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4"+
				"\x6\x3\xFFFF\x5\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\x6\x1\xFFFF\x1\x6\xE\xFFFF\x2\x6\x5\xFFFF\x1\x6\x6\xFFFF\x1\x6\x1"+
				"\xFFFF\x4\x6\x13\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\x7\xA\xFFFF\x1\x6\x3"+
				"\xFFFF\x2\x6\xA\xFFFF\x2\x6\x1\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1"+
				"\x6\x6\xFFFF\x9\x6\x1\xFFFF\x1\x6\x2\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF"+
				"\x3\x6\x6\xFFFF\x2\x6\x1\xFFFF\x4\x6\x1\xFFFF\x3\x6\x2\xFFFF\x1\x6\x2"+
				"\xFFFF\x4\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x4\x6\x3\xFFFF\x5"+
				"\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6",
				"\x1\xC",
				"\x1\x6\x4\xFFFF\x1\xD\x3\xFFFF\x1\xE\x26\xFFFF\x1\x6",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10\x47\xFFFF\x1\x11",
				"\x1\x12",
				"\x1\xFFFF",
				"\x1\x13",
				"\x1\x6\x4\xFFFF\x1\x14\x3\xFFFF\x1\x15\x26\xFFFF\x1\x6",
				"\x1\x15",
				"\x1\x16",
				"\x1\x10\x47\xFFFF\x1\x17",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
		private static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
		private static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
		private static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
		private static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
		private static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
		private static readonly short[][] DFA97_transition;

		static DFA97()
		{
			int numStates = DFA97_transitionS.Length;
			DFA97_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA97_transition[i] = DFA.UnpackEncodedString(DFA97_transitionS[i]);
			}
		}

		public DFA97( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 97;
			this.eot = DFA97_eot;
			this.eof = DFA97_eof;
			this.min = DFA97_min;
			this.max = DFA97_max;
			this.accept = DFA97_accept;
			this.special = DFA97_special;
			this.transition = DFA97_transition;
		}

		public override string Description { get { return "891:38: ( ( smi_type L_BRACE )=> smi_type L_BRACE textualconvention_macro_namedbit ( COMMA textualconvention_macro_namedbit )* R_BRACE | type )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition97(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA97_1 = input.LA(1);
		int index97_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA97_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA97_1==EOF||LA97_1==ASSIGN_OP||LA97_1==BAR||(LA97_1>=COLON && LA97_1<=COMMA)||LA97_1==DEFAULT_KW||LA97_1==END_KW||(LA97_1>=ERRORS_KW && LA97_1<=EXCLAMATION)||(LA97_1>=INTERSECTION && LA97_1<=INTERSECTION_KW)||(LA97_1>=LINKED_KW && LA97_1<=LOWER)||LA97_1==OBJECT_KW||(LA97_1>=OPERATION_KW && LA97_1<=OPTIONAL_KW)||(LA97_1>=RESULT_KW && LA97_1<=R_BRACE)||LA97_1==R_PAREN||LA97_1==UNION_KW||LA97_1==UPPER||(LA97_1>=126 && LA97_1<=134)||LA97_1==136||(LA97_1>=139 && LA97_1<=141)||LA97_1==143||(LA97_1>=146 && LA97_1<=148)||(LA97_1>=155 && LA97_1<=156)||(LA97_1>=158 && LA97_1<=161)||(LA97_1>=163 && LA97_1<=165)||LA97_1==168||(LA97_1>=171 && LA97_1<=174)||LA97_1==176||LA97_1==178||(LA97_1>=181 && LA97_1<=184)||(LA97_1>=188 && LA97_1<=192)||LA97_1==194||LA97_1==197)) {s = 6;}

				input.Seek(index97_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA97_1==EOF||LA97_1==ASSIGN_OP||LA97_1==BAR||(LA97_1>=COLON && LA97_1<=COMMA)||LA97_1==DEFAULT_KW||LA97_1==DOT||LA97_1==END_KW||(LA97_1>=ERRORS_KW && LA97_1<=EXCLAMATION)||(LA97_1>=INTERSECTION && LA97_1<=INTERSECTION_KW)||(LA97_1>=LINKED_KW && LA97_1<=LOWER)||LA97_1==L_PAREN||LA97_1==OBJECT_KW||(LA97_1>=OPERATION_KW && LA97_1<=OPTIONAL_KW)||(LA97_1>=RESULT_KW && LA97_1<=R_BRACE)||LA97_1==R_PAREN||LA97_1==UNION_KW||LA97_1==UPPER||(LA97_1>=126 && LA97_1<=134)||LA97_1==136||(LA97_1>=139 && LA97_1<=141)||LA97_1==143||(LA97_1>=146 && LA97_1<=148)||(LA97_1>=155 && LA97_1<=156)||(LA97_1>=158 && LA97_1<=161)||(LA97_1>=163 && LA97_1<=165)||LA97_1==168||(LA97_1>=171 && LA97_1<=174)||LA97_1==176||LA97_1==178||(LA97_1>=181 && LA97_1<=184)||(LA97_1>=188 && LA97_1<=192)||LA97_1==194||LA97_1==197)) {s = 6;}

				else if ((LA97_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				input.Seek(index97_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((LA97_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA97_1==EOF||LA97_1==ASSIGN_OP||LA97_1==BAR||(LA97_1>=COLON && LA97_1<=COMMA)||LA97_1==DEFAULT_KW||LA97_1==END_KW||(LA97_1>=ERRORS_KW && LA97_1<=EXCLAMATION)||(LA97_1>=INTERSECTION && LA97_1<=INTERSECTION_KW)||(LA97_1>=LINKED_KW && LA97_1<=LOWER)||LA97_1==L_PAREN||LA97_1==OBJECT_KW||(LA97_1>=OPERATION_KW && LA97_1<=OPTIONAL_KW)||(LA97_1>=RESULT_KW && LA97_1<=R_BRACE)||LA97_1==R_PAREN||LA97_1==UNION_KW||LA97_1==UPPER||(LA97_1>=126 && LA97_1<=134)||LA97_1==136||(LA97_1>=139 && LA97_1<=141)||LA97_1==143||(LA97_1>=146 && LA97_1<=148)||(LA97_1>=155 && LA97_1<=156)||(LA97_1>=158 && LA97_1<=161)||(LA97_1>=163 && LA97_1<=165)||LA97_1==168||(LA97_1>=171 && LA97_1<=174)||LA97_1==176||LA97_1==178||(LA97_1>=181 && LA97_1<=184)||(LA97_1>=188 && LA97_1<=192)||LA97_1==194||LA97_1==197)) {s = 6;}

				input.Seek(index97_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA97_1==L_BRACE) && (EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((LA97_1==EOF||LA97_1==ASSIGN_OP||LA97_1==BAR||(LA97_1>=COLON && LA97_1<=COMMA)||LA97_1==DEFAULT_KW||LA97_1==END_KW||(LA97_1>=ERRORS_KW && LA97_1<=EXCLAMATION)||(LA97_1>=INTERSECTION && LA97_1<=INTERSECTION_KW)||(LA97_1>=LINKED_KW && LA97_1<=LOWER)||LA97_1==OBJECT_KW||(LA97_1>=OPERATION_KW && LA97_1<=OPTIONAL_KW)||(LA97_1>=RESULT_KW && LA97_1<=R_BRACE)||LA97_1==R_PAREN||LA97_1==UNION_KW||LA97_1==UPPER||(LA97_1>=126 && LA97_1<=134)||LA97_1==136||(LA97_1>=139 && LA97_1<=141)||LA97_1==143||(LA97_1>=146 && LA97_1<=148)||(LA97_1>=155 && LA97_1<=156)||(LA97_1>=158 && LA97_1<=161)||(LA97_1>=163 && LA97_1<=165)||LA97_1==168||(LA97_1>=171 && LA97_1<=174)||LA97_1==176||LA97_1==178||(LA97_1>=181 && LA97_1<=184)||(LA97_1>=188 && LA97_1<=192)||LA97_1==194||LA97_1==197)) {s = 6;}

				input.Seek(index97_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 6;}

				input.Seek(index97_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred31_Smi_fragment))) {s = 7;}

				else if ((true)) {s = 6;}

				input.Seek(index97_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 97, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA106 : DFA
	{
		private const string DFA106_eotS =
			"\x67\xFFFF";
		private const string DFA106_eofS =
			"\x1\x2\x1\x3F\x65\xFFFF";
		private const string DFA106_minS =
			"\x2\xA\x1\xFFFF\x1\x7\x45\xFFFF\x1\x0\x1\x25\x1\x15\xA\xFFFF\x1\x47\x10"+
			"\xFFFF";
		private const string DFA106_maxS =
			"\x2\xC5\x1\xFFFF\x1\xBF\x45\xFFFF\x1\x0\x2\xC0\xA\xFFFF\x1\x77\x10\xFFFF";
		private const string DFA106_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x45\x1\x3\xFFFF\xA\x1\x1\xFFFF\x10\x1";
		private const string DFA106_specialS =
			"\x1\xFFFF\x1\x0\x1\xFFFF\x1\x1\x45\xFFFF\x1\x2\x1\xFFFF\x1\x3\xA\xFFFF"+
			"\x1\x4\x10\xFFFF}>";
		private static readonly string[] DFA106_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\xE\xFFFF\x2\x2\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\x1"+
				"\xFFFF\x4\x2\x13\xFFFF\x2\x2\x2\xFFFF\x2\x2\xB\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\xA\xFFFF\x2\x2\x1\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1\x6"+
				"\xFFFF\x9\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4"+
				"\x2\x4\xFFFF\x8\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x2\xFFFF\x4\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2\x3\xFFFF\x5\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\x1\x47\x8\xFFFF\x1\xE\x5\xFFFF\x1\x42\x1\x3D\x4\xFFFF"+
				"\x1\x7\x1\x41\x6\xFFFF\x1\x14\x1\xFFFF\x1\x2E\x1\x16\x1\x45\x1\x43\x4"+
				"\xFFFF\x1\x5\x5\xFFFF\x1\xD\x8\xFFFF\x2\x46\x2\xFFFF\x1\x2F\x1\x9\x1"+
				"\xC\x3\xFFFF\x1\xA\x1\x10\x1\xFFFF\x1\x6\x1\xB\x2\xFFFF\x1\x13\x3\xFFFF"+
				"\x1\x15\x1\x40\x4\xFFFF\x1\xF\x5\xFFFF\x1\x2D\x1\x3E\x1\xFFFF\x1\x44"+
				"\xA\xFFFF\x1\x4\x1\xFFFF\x1\x47\x3\xFFFF\x1\x8\x6\xFFFF\x1\x23\x1\x26"+
				"\x1\x25\x1\x24\x1\x31\x1\x2C\x1\x27\x1\x1A\x1\x19\x1\xFFFF\x1\x17\x2"+
				"\xFFFF\x1\x3B\x1\x3C\x1\x39\x1\xFFFF\x1\x28\x2\xFFFF\x1\x1B\x1\x1D\x1"+
				"\x1C\x1\x12\x3\xFFFF\x1\x2\x1\x11\x1\x3A\x1\x37\x1\x48\x4\x2C\x1\xFFFF"+
				"\x3\x2C\x2\xFFFF\x1\x32\x2\xFFFF\x1\x38\x1\x33\x1\x34\x1\x21\x1\xFFFF"+
				"\x1\x2B\x1\xFFFF\x1\x22\x2\xFFFF\x1\x20\x1\x2A\x1\x29\x1\x35\x3\xFFFF"+
				"\x1\x2C\x1\x1E\x1\x1F\x1\x2C\x1\x18\x1\xFFFF\x1\x30\x2\xFFFF\x1\x36",
				"",
				"\x1\x2\x8\xFFFF\x3\x2\x2\xFFFF\x1\x53\x1\x2\x2\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x4E\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x1\x4D\x1\xFFFF\x3\x2\x1\xFFFF\x1\x52\x1\x2\x6\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x4B\x1\x51\x1\x2\x2\xFFFF\x1\x4F\x1\x55\x1\xFFFF"+
				"\x1\x49\x1\x50\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x54\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\x4C\x4\xFFFF\x1\x2\x1\x4A\x4\x2\x7\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x14\xFFFF\x4\x2\x1\xFFFF\x3\x2\xD\xFFFF\x1\x2\x8\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\x56\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1A\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x8\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1F\xFFFF\x1\x2\x6\xFFFF\x4\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x6\xFFFF\x1\x2\x2\xFFFF\x3\x2\x9\xFFFF\x4\x2\x1"+
				"\xFFFF\x3\x2\x8\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3"+
				"\x2\x4\xFFFF\x5\x2",
				"\x1\x63\x5\xFFFF\x1\x5A\x5\xFFFF\x1\x5E\x7\xFFFF\x1\x14\x2\xFFFF\x1"+
				"\x16\x6\xFFFF\x1\x5C\x5\xFFFF\x1\x62\xB\xFFFF\x1\x2\x1\xFFFF\x1\x58"+
				"\x1\x61\x3\xFFFF\x1\x5F\x1\x65\x1\xFFFF\x1\x5D\x1\x60\x2\xFFFF\x1\x59"+
				"\x3\xFFFF\x1\x15\x5\xFFFF\x1\x64\x13\xFFFF\x1\x5B\x5\xFFFF\x1\x57\x6"+
				"\xFFFF\x1\x23\x1\x26\x1\x25\x1\x24\x1\xFFFF\x1\x2C\x1\x27\x1\x1A\x1"+
				"\x19\x1\xFFFF\x1\x17\x6\xFFFF\x1\x28\x2\xFFFF\x1\x1B\x1\x1D\x1\x1C\x9"+
				"\xFFFF\x4\x2C\x1\xFFFF\x3\x2C\x8\xFFFF\x1\x21\x1\xFFFF\x1\x2B\x1\xFFFF"+
				"\x1\x22\x2\xFFFF\x1\x20\x1\x2A\x1\x29\x4\xFFFF\x1\x2C\x1\x1E\x1\x1F"+
				"\x1\x2C\x1\x18",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x66\x2F\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
		private static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
		private static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
		private static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
		private static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
		private static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
		private static readonly short[][] DFA106_transition;

		static DFA106()
		{
			int numStates = DFA106_transitionS.Length;
			DFA106_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA106_transition[i] = DFA.UnpackEncodedString(DFA106_transitionS[i]);
			}
		}

		public DFA106( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}

		public override string Description { get { return "926:41: ( ( UPPER )=> UPPER ( ( value )=> value )? )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition106(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA106_1 = input.LA(1);
		int index106_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA106_1==ASSIGN_OP)) {s = 3;}

				else if ((LA106_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 4;}

				else if ((LA106_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 5;}

				else if ((LA106_1==NULL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 6;}

				else if ((LA106_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 7;}

				else if ((LA106_1==UPPER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 8;}

				else if ((LA106_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 9;}

				else if ((LA106_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 10;}

				else if ((LA106_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 11;}

				else if ((LA106_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 12;}

				else if ((LA106_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 13;}

				else if ((LA106_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 14;}

				else if ((LA106_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 15;}

				else if ((LA106_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 16;}

				else if ((LA106_1==154) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 17;}

				else if ((LA106_1==149) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 18;}

				else if ((LA106_1==OBJECT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 19;}

				else if ((LA106_1==END_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 20;}

				else if ((LA106_1==OPERATION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 21;}

				else if ((LA106_1==ERROR_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 22;}

				else if ((LA106_1==136) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 23;}

				else if ((LA106_1==192) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 24;}

				else if ((LA106_1==134) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 25;}

				else if ((LA106_1==133) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 26;}

				else if ((LA106_1==146) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 27;}

				else if ((LA106_1==148) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 28;}

				else if ((LA106_1==147) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 29;}

				else if ((LA106_1==189) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 30;}

				else if ((LA106_1==190) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 31;}

				else if ((LA106_1==181) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 32;}

				else if ((LA106_1==174) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 33;}

				else if ((LA106_1==178) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 34;}

				else if ((LA106_1==126) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 35;}

				else if ((LA106_1==129) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 36;}

				else if ((LA106_1==128) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 37;}

				else if ((LA106_1==127) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 38;}

				else if ((LA106_1==132) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 39;}

				else if ((LA106_1==143) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 40;}

				else if ((LA106_1==183) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 41;}

				else if ((LA106_1==182) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 42;}

				else if ((LA106_1==176) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 43;}

				else if ((LA106_1==131||(LA106_1>=158 && LA106_1<=161)||(LA106_1>=163 && LA106_1<=165)||LA106_1==188||LA106_1==191) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 44;}

				else if ((LA106_1==RESULT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 45;}

				else if ((LA106_1==ERRORS_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 46;}

				else if ((LA106_1==LINKED_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 47;}

				else if ((LA106_1==194) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 48;}

				else if ((LA106_1==130) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 49;}

				else if ((LA106_1==168) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 50;}

				else if ((LA106_1==172) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 51;}

				else if ((LA106_1==173) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 52;}

				else if ((LA106_1==184) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 53;}

				else if ((LA106_1==197) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 54;}

				else if ((LA106_1==156) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 55;}

				else if ((LA106_1==171) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 56;}

				else if ((LA106_1==141) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 57;}

				else if ((LA106_1==155) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 58;}

				else if ((LA106_1==139) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 59;}

				else if ((LA106_1==140) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 60;}

				else if ((LA106_1==COMMA) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 61;}

				else if ((LA106_1==R_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 62;}

				else if ((LA106_1==EOF) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 63;}

				else if ((LA106_1==OPTIONAL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 64;}

				else if ((LA106_1==DEFAULT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 65;}

				else if ((LA106_1==COLON) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 66;}

				else if ((LA106_1==EXCLAMATION) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 67;}

				else if ((LA106_1==R_PAREN) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 68;}

				else if ((LA106_1==EXCEPT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 69;}

				else if (((LA106_1>=INTERSECTION && LA106_1<=INTERSECTION_KW)) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 70;}

				else if ((LA106_1==BAR||LA106_1==UNION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 71;}

				else if ((LA106_1==157) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 72;}

				else if ((LA106_1==153)) {s = 2;}

				input.Seek(index106_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((LA106_1==ANY_KW||(LA106_1>=BIT_KW && LA106_1<=BOOLEAN_KW)||LA106_1==CHARACTER_KW||LA106_1==CHOICE_KW||LA106_1==EMBEDDED_KW||LA106_1==ENUMERATED_KW||LA106_1==ERROR_KW||LA106_1==EXTERNAL_KW||(LA106_1>=GENERALIZED_TIME_KW && LA106_1<=GRAPHIC_STR_KW)||LA106_1==IA5_STRING_KW||LA106_1==INTEGER_KW||LA106_1==ISO646_STR_KW||LA106_1==L_BRACKET||LA106_1==NUMERIC_STR_KW||(LA106_1>=OBJECT_KW && LA106_1<=OCTET_KW)||LA106_1==OPERATION_KW||LA106_1==PRINTABLE_STR_KW||LA106_1==REAL_KW||(LA106_1>=SEQUENCE_KW && LA106_1<=SET_KW)||LA106_1==T61_STR_KW||LA106_1==TELETEX_STR_KW||LA106_1==UNIVERSAL_STR_KW||(LA106_1>=UTC_TIME_KW && LA106_1<=VISIBLE_STR_KW)||LA106_1==131||LA106_1==137||(LA106_1>=158 && LA106_1<=161)||(LA106_1>=163 && LA106_1<=165)||LA106_1==179||LA106_1==188||LA106_1==191)) {s = 2;}

				else if ((LA106_1==NULL_KW)) {s = 73;}

				else if ((LA106_1==UPPER)) {s = 74;}

				else if ((LA106_1==LOWER)) {s = 75;}

				else if ((LA106_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 76;}

				else if ((LA106_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 77;}

				else if ((LA106_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 78;}

				else if ((LA106_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 79;}

				else if ((LA106_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 80;}

				else if ((LA106_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 81;}

				else if ((LA106_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 82;}

				else if ((LA106_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 83;}

				else if ((LA106_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 84;}

				else if ((LA106_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 85;}

				input.Seek(index106_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred32_Smi_fragment))) {s = 85;}

				else if ((true)) {s = 2;}

				input.Seek(index106_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((LA106_1==LESS)) {s = 2;}

				else if ((LA106_1==END_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 20;}

				else if ((LA106_1==UPPER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 87;}

				else if ((LA106_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 88;}

				else if ((LA106_1==OPERATION_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 21;}

				else if ((LA106_1==ERROR_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 22;}

				else if ((LA106_1==136) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 23;}

				else if ((LA106_1==192) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 24;}

				else if ((LA106_1==134) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 25;}

				else if ((LA106_1==133) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 26;}

				else if ((LA106_1==146) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 27;}

				else if ((LA106_1==148) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 28;}

				else if ((LA106_1==147) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 29;}

				else if ((LA106_1==189) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 30;}

				else if ((LA106_1==190) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 31;}

				else if ((LA106_1==181) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 32;}

				else if ((LA106_1==OBJECT_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 89;}

				else if ((LA106_1==174) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 33;}

				else if ((LA106_1==178) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 34;}

				else if ((LA106_1==126) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 35;}

				else if ((LA106_1==129) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 36;}

				else if ((LA106_1==128) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 37;}

				else if ((LA106_1==127) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 38;}

				else if ((LA106_1==132) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 39;}

				else if ((LA106_1==143) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 40;}

				else if ((LA106_1==183) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 41;}

				else if ((LA106_1==182) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 42;}

				else if ((LA106_1==176) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 43;}

				else if ((LA106_1==131||(LA106_1>=158 && LA106_1<=161)||(LA106_1>=163 && LA106_1<=165)||LA106_1==188||LA106_1==191) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 44;}

				else if ((LA106_1==COLON) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 90;}

				else if ((LA106_1==TRUE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 91;}

				else if ((LA106_1==FALSE_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 92;}

				else if ((LA106_1==NULL_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 93;}

				else if ((LA106_1==C_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 94;}

				else if ((LA106_1==MINUS) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 95;}

				else if ((LA106_1==NUMBER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 96;}

				else if ((LA106_1==L_BRACE) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 97;}

				else if ((LA106_1==H_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 98;}

				else if ((LA106_1==B_STRING) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 99;}

				else if ((LA106_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 100;}

				else if ((LA106_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 101;}

				input.Seek(index106_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((LA106_1==UPPER)) {s = 2;}

				else if ((LA106_1==LOWER) && (EvaluatePredicate(synpred32_Smi_fragment))) {s = 102;}

				input.Seek(index106_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 106, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA105 : DFA
	{
		private const string DFA105_eotS =
			"\x47\xFFFF";
		private const string DFA105_eofS =
			"\x1\xE\x46\xFFFF";
		private const string DFA105_minS =
			"\x1\xA\x4\xFFFF\x2\x0\x40\xFFFF";
		private const string DFA105_maxS =
			"\x1\xC5\x4\xFFFF\x2\x0\x40\xFFFF";
		private const string DFA105_acceptS =
			"\x1\xFFFF\x4\x1\x2\xFFFF\x7\x1\x1\x2\x38\xFFFF";
		private const string DFA105_specialS =
			"\x1\x0\x4\xFFFF\x1\x1\x1\x2\x40\xFFFF}>";
		private static readonly string[] DFA105_transitionS =
			{
				"\x1\xE\x1\xFFFF\x1\xE\x8\xFFFF\x1\xB\x5\xFFFF\x2\xE\x4\xFFFF\x1\x4\x1"+
				"\xE\x6\xFFFF\x1\xE\x1\xFFFF\x4\xE\x4\xFFFF\x1\x2\x5\xFFFF\x1\xA\x8\xFFFF"+
				"\x2\xE\x2\xFFFF\x1\xE\x1\x6\x1\x9\x3\xFFFF\x1\x7\x1\xD\x1\xFFFF\x1\x3"+
				"\x1\x8\x2\xFFFF\x1\xE\x3\xFFFF\x2\xE\x4\xFFFF\x1\xC\x5\xFFFF\x2\xE\x1"+
				"\xFFFF\x1\xE\xA\xFFFF\x1\x1\x1\xFFFF\x1\xE\x3\xFFFF\x1\x5\x6\xFFFF\x9"+
				"\xE\x1\xFFFF\x1\xE\x2\xFFFF\x3\xE\x1\xFFFF\x1\xE\x2\xFFFF\x4\xE\x4\xFFFF"+
				"\x8\xE\x1\xFFFF\x3\xE\x2\xFFFF\x1\xE\x2\xFFFF\x4\xE\x1\xFFFF\x1\xE\x1"+
				"\xFFFF\x1\xE\x2\xFFFF\x4\xE\x3\xFFFF\x5\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1"+
				"\xE",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA105_eot = DFA.UnpackEncodedString(DFA105_eotS);
		private static readonly short[] DFA105_eof = DFA.UnpackEncodedString(DFA105_eofS);
		private static readonly char[] DFA105_min = DFA.UnpackEncodedStringToUnsignedChars(DFA105_minS);
		private static readonly char[] DFA105_max = DFA.UnpackEncodedStringToUnsignedChars(DFA105_maxS);
		private static readonly short[] DFA105_accept = DFA.UnpackEncodedString(DFA105_acceptS);
		private static readonly short[] DFA105_special = DFA.UnpackEncodedString(DFA105_specialS);
		private static readonly short[][] DFA105_transition;

		static DFA105()
		{
			int numStates = DFA105_transitionS.Length;
			DFA105_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA105_transition[i] = DFA.UnpackEncodedString(DFA105_transitionS[i]);
			}
		}

		public DFA105( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 105;
			this.eot = DFA105_eot;
			this.eof = DFA105_eof;
			this.min = DFA105_min;
			this.max = DFA105_max;
			this.accept = DFA105_accept;
			this.special = DFA105_special;
			this.transition = DFA105_transition;
		}

		public override string Description { get { return "926:59: ( ( value )=> value )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition105(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA105_1 = input.LA(1);
		int index105_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA105_1==TRUE_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 1;}

				else if ((LA105_1==FALSE_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 2;}

				else if ((LA105_1==NULL_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 3;}

				else if ((LA105_1==C_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 4;}

				else if ((LA105_1==UPPER)) {s = 5;}

				else if ((LA105_1==LOWER)) {s = 6;}

				else if ((LA105_1==MINUS) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 7;}

				else if ((LA105_1==NUMBER) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 8;}

				else if ((LA105_1==L_BRACE) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 9;}

				else if ((LA105_1==H_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 10;}

				else if ((LA105_1==B_STRING) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 11;}

				else if ((LA105_1==PLUS_INFINITY_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 12;}

				else if ((LA105_1==MINUS_INFINITY_KW) && (EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((LA105_1==EOF||LA105_1==ASSIGN_OP||LA105_1==BAR||(LA105_1>=COLON && LA105_1<=COMMA)||LA105_1==DEFAULT_KW||LA105_1==END_KW||(LA105_1>=ERRORS_KW && LA105_1<=EXCLAMATION)||(LA105_1>=INTERSECTION && LA105_1<=INTERSECTION_KW)||LA105_1==LINKED_KW||LA105_1==OBJECT_KW||(LA105_1>=OPERATION_KW && LA105_1<=OPTIONAL_KW)||(LA105_1>=RESULT_KW && LA105_1<=R_BRACE)||LA105_1==R_PAREN||LA105_1==UNION_KW||(LA105_1>=126 && LA105_1<=134)||LA105_1==136||(LA105_1>=139 && LA105_1<=141)||LA105_1==143||(LA105_1>=146 && LA105_1<=149)||(LA105_1>=154 && LA105_1<=161)||(LA105_1>=163 && LA105_1<=165)||LA105_1==168||(LA105_1>=171 && LA105_1<=174)||LA105_1==176||LA105_1==178||(LA105_1>=181 && LA105_1<=184)||(LA105_1>=188 && LA105_1<=192)||LA105_1==194||LA105_1==197)) {s = 14;}

				input.Seek(index105_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((true)) {s = 14;}

				input.Seek(index105_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred33_Smi_fragment))) {s = 13;}

				else if ((true)) {s = 14;}

				input.Seek(index105_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 105, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x11\xFFFF";
		private const string DFA130_eofS =
			"\x11\xFFFF";
		private const string DFA130_minS =
			"\x2\x15\x1\xFFFF\x2\x15\x1\x0\x1\x15\x1\x0\x1\x15\x1\xFFFF\x1\x15\x1"+
			"\x0\x1\x15\x1\x0\x2\x15\x1\x0";
		private const string DFA130_maxS =
			"\x2\x77\x1\xFFFF\x2\x77\x1\x0\x1\x77\x1\x0\x1\x77\x1\xFFFF\x1\x77\x1"+
			"\x0\x1\x77\x1\x0\x2\x77\x1\x0";
		private const string DFA130_acceptS =
			"\x2\xFFFF\x1\x2\x6\xFFFF\x1\x1\x7\xFFFF";
		private const string DFA130_specialS =
			"\x5\xFFFF\x1\x0\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF"+
			"\x1\x4}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x1\x1\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x6\xFFFF\x1\x4\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x3\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x5\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC"+
				"\xFFFF\x1\x2\x6\xFFFF\x1\x7\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\x8"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xA"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xC\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\xB\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xE\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\xD\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xF"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"\x1\x2\xB\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD\xFFFF\x1\xA"+
				"\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x13\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2",
				"\x1\x2\x5\xFFFF\x1\x2\x1\xC\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x5\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\xC\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x10\xC\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "967:55: ( ( L_BRACE ( LOWER | COMMA | R_BRACE ) )=> L_BRACE ( LOWER )? ( COMMA LOWER )* R_BRACE | value )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition130(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA130_1 = input.LA(1);
		int index130_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Smi_fragment))) {s = 9;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 130, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _module_definition_in_statement1862 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _module_identifier_in_module_definition1879 = new BitSet(new ulong[]{0x1000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _set_in_module_definition1881 = new BitSet(new ulong[]{0x1002800000000C00UL});
		public static readonly BitSet _set_in_module_definition1894 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _TAGS_KW_in_module_definition1906 = new BitSet(new ulong[]{0x2000000000400UL});
		public static readonly BitSet _EXTENSIBILITY_KW_in_module_definition1915 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _IMPLIED_KW_in_module_definition1917 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_module_definition1923 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BEGIN_KW_in_module_definition1925 = new BitSet(new ulong[]{0x4001120000000000UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _module_body_in_module_definition1927 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _END_KW_in_module_definition1929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_module_identifier1936 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _obj_id_comp_lst_in_module_identifier1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exports_in_module_body1950 = new BitSet(new ulong[]{0x4000100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _imports_in_module_body1955 = new BitSet(new ulong[]{0x100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _assignment_in_module_body1960 = new BitSet(new ulong[]{0x100000000002UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _L_BRACE_in_obj_id_comp_lst1972 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _defined_value_in_obj_id_comp_lst1987 = new BitSet(new ulong[]{0x0UL,0x10080UL});
		public static readonly BitSet _obj_id_component_in_obj_id_comp_lst1992 = new BitSet(new ulong[]{0x0UL,0x1000010080UL});
		public static readonly BitSet _R_BRACE_in_obj_id_comp_lst1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_defined_value2007 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _DOT_in_defined_value2009 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_defined_value2013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_obj_id_component2023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_obj_id_component2044 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_obj_id_component2047 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_obj_id_component2049 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_obj_id_component2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPORTS_KW_in_exports2079 = new BitSet(new ulong[]{0x100000000040UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbol_list_in_exports2084 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _ALL_KW_in_exports2090 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _SEMI_in_exports2094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTS_KW_in_imports2101 = new BitSet(new ulong[]{0x100000000000UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbols_from_module_in_imports2104 = new BitSet(new ulong[]{0x100000000000UL,0xC080008000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _SEMI_in_imports2108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_assignment2118 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2120 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_assignment2122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_assignment2137 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_assignment2139 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2141 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_assignment2143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_assignment2159 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _macroName_in_assignment2163 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_assignment2166 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ASSIGN_OP_in_assignment2168 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BEGIN_KW_in_assignment2170 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0x3FUL});
		public static readonly BitSet _END_KW_in_assignment2180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _symbol_in_symbol_list2194 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_symbol_list2197 = new BitSet(new ulong[]{0x100000000000UL,0xC080000000880080UL,0xF0E5403BC01C817BUL,0x1UL});
		public static readonly BitSet _symbol_in_symbol_list2199 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _symbol_list_in_symbols_from_module2209 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _FROM_KW_in_symbols_from_module2211 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UPPER_in_symbols_from_module2213 = new BitSet(new ulong[]{0x2UL,0x80000000000180UL});
		public static readonly BitSet _obj_id_comp_lst_in_symbols_from_module2242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_symbols_from_module2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_symbol2315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_symbol2319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _macroName_in_symbol2323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPERATION_KW_in_macroName2330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERROR_KW_in_macroName2334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_macroName2339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_macroName2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_macroName2357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_macroName2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_macroName2365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_macroName2379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_macroName2383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _189_in_macroName2387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_macroName2391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_macroName2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_macroName2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_macroName2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_macroName2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_macroName2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_macroName2421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_macroName2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_macroName2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_macroName2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_macroName2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_macroName2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_macroName2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_macroName2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_macros_in_macroName2459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _built_in_type_in_type2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_type_in_type2470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_type_in_type2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _macros_type_in_type2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_type2482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_KW_in_value2495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_KW_in_value2511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_value2527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_value2544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_value2560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_value2576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_value_in_value2591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_value_in_value2607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_value_in_value2623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cstr_value_in_value2639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _obj_id_comp_lst_in_value2655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_INFINITY_KW_in_value2671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_INFINITY_KW_in_value2687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _any_type_in_built_in_type2694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bit_string_type_in_built_in_type2712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_type_in_built_in_type2730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_str_type_in_built_in_type2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_type_in_built_in_type2766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embedded_type_in_built_in_type2783 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _EMBEDDED_KW_in_built_in_type2785 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _PDV_KW_in_built_in_type2787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_type_in_built_in_type2805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _external_type_in_built_in_type2822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _integer_type_in_built_in_type2832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _null_type_in_built_in_type2842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_identifier_type_in_built_in_type2852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octetString_type_in_built_in_type2862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _real_type_in_built_in_type2872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relativeOid_type_in_built_in_type2882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_type_in_built_in_type2892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_type_in_built_in_type2902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_type_in_built_in_type2912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setof_type_in_built_in_type2922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tagged_type_in_built_in_type2932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_defined_type2940 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _DOT_in_defined_type2942 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UPPER_in_defined_type2946 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_defined_type2949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_selection_type2959 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _LESS_in_selection_type2961 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_selection_type2963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_KW_in_any_type2970 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DEFINED_KW_in_any_type2973 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _BY_KW_in_any_type2975 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_any_type2977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_KW_in_bit_string_type2989 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_bit_string_type2991 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _namedNumber_list_in_bit_string_type3002 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_bit_string_type3007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOLEAN_KW_in_boolean_type3018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_KW_in_character_str_type3025 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_character_str_type3027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_set_in_character_str_type3031 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_character_str_type3034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHOICE_KW_in_choice_type3044 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_choice_type3046 = new BitSet(new ulong[]{0x40000000UL,0x80UL});
		public static readonly BitSet _elementType_list_in_choice_type3048 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_choice_type3050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EMBEDDED_KW_in_embedded_type3057 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _PDV_KW_in_embedded_type3059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUMERATED_KW_in_enum_type3066 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _namedNumber_list_in_enum_type3068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTERNAL_KW_in_external_type3075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_KW_in_integer_type3084 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _namedNumber_list_in_integer_type3095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraint_in_integer_type3099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_null_type3110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_object_identifier_type3117 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _IDENTIFIER_KW_in_object_identifier_type3119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTET_KW_in_octetString_type3126 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_octetString_type3128 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _constraint_in_octetString_type3131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REAL_KW_in_real_type3141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_relativeOid_type3150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEQUENCE_KW_in_sequence_type3158 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_sequence_type3160 = new BitSet(new ulong[]{0x40000000UL,0x1000000080UL});
		public static readonly BitSet _elementType_list_in_sequence_type3163 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequence_type3167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEQUENCE_KW_in_sequenceof_type3175 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _SIZE_KW_in_sequenceof_type3178 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_sequenceof_type3180 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_sequenceof_type3184 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_sequenceof_type3186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_KW_in_set_type3193 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_set_type3195 = new BitSet(new ulong[]{0x40000000UL,0x1000000080UL});
		public static readonly BitSet _elementType_list_in_set_type3198 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_set_type3202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_KW_in_setof_type3209 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _SIZE_KW_in_setof_type3212 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_setof_type3214 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_setof_type3218 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_setof_type3220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tag_in_tagged_type3227 = new BitSet(new ulong[]{0x14E4950002470880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_default_in_tagged_type3230 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_tagged_type3234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_namedNumber_list3241 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_namedNumber_list3243 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_namedNumber_list3246 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_namedNumber_list3248 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_namedNumber_list3252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_constraint3259 = new BitSet(new ulong[]{0x86FC5502026700C0UL,0x1FC34B42A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_specs_in_constraint3262 = new BitSet(new ulong[]{0x400000000000UL,0x4000000000UL});
		public static readonly BitSet _exception_spec_in_constraint3267 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_constraint3271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementType_in_elementType_list3380 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_elementType_list3383 = new BitSet(new ulong[]{0x40000000UL,0x80UL});
		public static readonly BitSet _elementType_in_elementType_list3385 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _L_BRACKET_in_tag3395 = new BitSet(new ulong[]{0x100UL,0xA0000100010080UL});
		public static readonly BitSet _clazz_in_tag3398 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _class_NUMBER_in_tag3402 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _R_BRACKET_in_tag3404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_class_NUMBER3428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_class_NUMBER3432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPERATION_KW_in_operation_macro3441 = new BitSet(new ulong[]{0x80000000202UL,0x800000040UL});
		public static readonly BitSet _ARGUMENT_KW_in_operation_macro3444 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_operation_macro3453 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_operation_macro3457 = new BitSet(new ulong[]{0x80000000002UL,0x800000040UL});
		public static readonly BitSet _RESULT_KW_in_operation_macro3491 = new BitSet(new ulong[]{0x4E41D0002470082UL,0xFC14302809A82D2UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_operation_macro3532 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_operation_macro3536 = new BitSet(new ulong[]{0x80000000002UL,0x40UL});
		public static readonly BitSet _ERRORS_KW_in_operation_macro3578 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_operation_macro3580 = new BitSet(new ulong[]{0x6EC150202670080UL,0xFC34312A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _operation_errorlist_in_operation_macro3583 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_operation_macro3587 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LINKED_KW_in_operation_macro3621 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_operation_macro3623 = new BitSet(new ulong[]{0x6EC150202670080UL,0xFC34312A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _linkedOp_list_in_operation_macro3626 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_operation_macro3630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERROR_KW_in_error_macro3650 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _PARAMETER_KW_in_error_macro3654 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _LOWER_in_error_macro3663 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_error_macro3667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operation_macro_in_macros_type3685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _error_macro_in_macros_type3689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objecttype_macro_in_macros_type3693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moduleidentity_macro_in_macros_type3697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectidentity_macro_in_macros_type3713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _notificationtype_macro_in_macros_type3717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _textualconvention_macro_in_macros_type3721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectgroup_macro_in_macros_type3737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _notificationgroup_macro_in_macros_type3741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modulecompliance_macro_in_macros_type3745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _agentcapabilities_macro_in_macros_type3761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _traptype_macro_in_macros_type3765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_smi_type3839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_KW_in_smi_type3843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTET_KW_in_smi_type3847 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _STRING_KW_in_smi_type3849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_smi_type3853 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _IDENTIFIER_KW_in_smi_type3855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_smi_type3859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping3873 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping3875 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _BAR_in_smi_subtyping3878 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping3880 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping3884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping3901 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SIZE_KW_in_smi_subtyping3903 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_smi_subtyping3905 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping3907 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _BAR_in_smi_subtyping3910 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_range_in_smi_subtyping3912 = new BitSet(new ulong[]{0x1000UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping3916 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_smi_subtyping3918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtype_value_in_subtype_range3924 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _DOTDOT_in_subtype_range3927 = new BitSet(new ulong[]{0x200000000200000UL,0x11000UL});
		public static readonly BitSet _subtype_value_in_subtype_range3929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_subtype_value3939 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_subtype_value3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_subtype_value3947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_subtype_value3951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_objecttype_macro3960 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _187_in_objecttype_macro3962 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _smi_type_in_objecttype_macro3995 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_namedbits_in_objecttype_macro3997 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _smi_type_in_objecttype_macro4029 = new BitSet(new ulong[]{0x0UL,0x400UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _smi_subtyping_in_objecttype_macro4032 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _type_in_objecttype_macro4059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL,0x4UL});
		public static readonly BitSet _194_in_objecttype_macro4103 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro4105 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100310008000004UL});
		public static readonly BitSet _set_in_objecttype_macro4130 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_accesstypes_in_objecttype_macro4138 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100300000000000UL});
		public static readonly BitSet _168_in_objecttype_macro4162 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_pibaccess_in_objecttype_macro4164 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100300000000000UL});
		public static readonly BitSet _172_in_objecttype_macro4202 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4204 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4206 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4208 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100200000000000UL});
		public static readonly BitSet _173_in_objecttype_macro4249 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4251 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4253 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objecttype_macro4302 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_statustypes_in_objecttype_macro4304 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000C23080UL,0x2UL});
		public static readonly BitSet _141_in_objecttype_macro4333 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro4335 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000C21080UL,0x2UL});
		public static readonly BitSet _151_in_objecttype_macro4391 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4393 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_error_in_objecttype_macro4395 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro4398 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objecttype_macro_error_in_objecttype_macro4400 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4404 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2040000421080UL,0x2UL});
		public static readonly BitSet _177_in_objecttype_macro4419 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objecttype_macro4421 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000421080UL,0x2UL});
		public static readonly BitSet _150_in_objecttype_macro4442 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_index_in_objecttype_macro4444 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _135_in_objecttype_macro4469 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_augments_in_objecttype_macro4471 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _170_in_objecttype_macro4496 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4498 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4500 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4502 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _145_in_objecttype_macro4548 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4550 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4552 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4554 = new BitSet(new ulong[]{0x2UL,0x0UL,0x401000UL,0x2UL});
		public static readonly BitSet _150_in_objecttype_macro4622 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _objecttype_macro_index_in_objecttype_macro4624 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000UL,0x2UL});
		public static readonly BitSet _193_in_objecttype_macro4673 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4675 = new BitSet(new ulong[]{0x208000200200000UL,0x8200102001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4678 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro4681 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro4683 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4690 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_objecttype_macro4729 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro4731 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_bitsvalue_in_objecttype_macro4772 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _value_in_objecttype_macro4799 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro4823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_accesstypes4837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_pibaccess4890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_statustypes4943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_index4993 = new BitSet(new ulong[]{0x2208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_indextype_in_objecttype_macro_index4995 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_index4998 = new BitSet(new ulong[]{0x2208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _objecttype_macro_indextype_in_objecttype_macro_index5000 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_index5004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLIED_KW_in_objecttype_macro_indextype5018 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro_indextype5022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_augments5028 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objecttype_macro_augments5030 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_augments5032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_namedbits5042 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_namedbits5045 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_objecttype_macro_namedbits5048 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_objecttype_macro_namedbits5050 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_objecttype_macro_namedbits5052 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_namedbits5055 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_namedbits5058 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_objecttype_macro_namedbits5061 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_objecttype_macro_namedbits5063 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_objecttype_macro_namedbits5065 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_namedbits5069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_objecttype_macro_bitsvalue5080 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_bitsvalue5082 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objecttype_macro_bitsvalue5085 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_bitsvalue5087 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objecttype_macro_bitsvalue5091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objecttype_macro_error5102 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_objecttype_macro_error5104 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_objecttype_macro_error5106 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_objecttype_macro_error5108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_moduleidentity_macro5117 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000001000000UL});
		public static readonly BitSet _185_in_moduleidentity_macro5145 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_moduleidentity_macro5147 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _moduleidentity_macro_categories_in_moduleidentity_macro5149 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_moduleidentity_macro5151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_moduleidentity_macro5181 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro5183 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_moduleidentity_macro5185 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro5187 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_moduleidentity_macro5189 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro5191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_moduleidentity_macro5218 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro5220 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _moduleidentity_macro_revision_in_moduleidentity_macro5223 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_moduleidentity_macro_revision5232 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro_revision5234 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_moduleidentity_macro_revision5236 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_moduleidentity_macro_revision5238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_moduleidentity_macro_categories5247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moduleidentity_macro_categoryid_in_moduleidentity_macro_categories5285 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_moduleidentity_macro_categories5288 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _moduleidentity_macro_categoryid_in_moduleidentity_macro_categories5290 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _LOWER_in_moduleidentity_macro_categoryid5298 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_moduleidentity_macro_categoryid5300 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_moduleidentity_macro_categoryid5302 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_moduleidentity_macro_categoryid5304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_objectidentity_macro5314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objectidentity_macro5316 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objectidentity_macro_statustypes_in_objectidentity_macro5318 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_objectidentity_macro5320 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectidentity_macro5322 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_objectidentity_macro5325 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectidentity_macro5327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objectidentity_macro_statustypes5340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_notificationtype_macro5393 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100004000000000UL});
		public static readonly BitSet _166_in_notificationtype_macro5396 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_notificationtype_macro5398 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationtype_macro5400 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_notificationtype_macro5403 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationtype_macro5405 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_notificationtype_macro5409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_notificationtype_macro5458 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _notificationtype_macro_status_in_notificationtype_macro5460 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_notificationtype_macro5462 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationtype_macro5464 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_notificationtype_macro5467 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationtype_macro5469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_notificationtype_macro_status5482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_textualconvention_macro5534 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000004000UL});
		public static readonly BitSet _142_in_textualconvention_macro5537 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro5539 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_textualconvention_macro5572 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _textualconvention_macro_status_in_textualconvention_macro5574 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_textualconvention_macro5605 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro5607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000000000000UL});
		public static readonly BitSet _177_in_textualconvention_macro5639 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_textualconvention_macro5641 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _187_in_textualconvention_macro5674 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _smi_type_in_textualconvention_macro5686 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_textualconvention_macro5688 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _textualconvention_macro_namedbit_in_textualconvention_macro5690 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_textualconvention_macro5730 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _textualconvention_macro_namedbit_in_textualconvention_macro5732 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_textualconvention_macro5736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_textualconvention_macro5740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_textualconvention_macro_status5751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_textualconvention_macro_namedbit5800 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_textualconvention_macro_namedbit5802 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _MINUS_in_textualconvention_macro_namedbit5805 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_textualconvention_macro_namedbit5809 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_textualconvention_macro_namedbit5811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_objectgroup_macro5820 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_objectgroup_macro5822 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_objectgroup_macro5824 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objectgroup_macro5826 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_objectgroup_macro5829 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_objectgroup_macro5831 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_objectgroup_macro5835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_objectgroup_macro5862 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _objectgroup_macro_status_in_objectgroup_macro5864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_objectgroup_macro5866 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectgroup_macro5868 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_objectgroup_macro5871 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_objectgroup_macro5873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_objectgroup_macro_status5884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_notificationgroup_macro5936 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_notificationgroup_macro5938 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_notificationgroup_macro5940 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationgroup_macro5942 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_notificationgroup_macro5945 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_notificationgroup_macro5947 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_notificationgroup_macro5951 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_notificationgroup_macro5978 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _notificationgroup_macro_status_in_notificationgroup_macro5980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_notificationgroup_macro5982 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationgroup_macro5984 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_notificationgroup_macro5987 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_notificationgroup_macro5989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_notificationgroup_macro_status6000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_modulecompliance_macro6052 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_modulecompliance_macro6054 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_status_in_modulecompliance_macro6056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro6082 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro6084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000020000000UL});
		public static readonly BitSet _177_in_modulecompliance_macro6087 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro6089 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _modulecompliance_macro_module_in_modulecompliance_macro6094 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_status6105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_modulecompliance_macro_module6153 = new BitSet(new ulong[]{0x2UL,0x80000000080000UL,0x4200000UL});
		public static readonly BitSet _UPPER_in_modulecompliance_macro_module6162 = new BitSet(new ulong[]{0x208000200200002UL,0x8200002009B180UL,0x4200000UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6171 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x4200000UL});
		public static readonly BitSet _154_in_modulecompliance_macro_module6212 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_modulecompliance_macro_module6214 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6216 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_modulecompliance_macro_module6219 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_module6221 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_modulecompliance_macro_module6225 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x200000UL});
		public static readonly BitSet _modulecompliance_macro_compliance_in_modulecompliance_macro_module6262 = new BitSet(new ulong[]{0x2UL,0x80000UL,0x200000UL});
		public static readonly BitSet _149_in_modulecompliance_macro_compliance6271 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_compliance6273 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro_compliance6275 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro_compliance6277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_KW_in_modulecompliance_macro_compliance6314 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_modulecompliance_macro_compliance6316 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800080010002000UL,0x20UL});
		public static readonly BitSet _187_in_modulecompliance_macro_compliance6356 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _modulecompliance_macro_syntax_in_modulecompliance_macro_compliance6358 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80010002000UL,0x20UL});
		public static readonly BitSet _197_in_modulecompliance_macro_compliance6400 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _modulecompliance_macro_syntax_in_modulecompliance_macro_compliance6402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80010002000UL});
		public static readonly BitSet _156_in_modulecompliance_macro_compliance6449 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_access_in_modulecompliance_macro_compliance6451 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000002000UL});
		public static readonly BitSet _171_in_modulecompliance_macro_compliance6493 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_pibaccess_in_modulecompliance_macro_compliance6495 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_modulecompliance_macro_compliance6540 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_modulecompliance_macro_compliance6542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_modulecompliance_macro_syntax6556 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_modulecompliance_macro_syntax6558 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_namedbit_in_modulecompliance_macro_syntax6560 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_modulecompliance_macro_syntax6563 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _modulecompliance_macro_namedbit_in_modulecompliance_macro_syntax6565 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_modulecompliance_macro_syntax6569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_modulecompliance_macro_syntax6608 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _smi_subtyping_in_modulecompliance_macro_syntax6611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_modulecompliance_macro_syntax6646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_namedbit6652 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_modulecompliance_macro_namedbit6654 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_modulecompliance_macro_namedbit6656 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_modulecompliance_macro_namedbit6658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_access6666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_modulecompliance_macro_pibaccess6716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_agentcapabilities_macro6767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_agentcapabilities_macro6769 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro6771 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_agentcapabilities_macro6773 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_status_in_agentcapabilities_macro6775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_agentcapabilities_macro6802 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro6804 = new BitSet(new ulong[]{0x2UL,0x0UL,0x402000000000000UL});
		public static readonly BitSet _177_in_agentcapabilities_macro6807 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro6809 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _agentcapabilities_macro_module_in_agentcapabilities_macro6814 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_status6824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_agentcapabilities_macro_module6872 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_module6874 = new BitSet(new ulong[]{0x8208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module6877 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _INCLUDES_KW_in_agentcapabilities_macro_module6914 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_module6916 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module6918 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_module6921 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_module6923 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_module6927 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _agentcapabilities_macro_variation_in_agentcapabilities_macro_module6963 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _196_in_agentcapabilities_macro_variation6971 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation6973 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000003804UL,0x20UL});
		public static readonly BitSet _187_in_agentcapabilities_macro_variation6976 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _agentcapabilities_macro_syntax_in_agentcapabilities_macro_variation6978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3804UL,0x20UL});
		public static readonly BitSet _197_in_agentcapabilities_macro_variation6983 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _agentcapabilities_macro_syntax_in_agentcapabilities_macro_variation6985 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3804UL});
		public static readonly BitSet _130_in_agentcapabilities_macro_variation6990 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_access_in_agentcapabilities_macro_variation6992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3800UL});
		public static readonly BitSet _139_in_agentcapabilities_macro_variation7034 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7036 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7038 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_variation7041 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7043 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_variation7047 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3000UL});
		public static readonly BitSet _140_in_agentcapabilities_macro_variation7089 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7091 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_variation7112 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_variation7115 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_variation7120 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_variation7122 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_variation7126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _value_in_agentcapabilities_macro_variation7130 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_agentcapabilities_macro_variation7173 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _C_STRING_in_agentcapabilities_macro_variation7175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_agentcapabilities_macro_syntax7226 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_agentcapabilities_macro_syntax7228 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_namedbit_in_agentcapabilities_macro_syntax7230 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_agentcapabilities_macro_syntax7233 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _agentcapabilities_macro_namedbit_in_agentcapabilities_macro_syntax7235 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_agentcapabilities_macro_syntax7239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_agentcapabilities_macro_syntax7279 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _smi_subtyping_in_agentcapabilities_macro_syntax7282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_agentcapabilities_macro_syntax7318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_access7327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_agentcapabilities_macro_namedbit7375 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_agentcapabilities_macro_namedbit7377 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_agentcapabilities_macro_namedbit7379 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_agentcapabilities_macro_namedbit7381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _191_in_traptype_macro7391 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_traptype_macro7393 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7395 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000002000UL,0x8UL});
		public static readonly BitSet _195_in_traptype_macro7398 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_traptype_macro7400 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7402 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_traptype_macro7405 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7407 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_traptype_macro7411 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000002000UL});
		public static readonly BitSet _141_in_traptype_macro7443 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7445 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_traptype_macro7450 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_traptype_macro7452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeorvalue_in_operation_errorlist7462 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_operation_errorlist7465 = new BitSet(new ulong[]{0x6EC150202670080UL,0xFC34302A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _typeorvalue_in_operation_errorlist7467 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _typeorvalue_in_linkedOp_list7477 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_linkedOp_list7480 = new BitSet(new ulong[]{0x6EC150202670080UL,0xFC34302A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _typeorvalue_in_linkedOp_list7482 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _type_in_typeorvalue7498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_typeorvalue7502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeorvalue_in_typeorvaluelist7510 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_typeorvaluelist7513 = new BitSet(new ulong[]{0x6EC150202670080UL,0xFC34302A09BB392UL,0x9008003BC0000208UL});
		public static readonly BitSet _typeorvalue_in_typeorvaluelist7515 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _LOWER_in_elementType7527 = new BitSet(new ulong[]{0x14E4950002470880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_in_elementType7545 = new BitSet(new ulong[]{0x14E4950002470880UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _tag_default_in_elementType7571 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_elementType7575 = new BitSet(new ulong[]{0x400000002UL,0x1000000UL});
		public static readonly BitSet _OPTIONAL_KW_in_elementType7578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_KW_in_elementType7582 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_elementType7584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPONENTS_KW_in_elementType7602 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OF_KW_in_elementType7604 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_elementType7606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_namedNumber7615 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _L_PAREN_in_namedNumber7617 = new BitSet(new ulong[]{0x0UL,0x80000000011080UL});
		public static readonly BitSet _signed_number_in_namedNumber7620 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _defined_value_in_namedNumber7624 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_namedNumber7627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_signed_number7635 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NUMBER_in_signed_number7639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_set_spec_in_element_set_specs7646 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_element_set_specs7649 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOTDOTDOT_in_element_set_specs7651 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_element_set_specs7656 = new BitSet(new ulong[]{0x86FC1502026700C0UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_spec_in_element_set_specs7658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXCLAMATION_in_exception_spec7668 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809B9292UL,0x9008003BC0000208UL});
		public static readonly BitSet _signed_number_in_exception_spec7695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_exception_spec7724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_exception_spec7747 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _COLON_in_exception_spec7749 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_exception_spec7751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _intersections_in_element_set_spec7776 = new BitSet(new ulong[]{0x1002UL,0x8000000000000UL});
		public static readonly BitSet _set_in_element_set_spec7780 = new BitSet(new ulong[]{0x86FC150202670080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _intersections_in_element_set_spec7788 = new BitSet(new ulong[]{0x1002UL,0x8000000000000UL});
		public static readonly BitSet _ALL_KW_in_element_set_spec7812 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _EXCEPT_KW_in_element_set_spec7814 = new BitSet(new ulong[]{0x86FC150202670080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_element_set_spec7816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraint_elements_in_intersections7823 = new BitSet(new ulong[]{0x200000000002UL,0xCUL});
		public static readonly BitSet _EXCEPT_KW_in_intersections7826 = new BitSet(new ulong[]{0x86FC150202670080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_intersections7828 = new BitSet(new ulong[]{0x2UL,0xCUL});
		public static readonly BitSet _set_in_intersections7851 = new BitSet(new ulong[]{0x86FC150202670080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_intersections7859 = new BitSet(new ulong[]{0x200000000002UL,0xCUL});
		public static readonly BitSet _EXCEPT_KW_in_intersections7862 = new BitSet(new ulong[]{0x86FC150202670080UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _constraint_elements_in_intersections7864 = new BitSet(new ulong[]{0x2UL,0xCUL});
		public static readonly BitSet _value_range_in_constraint_elements7883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_constraint_elements7912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIZE_KW_in_constraint_elements7936 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements7938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_KW_in_constraint_elements7962 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements7964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_PAREN_in_constraint_elements7988 = new BitSet(new ulong[]{0x86FC1502026700C0UL,0x1FC34B02A49BF792UL,0x9008003BC0000208UL});
		public static readonly BitSet _element_set_spec_in_constraint_elements7990 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _R_PAREN_in_constraint_elements7992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDES_KW_in_constraint_elements8017 = new BitSet(new ulong[]{0x4E4150002470080UL,0xFC14302809A8292UL,0x9008003BC0000208UL});
		public static readonly BitSet _type_in_constraint_elements8021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PATTERN_KW_in_constraint_elements8045 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_constraint_elements8047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_KW_in_constraint_elements8071 = new BitSet(new ulong[]{0xC0000000UL});
		public static readonly BitSet _COMPONENT_KW_in_constraint_elements8074 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _constraint_in_constraint_elements8076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPONENTS_KW_in_constraint_elements8111 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_constraint_elements8113 = new BitSet(new ulong[]{0x8000000000UL,0x80UL});
		public static readonly BitSet _DOTDOTDOT_in_constraint_elements8116 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_constraint_elements8118 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _type_constraint_list_in_constraint_elements8155 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_constraint_elements8157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_value_range8166 = new BitSet(new ulong[]{0x4000000000UL,0x20UL});
		public static readonly BitSet _MIN_KW_in_value_range8170 = new BitSet(new ulong[]{0x4000000000UL,0x20UL});
		public static readonly BitSet _LESS_in_value_range8174 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _DOTDOT_in_value_range8178 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B9A0UL});
		public static readonly BitSet _LESS_in_value_range8181 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B980UL});
		public static readonly BitSet _value_in_value_range8186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_KW_in_value_range8190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _named_constraint_in_type_constraint_list8199 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_type_constraint_list8202 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _named_constraint_in_type_constraint_list8204 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _LOWER_in_named_constraint8214 = new BitSet(new ulong[]{0x12UL,0x41000400UL});
		public static readonly BitSet _constraint_in_named_constraint8217 = new BitSet(new ulong[]{0x12UL,0x41000000UL});
		public static readonly BitSet _LOWER_in_choice_value8240 = new BitSet(new ulong[]{0x208000208200000UL,0x8200002001B180UL});
		public static readonly BitSet _COLON_in_choice_value8243 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_choice_value8247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_sequence_value8254 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _named_value_in_sequence_value8257 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_sequence_value8262 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _named_value_in_sequence_value8264 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequence_value8268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_sequenceof_value8275 = new BitSet(new ulong[]{0x208000210200000UL,0x8200102001B180UL});
		public static readonly BitSet _value_in_sequenceof_value8278 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _COMMA_in_sequenceof_value8283 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_sequenceof_value8285 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_sequenceof_value8289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_cstr_value8302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_cstr_value8323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_cstr_value8338 = new BitSet(new ulong[]{0x200000000UL,0x80000000011180UL});
		public static readonly BitSet _id_list_in_cstr_value8361 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _char_defs_list_in_cstr_value8386 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _tuple_or_quad_in_cstr_value8405 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_cstr_value8421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_id_list8428 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_id_list8431 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_id_list8433 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _char_defs_in_char_defs_list8443 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_char_defs_list8446 = new BitSet(new ulong[]{0x200000000UL,0x80000000000180UL});
		public static readonly BitSet _char_defs_in_char_defs_list8448 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _signed_number_in_tuple_or_quad8459 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_tuple_or_quad8461 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_tuple_or_quad8463 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _COMMA_in_tuple_or_quad8466 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_tuple_or_quad8468 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _COMMA_in_tuple_or_quad8470 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _signed_number_in_tuple_or_quad8472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_char_defs8483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_char_defs8497 = new BitSet(new ulong[]{0x0UL,0x11000UL});
		public static readonly BitSet _tuple_or_quad_in_char_defs8499 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _R_BRACE_in_char_defs8501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_char_defs8514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_named_value8524 = new BitSet(new ulong[]{0x208000200200000UL,0x8200002001B180UL});
		public static readonly BitSet _value_in_named_value8526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred1_Smi1976 = new BitSet(new ulong[]{0x0UL,0x10080UL});
		public static readonly BitSet _set_in_synpred1_Smi1978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred2_Smi2274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_KW_in_synpred3_Smi2490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_KW_in_synpred4_Smi2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_KW_in_synpred5_Smi2522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _C_STRING_in_synpred6_Smi2539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred7_Smi2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_synpred8_Smi2571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _choice_value_in_synpred9_Smi2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequence_value_in_synpred10_Smi2602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sequenceof_value_in_synpred11_Smi2618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cstr_value_in_synpred12_Smi2634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _obj_id_comp_lst_in_synpred13_Smi2650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_INFINITY_KW_in_synpred14_Smi2666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_INFINITY_KW_in_synpred15_Smi2682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred16_Smi2995 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_synpred16_Smi2997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred17_Smi3088 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _namedNumber_in_synpred17_Smi3090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred18_Smi3448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESULT_KW_in_synpred19_Smi3486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred20_Smi3520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred21_Smi3527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERRORS_KW_in_synpred22_Smi3573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LINKED_KW_in_synpred23_Smi3616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOWER_in_synpred24_Smi3658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred25_Smi3988 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred25_Smi3990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred26_Smi4024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred27_Smi4328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_synpred29_Smi4724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred30_Smi4757 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LOWER_in_synpred30_Smi4759 = new BitSet(new ulong[]{0x10000000UL,0x1000000000UL});
		public static readonly BitSet _set_in_synpred30_Smi4761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred31_Smi5679 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred31_Smi5681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPPER_in_synpred32_Smi6157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_synpred33_Smi6166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred34_Smi6549 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred34_Smi6551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred35_Smi6603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACE_in_synpred36_Smi7095 = new BitSet(new ulong[]{0x10000000UL,0x1000000080UL});
		public static readonly BitSet _set_in_synpred36_Smi7097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred37_Smi7182 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _L_BRACE_in_synpred37_Smi7184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _smi_type_in_synpred38_Smi7274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred39_Smi7438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred40_Smi7493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_BRACKET_in_synpred41_Smi7532 = new BitSet(new ulong[]{0x0UL,0x80000000010080UL});
		public static readonly BitSet _set_in_synpred41_Smi7534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signed_number_in_synpred42_Smi7690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defined_value_in_synpred43_Smi7719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_range_in_synpred44_Smi7878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _value_in_synpred45_Smi7907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _H_STRING_in_synpred46_Smi8297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _B_STRING_in_synpred47_Smi8318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _id_list_in_synpred48_Smi8356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _char_defs_list_in_synpred49_Smi8381 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Lextm.SharpSnmpLib.Mib.Ast.ANTLR 

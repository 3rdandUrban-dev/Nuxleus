<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperSocket.Management.Server</name>
    </assembly>
    <members>
        <member name="T:SuperSocket.Management.Server.Config.UserConfig">
            <summary>
            User configuration
            </summary>
        </member>
        <member name="P:SuperSocket.Management.Server.Config.UserConfig.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="T:SuperSocket.Management.Server.Config.UserConfigCollection">
            <summary>
            User configuration collection
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.Config.UserConfigCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.Management.Server.Config.UserConfigCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.Management.Server.Config.UserConfigCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.Management.Server.Config.UserConfigCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:SuperSocket.Management.Server.Config.UserConfigCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="T:SuperSocket.Management.Server.InstanceState">
            <summary>
            AppServer's instance
            </summary>
        </member>
        <member name="P:SuperSocket.Management.Server.InstanceState.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:SuperSocket.Management.Server.InstanceState.Performance">
            <summary>
            Gets or sets the performance stat.
            </summary>
            <value>
            The performance.
            </value>
        </member>
        <member name="T:SuperSocket.Management.Server.ServerState">
            <summary>
            Server's state
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.ServerState.ToServerInfo">
            <summary>
            Convert to server's information which will be sent to client
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.Management.Server.ServerState.GlobalPerformance">
            <summary>
            Gets or sets the global performance.
            </summary>
            <value>
            The global performance.
            </value>
        </member>
        <member name="P:SuperSocket.Management.Server.ServerState.InstanceStates">
            <summary>
            Gets or sets the instance states.
            </summary>
            <value>
            The instance states.
            </value>
        </member>
        <member name="T:SuperSocket.Management.Server.Command.LOGIN">
            <summary>
            Login command, which used for login in
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.Command.LOGIN.ExecuteJsonCommand(SuperSocket.Management.Server.ManagementSession,SuperSocket.Management.Shared.LoginInfo)">
            <summary>
            Executes the json command.
            </summary>
            <param name="session">The session.</param>
            <param name="commandInfo">The command info.</param>
        </member>
        <member name="T:SuperSocket.Management.Server.Command.START">
            <summary>
            Start command, which is used for starting AppServer instance
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.Command.START.ExecuteAsyncJsonCommand(SuperSocket.Management.Server.ManagementSession,System.String,System.String)">
            <summary>
            Executes the async json command.
            </summary>
            <param name="session">The session.</param>
            <param name="token">The token.</param>
            <param name="commandInfo">The command info.</param>
        </member>
        <member name="T:SuperSocket.Management.Server.Command.STOP">
            <summary>
            Stop command, which is used for stopping AppServer instance
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.Command.STOP.ExecuteAsyncJsonCommand(SuperSocket.Management.Server.ManagementSession,System.String,System.String)">
            <summary>
            Executes the async json command.
            </summary>
            <param name="session">The session.</param>
            <param name="token">The token.</param>
            <param name="commandInfo">The command info.</param>
        </member>
        <member name="T:SuperSocket.Management.Server.ManagementServer">
            <summary>
            Server manager app server
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.ManagementServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.Management.Server.ManagementServer"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.ManagementServer.Setup(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.Config.IServerConfig,SuperSocket.SocketBase.ISocketServerFactory,SuperSocket.SocketBase.Protocol.IRequestFilterFactory{SuperWebSocket.Protocol.IWebSocketFragment})">
            <summary>
            Setups with the specified parameters.
            </summary>
            <param name="rootConfig">The root config.</param>
            <param name="config">The config.</param>
            <param name="socketServerFactory">The socket server factory.</param>
            <param name="protocol">The protocol.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Management.Server.ManagementServer.OnStartup">
            <summary>
            Called when [startup].
            </summary>
        </member>
        <member name="M:SuperSocket.Management.Server.ManagementServer.OnStopped">
            <summary>
            Called when [stopped].
            </summary>
        </member>
        <member name="T:SuperSocket.Management.Server.ManagementSession">
            <summary>
            Management session
            </summary>
        </member>
        <member name="P:SuperSocket.Management.Server.ManagementSession.AppServer">
            <summary>
            Gets the app server.
            </summary>
        </member>
        <member name="P:SuperSocket.Management.Server.ManagementSession.LoggedIn">
            <summary>
            Gets a value indicating whether [logged in].
            </summary>
            <value>
              <c>true</c> if [logged in]; otherwise, <c>false</c>.
            </value>
        </member>
    </members>
</doc>

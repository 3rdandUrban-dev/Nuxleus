<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nuxleus.Web</name>
    </assembly>
    <members>
        <member name="T:Mono.WebServer.MonoWorkerRequest">
            <summary>
               This abstract class extends <see cref="T:System.Web.Hosting.SimpleWorkerRequest"/>,
               adding support for security certificates and implementing methods
               for use with a web server.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.appHostBase">
            <summary>
               Contains the application host used by the current
               instance.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.encoding">
            <summary>
               Contains the encoding used for content in the current
               instance.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.headerEncoding">
            <summary>
               Contains the encoding used for headers in the current
               instance.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.queryStringBytes">
            <summary>
               Contains a <see cref="!:byte[]"/> representation of the
               query string.
            </summary>
            <remarks>
               When <see cref="M:Mono.WebServer.MonoWorkerRequest.GetQueryStringRawBytes"/> is called, it
               stores the encoded query string in this property so it
               only has to be converted once.
            </remarks>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.hostVPath">
            <summary>
               Contains the host virtual path of the current instance as
               read from the application host.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.hostPath">
            <summary>
               Contains the host physical path of the current instance
               as read from the application host.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.end_send">
            <summary>
               Contains the <see cref="!:EndOfSendNotification"/>
               callback to call once all data has been sent.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.end_send_data">
            <summary>
               Contains the data to send to <see cref="F:Mono.WebServer.MonoWorkerRequest.end_send"/>.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.server_raw">
            <summary>
               Contains the raw server certificate used for
               authenticating the current instance, if secure.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.client_raw">
            <summary>
               Contains the raw client certificate used for
               authenticating the current instance, if secure.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.client_cert">
            <summary>
               Contains the X509 client certificate used for
               authenticating the current instance, if secure.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.server_variables">
            <summary>
               Contains the server variables in the current instance.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.inUnhandledException">
            <summary>
               Indicates whether or not an unhandled exception has
               occurred while processing the request.
            </summary>
            <remarks>
               Being within an unhandled exception can cause problems
               when accessing properties of the <see cref="T:System.Web.HttpResponse"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.#ctor(Mono.WebServer.IApplicationHost)">
            <summary>
               Constructs and initializes a new instance of <see cref="T:Mono.WebServer.MonoWorkerRequest"/> for a specified application
               host.
            </summary>
            <param name="appHost">
               A <see cref="T:Mono.WebServer.IApplicationHost"/> object containing the
               application host that created the new instance.
            </param>
            <remarks>
               <paramref name="appHost"/> <B>MUST</B> be the <see cref="T:Mono.WebServer.IApplicationHost"/> that created the new
               instance so they will be in the same <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetAppPath">
            <summary>
               Gets the virtual host path of the file used by of the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> containing the virtual host path
               of the file used by the current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetAppPathTranslated">
            <summary>
               Gets the physical host path of the file used by of the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> containing the physical host path
               of the file used by the current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetFilePathTranslated">
            <summary>
               Gets the mapped path of the file used by of the current
               instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> containing the mapped path of the
               file used by the current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetLocalAddress">
            <summary>
               Gets the local address of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> containing the local address of
               the current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetServerName">
            <summary>
               Gets the server name of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> containing the server name of
               the current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetLocalPort">
            <summary>
               Gets the local port of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> containing the port number of the
               current instance.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetPreloadedEntityBody">
            <summary>
               Gets the preloaded entity data for the current instance.
            </summary>
            <returns>
               A <see cref="!:byte[]"/> containing the preloaded entity
               data contained from the request.
            </returns>
            <remarks>
               If the request was receiving data before being processed,
               entity (form) data may have been accumulated. This method
               allows that data to be read directly.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetQueryStringRawBytes">
            <summary>
               Gets the bytes representing the query string of the
               current instance.
            </summary>
            <returns>
               A <see cref="!:byte[]"/> containing the bytes representing
               the query string.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.DoMapPathEvent(System.String)">
            <summary>
               Evokes the registered <see cref="T:Mono.WebServer.MapPathEventHandler"/>
               delegates one by one until the path is mapped.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> containing the virutal path of
               the request.
            </param>
            <returns>
               A <see cref="T:System.String"/> containing the mapped physical
               path of the request, or <see langword="null"/> if the
               path was not successfully mapped.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.MapPath(System.String)">
            <summary>
               Maps the virtual path of the request to a physical path.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> containing the virutal path of
               the request.
            </param>
            <returns>
               A <see cref="T:System.String"/> containing the mapped physical
               path of the request.
            </returns>
            <remarks>
               By default, the path will be mapped using the virtual and
               physical paths of the <see cref="T:Mono.WebServer.IApplicationHost"/>
               used to create the current instance. To override this,
               register a <see cref="T:Mono.WebServer.MapPathEventHandler"/> with <see cref="E:Mono.WebServer.MonoWorkerRequest.MapPathEvent"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetRequestData">
            <summary>
               Gets the request data.
            </summary>
            <returns>
               A <see cref="T:System.Boolean"/> indicating whether or not the data
               was gotten successfully.
            </returns>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.ReadRequestData">
            <summary>
               Reads the request data.
            </summary>
            <returns>
               A <see cref="T:System.Boolean"/> indicating whether or not the data
               was read successfully.
            </returns>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.defaultExceptionHtml">
            <summary>
               Contains the default exception HTML to be used if all
               other renderers fail.
            </summary>
            <remarks>
               This string is to be passed into <see cref="M:System.String.Format(System.String,System.Object)"/> where the
               exception is the second argument.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.ProcessRequest">
            <summary>
               Processes the request contained in the current instance.
            </summary>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.EndOfRequest">
            <summary>
               Does final processing after the request has been
               completed.
            </summary>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SetEndOfSendNotification(System.Web.HttpWorkerRequest.EndOfSendNotification,System.Object)">
            <summary>
               Sets the end-of-status notification callback and its
               complementary data.
            </summary>
            <param name="callback">
               A <see cref="!:EndOfSendNotification"/> delegate to be
               called when the current instance is finished sending data
               to the response.
            </param>
            <param name="extraData">
               A <see cref="T:System.Object"/> containing data to be sent to
               <paramref name="callback"/> when it is called.
            </param>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SendCalculatedContentLength(System.Int32)">
            <summary>
               Sends the calculated content length of the response.
            </summary>
            <param name="contentLength">
               A <see cref="T:System.Int32"/> containing the content length of the
               response.
            </param>
            <remarks>
               Including the content length in the header allows the
               client to show download progress.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
            <summary>
               Sends a known response header with a specified index and
               value.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32"/> containing a known response header
               index.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> containing the response value.
            </param>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SendFromStream(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
               Sends a response directly from stream at a specified
               offset with a specified length.
            </summary>
            <param name="stream">
               A <see cref="T:System.IO.Stream"/> object to send from.
            </param>
            <param name="offset">
               A <see cref="T:System.Int64"/> specifying at what seek position to
               start sending from.
            </param>
            <param name="length">
               A <see cref="T:System.Int64"/> specifying the number of bytes to
               send.
            </param>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
            <summary>
               Sends a response directly from file at a specified offset
               with a specified length.
            </summary>
            <param name="filename">
               A <see cref="T:System.String"/> containing the name of the file
               to send from.
            </param>
            <param name="offset">
               A <see cref="T:System.Int64"/> specifying at what seek position to
               start sending from.
            </param>
            <param name="length">
               A <see cref="T:System.Int64"/> specifying the number of bytes to
               send.
            </param>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
            <summary>
               Sends a response directly from a raw file descriptor at a
               specified offset with a specified length.
            </summary>
            <param name="handle">
               A <see cref="T:System.IntPtr"/> pointing to a raw file
               descriptor.
            </param>
            <param name="offset">
               A <see cref="T:System.Int64"/> specifying at what seek position to
               start sending from.
            </param>
            <param name="length">
               A <see cref="T:System.Int64"/> specifying the number of bytes to
               send.
            </param>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.cert_cookie">
            <summary>
               Contains the certificate cookie as used by <see cref="M:Mono.WebServer.MonoWorkerRequest.GetServerVariable(System.String)"/>.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.cert_issuer">
            <summary>
               Contains the certificate issuer as used by <see cref="M:Mono.WebServer.MonoWorkerRequest.GetServerVariable(System.String)"/>.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.cert_serial">
            <summary>
               Contains the certificate serial as used by <see cref="M:Mono.WebServer.MonoWorkerRequest.GetServerVariable(System.String)"/>.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MonoWorkerRequest.cert_subject">
            <summary>
               Contains the certificate subject as used by <see cref="M:Mono.WebServer.MonoWorkerRequest.GetServerVariable(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetServerVariable(System.String)">
            <summary>
               Gets a server variable with a specified name from the
               current instance.
            </summary>
            <param name="name">
               A <see cref="T:System.String"/> containing the name of the
               server variable to get.
            </param>
            <returns>
               A <see cref="T:System.String"/> containing the value of the
               server variable, or <see cref="F:System.String.Empty"/> if the
               variable was not found.
            </returns>
            <remarks>
               Server variables are like environment variables and
               contain name/value pairs of information.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.AddServerVariable(System.String,System.String)">
            <summary>
               Adds a server variable to the current instance.
            </summary>
            <param name="name">
               A <see cref="T:System.String"/> containing the name of the
               server variable to add.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> containing the value of the
               server variable to add.
            </param>
            <remarks>
               Server variables are like environment variables and
               contain name/value pairs of information.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.SetClientCertificate(System.Byte[])">
            <summary>
               Sets the raw client certificate used by the current
               instance.
            </summary>
            <param name="rawcert">
               A <see cref="!:byte[]"/> containing the raw client
               certificate used by the current instance.
            </param>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificate">
            <summary>
               Gets the raw client certificate used by the current
               instance.
            </summary>
            <returns>
               A <see cref="!:byte[]"/> containing the raw client
               certificate used by the current instance.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificateBinaryIssuer">
            <summary>
               Gets the binary issuer of the client certificate used by
               the current instance.
            </summary>
            <returns>
               A <see cref="!:byte[]"/> containing the binary issuer of
               the client certificate used by the current instance.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificateEncoding">
            <summary>
               Gets the encoding of the client certificate used by the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> indicating the encoding of the
               client certificate used by the current instance.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificatePublicKey">
            <summary>
               Gets the public key of the client certificate used by the
               current instance.
            </summary>
            <returns>
               A <see cref="!:byte[]"/> containing the public key
               the client certificate used by the current instance.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificateValidFrom">
            <summary>
               Gets the date and time the client certificate used by the
               current instance is valid from.
            </summary>
            <returns>
               A <see cref="T:System.DateTime"/> containing the date and time
               the client certificate used by the current instance is
               valid from.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.MonoWorkerRequest.GetClientCertificateValidUntil">
            <summary>
               Gets the date and time the client certificate used by the
               current instance is valid until.
            </summary>
            <returns>
               A <see cref="T:System.DateTime"/> containing the date and time
               the client certificate used by the current instance is
               valid until.
            </returns>
            <remarks>
               This method should only be called if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="E:Mono.WebServer.MonoWorkerRequest.MapPathEvent">
            <summary>
               This event is called by <see cref="M:Mono.WebServer.MonoWorkerRequest.MapPath(System.String)"/> and is
               used for custom path mapping.
            </summary>
            <remarks>
               <para>See <see cref="T:Mono.WebServer.MapPathEventHandler"/> for an
               example.</para>
               <note type="caution">
                   <para>Handlers added to are not guaranteed to be
                   called. The class will evoke the handlers in order
                   until the path is mapped, and then stop.</para>
               </note>
            </remarks>
        </member>
        <member name="E:Mono.WebServer.MonoWorkerRequest.EndOfRequestEvent">
            <summary>
               This event is called after the request has been completed
               and should be used by request brokers to perform final
               operations.
            </summary>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.HostPath">
            <summary>
               Gets the physical path of the application host of the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the physical path of
               the application host of the current instance.
            </value>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.HostVPath">
            <summary>
               Gets the virtual path of the application host of the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the virtual path of
               the application host of the current instance.
            </value>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.Encoding">
            <summary>
               Gets the content encoding used by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the content encoding
               used by the current instance.
            </value>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.HeaderEncoding">
            <summary>
               Gets the header encoding used by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the header encoding
               used by the current instance.
            </value>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.RequestId">
            <summary>
               Gets the request ID as used by the <see cref="T:Mono.WebServer.IApplicationHost"/>'s request broker.
            </summary>
            <value>
               A <see cref="T:System.Int32"/> containing the request ID.
            </value>
        </member>
        <member name="P:Mono.WebServer.MonoWorkerRequest.ClientCertificate">
            <summary>
               Gets the X509 client certificate used by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object containing the
               client certificate used by the current instance.
            </value>
            <remarks>
               This property should only be used if <see cref="!:IsSecure"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Mono.WebServer.WebSource">
            <summary>
               This abstract class produces the implementation specific
               components needed to run the <see cref="T:Mono.WebServer.ApplicationServer"/>.
            </summary>
        </member>
        <member name="M:Mono.WebServer.WebSource.CreateSocket">
            <summary>
               Creates a bound socket to be used for listening for new
               connections.
            </summary>
            <returns>
               A <see cref="T:System.Net.Sockets.Socket"/> object containing a socket to be
               used for listening for new connections.
            </returns>
        </member>
        <member name="M:Mono.WebServer.WebSource.CreateWorker(System.Net.Sockets.Socket,Mono.WebServer.ApplicationServer)">
            <summary>
               Creates a worker to use to run a request on a client
               socket.
            </summary>
            <param name="client">
               A <see cref="T:System.Net.Sockets.Socket"/> object containing a client
               socket accepted from the listen socket created by <see cref="M:Mono.WebServer.WebSource.CreateSocket"/>.
            </param>
            <param name="server">
               A <see cref="T:Mono.WebServer.ApplicationServer"/> object containing the
               server that created the current instance.
            </param>
            <returns>
               A <see cref="T:Mono.WebServer.Worker"/> to use to run a request.
            </returns>
        </member>
        <member name="M:Mono.WebServer.WebSource.GetApplicationHostType">
            <summary>
               Gets the type of application host to use with the current
               instance.
            </summary>
            <returns>
               A <see cref="T:System.Type"/> containing the type of application
               host to use with the current instance.
            </returns>
            <remarks>
               <para>The type of class returned must implement <see cref="T:Mono.WebServer.IApplicationHost"/>.</para>
               <para>This type is used internally to create a <see cref="T:Mono.WebServer.IApplicationHost"/> in a specified <see cref="T:System.AppDomain"/> via <see cref="!:Web.Hosting.ApplicationHost.CreateApplicationHost"/>.</para>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.WebSource.CreateRequestBroker">
            <summary>
               Creates a request broker for managing requests.
            </summary>
            <returns>
               A <see cref="T:Mono.WebServer.IRequestBroker"/> containing a request
               broker for managing requests.
            </returns>
            <remarks>
               Each application host receives its own request broker.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.WebSource.Dispose">
            <summary>
               Disposes of the the resources contained in the current
               instance.
            </summary>
            <remarks>
               Implemented for <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.WebSource.Dispose(System.Boolean)">
            <summary>
               Disposes of the the resources contained in the current
               instance.
            </summary>
            <param name="disposing">
               A <see cref="T:System.Boolean"/> indicating whether or not the
               current instance is disposing. If <see langword="false"/>, the method was called by the class and not the
               garbage collector.
            </param>
        </member>
        <member name="T:Mono.WebServer.BaseRequestBroker">
            <summary>
               This class provides a request broker covering the base
               functionality.
            </summary>
            <remarks>
               A request broker serves as an intermediary between <see cref="T:Mono.WebServer.Worker"/> and <see cref="T:Mono.WebServer.MonoWorkerRequest"/> to handle
               the interaction between app-domains.
            </remarks>
        </member>
        <member name="T:Mono.WebServer.IRequestBroker">
            <summary>
               This interface is used for classes that manage requests.
            </summary>
            <remarks>
               A request broker serves as an intermediary between <see cref="T:Mono.WebServer.Worker"/> and <see cref="T:Mono.WebServer.MonoWorkerRequest"/> to handle
               the interaction between app-domains. In addition it should
               inherit <see cref="T:System.MarshalByRefObject"/>.
            </remarks>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.INITIAL_REQUESTS">
            <summary>
               Contains the initial request capacity of a <see cref="T:Mono.WebServer.BaseRequestBroker"/>.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.reqlock">
            <summary>
               Contains a lock to use when accessing and modifying the
                request allocation tables.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.request_ids">
            <summary>
               Contains the request ID's.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.requests">
            <summary>
               Contains the registered workers.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.buffers">
            <summary>
               Contains buffers for the requests to use.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.requests_count">
            <summary>
               Contains the number of active requests.
            </summary>
        </member>
        <member name="F:Mono.WebServer.BaseRequestBroker.requests_served">
            <summary>
               Contains the total number of requests served so far.
               May freely wrap around.
            </summary>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.GrowRequests(System.Int32@,System.Int32@)">
            <summary>
               Grows the size of the request allocation tables by 33%.
            </summary>
            <param name="curlen">
               A <see cref="T:System.Int32"/> containing the current length of the
               allocation tables.
            </param>
            <param name="newid">
               A <see cref="T:System.Int32"/> containing the ID to use for a new
               request.
            </param>
            <remarks>
               <note type="caution"><para>
                   This *MUST* be called with the reqlock held!
               </para></note>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.GetNextRequestId">
            <summary>
               Gets the next available request ID, expanding the array
               of possible ID's if necessary.
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </returns>
            <remarks>
               <note type="caution"><para>
                   This *MUST* be called with the reqlock held!
               </para></note>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.RegisterRequest(Mono.WebServer.Worker)">
            <summary>
               Registers a request with the current instance.
            </summary>
            <param name="worker">
               A <see cref="T:Mono.WebServer.Worker"/> object containing the request to
               register.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </returns>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.UnregisterRequest(System.Int32)">
            <summary>
               Unregisters a request with the current instance.
            </summary>
            <param name="id">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <remarks>
               Before unregistering the request and freeing all of its data, the method
               invokes the <see cref="E:Mono.WebServer.BaseRequestBroker.UnregisterRequestEvent"/> handlers (if any).
               <note type="caution"><para>
                  After the event handlers return the request ID is invalid and
                  *MUST NOT* be used for any purpose other than referencing the event
                  receiver's internal housekeeping records for that particular ID.
               </para></note>
               <note type="caution"><para>
                  Make the event handler code as fast as possible, as until it returns no other
                  request shall be allocated another id.
               </para></note>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.DoUnregisterRequest(System.Int32)">
            <summary>
               Invokes registered handlers of <see cref="E:Mono.WebServer.BaseRequestBroker.UnregisterRequestEvent"/>. Each handler is
               passed an arguments object which contains the ID of a request that is about to be unregistered.
            </summary>
            <param name="id">ID of a request that is about to be unregistered</param>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.ValidRequest(System.Int32)">
            <summary>
               Gets whether or not the request with a specified ID is
               valid.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <returns>
               A <see cref="T:System.Boolean"/> indicating whether or not the
               request is valid.
            </returns>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.Read(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
               Reads a block of request data from the request with a
               specified ID.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <param name="size">
               A <see cref="T:System.Int32"/> containing the number of bytes to
               read.
            </param>
            <param name="buffer">
               A <see cref="!:byte[]"/> containing the read data.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> containing the number of bytes that
               were actually read.
            </returns>
            <remarks>
               <para>See <see cref="M:Mono.WebServer.Worker.Read(System.Byte[],System.Int32,System.Int32)"/>.</para>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.GetWorker(System.Int32)">
            <summary>
               Gets the request with a specified ID.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <returns>
               A <see cref="T:Mono.WebServer.Worker"/> object containing the request
               with the specified ID, or <see langword="null"/> if the
               request does not exist.
            </returns>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.Write(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
               Writes a block of response data to the request with a
               specified ID.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <param name="buffer">
               A <see cref="!:byte[]"/> containing data to write.
            </param>
            <param name="position">
               A <see cref="T:System.Int32"/> containing the position in <paramref name="buffer"/> it which to start writing from.
            </param>
            <param name="size">
               A <see cref="T:System.Int32"/> containing the number of bytes to
               write.
            </param>
            <remarks>
               <para>See <see cref="M:Mono.WebServer.Worker.Write(System.Byte[],System.Int32,System.Int32)"/>.</para>
               <para>If the request does not exist, no action is
               taken.</para>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.Close(System.Int32)">
            <summary>
               Closes the request with a specified ID.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <remarks>
               <para>See <see cref="M:Mono.WebServer.Worker.Close"/>.</para>
               <para>If the request does not exist, no action is
               taken.</para>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.Flush(System.Int32)">
            <summary>
               Flushes the request with a specified ID.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <remarks>
               <para>See <see cref="M:Mono.WebServer.Worker.Flush"/>.</para>
               <para>If the request does not exist, no action is
               taken.</para>
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.IsConnected(System.Int32)">
            <summary>
               Gets whether or not the request with a specified ID is
               connected.
            </summary>
            <param name="requestId">
               A <see cref="T:System.Int32"/> containing the ID of the request.
            </param>
            <returns>
               A <see cref="T:System.Boolean"/> indicating whether or not the
               request is connected. If the request doesn't exist, <see langref="false"/> will be returned.
            </returns>
            <remarks>
               See <see cref="M:Mono.WebServer.Worker.IsConnected"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.BaseRequestBroker.InitializeLifetimeService">
            <summary>
               Obtains a lifetime service object for the current
               instance.
            </summary>
            <returns>
               Always <see langword="null" />.
            </returns>
        </member>
        <member name="E:Mono.WebServer.BaseRequestBroker.UnregisterRequestEvent">
            <summary>
              This event is called just before the request is unregistered by the broker.
              This gives the chance to clean up any private data associated with the event.
            </summary>
            <remarks>
              The event handlers are invoked with a lock held on the issuing object, so that the event receiver
              can do the cleanup without the chance of another thread stepping in at the wrong time.
            </remarks>
        </member>
        <member name="T:Mono.WebServer.BaseRequestBroker.UnregisterRequestEventHandler">
            <summary>
              This delegate is used to handle <see cref="E:Mono.WebServer.BaseRequestBroker.UnregisterRequestEvent"/>
            </summary>
            <param name="sender">Origin of the event</param>
            <param name="args">An <see cref="T:Mono.WebServer.UnregisterRequestEventArgs"/> object with the event-specific arguments</param>
        </member>
        <member name="T:Mono.WebServer.IApplicationHost">
            <summary>
               This interface is used for classes that serve as application
               hosts.
            </summary>
            <remarks>
               An application, as created through a <see cref="T:Mono.WebServer.ApplicationServer"/>, exists in its own <see cref="T:System.AppDomain"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.IApplicationHost.Unload">
            <summary>
               Unloads the application host.
            </summary>
        </member>
        <member name="P:Mono.WebServer.IApplicationHost.Path">
            <summary>
               Gets the physical path of the hosted application.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the physical path of
               the hosted application.
            </value>
        </member>
        <member name="P:Mono.WebServer.IApplicationHost.VPath">
            <summary>
               Gets the virtual path of the hosted application.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the virtual path of
               the hosted application.
            </value>
        </member>
        <member name="P:Mono.WebServer.IApplicationHost.Domain">
            <summary>
               Gets the app-domain the application host exists in.
            </summary>
            <value>
               A <see cref="T:System.AppDomain"/> object containing the
               app-domain the application host exists in.
            </value>
        </member>
        <member name="P:Mono.WebServer.IApplicationHost.RequestBroker">
            <summary>
               Gets and sets the request broker that manages the hosted
               requests.
            </summary>
            <value>
               A <see cref="T:Mono.WebServer.IRequestBroker"/> object containing the
               request broker that manages the hosted requests.
            </value>
        </member>
        <member name="P:Mono.WebServer.IApplicationHost.Server">
            <summary>
               Gets the application server that created the application
               host.
            </summary>
            <value>
               A <see cref="T:Mono.WebServer.ApplicationServer"/> object containing the
               application server that created the application host.
            </value>
        </member>
        <member name="M:Mono.WebServer.BaseApplicationHost.#ctor">
            <summary>
              Creates the <see cref="M:Mono.WebServer.BaseApplicationHost.EndOfRequest(Mono.WebServer.MonoWorkerRequest)"/> event handler and registers
              a handler (<see cref="M:Mono.WebServer.BaseApplicationHost.OnUnload(System.Object,System.EventArgs)"/>) with the <see cref="E:System.AppDomain.DomainUnload"/> event.
            </summary>
        </member>
        <member name="M:Mono.WebServer.BaseApplicationHost.Unload">
            <summary>
              Unloads the current application domain by calling <see cref="M:System.Web.HttpRuntime.UnloadAppDomain"/>
            </summary>
        </member>
        <member name="M:Mono.WebServer.BaseApplicationHost.OnUnload(System.Object,System.EventArgs)">
            <summary>
              Event handler for the <see cref="E:System.AppDomain.DomainUnload"/>
              event. Calls <see cref="M:Mono.WebServer.ApplicationServer.DestroyHost(Mono.WebServer.IApplicationHost)"/>
              to shut the host down.
            </summary>
        </member>
        <member name="M:Mono.WebServer.BaseApplicationHost.ProcessRequest(Mono.WebServer.MonoWorkerRequest)">
            <summary>
              Process a request.
            </summary>
            <param name="mwr">A worker object to actually process the request</param>
            <remarks>
              If the mwr parameter is null or no request data can be read, the request will be ended
              immediately. Otherwise, registers an event handler for the worker's <see cref="M:Mono.WebServer.MonoWorkerRequest.EndOfRequest"/> event and calls the worker's <see cref="M:Mono.WebServer.MonoWorkerRequest.ProcessRequest"/> method to actually process the request. If an unhandled exception
              occurs during that phase, it is printed to the console and <see cref="M:Mono.WebServer.BaseApplicationHost.EndOfRequest(Mono.WebServer.MonoWorkerRequest)"/> is called
              immediately.
            </remarks>
        </member>
        <member name="P:Mono.WebServer.BaseApplicationHost.Server">
            <summary>
              Reference to the associated <see cref="T:Mono.WebServer.ApplicationServer"/>
            </summary>
        </member>
        <member name="P:Mono.WebServer.BaseApplicationHost.Path">
            <summary>
              Physical path to the application root directory.
            </summary>
        </member>
        <member name="P:Mono.WebServer.BaseApplicationHost.VPath">
            <summary>
              Virtual path to the application root.
            </summary>
        </member>
        <member name="P:Mono.WebServer.BaseApplicationHost.Domain">
            <summary>
              Returns the current application domain.
            </summary>
        </member>
        <member name="P:Mono.WebServer.BaseApplicationHost.RequestBroker">
            <summary>
              Reference to the associated request broker
            </summary>
        </member>
        <member name="T:Mono.WebServer.UnregisterRequestEventArgs">
            <summary>
              This class extends <see cref="T:System.EventArgs"/> to provide arguments for
              <see cref="T:Mono.WebServer.BaseRequestBroker.UnregisterRequestEventHandler"/>.
            </summary>
        </member>
        <member name="M:Mono.WebServer.UnregisterRequestEventArgs.#ctor(System.Int32)">
            <summary>
              Constructs an instance of the class for the specified request ID
            </summary>
            <param name="requestId">Request of the ID that has just been unregistered</param>
        </member>
        <member name="P:Mono.WebServer.UnregisterRequestEventArgs.RequestId">
            <summary>
              Contains the id of a request that is about to be unregistered.
            </summary>
        </member>
        <member name="T:Mono.WebServer.Worker">
            <summary>
               This abstract is used for running implementation specific
               requests.
            </summary>
        </member>
        <member name="M:Mono.WebServer.Worker.SetReuseCount(System.Int32)">
            <summary>
               Sets the number of times the current instance has been
               reused by the server.
            </summary>
            <param name="reuses">
               A <see cref="T:System.Int32"/> containing the number of times the
               current instance has been reused.
            </param>
        </member>
        <member name="M:Mono.WebServer.Worker.GetRemainingReuses">
            <summary>
               Gets the number of times the current instance can be
               reused by the server.
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> containing the number of times the
               current instance can be reused by the server.
            </returns>
            <remarks>
               If less than or equal to zero, the current instance
               should not be reused and the resources associated with it
               should be freed.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.Worker.Run(System.Object)">
            <summary>
               Runs the current instance.
            </summary>
            <param name="state">
               A <see cref="T:System.Object"/> containing state information from
               the worker that evoked the method. Always <see langref="null"/>.
            </param>
            <remarks>
               If the entire process of running the request is done in
               the method, <see cref="P:Mono.WebServer.Worker.IsAsync"/> should be set to <see langword="false"/>. If, however, the method evokes an
               asynchronous or threaded call, like <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/>, <see cref="P:Mono.WebServer.Worker.IsAsync"/>
               should be set to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Mono.WebServer.Worker.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Reads a block of request data from the current
               implementation.
            </summary>
            <param name="buffer">
               A <see cref="!:byte[]"/> to be populated with the read
               data.
            </param>
            <param name="position">
               A <see cref="T:System.Int32"/> containing the position in <paramref name="buffer"/> it which to start storing the read data.
            </param>
            <param name="size">
               A <see cref="T:System.Int32"/> containing the number of bytes to
               read.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> containing the number of bytes that
               were actually read.
            </returns>
        </member>
        <member name="M:Mono.WebServer.Worker.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Writes a block of response data from the current
               implementation.
            </summary>
            <param name="buffer">
               A <see cref="!:byte[]"/> containing data to write.
            </param>
            <param name="position">
               A <see cref="T:System.Int32"/> containing the position in <paramref name="buffer"/> it which to start writing from.
            </param>
            <param name="size">
               A <see cref="T:System.Int32"/> containing the number of bytes to
               write.
            </param>
        </member>
        <member name="M:Mono.WebServer.Worker.Close">
            <summary>
               Closes the current instance and releases the resources
               associated with the data transfer.
            </summary>
        </member>
        <member name="M:Mono.WebServer.Worker.Flush">
            <summary>
               Causes all response data to be written.
            </summary>
        </member>
        <member name="M:Mono.WebServer.Worker.IsConnected">
            <summary>
               Gets whether or not the current instance is connected.
            </summary>
            <returns>
               A <see cref="T:System.Boolean"/> indicating whether or not the
               current instance is connected.
            </returns>
        </member>
        <member name="P:Mono.WebServer.Worker.IsAsync">
            <summary>
               Gets whether or not the current instance is asynchronous.
            </summary>
            <value>
               A <see cref="T:System.Boolean"/> indicating whether or not the
               current instance is asynchronous.
            </value>
            <remarks>
               This property indicates whether or not a call to <see cref="M:Mono.WebServer.Worker.Run(System.Object)"/> will spawn its own worker thread. <see langword="false"/> indicates that the entire process
               will be completed in a single thread during the duration
               of <see cref="M:Mono.WebServer.Worker.Run(System.Object)"/>.
            </remarks>
        </member>
        <member name="T:Mono.WebServer.MapPathEventArgs">
            <summary>
               This class extends <see cref="T:System.EventArgs"/> to provide arguments
               for <see cref="T:Mono.WebServer.MapPathEventHandler"/>.
            </summary>
            <remarks>
               When <see cref="E:Mono.WebServer.MonoWorkerRequest.MapPathEvent"/> is called, the
               handler has an option of setting <see cref="P:Mono.WebServer.MapPathEventArgs.MappedPath"/> to a mapped path.
            </remarks>
        </member>
        <member name="F:Mono.WebServer.MapPathEventArgs.path">
            <summary>
               Contains the virtual path, as used in the request.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MapPathEventArgs.mapped">
            <summary>
               Contains the physical "mapped" path.
            </summary>
        </member>
        <member name="F:Mono.WebServer.MapPathEventArgs.isMapped">
            <summary>
               Indicates whether or not the path has been mapped.
            </summary>
        </member>
        <member name="M:Mono.WebServer.MapPathEventArgs.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see cref="T:Mono.WebServer.MapPathEventArgs"/> for a specified virtual path.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> containing the virtual path, as
               contained in the request.
            </param>
        </member>
        <member name="P:Mono.WebServer.MapPathEventArgs.Path">
            <summary>
               Gets the virtual path of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the virtual path of
               the current instance.
            </value>
        </member>
        <member name="P:Mono.WebServer.MapPathEventArgs.IsMapped">
            <summary>
               Gets whether or not the path is mapped.
            </summary>
            <value>
               A <see cref="T:System.Boolean"/> indicating whether or not the path
               has been mapped.
            </value>
        </member>
        <member name="P:Mono.WebServer.MapPathEventArgs.MappedPath">
            <summary>
               Gets and sets the physical "mapped" path for the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String"/> containing the physical "mapped"
               path of the current instance.
            </value>
        </member>
        <member name="T:Mono.WebServer.MapPathEventHandler">
            <summary>
               This delegate is used to handle <see cref="E:Mono.WebServer.MonoWorkerRequest.MapPathEvent"/> and performs custom path
               mapping.
            </summary>
            <param name="sender">
               The <see cref="T:System.Object"/> that sent the event.
            </param>
            <param name="args">
               A <see cref="T:Mono.WebServer.MapPathEventArgs"/> object containing the arguments
               for the event.
            </param>
            <remarks>
               This method is used for custom path mapping within <see cref="M:Mono.WebServer.MonoWorkerRequest.MapPath(System.String)"/>.
            </remarks>
            <example>
               An example <see cref="T:Mono.WebServer.MapPathEventHandler"/>
               <code language="C#">
                   void OnMapPathEvent (object sender, MapPathEventArgs args)
                   {
                       if (args.Path.StartsWith ("/blog"))
                           args.MappedPath = @"C:\Documents and Settings\John Doe\My Documents\Visual Studio 2005\WebSites\blog";
                   }
               </code>
            </example>
        </member>
        <member name="T:Mono.WebServer.EndOfRequestHandler">
            <summary>
               This delegate is used to handle <see cref="E:Mono.WebServer.MonoWorkerRequest.EndOfRequestEvent"/>.
            </summary>
            <param name="request">
               The <see cref="T:Mono.WebServer.MonoWorkerRequest"/> that sent the event.
            </param>
        </member>
    </members>
</doc>

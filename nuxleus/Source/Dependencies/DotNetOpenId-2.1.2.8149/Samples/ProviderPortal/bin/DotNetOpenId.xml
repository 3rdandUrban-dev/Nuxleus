<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenId</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenId.Association">
            <summary>
            Stores a secret used in signing and verifying messages.
            </summary>
            <remarks>
            OpenID associations may be shared between Provider and Relying Party (smart
            associations), or be a way for a Provider to recall its own secret for later
            (dumb associations).
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Association.#ctor(System.String,System.Byte[],System.TimeSpan,System.DateTime)">
            <summary>
            Instantiates an <see cref="T:DotNetOpenId.Association"/> object.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.Deserialize(System.String,System.DateTime,System.Byte[])">
            <summary>
            Re-instantiates an <see cref="T:DotNetOpenId.Association"/> previously persisted in a database or some
            other shared store.
            </summary>
            <param name="handle">
            The <see cref="P:DotNetOpenId.Association.Handle"/> property of the previous <see cref="T:DotNetOpenId.Association"/> instance.
            </param>
            <param name="expires">
            The value of the <see cref="P:DotNetOpenId.Association.Expires"/> property of the previous <see cref="T:DotNetOpenId.Association"/> instance.
            </param>
            <param name="privateData">
            The byte array returned by a call to <see cref="M:DotNetOpenId.Association.SerializePrivateData"/> on the previous
            <see cref="T:DotNetOpenId.Association"/> instance.
            </param>
            <returns>
            The newly dehydrated <see cref="T:DotNetOpenId.Association"/>, which can be returned
            from a custom association store's 
            <see cref="M:DotNetOpenId.IAssociationStore`1.GetAssociation(`0)"/> method.
            </returns>
        </member>
        <member name="F:DotNetOpenId.Association.UnixEpoch">
            <summary>
            Represents January 1, 1970 12 AM.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.SerializePrivateData">
            <summary>
            Returns private data required to persist this <see cref="T:DotNetOpenId.Association"/> in
            permanent storage (a shared database for example) for deserialization later.
            </summary>
            <returns>
            An opaque byte array that must be stored and returned exactly as it is provided here.
            The byte array may vary in length depending on the specific type of <see cref="T:DotNetOpenId.Association"/>,
            but in current versions are no larger than 256 bytes.
            </returns>
            <remarks>
            Values of public properties on the base class <see cref="T:DotNetOpenId.Association"/> are not included
            in this byte array, as they are useful for fast database lookup and are persisted separately.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Association.GetAssociationType(DotNetOpenId.Protocol)">
            <summary>
            The string to pass as the assoc_type value in the OpenID protocol.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.Sign(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Signs certain given key/value pairs in a supplied dictionary.
            </summary>
            <param name="data">
            A dictionary with key/value pairs, at least some of which you want to include in the signature.
            </param>
            <param name="keysToSign">
            A list of the keys in the supplied dictionary you wish to sign.
            </param>
            <param name="keyLookupPrefix">
            An optional prefix to use in front of a given name in <paramref name="fields"/>
            when looking up the value from <paramref name="data"/>.
            </param>
            <returns>The signature of the key-value pairs.</returns>
        </member>
        <member name="M:DotNetOpenId.Association.Sign(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Generates a signature from a given dictionary.
            </summary>
            <param name="data">The dictionary.  This dictionary will not be changed.</param>
            <param name="keyOrder">The order that the data in the dictionary must be encoded in for the signature to be valid.</param>
            <returns>The calculated signature of the data in the dictionary.</returns>
        </member>
        <member name="M:DotNetOpenId.Association.CreateHasher">
            <summary>
            Returns the specific hash algorithm used for message signing.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.cutToSecond(System.DateTime)">
            <summary>
            Rounds the given <see cref="T:System.DateTime"/> downward to the whole second.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.Equals(System.Object)">
            <summary>
            Tests equality of two <see cref="T:DotNetOpenId.Association"/> objects.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Association.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.Handle">
            <summary>
            A unique handle by which this <see cref="T:DotNetOpenId.Association"/> may be stored or retrieved.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.Issued">
            <summary>
            Gets the time that this <see cref="T:DotNetOpenId.Association"/> was first created
            and the <see cref="P:DotNetOpenId.Association.SecretKey"/> issued.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.TotalLifeLength">
            <summary>
            The lifetime the OpenID provider permits this <see cref="T:DotNetOpenId.Association"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.SecretKey">
            <summary>
            The shared secret key between the consumer and provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.Expires">
            <summary>
            Gets the time when this <see cref="T:DotNetOpenId.Association"/> will expire.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.IsExpired">
            <summary>
            Gets whether this <see cref="T:DotNetOpenId.Association"/> has already expired.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.timeTillExpiration">
            <summary>
            Gets the TimeSpan till this association expires.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Association.SecondsTillExpiration">
            <summary>
            The number of seconds until this <see cref="T:DotNetOpenId.Association"/> expires.
            Never negative (counter runs to zero).
            </summary>
        </member>
        <member name="T:DotNetOpenId.IAssociationStore`1">
            <summary>
            Stores <see cref="T:DotNetOpenId.Association"/>s for lookup by their handle, keeping
            associations separated by a given distinguishing factor (like which server the
            association is with).
            </summary>
            <typeparam name="TKey">
            <see cref="T:System.Uri"/> for consumers (to distinguish associations across servers) or
            <see cref="T:DotNetOpenId.AssociationRelyingPartyType"/> for providers (to distingish dumb and smart client associaitons).
            </typeparam>
        </member>
        <member name="M:DotNetOpenId.IAssociationStore`1.StoreAssociation(`0,DotNetOpenId.Association)">
            <summary>
            Saves an <see cref="T:DotNetOpenId.Association"/> for later recall.
            </summary>
        </member>
        <member name="M:DotNetOpenId.IAssociationStore`1.GetAssociation(`0)">
            <summary>
            Gets the best association (the one with the longest remaining life) for a given key.
            Null if no unexpired <see cref="T:DotNetOpenId.Association"/>s exist for the given key.
            </summary>
        </member>
        <member name="M:DotNetOpenId.IAssociationStore`1.GetAssociation(`0,System.String)">
            <summary>
            Gets the association for a given key and handle.
            Null if no unexpired <see cref="T:DotNetOpenId.Association"/>s exist for the given key and handle.
            </summary>
        </member>
        <member name="M:DotNetOpenId.IAssociationStore`1.RemoveAssociation(`0,System.String)">
            <summary>Removes a specified handle that may exist in the store.</summary>
            <returns>True if the association existed in this store previous to this call.</returns>
            <remarks>
            No exception should be thrown if the association does not exist in the store
            before this call.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.IAssociationStore`1.ClearExpiredAssociations">
            <summary>
            Clears all expired associations from the store.
            </summary>
            <remarks>
            If another algorithm is in place to periodically clear out expired associations,
            this method call may be ignored.
            This should be done frequently enough to avoid a memory leak, but sparingly enough
            to not be a performance drain.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.AssociationMemoryStore`1.ClearExpiredAssociations">
            <summary>
            Clears all expired associations from the store.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Associations">
            <summary>
            A dictionary of handle/Association pairs.
            </summary>
            <remarks>
            Each method is locked, even if it is only one line, so that they are thread safe
            against each other, particularly the ones that enumerate over the list, since they
            can break if the collection is changed by another thread during enumeration.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Associations.#ctor">
            <summary>
            Instantiates a mapping between association handles and <see cref="T:DotNetOpenId.Association"/> objects.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Associations.Set(DotNetOpenId.Association)">
            <summary>
            Stores an <see cref="T:DotNetOpenId.Association"/> in the collection.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Associations.Get(System.String)">
            <summary>
            Returns the <see cref="T:DotNetOpenId.Association"/> with the given handle.  Null if not found.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Associations.Remove(System.String)">
            <summary>
            Removes the <see cref="T:DotNetOpenId.Association"/> with the given handle.
            </summary>
            <returns>Whether an <see cref="T:DotNetOpenId.Association"/> with the given handle was in the collection for removal.</returns>
        </member>
        <member name="M:DotNetOpenId.Associations.ClearExpired">
            <summary>
            Removes all expired associations from the collection.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Associations.Best">
            <summary>
            Gets the <see cref="T:DotNetOpenId.Association"/> issued most recently.  Null if no valid associations exist.
            </summary>
        </member>
        <member name="M:DotNetOpenId.IIncomingExtensions.GetExtensionArguments(System.String)">
            <summary>
            Gets the key/value pairs of a provider's response for a given OpenID extension.
            </summary>
            <param name="extensionTypeUri">
            The Type URI of the OpenID extension whose arguments are being sought.
            </param>
            <returns>
            Returns key/value pairs for this extension.
            </returns>
        </member>
        <member name="M:DotNetOpenId.IIncomingExtensions.ContainsExtension(System.String)">
            <summary>
            Gets whether any arguments for a given extension are present.
            </summary>
        </member>
        <member name="M:DotNetOpenId.IOutgoingExtensions.AddExtensionArguments(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds query parameters for OpenID extensions to the request directed 
            at the OpenID provider.
            </summary>
        </member>
        <member name="F:DotNetOpenId.ExtensionArgumentsManager.isReadMode">
            <summary>
            Whether extensions are being read or written.
            </summary>
        </member>
        <member name="F:DotNetOpenId.ExtensionArgumentsManager.extensions">
            <summary>
            A complex dictionary where the key is the Type URI of the extension,
            and the value is another dictionary of the name/value args of the extension.
            </summary>
        </member>
        <member name="F:DotNetOpenId.ExtensionArgumentsManager.typeUriToAliasAffinity">
            <summary>
            This contains a set of aliases that we must be willing to implicitly
            match to namespaces for backward compatibility with other OpenID libraries.
            </summary>
        </member>
        <member name="M:DotNetOpenId.ExtensionArgumentsManager.GetArgumentsToSend(System.Boolean)">
            <summary>
            Gets the actual arguments to add to a querystring or other response,
            where type URI, alias, and actual key/values are all defined.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AliasManager.typeUriToAliasMap">
            <summary>
            Tracks extension Type URIs and aliases assigned to them.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AliasManager.aliasToTypeUriMap">
            <summary>
            Tracks extension aliases and Type URIs assigned to them.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AliasManager.GetAlias(System.String)">
            <summary>
            Gets an alias assigned for a given Type URI.  A new alias is assigned if necessary.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AliasManager.SetAlias(System.String,System.String)">
            <summary>
            Sets an alias and the value that will be returned by <see cref="M:DotNetOpenId.Extensions.AliasManager.ResolveAlias(System.String)"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AliasManager.ResolveAlias(System.String)">
            <summary>
            Gets the Type Uri encoded by a given alias.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.Constants">
            <summary>
            Attribute Exchange constants
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.FetchResponse">
            <summary>
            The Attribute Exchange Fetch message, response leg.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.IExtensionResponse">
            <summary>
            The contract an OpenID extension can implement for messages from provider to relying party
            to make handling extensions generally easier.  
            Extensions are not required to implement this interface, however.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.IExtension">
            <summary>
            The contract any OpenID extension for DotNetOpenId must implement.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.IExtension.TypeUri">
            <summary>
            Gets the TypeURI the extension uses in the OpenID protocol and in XRDS advertisements.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.IExtensionResponse.Serialize(DotNetOpenId.Provider.IRequest)">
            <summary>
            Returns the fields this extension should add to an authentication response.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.IExtensionResponse.Deserialize(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Reads a Provider's response for extension values.
            </summary>
            <returns>True if the extension found any of its parameters in the response.</returns>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.FetchResponse.AddAttribute(DotNetOpenId.Extensions.AttributeExchange.AttributeValues)">
            <summary>
            Used by the Provider to add attributes to the response for the relying party.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.FetchResponse.GetAttribute(System.String)">
            <summary>
            Used by the Relying Party to get the value(s) returned by the OpenID Provider 
            for a given attribute, or null if that attribute was not provided.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.FetchResponse.Attributes">
            <summary>
            Enumerates over all the attributes included by the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.FetchResponse.UpdateUrlSupported">
            <summary>
            Whether the OpenID Provider intends to honor the request for updates.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.FetchResponse.UpdateUrl">
            <summary>
            The URL the OpenID Provider will post updates to.  Must be set if the Provider
            supports and will use this feature.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest">
            <summary>
            An individual attribute to be requested of the OpenID Provider using
            the Attribute Exchange extension.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.#ctor">
            <summary>
            Instantiates a new <see cref="T:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest"/> with IsRequired = false, Count = 1.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest"/> with IsRequired = false, Count = 1.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest"/> with Count = 1.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.Respond(System.String[])">
            <summary>
            Used by a Provider to create a response to a request for an attribute's value(s)
            using a given array of strings.
            </summary>
            <returns>
            The newly created <see cref="T:DotNetOpenId.Extensions.AttributeExchange.AttributeValues"/> object that should be added to
            the <see cref="T:DotNetOpenId.Extensions.AttributeExchange.FetchResponse"/> object.
            </returns>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.TypeUri">
            <summary>
            The URI uniquely identifying the attribute being requested.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.IsRequired">
            <summary>
            Whether the relying party considers this a required field.
            Note that even if set to true, the Provider may not provide the value.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.Count">
            <summary>
            The maximum number of values for this attribute the 
            Relying Party wishes to receive from the OpenID Provider.
            A value of int.MaxValue is considered infinity.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.AttributeValues">
            <summary>
            An individual attribute's value(s) as supplied by an OpenID Provider
            in response to a prior request by an OpenID Relying Party as part of
            a fetch request, or by a relying party as part of a store request.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.AttributeValues.#ctor">
            <remarks>
            This is internal because web sites should be using the 
            <see cref="M:DotNetOpenId.Extensions.AttributeExchange.AttributeRequest.Respond(System.String[])"/> method to instantiate.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.AttributeValues.TypeUri">
            <summary>
            The URI uniquely identifying the attribute whose value is being supplied.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.AttributeValues.Values">
            <summary>
            Gets the values supplied by the Provider.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes">
            <summary>
            Attribute types defined at http://www.axschema.org/types/.
            </summary>
            <remarks>
            If you don't see what you need here, check that URL to see if any have been added.
            You can use new ones directly without adding them to this class, and can even make
            up your own if you expect the other end to understand what you make up.
            </remarks>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Person">
            <summary>
            Inherent attributes about a personality such as gender and bio.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Person.Gender">
            <summary>Gender, either "M" or "F"</summary>
            <example>"M", "F"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Person.Biography">
            <summary>Biography (text)</summary>
            <example>"I am the very model of a modern Major General."</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Preferences">
            <summary>
            Preferences such as language and timezone.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Preferences.Language">
            <summary>Preferred language, as per RFC4646</summary>
            <example>"en-US"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Preferences.TimeZone">
            <summary>Home time zone information (as specified in <a href="http://en.wikipedia.org/wiki/List_of_tz_zones_by_name">zoneinfo</a>)</summary>
            <example>"America/Pacific"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name">
            <summary>
            The names a person goes by.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.Alias">
            <summary>Subject's alias or "screen" name</summary>
            <example>"Johnny5"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.FullName">
            <summary>Full name of subject</summary>
            <example>"John Doe"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.Prefix">
            <summary>Honorific prefix for the subject's name</summary>
            <example>"Mr.", "Mrs.", "Dr."</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.First">
            <summary>First or given name of subject</summary>
            <example>"John"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.Last">
            <summary>Last name or surname of subject</summary>
            <example>"Smith"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.Middle">
            <summary>Middle name(s) of subject</summary>
            <example>"Robert"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Name.Suffix">
            <summary>Suffix of subject's name</summary>
            <example>"III", "Jr."</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Company">
            <summary>
            Business affiliation.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Company.CompanyName">
            <summary>Company name (employer)</summary>
            <example>"Springfield Power"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Company.JobTitle">
            <summary>Employee title</summary>
            <example>"Engineer"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.BirthDate">
            <summary>
            Information about a person's birthdate.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.BirthDate.WholeBirthDate">
            <summary>Date of birth.</summary>
            <example>"1979-01-01"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.BirthDate.Year">
            <summary>Year of birth (four digits)</summary>
            <example>"1979"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.BirthDate.Month">
            <summary>Month of birth (1-12)</summary>
            <example>"05"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.BirthDate.DayOfMonth">
            <summary>Day of birth</summary>
            <example>"31"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact">
            <summary>
            Various ways to contact a person.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Email">
            <summary>Internet SMTP email address as per RFC2822</summary>
            <example>"jsmith@isp.example.com"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone">
            <summary>
            Various types of phone numbers.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone.Preferred">
            <summary>Main phone number (preferred)</summary>
            <example>+1-800-555-1234</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone.Home">
            <summary>Home phone number</summary>
            <example>+1-800-555-1234</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone.Work">
            <summary>Business phone number</summary>
            <example>+1-800-555-1234</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone.Mobile">
            <summary>Cellular (or mobile) phone number</summary>
            <example>+1-800-555-1234</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Phone.Fax">
            <summary>Fax number</summary>
            <example>+1-800-555-1234</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress">
            <summary>
            The many fields that make up an address.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.StreetAddressLine1">
            <summary>Home postal address: street number, name and apartment number</summary>
            <example>"#42 135 East 1st Street"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.StreetAddressLine2">
            <summary>"#42 135 East 1st Street"</summary>
            <example>"Box 67"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.City">
            <summary>Home city name</summary>
            <example>"Vancouver"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.State">
            <summary>Home state or province name</summary>
            <example>"BC"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.Country">
            <summary>Home country code in ISO.3166.1988 (alpha 2) format</summary>
            <example>"CA"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.HomeAddress.PostalCode">
            <summary>Home postal code; region specific format</summary>
            <example>"V5A 4B2"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress">
            <summary>
            The many fields that make up an address.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.StreetAddressLine1">
            <summary>Business postal address: street number, name and apartment number</summary>
            <example>"#42 135 East 1st Street"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.StreetAddressLine2">
            <summary>"#42 135 East 1st Street"</summary>
            <example>"Box 67"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.City">
            <summary>Business city name</summary>
            <example>"Vancouver"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.State">
            <summary>Business state or province name</summary>
            <example>"BC"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.Country">
            <summary>Business country code in ISO.3166.1988 (alpha 2) format</summary>
            <example>"CA"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.WorkAddress.PostalCode">
            <summary>Business postal code; region specific format</summary>
            <example>"V5A 4B2"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM">
            <summary>
            Various handles for instant message clients.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.AOL">
            <summary>AOL instant messaging service handle</summary>
            <example>"jsmith421234"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.ICQ">
            <summary>ICQ instant messaging service handle</summary>
            <example>"1234567"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.MSN">
            <summary>MSN instant messaging service handle</summary>
            <example>"jsmith42@hotmail.com"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.Yahoo">
            <summary>Yahoo! instant messaging service handle</summary>
            <example>"jsmith421234"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.Jabber">
            <summary>Jabber instant messaging service handle</summary>
            <example>"jsmith@jabber.example.com"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.IM.Skype">
            <summary>Skype instant messaging service handle</summary>
            <example>"jsmith42"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web">
            <summary>
            Various web addresses connected with this personality.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.Homepage">
            <summary>Web site URL</summary>
            <example>"http://example.com/~jsmith/"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.Blog">
            <summary>Blog URL</summary>
            <example>"http://example.com/jsmith_blog/"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.LinkedIn">
            <summary>LinkedIn URL</summary>
            <example>"http://www.linkedin.com/pub/1/234/56"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.Amazon">
            <summary>Amazon URL</summary>
            <example>"http://www.amazon.com/gp/pdp/profile/A24DLKJ825"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.Flickr">
            <summary>Flickr URL</summary>
            <example>"http://flickr.com/photos/jsmith42/"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Contact.Web.Delicious">
            <summary>del.icio.us URL</summary>
            <example>"http://del.icio.us/jsmith42"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media">
            <summary>
            Audio and images of this personality.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.SpokenName">
            <summary>Spoken name (web URL)</summary>
            <example>"http://example.com/~jsmith/john_smith.wav"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.AudioGreeting">
            <summary>Audio greeting (web URL)</summary>
            <example>"http://example.com/~jsmith/i_greet_you.wav"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.VideoGreeting">
            <summary>Video greeting (web URL)</summary>
            <example>"http://example.com/~jsmith/i_greet_you.mov"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images">
            <summary>
            Images of this personality.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images.Default">
            <summary>Image (web URL); unspecified dimension</summary>
            <example>"http://example.com/~jsmith/image.jpg"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images.Aspect11">
            <summary>Image (web URL) with equal width and height</summary>
            <example>"http://example.com/~jsmith/image.jpg"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images.Aspect43">
            <summary>Image (web URL) 4:3 aspect ratio - landscape</summary>
            <example>"http://example.com/~jsmith/image.jpg"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images.Aspect34">
            <summary>Image (web URL) 4:3 aspect ratio - landscape</summary>
            <example>"http://example.com/~jsmith/image.jpg"</example>
        </member>
        <member name="F:DotNetOpenId.Extensions.AttributeExchange.WellKnownAttributes.Media.Images.FavIcon">
            <summary>Image (web URL); favicon format as per FAVICON-W3C. The format for the image must be 16x16 pixels or 32x32 pixels, using either 8-bit or 24-bit colors. The format of the image must be one of PNG (a W3C standard), GIF, or ICO.</summary>
            <example>"http://example.com/~jsmith/image.jpg"</example>
        </member>
        <member name="T:DotNetOpenId.Extensions.SimpleRegistration.Constants">
            <summary>
            Simple Registration constants
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.FetchRequest">
            <summary>
            The Attribute Exchange Fetch message, request leg.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.IExtensionRequest">
            <summary>
            The contract an OpenID extension can implement for messages from relying party to provider
            to make handling extensions generally easier.  
            Extensions are not required to implement this interface, however.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.IExtensionRequest.Serialize(DotNetOpenId.RelyingParty.IAuthenticationRequest)">
            <summary>
            Returns the fields this extension should add to an authentication request.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.IExtensionRequest.Deserialize(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.Provider.IRequest)">
            <summary>
            Reads the extension information on an authentication request to the provider.
            </summary>
            <returns>True if the extension found any of its parameters in the request, false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.FetchRequest.AddAttribute(DotNetOpenId.Extensions.AttributeExchange.AttributeRequest)">
            <summary>
            Used by the Relying Party to add a request for the values of a given attribute.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.FetchRequest.GetAttribute(System.String)">
            <summary>
            Used by the Provider to find out whether the value(s) of a given attribute is requested.
            </summary>
            <returns>Null if the Relying Party did not ask for the values of the given attribute.</returns>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.FetchRequest.Attributes">
            <summary>
            Enumerates the attributes whose values are requested by the Relying Party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.FetchRequest.UpdateUrl">
            <summary>
            If set, the OpenID Provider may re-post the fetch response message to the 
            specified URL at some time after the initial response has been sent, using an
            OpenID Authentication Positive Assertion to inform the relying party of updates
            to the requested fields.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.StoreRequest">
            <summary>
            The Attribute Exchange Store message, request leg.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.StoreRequest.AddAttribute(DotNetOpenId.Extensions.AttributeExchange.AttributeValues)">
            <summary>
            Used by the Relying Party to add a given attribute with one or more values 
            to the request for storage.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.AttributeExchange.StoreRequest.GetAttribute(System.String)">
            <summary>
            Used by the Provider to gets the value(s) associated with a given attribute
            that should be stored.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.StoreRequest.Attributes">
            <summary>
            Lists all the attributes that are included in the store request.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.AttributeExchange.StoreResponse">
            <summary>
            The Attribute Exchange Store message, response leg.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.StoreResponse.Succeeded">
            <summary>
            Whether the storage request succeeded.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.AttributeExchange.StoreResponse.FailureReason">
            <summary>
            The reason for the failure.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Identifier">
            <summary>
            An Identifier is either a "http" or "https" URI, or an XRI.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.op_Implicit(System.String)~DotNetOpenId.Identifier">
            <summary>
            Converts the string representation of an Identifier to its strong type.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.op_Implicit(System.Uri)~DotNetOpenId.Identifier">
            <summary>
            Returns a strongly-typed Identifier for a given Uri.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.op_Implicit(DotNetOpenId.Identifier)~System.String">
            <summary>
            Converts an Identifier to its string representation.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.Parse(System.String)">
            <summary>
            Parses an identifier string and automatically determines
            whether it is an XRI or URI.
            </summary>
            <param name="identifier">Either a URI or XRI identifier.</param>
        </member>
        <member name="M:DotNetOpenId.Identifier.IsValid(System.String)">
            <summary>
            Gets whether a given string represents a valid Identifier format.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.Discover">
            <summary>
            Performs discovery on the Identifier.
            </summary>
            <returns>
            An initialized structure containing the discovered provider endpoint information.
            </returns>
        </member>
        <member name="M:DotNetOpenId.Identifier.op_Equality(DotNetOpenId.Identifier,DotNetOpenId.Identifier)">
            <summary>
            Tests equality between two <see cref="T:DotNetOpenId.Identifier"/>s.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.op_Inequality(DotNetOpenId.Identifier,DotNetOpenId.Identifier)">
            <summary>
            Tests inequality between two <see cref="T:DotNetOpenId.Identifier"/>s.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.Equals(System.Object)">
            <summary>
            Tests equality between two <see cref="T:DotNetOpenId.Identifier"/>s.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Identifier.GetHashCode">
            <summary>
            Gets the hash code for an <see cref="T:DotNetOpenId.Identifier"/> for storage in a hashtable.
            </summary>
        </member>
        <member name="T:DotNetOpenId.ProtocolVersion">
            <summary>
            An enumeration of the OpenID protocol versions supported by this library.
            </summary>
        </member>
        <member name="F:DotNetOpenId.ProtocolVersion.V10">
            <summary>
            OpenID Authentication 1.0
            </summary>
        </member>
        <member name="F:DotNetOpenId.ProtocolVersion.V11">
            <summary>
            OpenID Authentication 1.1
            </summary>
        </member>
        <member name="F:DotNetOpenId.ProtocolVersion.V20">
            <summary>
            OpenID Authentication 2.0
            </summary>
        </member>
        <member name="T:DotNetOpenId.Protocol">
            <summary>
            Tracks the several versions of OpenID this library supports and the unique
            constants to each version used in the protocol.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.AllVersions">
            <summary>
            A list of all supported OpenID versions, in order starting from newest version.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.Default">
            <summary>
            The default (or most recent) supported version of the OpenID protocol.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Protocol.Detect(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Attempts to detect the right OpenID protocol version based on the contents
            of an incoming query string.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.Version">
            <summary>
            The OpenID version that this <see cref="T:DotNetOpenId.Protocol"/> instance describes.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.XmlNamespace">
            <summary>
            The namespace of OpenId 1.x elements in XRDS documents.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.QueryDeclaredNamespaceVersion">
            <summary>
            The value of the openid.ns parameter that appears on the query string
            whenever data is passed between relying party and provider for OpenID 2.0
            and later.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.ClaimedIdentifierServiceTypeURI">
            <summary>
            The XRD/Service/Type value discovered in an XRDS document when
            "discovering" on a Claimed Identifier (http://andrewarnott.yahoo.com)
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.OPIdentifierServiceTypeURI">
            <summary>
            The XRD/Service/Type value discovered in an XRDS document when
            "discovering" on an OP Identifier rather than a Claimed Identifier.
            (http://yahoo.com)
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.RPReturnToTypeURI">
            <summary>
            The XRD/Service/Type value discovered in an XRDS document when
            "discovering" on a Realm URL and looking for the endpoint URL
            that can receive authentication assertions.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.ClaimedIdentifierForOPIdentifier">
            <summary>
            Used as the Claimed Identifier and the OP Local Identifier when
            the User Supplied Identifier is an OP Identifier.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.HtmlDiscoveryProviderKey">
            <summary>
            The value of the 'rel' attribute in an HTML document's LINK tag
            when the same LINK tag's HREF attribute value contains the URL to an
            OP Endpoint URL.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.HtmlDiscoveryLocalIdKey">
            <summary>
            The value of the 'rel' attribute in an HTML document's LINK tag
            when the same LINK tag's HREF attribute value contains the URL to use
            as the OP Local Identifier.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.openid">
            <summary>
            Parts of the protocol that define parameter names that appear in the 
            query string.  Each parameter name is prefixed with 'openid.'.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.openidnp">
            <summary>
            Parts of the protocol that define parameter names that appear in the 
            query string.  Each parameter name is NOT prefixed with 'openid.'.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.Args">
            <summary>
            The various 'constants' that appear as parameter arguments (values).
            </summary>
        </member>
        <member name="F:DotNetOpenId.Protocol.MaximumUserAgentAuthenticationTime">
            <summary>
            The maximum time a user can be allowed to take to complete authentication.
            </summary>
            <remarks>
            This is used to calculate the length of time that nonces are stored.
            This is internal until we can decide whether to leave this static, or make
            it an instance member, or put it inside the IConsumerAppliationStore interface.
            </remarks>
        </member>
        <member name="F:DotNetOpenId.Protocol.MaximumAllowableTimeSkew">
            <summary>
            The maximum permissible difference in clocks between relying party and 
            provider web servers, discounting time zone differences.
            </summary>
            <remarks>
            This is used when storing/validating nonces from the provider.
            If it is conceivable that a server's clock could be up to five minutes
            off from true UTC time, then the maximum time skew should be set to 
            ten minutes to allow one server to be five minutes ahead and the remote
            server to be five minutes behind and still be able to communicate.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Protocol.QueryArguments.SessionTypes.All">
            <summary>
            A preference order list of all supported session types.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Protocol.QueryArguments.SignatureAlgorithms.All">
            <summary>
            A preference order list of signature algorithms we support.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.AssertionMessage.CreateUnsolicitedAssertion(DotNetOpenId.Provider.OpenIdProvider,DotNetOpenId.Realm,DotNetOpenId.Identifier,DotNetOpenId.Identifier)">
            <summary>
            Creates a message that can be sent to a user agent to redirect them to a 
            relying party web site complete with authentication information to 
            automatically log them into that web site.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.RelyingPartyReceivingEndpoint.supportedServiceTypeUris">
            <summary>
            The Type URIs of supported services advertised on a relying party's XRDS document.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.RelyingPartyReceivingEndpoint.RelyingPartyEndpoint">
            <summary>
            The URL to the login page on the discovered relying party web site.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.RelyingPartyReceivingEndpoint.Protocol">
            <summary>
            The OpenId protocol that the discovered relying party supports.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AssociateRequest.#ctor(DotNetOpenId.RelyingParty.ServiceEndpoint,System.Collections.Generic.IDictionary{System.String,System.String},Org.Mentalis.Security.Cryptography.DiffieHellman)">
            <summary>
            Instantiates an <see cref="T:DotNetOpenId.RelyingParty.AssociateRequest"/> object.
            </summary>
            <param name="provider">The discovered OpenID Provider endpoint information.</param>
            <param name="args">The arguments assembled for sending to the Provider.</param>
            <param name="dh">Optional.  Supplied only if Diffie-Hellman is used for encrypting the association secret key.</param>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AssociateResponse.SecondAttempt">
            <summary>
            A custom-made associate request to try again when an OP
            doesn't support the settings we suggested, but we support
            the ones the OP suggested.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.AuthenticationRequestMode">
            <summary>
            Indicates the mode the Provider should use while authenticating the end user.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationRequestMode.Immediate">
            <summary>
            The Provider should use whatever credentials are immediately available
            to determine whether the end user owns the Identifier.  If sufficient
            credentials (i.e. cookies) are not immediately available, the Provider
            should fail rather than prompt the user.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationRequestMode.Setup">
            <summary>
            The Provider should determine whether the end user owns the Identifier,
            displaying a web page to the user to login etc., if necessary.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.IAuthenticationRequest">
            <summary>
            Instances of this interface represent relying party authentication 
            requests that may be queried/modified in specific ways before being
            routed to the OpenID Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationRequest.AddCallbackArguments(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds given key/value pairs to the query that the provider will use in
            the request to return to the consumer web site.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationRequest.AddCallbackArguments(System.String,System.String)">
            <summary>
            Adds a given key/value pair to the query that the provider will use in
            the request to return to the consumer web site.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationRequest.AddExtension(DotNetOpenId.Extensions.IExtensionRequest)">
            <summary>
            Adds an OpenID extension to the request directed at the OpenID provider.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationRequest.RedirectToProvider">
            <summary>
            Redirects the user agent to the provider for authentication.
            </summary>
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationRequest.RedirectToProvider(System.Boolean)">
            <summary>
            Redirects the user agent to the provider for authentication.
            </summary>
            <param name="endResponse">
            Whether execution of this response should cease after this call.
            </param>
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.Mode">
            <summary>
            Gets/sets the mode the Provider should use during authentication.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.RedirectToProviderUrl">
            <summary>
            Gets the URL the user agent should be redirected to to begin the 
            OpenID authentication process.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.ReturnToUrl">
            <summary>
            Gets the URL that the user agent will return to after authentication
            completes or fails at the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.Realm">
            <summary>
            Gets the URL that identifies this consumer web application that
            the Provider will display to the end user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.ClaimedIdentifier">
            <summary>
            Gets the Claimed Identifier that the User Supplied Identifier
            resolved to.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationRequest.ProviderVersion">
            <summary>
            The detected version of OpenID implemented by the Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationRequest.AddCallbackArguments(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds given key/value pairs to the query that the provider will use in
            the request to return to the consumer web site.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationRequest.AddCallbackArguments(System.String,System.String)">
            <summary>
            Adds a given key/value pair to the query that the provider will use in
            the request to return to the consumer web site.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationRequest.RedirectToProvider">
            <summary>
            Redirects the user agent to the provider for authentication.
            </summary>
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationRequest.RedirectToProvider(System.Boolean)">
            <summary>
            Redirects the user agent to the provider for authentication.
            </summary>
            <param name="endResponse">
            Whether execution of this response should cease after this call.
            </param>
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationRequest.OutgoingExtensions">
            <summary>
            Extension arguments to pass to the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationRequest.ReturnToArgs">
            <summary>
            Arguments to add to the return_to part of the query string, so that
            these values come back to the consumer when the user agent returns.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationRequest.ProviderVersion">
            <summary>
            The detected version of OpenID implemented by the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationRequest.RedirectToProviderUrl">
            <summary>
            Gets the URL the user agent should be redirected to to begin the 
            OpenID authentication process.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.AuthenticationStatus">
            <summary>
            An enumeration of the possible results of an authentication attempt.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationStatus.Canceled">
            <summary>
            The authentication was canceled by the user agent while at the provider.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationStatus.Failed">
            <summary>
            The authentication failed because an error was detected in the OpenId communication.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationStatus.SetupRequired">
            <summary>
            The Provider responded to a request for immediate authentication approval
            with a message stating that additional user agent interaction is required
            before authentication can be completed.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationStatus.Authenticated">
            <summary>
            Authentication is completed successfully.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.IAuthenticationResponse">
            <summary>
            An instance of this interface represents an identity assertion 
            from an OpenID Provider.  It may be in response to an authentication 
            request previously put to it by a Relying Party site or it may be an
            unsolicited assertion.
            </summary>
            <remarks>
            Relying party web sites should handle both solicited and unsolicited 
            assertions.  This interface does not offer a way to discern between
            solicited and unsolicited assertions as they should be treated equally.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationResponse.GetExtension``1">
            <summary>
            Tries to get an OpenID extension that may be present in the response.
            </summary>
            <returns>The extension, if it is found.  Null otherwise.</returns>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.IAuthenticationResponse.GetExtension(System.Type)">
            <summary>
            Tries to get an OpenID extension that may be present in the response.
            </summary>
            <returns>The extension, if it is found.  Null otherwise.</returns>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationResponse.ClaimedIdentifier">
            <summary>
            An Identifier that the end user claims to own.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationResponse.Status">
            <summary>
            The detailed success or failure status of the authentication attempt.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.IAuthenticationResponse.Exception">
            <summary>
            Details regarding a failed authentication attempt, if available.
            This will be set if and only if <see cref="P:DotNetOpenId.RelyingParty.IAuthenticationResponse.Status"/> is <see cref="F:DotNetOpenId.RelyingParty.AuthenticationStatus.Failed"/>.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.AuthenticationResponse.signedArguments">
            <summary>
            The arguments returned from the OP that were signed.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.GetExtension``1">
            <summary>
            Tries to get an OpenID extension that may be present in the response.
            </summary>
            <typeparam name="T">The extension to retrieve.</typeparam>
            <returns>The extension, if it is found.  Null otherwise.</returns>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.verifyReturnTo(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.RelyingParty.ServiceEndpoint,System.Uri)">
            <summary>
            Verifies that the openid.return_to field matches the URL of the actual HTTP request.
            </summary>
            <remarks>
            From OpenId Authentication 2.0 section 11.1:
            To verify that the "openid.return_to" URL matches the URL that is processing this assertion:
             * The URL scheme, authority, and path MUST be the same between the two URLs.
             * Any query parameters that are present in the "openid.return_to" URL MUST 
               also be present with the same values in the URL of the HTTP request the RP received.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.verifyDiscoveredInfoMatchesAssertedInfo(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.RelyingParty.ServiceEndpoint,DotNetOpenId.RelyingParty.ServiceEndpoint)">
            <remarks>
            This is documented in OpenId Authentication 2.0 section 11.2.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.verifyFieldsAreSigned(System.String[],System.String[])">
            <summary>
            Checks that fields that must be signed are in fact signed.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.verifySignatureByAssociation(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.Protocol,System.String[],DotNetOpenId.Association)">
            <summary>
            Verifies that a query is signed and that the signed fields have not been tampered with.
            </summary>
            <exception cref="T:DotNetOpenId.OpenIdException">Thrown when the signature is missing or the query has been tampered with.</exception>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.AuthenticationResponse.verifySignatureByProvider(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenId.RelyingParty.ServiceEndpoint,DotNetOpenId.RelyingParty.IRelyingPartyApplicationStore)">
            <summary>
            Performs a dumb-mode authentication verification by making an extra
            request to the provider after the user agent was redirected back
            to the consumer site with an authenticated status.
            </summary>
            <returns>Whether the authentication is valid.</returns>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationResponse.Status">
            <summary>
            The detailed success or failure status of the authentication attempt.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationResponse.Exception">
            <summary>
            Details regarding a failed authentication attempt, if available.
            This will only be set if <see cref="P:DotNetOpenId.RelyingParty.AuthenticationResponse.Status"/> is <see cref="F:DotNetOpenId.RelyingParty.AuthenticationStatus.Failed"/>,
            but may sometimes by null in this case as well.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationResponse.ClaimedIdentifier">
            <summary>
            An Identifier that the end user claims to own.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationResponse.Provider">
            <summary>
            The discovered endpoint information.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.AuthenticationResponse.IncomingExtensions">
            <summary>
            Gets the set of arguments that the Provider included as extensions.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.IRelyingPartyApplicationStore">
            <summary>
            The contract for implementing a custom store for a relying party web site.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.INonceStore">
            <summary>
            The contract for recalling nonces during their useful lifetime.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.INonceStore.TryStoreNonce(DotNetOpenId.Nonce)">
            <summary>
            Stores a nonce at least until it expires.
            </summary>
            <returns>
            True if the nonce was stored and did not exist previous to this call.
            False if the nonce already exists in the store.
            </returns>
            <remarks>
            <para>When persisting nonce instances, only the <see cref="P:DotNetOpenId.Nonce.Code"/> and <see cref="P:DotNetOpenId.Nonce.ExpirationDate"/>
            properties are significant.  The Code property is used for checking prior nonce use,
            and the ExpirationDate for rapid deletion of expired nonces.</para>
            <para>Nonces never need to be deserialized.</para>
            <para>When checking if a nonce already exists, only the Nonce.Code field should be compared.</para>
            <para>Checking for the prior existence of the given nonce and adding the nonce if it 
            did not previously exist must be an atomic operation to prevent replay attacks
            in the race condition of two threads trying to store the same nonce at the same time.
            This should be done by using a UNIQUE constraint on the Nonce.Code column, and perhaps
            a transaction that guarantees repeatable READ operations to ensure that no other process
            can add a given nonce once you've verified that it's not there.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.INonceStore.ClearExpiredNonces">
            <summary>
            Hints to the store to clear expired nonces.
            </summary>
            <remarks>
            If another algorithm is in place to periodically clear out expired nonces,
            this method call may be ignored.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.INonceStore.SecretSigningKey">
            <summary>
            Gets some key that can be used for signing.  Any positive length can be used, but a
            length of 64 bytes is recommended.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.OpenIdMobileTextBox">
            <summary>
            An ASP.NET control for mobile devices that provides a minimal text box that is OpenID-aware.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.UsePersistentCookieDefault">
            <summary>
            Default value of <see cref="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.UsePersistentCookie"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.OnLoad(System.EventArgs)">
            <summary>
            Checks for incoming OpenID authentication responses and fires appropriate events.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.Request">
            <summary>
            The OpenID authentication request that is about to be sent.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.PrepareAuthenticationRequest">
            <summary>
            Constructs the authentication request and adds the Simple Registration extension arguments.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.LogOn">
            <summary>
            Immediately redirects to the OpenID Provider to verify the Identifier
            provided in the text box.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.OnLoggedIn(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.LoggedIn"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.OnFailed(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.Failed"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.OnCanceled(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.Canceled"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.OnSetupRequired(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.SetupRequired"/> event.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RealmUrl">
            <summary>
            The OpenID <see cref="T:DotNetOpenId.Realm"/> of the relying party web site.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.ImmediateMode">
            <summary>
            True if a Provider should reply immediately to the authentication request
            without interacting with the user.  False if the Provider can take time
            to authenticate the user in order to complete an authentication attempt.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.UsePersistentCookie">
            <summary>
            Whether to send a persistent cookie upon successful 
            login so the user does not have to log in upon returning to this site.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestNickname">
            <summary>
            Gets/sets your level of interest in receiving the user's nickname from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestEmail">
            <summary>
            Gets/sets your level of interest in receiving the user's email address from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestFullName">
            <summary>
            Gets/sets your level of interest in receiving the user's full name from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestBirthDate">
            <summary>
            Gets/sets your level of interest in receiving the user's birthdate from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestGender">
            <summary>
            Gets/sets your level of interest in receiving the user's gender from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestPostalCode">
            <summary>
            Gets/sets your level of interest in receiving the user's postal code from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestCountry">
            <summary>
            Gets/sets your level of interest in receiving the user's country from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestLanguage">
            <summary>
            Gets/sets your level of interest in receiving the user's preferred language from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.RequestTimeZone">
            <summary>
            Gets/sets your level of interest in receiving the user's time zone from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.PolicyUrl">
            <summary>
            Gets/sets the URL to your privacy policy page that describes how 
            claims will be used and/or shared.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.EnableRequestProfile">
            <summary>
            Turns the entire Simple Registration extension on or off.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.LoggedIn">
            <summary>
            Fired upon completion of a successful login.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.Failed">
            <summary>
            Fired when a login attempt fails.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.Canceled">
            <summary>
            Fired when an authentication attempt is canceled at the OpenID Provider.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdMobileTextBox.SetupRequired">
            <summary>
            Fired when an Immediate authentication attempt fails, and the Provider suggests using non-Immediate mode.
            </summary>
        </member>
        <member name="T:DotNetOpenId.UntrustedWebRequest">
            <summary>
            A paranoid HTTP get/post request engine.  It helps to protect against attacks from remote
            server leaving dangling connections, sending too much data, etc.
            </summary>
        </member>
        <member name="M:DotNetOpenId.UntrustedWebRequest.readData(System.Net.HttpWebResponse,System.Byte[]@,System.Int32@)">
            <summary>
            Reads a maximum number of bytes from a response stream.
            </summary>
            <returns>
            The number of bytes actually read.  
            WARNING: This can be fewer than the size of the returned buffer.
            </returns>
        </member>
        <member name="P:DotNetOpenId.UntrustedWebRequest.MaximumBytesToRead">
            <summary>
            The default maximum bytes to read in any given HTTP request.
            Default is 1MB.  Cannot be less than 2KB.
            </summary>
        </member>
        <member name="P:DotNetOpenId.UntrustedWebRequest.MaximumRedirections">
            <summary>
            The total number of redirections to allow on any one request.
            Default is 10.
            </summary>
        </member>
        <member name="P:DotNetOpenId.UntrustedWebRequest.ReadWriteTimeout">
            <summary>
            Gets the time allowed to wait for single read or write operation to complete.
            Default is 500 milliseconds.
            </summary>
        </member>
        <member name="P:DotNetOpenId.UntrustedWebRequest.Timeout">
            <summary>
            Gets the time allowed for an entire HTTP request.  
            Default is 5 seconds.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Nonce">
            <summary>
            Represents some unique value that can help prevent replay attacks.
            </summary>
            <remarks>
            When persisting nonce instances, only the <see cref="P:DotNetOpenId.Nonce.Code"/> and <see cref="P:DotNetOpenId.Nonce.ExpirationDate"/>
            properties are significant.  Nonces never need to be deserialized.
            </remarks>
        </member>
        <member name="F:DotNetOpenId.Nonce.allowedCharacters">
            <summary>
            These are the characters that may be chosen from when forming a random nonce,
            per the OpenID 2.0 Authentication spec section 10.1.  
            </summary>
            <remarks>
            The following characters are allowed in the spec, but because they can cause validation
            failures with ASP.NET query validation (XSS-detection) they are deliberately left out of
            the set of characters we choose from: &lt; &amp;
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Nonce.#ctor(System.String,System.Boolean)">
            <summary>
            Deserializes a nonce from a string passed to us.
            </summary>
            <param name="code">
            A nonce in the format described by the OpenID Authentication 2.0
            spec section 10.1.  Specifically, it should be in the format:
            2005-05-15T17:11:51ZUNIQUE
            </param>
            <param name="remoteServerOrigin"></param>
        </member>
        <member name="M:DotNetOpenId.Nonce.Equals(System.Object)">
            <summary>
            Tests equality of two <see cref="T:DotNetOpenId.Nonce"/> objects.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Nonce.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Nonce.ToString">
            <summary>
            Returns the string representation of the <see cref="T:DotNetOpenId.Nonce"/>.
            This is the <see cref="P:DotNetOpenId.Nonce.Code"/> property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Nonce.Code">
            <summary>
            The string form of the nonce that can be transmitted with an authentication
            request or response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Nonce.CreationDate">
            <summary>
            The UTC date/time this nonce was generated.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Nonce.IsExpired">
            <summary>
            Gets whether this nonce is so old it no longer needs to be stored.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Nonce.ExpirationDate">
            <summary>
            Gets the UTC date beyond which this nonce is no longer valid, so storing
            a nonce for replay attack protection is only necessary until this time.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.OpenIdRelyingParty">
            <summary>
            Provides the programmatic facilities to act as an OpenId consumer.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdRelyingParty.#ctor">
            <summary>
            Constructs an OpenId consumer that uses the current HttpContext request
            and uses the HttpApplication dictionary as its association store.
            </summary>
            <remarks>
            This method requires a current ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdRelyingParty.#ctor(DotNetOpenId.RelyingParty.IRelyingPartyApplicationStore,System.Uri)">
            <summary>
            Constructs an OpenId consumer that uses a given querystring and IAssociationStore.
            </summary>
            <param name="store">
            The application-level store where associations with other OpenId providers can be
            preserved for optimized authentication and information about nonces can be stored.
            In a multi-server web farm environment, this store MUST be shared across
            all servers.  Optional: if null, the relying party will operate in stateless mode.
            </param>
            <param name="requestUrl">
            Optional.  The current incoming HTTP request that may contain an OpenId assertion.
            If not included, any OpenId authentication assertions will not be processed.
            </param>
            <remarks>
            The IRelyingPartyApplicationStore must be shared across an entire web farm 
            because of the design of how nonces are stored/retrieved.  Even if
            a given visitor is guaranteed to have affinity toward one server,
            replay attacks from another host may be directed at another server,
            which must therefore share the nonce information in the application
            state store in order to stop the intruder.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdRelyingParty.CreateRequest(DotNetOpenId.Identifier,DotNetOpenId.Realm,System.Uri)">
            <summary>
            Creates an authentication request to verify that a user controls
            some given Identifier.
            </summary>
            <param name="userSuppliedIdentifier">
            The Identifier supplied by the user.  This may be a URL, an XRI or i-name.
            </param>
            <param name="realm">
            The shorest URL that describes this relying party web site's address.
            For example, if your login page is found at https://www.example.com/login.aspx,
            your realm would typically be https://www.example.com/.
            </param>
            <param name="returnToUrl">
            The URL of the login page, or the page prepared to receive authentication 
            responses from the OpenID Provider.
            </param>
            <returns>
            An authentication request object that describes the HTTP response to
            send to the user agent to initiate the authentication.
            </returns>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdRelyingParty.CreateRequest(DotNetOpenId.Identifier,DotNetOpenId.Realm)">
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdRelyingParty.CreateRequest(DotNetOpenId.Identifier)">
            <remarks>
            This method requires an ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdRelyingParty.isAuthenticationResponseReady">
            <summary>
            Gets whether an OpenId provider's response to a prior authentication challenge
            is embedded in this web request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdRelyingParty.Response">
            <summary>
            Gets the result of a user agent's visit to his OpenId provider in an
            authentication attempt.  Null if no response is available.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdRelyingParty.HttpApplicationStore">
            <summary>
            The standard state storage mechanism that uses ASP.NET's HttpApplication state dictionary
            to store associations and nonces.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.Token">
            <summary>
            A state-containing bit of non-confidential data that is sent to the 
            user agent as part of the return_to URL so we can read from it later.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.Token.Serialize(DotNetOpenId.RelyingParty.INonceStore)">
            <summary>
            Serializes this <see cref="T:DotNetOpenId.RelyingParty.Token"/> instance as a string that can be
            included as part of a return_to variable in a querystring. 
            This string is cryptographically signed to protect against tampering.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.Token.Deserialize(System.String,DotNetOpenId.RelyingParty.INonceStore)">
            <summary>
            Deserializes a token returned to us from the provider and verifies its integrity.
            </summary>
            <remarks>
            As part of deserialization, the signature is verified to check
            for tampering, and the nonce (if included by the RP) is also checked.
            If no signature is present (due to stateless mode), the endpoint is verified
            by discovery (slow but secure).
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.Token.persistNonce(DotNetOpenId.RelyingParty.ServiceEndpoint,DotNetOpenId.RelyingParty.INonceStore)">
            <summary>
            Whether a relying party-side nonce should be used to protect
            against replay attacks.
            </summary>
            <remarks>
            When communicating with an OP using OpenID 2.0, the provider takes
            care of the nonce, so we don't have to.
            
            If operating under stateless mode, nonces can't be used on the RP
            side, so we rely on the Provider to be using some nonce mechanism.
            In OpenID 2.0, this is guaranteed, but in 1.x it's just an 
            assumption, which allows for replay attacks if the assumption is false.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.Token.persistSignature(DotNetOpenId.RelyingParty.INonceStore)">
            <summary>
            Whether to sign a token.
            </summary>
            <remarks>
            If an application store exists, we should sign the token.  If it doesn't,
            we haven't any means to keep a secret, so we can't sign the token.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.Token.verifyEndpointByDiscovery(DotNetOpenId.RelyingParty.ServiceEndpoint)">
            <summary>
            Performs discovery on the information in the token to detect any tampering.
            </summary>
            <remarks>
            Manual re-discovery of a Claimed Identifier is the slow way to perform verification.
            The best way is to check a signature on a deserialized token.  That is the primary method,
            but when stateless mode is used and no place exists to store a secret for signature
            verification, this is the only alternative.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.Token.Nonce">
            <summary>
            This nonce will only be used if the provider is pre-2.0.
            </summary>
        </member>
        <member name="T:DotNetOpenId.HttpEncoding">
            <summary>
            Conversion to and from the HTTP Encoding defined by
            OpenID Authentication 2.0 section 4.1.2.
            http://openid.net/specs/openid-authentication-2_0.html#anchor4
            </summary>
        </member>
        <member name="T:DotNetOpenId.AssociationRelyingPartyType">
            <summary>
            An enumeration that can specify how a given <see cref="T:DotNetOpenId.Association"/> is used.
            </summary>
        </member>
        <member name="F:DotNetOpenId.AssociationRelyingPartyType.Smart">
            <summary>
            The <see cref="T:DotNetOpenId.Association"/> manages a shared secret between
            Provider and Relying Party sites that allows the RP to verify
            the signature on a message from an OP.
            </summary>
        </member>
        <member name="F:DotNetOpenId.AssociationRelyingPartyType.Dumb">
            <summary>
            The <see cref="T:DotNetOpenId.Association"/> manages a secret known alone by
            a Provider that allows the Provider to verify its own signatures
            for "dumb" (stateless) relying parties.
            </summary>
        </member>
        <member name="T:DotNetOpenId.KeyValueFormConformanceLevel">
            <summary>
            Indicates the level of strictness to require when decoding a
            Key-Value Form encoded dictionary.
            </summary>
        </member>
        <member name="F:DotNetOpenId.KeyValueFormConformanceLevel.Loose">
            <summary>
            Be as forgiving as possible to errors made while encoding.
            </summary>
        </member>
        <member name="F:DotNetOpenId.KeyValueFormConformanceLevel.OpenId11">
            <summary>
            Allow for certain errors in encoding attributable to ambiguities
            in the OpenID 1.1 spec's description of the encoding.
            </summary>
        </member>
        <member name="F:DotNetOpenId.KeyValueFormConformanceLevel.OpenId20">
            <summary>
            The strictest mode.  The decoder requires the encoded dictionary
            to be in strict compliance with OpenID 2.0's description of
            the encoding.
            </summary>
        </member>
        <member name="T:DotNetOpenId.KeyValueFormEncoding">
            <summary>
            Conversion to and from the Key-Value Form Encoding defined by
            OpenID Authentication 2.0 section 4.1.1.
            http://openid.net/specs/openid-authentication-2_0.html#anchor4
            </summary>
        </member>
        <member name="M:DotNetOpenId.KeyValueFormEncoding.GetBytes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Encodes key/value pairs to Key-Value Form.
            Do not use for dictionaries of signed fields!  Instead use the overload
            that accepts a list of in-order keys.
            </summary>
            <returns>The UTF8 byte array.</returns>
            <remarks>
            Because dictionaries do not guarantee ordering,
            encoding a dictionary without an explicitly given key order
            is useless in OpenID scenarios where a signature must match.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.KeyValueFormEncoding.GetBytes(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Encodes key/value pairs to Key-Value Form.
            </summary>
            <param name="dictionary">
            The dictionary of key/value pairs to convert to a byte stream.
            </param>
            <param name="keyOrder">
            The order in which to encode the key/value pairs.
            Useful in scenarios where a byte[] must be exactly reproduced.
            </param>
            <returns>The UTF8 byte array.</returns>
        </member>
        <member name="M:DotNetOpenId.KeyValueFormEncoding.GetDictionary(System.IO.Stream)">
            <summary>
            Decodes bytes in Key-Value Form to key/value pairs.
            </summary>
            <param name="data">The stream of Key-Value Form encoded bytes.</param>
            <returns>The deserialized dictionary.</returns>
        </member>
        <member name="T:DotNetOpenId.OpenIdException">
            <summary>
            A message did not conform to the OpenID protocol, or 
            some other processing error occurred.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.IEncodable">
            <remarks>
            Classes that implement IEncodable should be either [Serializable] or
            derive from <see cref="T:System.MarshalByRefObject"/> so that testing can
            remote across app-domain boundaries to sniff/tamper with messages.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.OpenIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an <see cref="T:DotNetOpenId.OpenIdException"/> based on deserialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DotNetOpenId.OpenIdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception details for binary transmission.
            </summary>
        </member>
        <member name="P:DotNetOpenId.OpenIdException.Identifier">
            <summary>
            An Identifier (claimed or local provider) that was being processed when
            the exception was thrown.
            </summary>
        </member>
        <member name="P:DotNetOpenId.OpenIdException.EncodedFields">
            <summary>
            Fields that should be encoded for processing when this exception 
            is thrown by a Provider and the details should be passed to the
            relying party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.OpenIdException.RedirectUrl">
            <summary>
            The URL that the exception details should be forwarded to.
            This is used when a Provider throws an exception that a relying
            party may find helpful in diagnosing the failure.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.Encoder">
            <summary>
            Encodes responses in to <see cref="T:System.Net.WebResponse"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.Encoder.Encode(DotNetOpenId.Provider.IEncodable)">
            <summary>
            Encodes responses in to WebResponses.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.SigningEncoder">
            <summary>
            Encodes responses in to <see cref="T:System.Net.WebResponse"/>, signing them when required.
            </summary>
        </member>
        <member name="E:DotNetOpenId.Provider.SigningEncoder.Signing">
            <summary>
            Used for testing.  Allows interception and modification of messages 
            that are about to be returned to the RP.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.Request">
            <summary>
            Represents any OpenId-protocol request that may come to the provider.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.IRequest">
            <summary>
            Represents an incoming OpenId authentication request.
            </summary>
            <remarks>
            Requests may be infrastructural to OpenID and allow auto-responses, or they may
            be authentication requests where the Provider site has to make decisions based
            on its own user database and policies.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Provider.IRequest.AddResponseExtension(DotNetOpenId.Extensions.IExtensionResponse)">
            <summary>
            Adds an extension to the response to send to the relying party.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.IRequest.GetExtension``1">
            <summary>
            Gets an extension sent from the relying party.
            </summary>
            <typeparam name="T">The type of the extension.</typeparam>
            <returns>An instance of the extension initialized with values passed in with the request.</returns>
        </member>
        <member name="M:DotNetOpenId.Provider.IRequest.GetExtension(System.Type)">
            <summary>
            Gets an extension sent from the relying party.
            </summary>
            <param name="extensionType">The type of the extension.</param>
            <returns>An instance of the extension initialized with values passed in with the request.</returns>
        </member>
        <member name="P:DotNetOpenId.Provider.IRequest.IsResponseReady">
            <summary>
            Returns true if the Response is ready to be sent to the user agent.
            Returns false if there are properties that must be set on this
            request instance before the response can be sent.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IRequest.Response">
            <summary>
            Gets the response to send to the user agent.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.Request.Protocol">
            <summary>
            The detected protocol of the calling OpenId relying party.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.Request.IsOpenIdRequest(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tests whether a given dictionary represents an incoming OpenId request.
            </summary>
            <param name="query">The name/value pairs in the querystring or Form submission.  Cannot be null.</param>
            <returns>True if the request is an OpenId request, false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenId.Provider.Request.CreateRequest(DotNetOpenId.Provider.OpenIdProvider)">
            <summary>
            Creates the appropriate Request-derived type based on the request dictionary.
            </summary>
            <param name="provider">The Provider instance that called this method.</param>
            <returns>A Request-derived type appropriate for this stage in authentication.</returns>
        </member>
        <member name="M:DotNetOpenId.Provider.Request.InvalidateResponse">
            <summary>
            Called whenever a property changes that would cause the response to need to be
            regenerated if it had already been generated.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.Request.OutgoingExtensions">
            <summary>
            Extension arguments to pass to the Relying Party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.Request.IncomingExtensions">
            <summary>
            Extension arguments received from the Relying Party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.Request.IsResponseReady">
            <summary>
            Indicates whether this request has all the information necessary to formulate a response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.Request.Response">
            <summary>
            The authentication response to be sent to the user agent or the calling
            OpenId consumer.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.IAuthenticationRequest">
            <summary>
            Instances of this interface represent incoming authentication requests.
            This interface provides the details of the request and allows setting
            the response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.Immediate">
            <summary>
            Whether the consumer demands an immediate response.
            If false, the consumer is willing to wait for the identity provider
            to authenticate the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.Realm">
            <summary>
            The URL the consumer site claims to use as its 'base' address.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.IsReturnUrlDiscoverable">
            <summary>
            Whether verification of the return URL claimed by the Relying Party
            succeeded.
            </summary>
            <remarks>
            Return URL verification is only attempted if this property is queried.
            The result of the verification is cached per request so calling this
            property getter multiple times in one request is not a performance hit.
            See OpenID Authentication 2.0 spec section 9.2.1.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.IsDirectedIdentity">
            <summary>
            Whether the Provider should help the user select a Claimed Identifier
            to send back to the relying party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.LocalIdentifier">
            <summary>
            The Local Identifier to this OpenID Provider of the user attempting 
            to authenticate.  Check <see cref="P:DotNetOpenId.Provider.IAuthenticationRequest.IsDirectedIdentity"/> to see if
            this value is valid.
            </summary>
            <remarks>
            This may or may not be the same as the Claimed Identifier that the user agent
            originally supplied to the relying party.  The Claimed Identifier
            endpoint may be delegating authentication to this provider using
            this provider's local id, which is what this property contains.
            Use this identifier when looking up this user in the provider's user account
            list.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.ClaimedIdentifier">
            <summary>
            The identifier that the user agent is claiming at the relying party site.
            Check <see cref="P:DotNetOpenId.Provider.IAuthenticationRequest.IsDirectedIdentity"/> to see if this value is valid.
            </summary>
            <remarks>
            This will not be the same as this provider's local identifier for the user
            if the user has set up his/her own identity page that points to this 
            provider for authentication.
            The provider may use this identifier for displaying to the user when
            asking for the user's permission to authenticate to the relying party.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.IAuthenticationRequest.IsAuthenticated">
            <summary>
            Gets/sets whether the provider has determined that the 
            <see cref="P:DotNetOpenId.Provider.IAuthenticationRequest.ClaimedIdentifier"/> belongs to the currently logged in user
            and wishes to share this information with the consumer.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.IdentityEndpoint">
            <summary>
            An ASP.NET control that manages the OpenID identity advertising tags
            of a user's Identity Page that allow a relying party web site to discover
            how to authenticate a user.
            </summary>
        </member>
        <member name="T:DotNetOpenId.XrdsPublisher">
            <summary>
            An ASP.NET control that advertises an XRDS document and even responds to specially
            crafted requests to retrieve it.
            </summary>
        </member>
        <member name="M:DotNetOpenId.XrdsPublisher.OnLoad(System.EventArgs)">
            <summary>
            Detects YADIS requests for the XRDS document and responds immediately
            if <see cref="P:DotNetOpenId.XrdsPublisher.XrdsAutoAnswer"/> is true.
            </summary>
        </member>
        <member name="M:DotNetOpenId.XrdsPublisher.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTTP Header and/or HTML HEAD tags.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:DotNetOpenId.XrdsPublisher.XrdsUrl">
            <summary>
            The location of the XRDS document.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XrdsPublisher.XrdsAdvertisement">
            <summary>
            Where the XRDS document URL is advertised in the web response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XrdsPublisher.XrdsAutoAnswer">
            <summary>
            Gets/sets whether a specially crafted YADIS search for an XRDS document is
            immediately answered by this control.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XrdsPublisher.Enabled">
            <summary>
            Sets/gets whether the XRDS document is advertised.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.IdentityEndpoint.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders OpenID identity tags.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IdentityEndpoint.ProviderVersion">
            <summary>
            The OpenID version supported by the provider.
            If multiple versions are supported, this should be set to the latest
            version that DotNetOpenId and the Provider both support.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IdentityEndpoint.ProviderEndpointUrl">
            <summary>
            The Provider URL that processes OpenID requests.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IdentityEndpoint.ProviderLocalIdentifier">
            <summary>
            The Identifier that is controlled by the Provider.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.IResponse">
            <summary>
            Represents a Provider's response to an OpenId authentication request.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.IResponse.Send">
            <summary>
            Sends the response to the browser.
            </summary>
            <remarks>
            This requires an ASP.NET hosted web site.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.IResponse.Code">
            <summary>
            The HTTP status code that should accompany the response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IResponse.Headers">
            <summary>
            The HTTP headers that should be added to the response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.IResponse.Body">
            <summary>
            The body that should be sent as the response content.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.OpenIdProvider">
            <summary>
            Offers services for a web page that is acting as an OpenID identity server.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.OpenIdProvider.RequestUrl">
            <summary>
            The incoming request's Url.
            </summary>
            <remarks>
            This is used for certain security checks internally.  It should not
            be used for its Query property, as it will be irrelevant on POST requests.
            Instead, use the OpenIdProvider.Query field.
            </remarks>
        </member>
        <member name="F:DotNetOpenId.Provider.OpenIdProvider.Query">
            <summary>
            The query of the incoming request.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.OpenIdProvider.#ctor">
            <summary>
            Constructs an OpenId server that uses the HttpApplication dictionary as
            its association store and detects common settings.
            </summary>
            <remarks>
            This method requires a current ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Provider.OpenIdProvider.#ctor(DotNetOpenId.IAssociationStore{DotNetOpenId.AssociationRelyingPartyType},System.Uri,System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructs an OpenId server that uses a given query and IAssociationStore.
            </summary>
            <param name="store">
            The application-level store where associations with OpenId consumers will be preserved.
            </param>
            <param name="providerEndpoint">
            The Internet-facing URL that responds to OpenID requests.
            </param>
            <param name="requestUrl">The incoming request URL.</param>
            <param name="query">The name/value pairs that came in on the 
            QueryString of a GET request or in the entity of a POST request.</param>
        </member>
        <member name="M:DotNetOpenId.Provider.OpenIdProvider.decodeRequest">
            <summary>
            Decodes an incoming web request in to a <see cref="P:DotNetOpenId.Provider.OpenIdProvider.Request"/>.
            </summary>
            <returns>A Request object, or null if the given query doesn't represent an OpenId request.</returns>
        </member>
        <member name="M:DotNetOpenId.Provider.OpenIdProvider.PrepareUnsolicitedAssertion(DotNetOpenId.Realm,DotNetOpenId.Identifier,DotNetOpenId.Identifier)">
            <summary>
            Allows a Provider to send an identity assertion on behalf of one
            of its members in order to redirect the member to a relying party
            web site and log him/her in immediately in one uninterrupted step.
            </summary>
            <param name="relyingParty">
            The URL of the relying party web site.
            This will typically be the home page, but may be a longer URL if
            that Relying Party considers the scope of its realm to be more specific.
            The URL provided here must allow discovery of the Relying Party's
            XRDS document that advertises its OpenID RP endpoint.
            </param>
            <param name="claimedIdentifier">
            The Identifier you are asserting your member controls.
            </param>
            <param name="localIdentifier">
            The Identifier you know your user by internally.  This will typically
            be the same as <paramref name="claimedIdentifier"/>.
            </param>
            <returns>
            An <see cref="T:DotNetOpenId.Provider.IResponse"/> object describing the HTTP response to send
            the user agent to allow the redirect with assertion to happen.
            </returns>
        </member>
        <member name="P:DotNetOpenId.Provider.OpenIdProvider.Protocol">
            <summary>
            The version of OpenId being used by the Relying Party
            sending the incoming request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.OpenIdProvider.Endpoint">
            <summary>
            The provider URL that responds to OpenID requests.
            </summary>
            <remarks>
            An auto-detect attempt is made if an ASP.NET HttpContext is available.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.OpenIdProvider.Request">
            <summary>
            Gets the incoming OpenID request if there is one, or null if none was detected.
            </summary>
            <remarks>
            Requests may be infrastructural to OpenID and allow auto-responses, or they may
            be authentication requests where the Provider site has to make decisions based
            on its own user database and policies.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.OpenIdProvider.HttpApplicationStore">
            <summary>
            The standard state storage mechanism that uses ASP.NET's HttpApplication state dictionary
            to store associations.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.PlainTextProviderSession">
            <summary>
            An object that knows how to handle association requests with no session type.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.DiffieHellmanProviderSession">
            <summary>
            An object that knows how to handle association requests with the Diffie-Hellman session type.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.Response">
            <summary>
            A response to an OpenID request in terms a web server understands.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.Response.Send">
            <summary>
            Sends this response to the user agent or OpenId consumer.
            </summary>
            <remarks>
            This method requires a current ASP.NET HttpContext.
            </remarks>
        </member>
        <member name="T:DotNetOpenId.Provider.ProviderEndpoint">
            <summary>
            An OpenID Provider control that automatically responds to certain
            automated OpenID messages, and routes authentication requests to
            custom code via an event handler.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.ProviderEndpoint.OnLoad(System.EventArgs)">
            <summary>
            Checks for incoming OpenID requests, responds to ones it can
            respond to without policy checks, and fires events for custom
            handling of the ones it cannot decide on automatically.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.ProviderEndpoint.OnAuthenticationChallenge(DotNetOpenId.Provider.IAuthenticationRequest)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.Provider.ProviderEndpoint.AuthenticationChallenge"/> event.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.ProviderEndpoint.PendingAuthenticationRequest">
            <summary>
            An incoming OpenID authentication request that has not yet been responded to.
            </summary>
            <remarks>
            This request is stored in the ASP.NET Session state, so it will survive across
            redirects, postbacks, and transfers.  This allows you to authenticate the user
            yourself, and confirm his/her desire to authenticate to the relying party site
            before responding to the relying party's authentication request.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.ProviderEndpoint.Enabled">
            <summary>
            Whether or not this control should be listening for and responding
            to incoming OpenID requests.
            </summary>
        </member>
        <member name="E:DotNetOpenId.Provider.ProviderEndpoint.AuthenticationChallenge">
            <summary>
            Fired when an incoming OpenID request is an authentication challenge
            that must be responded to by the Provider web site according to its
            own user database and policies.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.AuthenticationChallengeEventArgs">
            <summary>
            The event arguments that include details of the incoming request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.AuthenticationChallengeEventArgs.Request">
            <summary>
            The incoming authentication request.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.SimpleRegistration.Gender">
            <summary>
            Indicates the gender of a user.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.SimpleRegistration.Gender.Male">
            <summary>
            The user is male.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.SimpleRegistration.Gender.Female">
            <summary>
            The user is female.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse">
            <summary>
            A struct storing Simple Registration field values describing an
            authenticating user.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.DotNetOpenId#Extensions#IExtensionResponse#Serialize(DotNetOpenId.Provider.IRequest)">
            <summary>
            Adds the values of this struct to an authentication response being prepared
            by an OpenID Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.op_Equality(DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse,DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse)">
            <summary>
            Tests equality of two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse"/> objects.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.op_Inequality(DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse,DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse)">
            <summary>
            Tests inequality of two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse"/> objects.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Equals(System.Object)">
            <summary>
            Tests equality of two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse"/> objects.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Nickname">
            <summary>
            The nickname the user goes by.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Email">
            <summary>
            The user's email address.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.MailAddress">
            <summary>
            A combination of the user's full name and email address.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.FullName">
            <summary>
            The full name of a user as a single string.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.BirthDate">
            <summary>
            The user's birthdate.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Gender">
            <summary>
            The gender of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.PostalCode">
            <summary>
            The zip code / postal code of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Country">
            <summary>
            The country of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Language">
            <summary>
            The primary/preferred language of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.Culture">
            <summary>
            A combination o the language and country of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsResponse.TimeZone">
            <summary>
            The user's timezone.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest">
            <summary>
            Carries the request/require/none demand state of the simple registration fields.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.SetProfileRequestFromList(System.Collections.Generic.ICollection{System.String},DotNetOpenId.Extensions.SimpleRegistration.DemandLevel)">
            <summary>
            Sets the profile request properties according to a list of
            field names that might have been passed in the OpenId query dictionary.
            </summary>
            <param name="fieldNames">
            The list of field names that should receive a given 
            <paramref name="requestLevel"/>.  These field names should match 
            the OpenId specification for field names, omitting the 'openid.sreg' prefix.
            </param>
            <param name="requestLevel">The none/request/require state of the listed fields.</param>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.DotNetOpenId#Extensions#IExtensionRequest#Serialize(DotNetOpenId.RelyingParty.IAuthenticationRequest)">
            <summary>
            Adds a description of the information the relying party site would like
            the Provider to include with a positive authentication assertion as an
            extension to an authentication request.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.ToString">
            <summary>
            Renders the requested information as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.op_Equality(DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest,DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest)">
            <summary>
            Tests equality between two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest"/> structs.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.op_Inequality(DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest,DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest)">
            <summary>
            Tests inequality between two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest"/> structs.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Equals(System.Object)">
            <summary>
            Tests equality between two <see cref="T:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest"/> structs.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Nickname">
            <summary>
            The level of interest a relying party has in the nickname of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Email">
            <summary>
            The level of interest a relying party has in the email of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.FullName">
            <summary>
            The level of interest a relying party has in the full name of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.BirthDate">
            <summary>
            The level of interest a relying party has in the birthdate of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Gender">
            <summary>
            The level of interest a relying party has in the gender of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.PostalCode">
            <summary>
            The level of interest a relying party has in the postal code of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Country">
            <summary>
            The level of interest a relying party has in the Country of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.Language">
            <summary>
            The level of interest a relying party has in the language of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.TimeZone">
            <summary>
            The level of interest a relying party has in the time zone of the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Extensions.SimpleRegistration.ClaimsRequest.PolicyUrl">
            <summary>
            The URL the consumer site provides for the authenticating user to review
            for how his claims will be used by the consumer web site.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.OpenIdLogin">
            <summary>
            An ASP.NET control providing a complete OpenID login experience.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.OpenIdTextBox">
            <summary>
            An ASP.NET control that provides a minimal text box that is OpenID-aware.
            </summary>
            <remarks>
            This control offers greater UI flexibility than the <see cref="T:DotNetOpenId.RelyingParty.OpenIdLogin"/>
            control, but requires more work to be done by the hosting web site to 
            assemble a complete login experience.
            </remarks>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdTextBox.UsePersistentCookieDefault">
            <summary>
            Default value of <see cref="P:DotNetOpenId.RelyingParty.OpenIdTextBox.UsePersistentCookie"/>.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdTextBox.TabIndexDefault">
            <summary>
            Default value for <see cref="P:DotNetOpenId.RelyingParty.OpenIdTextBox.TabIndex"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.#ctor">
            <summary>
            Instantiates an <see cref="T:DotNetOpenId.RelyingParty.OpenIdTextBox"/> instance.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.CreateChildControls">
            <summary>
            Creates the text box control.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.InitializeControls">
            <summary>
            Initializes the text box control.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdTextBox.ShouldBeFocused">
            <summary>
            Whether the text box should receive input focus when the web page appears.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.Focus">
            <summary>
            Sets the input focus to start on the text box when the page appears
            in the user's browser.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnLoad(System.EventArgs)">
            <summary>
            Checks for incoming OpenID authentication responses and fires appropriate events.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnPreRender(System.EventArgs)">
            <summary>
            Prepares the text box to be rendered.
            </summary>
        </member>
        <member name="F:DotNetOpenId.RelyingParty.OpenIdTextBox.Request">
            <summary>
            The OpenID authentication request that is about to be sent.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.PrepareAuthenticationRequest">
            <summary>
            Constructs the authentication request and adds the Simple Registration extension arguments.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.LogOn">
            <summary>
            Immediately redirects to the OpenID Provider to verify the Identifier
            provided in the text box.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnLoggedIn(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdTextBox.LoggedIn"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnFailed(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdTextBox.Failed"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnCanceled(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdTextBox.Canceled"/> event.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdTextBox.OnSetupRequired(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdTextBox.SetupRequired"/> event.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.WrappedTextBox">
            <summary>
            Gets the <see cref="T:System.Web.UI.WebControls.TextBox"/> control that this control wraps.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.Text">
            <summary>
            The content of the text box.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RealmUrl">
            <summary>
            The OpenID <see cref="T:DotNetOpenId.Realm"/> of the relying party web site.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.ImmediateMode">
            <summary>
            True if a Provider should reply immediately to the authentication request
            without interacting with the user.  False if the Provider can take time
            to authenticate the user in order to complete an authentication attempt.
            </summary>
            <remarks>
            Setting this to true is sometimes useful in AJAX scenarios.  Setting this to
            true can cause failed authentications when the user truly controls an
            Identifier, but must complete an authentication step with the Provider before
            the Provider will approve the login from this relying party.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.CssClass">
            <summary>
            Gets/sets the CSS class assigned to the text box.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.ShowLogo">
            <summary>
            Gets/sets whether to show the OpenID logo in the text box.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.UsePersistentCookie">
            <summary>
            Whether to send a persistent cookie upon successful 
            login so the user does not have to log in upon returning to this site.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.Columns">
            <summary>
            The width of the text box in characters.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.TabIndex">
            <summary>
            The tab index of the text box control.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestNickname">
            <summary>
            Gets/sets your level of interest in receiving the user's nickname from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestEmail">
            <summary>
            Gets/sets your level of interest in receiving the user's email address from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestFullName">
            <summary>
            Gets/sets your level of interest in receiving the user's full name from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestBirthDate">
            <summary>
            Gets/sets your level of interest in receiving the user's birthdate from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestGender">
            <summary>
            Gets/sets your level of interest in receiving the user's gender from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestPostalCode">
            <summary>
            Gets/sets your level of interest in receiving the user's postal code from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestCountry">
            <summary>
            Gets/sets your level of interest in receiving the user's country from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestLanguage">
            <summary>
            Gets/sets your level of interest in receiving the user's preferred language from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.RequestTimeZone">
            <summary>
            Gets/sets your level of interest in receiving the user's time zone from the Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.PolicyUrl">
            <summary>
            Gets/sets the URL to your privacy policy page that describes how 
            claims will be used and/or shared.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.EnableRequestProfile">
            <summary>
            Turns the entire Simple Registration extension on or off.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.ForeColor">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.BackColor">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.BorderColor">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.BorderWidth">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.BorderStyle">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.Font">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.Height">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.Width">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.ToolTip">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.SkinID">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdTextBox.EnableTheming">
            <summary>
            Unused property.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdTextBox.LoggedIn">
            <summary>
            Fired upon completion of a successful login.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdTextBox.Failed">
            <summary>
            Fired when a login attempt fails.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdTextBox.Canceled">
            <summary>
            Fired when an authentication attempt is canceled at the OpenID Provider.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdTextBox.SetupRequired">
            <summary>
            Fired when an Immediate authentication attempt fails, and the Provider suggests using non-Immediate mode.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdLogin.CreateChildControls">
            <summary>
            Creates the child controls.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdLogin.InitializeControls">
            <summary>
            Initializes the child controls.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdLogin.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the child controls.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdLogin.OnLoggingIn(DotNetOpenId.Identifier)">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdLogin.LoggingIn"/> event.
            </summary>
            <param name="userSuppliedIdentifier">
            The Identifier supplied by the user via the login page.
            </param>
            <returns>
            Returns whether the login should proceed.  False if some event handler canceled the request.
            </returns>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdLogin.OnRememberMeChanged">
            <summary>
            Fires the <see cref="E:DotNetOpenId.RelyingParty.OpenIdLogin.RememberMeChanged"/> event.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.LabelText">
            <summary>
            The caption that appears before the text box.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.ExamplePrefix">
            <summary>
            The text that introduces the example OpenID url.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.ExampleUrl">
            <summary>
            The example OpenID Identifier to display to the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RequiredText">
            <summary>
            The text to display if the user attempts to login without providing an Identifier.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.UriFormatText">
            <summary>
            The text to display if the user provides an invalid form for an Identifier.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.UriValidatorEnabled">
            <summary>
            Whether to perform Identifier format validation prior to an authentication attempt.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RegisterText">
            <summary>
            The text of the link users can click on to obtain an OpenID.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RegisterUrl">
            <summary>
            The URL to link users to who click the link to obtain a new OpenID.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RegisterToolTip">
            <summary>
            The text of the tooltip to display when the user hovers over the link to obtain a new OpenID.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RegisterVisible">
            <summary>
            Whether to display a link to allow users to easily obtain a new OpenID.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.ButtonText">
            <summary>
            The text that appears on the button that initiates login.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RememberMeText">
            <summary>
            The text of the "Remember Me" checkbox.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RememberMeVisible">
            <summary>
            Whether the "Remember Me" checkbox should be displayed.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.RememberMe">
            <summary>
            Whether a successful authentication should result in a persistent
            cookie being saved to the browser.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.TabIndex">
            <summary>
            The starting tab index to distribute across the controls.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.ButtonToolTip">
            <summary>
            The tooltip to display when the user hovers over the login button.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.ValidationGroup">
            <summary>
            The validation group that the login button and text box validator belong to.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdLogin.UsePersistentCookie">
            <summary>
            Whether a FormsAuthentication cookie should persist across user sessions.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdLogin.LoggingIn">
            <summary>
            Fired after the user clicks the log in button, but before the authentication
            process begins.  Offers a chance for the web application to disallow based on 
            OpenID URL before redirecting the user to the OpenID Provider.
            </summary>
        </member>
        <member name="E:DotNetOpenId.RelyingParty.OpenIdLogin.RememberMeChanged">
            <summary>
            Fired when the Remember Me checkbox is changed by the user.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.OpenIdEventArgs">
            <summary>
            The event details passed to event handlers.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdEventArgs.#ctor(DotNetOpenId.Identifier)">
            <summary>
            Constructs an object with minimal information of an incomplete or failed
            authentication attempt.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.OpenIdEventArgs.#ctor(DotNetOpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Constructs an object with information on a completed authentication attempt
            (whether that attempt was successful or not).
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdEventArgs.Cancel">
            <summary>
            Cancels the OpenID authentication and/or login process.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdEventArgs.ClaimedIdentifier">
            <summary>
            The Identifier the user is claiming to own.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdEventArgs.Response">
            <summary>
            Gets the details of the OpenId authentication response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.OpenIdEventArgs.ProfileFields">
            <summary>
            Gets the simple registration (sreg) extension fields given
            by the provider, if any.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Extensions.SimpleRegistration.DemandLevel">
            <summary>
            Specifies what level of interest a relying party has in obtaining the value
            of a given field offered by the Simple Registration extension.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.SimpleRegistration.DemandLevel.NoRequest">
            <summary>
            The relying party has no interest in obtaining this field.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.SimpleRegistration.DemandLevel.Request">
            <summary>
            The relying party would like the value of this field, but wants
            the Provider to display the field to the user as optionally provided.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Extensions.SimpleRegistration.DemandLevel.Require">
            <summary>
            The relying party considers this a required field as part of
            authentication.  The Provider and/or user agent MAY still choose to
            not provide the value of the field however, according to the
            Simple Registration extension specification.
            </summary>
        </member>
        <member name="T:DotNetOpenId.RelyingParty.ServiceEndpoint">
            <summary>
            Represents information discovered about a user-supplied Identifier.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.ServiceEndpoint.Serialize(System.IO.TextWriter)">
            <summary>
            Saves the discovered information about this endpoint
            for later comparison to validate assertions.
            </summary>
        </member>
        <member name="M:DotNetOpenId.RelyingParty.ServiceEndpoint.Deserialize(System.IO.TextReader)">
            <summary>
            Reads previously discovered information about an endpoint
            from a solicited authentication assertion for validation.
            </summary>
            <returns>
            A <see cref="T:DotNetOpenId.RelyingParty.ServiceEndpoint"/> object that has everything
            except the <see cref="P:DotNetOpenId.RelyingParty.ServiceEndpoint.ProviderSupportedServiceTypeUris"/>
            deserialized.
            </returns>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.ServiceEndpoint.ProviderEndpoint">
            <summary>
            The URL which accepts OpenID Authentication protocol messages.
            </summary>
            <remarks>
            Obtained by performing discovery on the User-Supplied Identifier. 
            This value MUST be an absolute HTTP or HTTPS URL.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.ServiceEndpoint.ClaimedIdentifier">
            <summary>
            The Identifier that the end user claims to own.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.ServiceEndpoint.ProviderLocalIdentifier">
            <summary>
            An alternate Identifier for an end user that is local to a 
            particular OP and thus not necessarily under the end user's 
            control.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.ServiceEndpoint.ProviderSupportedServiceTypeUris">
            <summary>
            Gets the list of services available at this OP Endpoint for the
            claimed Identifier.
            </summary>
        </member>
        <member name="P:DotNetOpenId.RelyingParty.ServiceEndpoint.Protocol">
            <summary>
            Gets the OpenID protocol used by the Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenId.CryptUtil.ensurePositive(System.Byte[])">
            <summary>
            Ensures that the big integer represented by a given series of bytes
            is a positive integer.
            </summary>
            <returns>A byte array (possibly new if a change was required) whose
            integer is guaranteed to be positive.</returns>
            <remarks>
            This is to be consistent with OpenID spec section 4.2.
            </remarks>
        </member>
        <member name="T:Org.Mentalis.Security.Cryptography.DHKeyGeneration">
            <summary>
            Defines the different Diffie-Hellman key generation methods.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Security.Cryptography.DHKeyGeneration.Random">
            <summary>
            Returns dynamically generated values for P and G. Unlike the Sophie Germain or DSA key generation methods,
            this method does not ensure that the selected prime offers an adequate security level.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Security.Cryptography.DHKeyGeneration.Static">
            <summary>
            Returns values for P and G that are hard coded in this library. Contrary to what your intuition may tell you,
            using these hard coded values is perfectly safe.
            The values of the P and G parameters are taken from 'The OAKLEY Key Determination Protocol' [RFC2412].
            This is the prefered key generation method, because it is very fast and very safe.
            Because this method uses fixed values for the P and G parameters, not all bit sizes are supported.
            The current implementation supports bit sizes of 768, 1024 and 1536.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Security.Cryptography.DHParameters">
            <summary>
            Represents the parameters of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Security.Cryptography.DHParameters.P">
            <summary>
            Represents the public <b>P</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Security.Cryptography.DHParameters.G">
            <summary>
            Represents the public <b>G</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Security.Cryptography.DHParameters.X">
            <summary>
            Represents the private <b>X</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Security.Cryptography.DiffieHellman">
            <summary>
            Defines a base class from which all Diffie-Hellman implementations inherit.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/> algorithm.
            </summary>
            <returns>A new instance of the default implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/>.
            </summary>
            <param name="algName">The name of the implementation of DiffieHellman to use.</param>
            <returns>A new instance of the specified implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.#ctor">
            <summary>
            Initializes a new <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/> instance.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.CreateKeyExchange">
            <summary>
            When overridden in a derived class, creates the key exchange data. 
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.DecryptKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the <see cref="T:Org.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivate"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for Diffie-Hellman.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.ImportParameters(Org.Mentalis.Security.Cryptography.DHParameters)">
            <summary>
            When overridden in a derived class, imports the specified <see cref="T:Org.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for Diffie-Hellman.</param>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.FromXmlString(System.String)">
            <summary>
            Reconstructs a <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/> object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellman object.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">One of the values in the XML string is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellman.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/> object.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>An XML string encoding of the current DiffieHellman object.</returns>
        </member>
        <member name="T:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged">
            <summary>
            Implements the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor">
            <summary>
            Initializes a new <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <remarks>The default length of the shared secret is 1024 bits.</remarks>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Int32,System.Int32,Org.Mentalis.Security.Cryptography.DHKeyGeneration)">
            <summary>
            Initializes a new <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="bitlen">The length, in bits, of the public P parameter.</param>
            <param name="l">The length, in bits, of the secret value X. This parameter can be set to 0 to use the default size.</param>
            <param name="keygen">One of the <see cref="T:Org.Mentalis.Security.Cryptography.DHKeyGeneration"/> values.</param>
            <remarks>The larger the bit length, the more secure the algorithm is. The default is 1024 bits. The minimum bit length is 128 bits.<br/>The size of the private value will be one fourth of the bit length specified.</remarks>
            <exception cref="T:System.ArgumentException">The specified bit length is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="x">The X parameter of the Diffie-Hellman algorithm. This is a private parameter. If this parameters is a null reference (<b>Nothing</b> in Visual Basic), a secret value of the default size will be generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm.</param>
            <param name="l">The length, in bits, of the private value. If 0 is specified, the default value will be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="l"/> is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.CreateKeyExchange">
            <summary>
            Creates the key exchange data.
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the shared key is hidden.</param>
            <returns>The shared key derived from the key exchange data.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SymmetricAlgorithm and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Org.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/>.</returns>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.ImportParameters(Org.Mentalis.Security.Cryptography.DHParameters)">
            <summary>
            Imports the specified <see cref="T:Org.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for <see cref="T:Org.Mentalis.Security.Cryptography.DiffieHellman"/>.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="P"/> or <paramref name="G"/> is a null reference (<b>Nothing</b> in Visual Basic) -or- <paramref name="P"/> is not a prime number.</exception>
        </member>
        <member name="M:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.Finalize">
            <summary>
            Releases the unmanaged resources used by the SymmetricAlgorithm.
            </summary>
        </member>
        <member name="P:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="P:Org.Mentalis.Security.Cryptography.DiffieHellmanManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="F:Mono.Math.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Mono.Math.BigInteger.genRandom(System.Int32,System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.genRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.randomize(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:Mono.Math.BigInteger.randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.testBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.NextHightestPrime(Mono.Math.BigInteger)">
            <summary>
            Generates the smallest prime >= bi
            </summary>
            <param name="bi">A BigInteger</param>
            <returns>The smallest prime >= bi. More mathematically, if bi is prime: bi, else Prime [PrimePi [bi] + 1].</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="T:Mono.Math.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.AddSameSign(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Compare(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.SingleByteDivideInPlace(Mono.Math.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
        </member>
        <member name="T:Mono.Math.Prime.ConfidenceFactor">
            <summary>
            A factor of confidence.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraLow">
            <summary>
            Only suitable for development use, probability of failure may be greater than 1/2^20.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Low">
            <summary>
            Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Medium">
            <summary>
            Designed for production use. Probability of failure about 1/2^80.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.High">
            <summary>
            Suitable for sensitive data. Probability of failure about 1/2^160.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraHigh">
            <summary>
            Use only if you have lots of time! Probability of failure about 1/2^320.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Provable">
            <summary>
            Only use methods which generate provable primes. Not yet implemented.
            </summary>
        </member>
        <member name="T:Mono.Math.Prime.Generator.NextPrimeFinder">
            <summary>
            Finds the next prime after a given number.
            </summary>
        </member>
        <member name="M:Mono.Math.Prime.Generator.PrimeGeneratorBase.PostTrialDivisionTests(Mono.Math.BigInteger)">
            <summary>
            Performs primality tests on bi, assumes trial division has been done.
            </summary>
            <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
            <returns>False if bi is composite, true if it may be prime.</returns>
            <remarks>The speed of this method is dependent on Confidence</remarks>
        </member>
        <member name="M:Mono.Math.Prime.PrimalityTests.RabinMillerTest(Mono.Math.BigInteger,Mono.Math.Prime.ConfidenceFactor)">
            <summary>
                Probabilistic prime test based on Rabin-Miller's test
            </summary>
            <param name="bi" type="BigInteger.BigInteger">
                <para>
                    The number to test.
                </para>
            </param>
            <param name="confidence" type="int">
                <para>
            The number of chosen bases. The test has at least a
            1/4^confidence chance of falsely returning True.
                </para>
            </param>
            <returns>
            <para>
            	True if "this" is a strong pseudoprime to randomly chosen bases.
            </para>
            <para>
            	False if "this" is definitely NOT prime.
            </para>
            </returns>
        </member>
        <member name="T:DotNetOpenId.Provider.AssociateRequest">
            <summary>
            A request to establish an association.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.AssociateRequest.CreateAssociationTypeHints(DotNetOpenId.Provider.OpenIdProvider)">
            <summary>
            Used to throw a carefully crafted exception that will end up getting
            encoded as a response to the RP, given hints as to what 
            assoc_type and session_type args we support.
            </summary>
            <returns>A dictionary that should be passed to the OpenIdException
            via the <see cref="F:DotNetOpenId.OpenIdException.ExtraArgsToReturn"/> property.</returns>
        </member>
        <member name="M:DotNetOpenId.Provider.AssociateRequest.Answer">
            <summary>
            Respond to this request with an association.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.AssociateRequest.Mode">
            <summary>
            Returns the string "associate".
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.CheckAuthRequest">
            <summary>
            A request to verify the validity of a previous response.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Provider.CheckAuthRequest.Answer">
            <summary>
            Respond to this request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckAuthRequest.Mode">
            <summary>
            Gets the string "check_authentication".
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.CheckIdRequest">
            <summary>
            A request to confirm the identity of a user.
            </summary>
            <remarks>
            This class handles requests for openid modes checkid_immediate and checkid_setup.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.IsAuthenticated">
            <summary>
            Gets/sets whether the provider has determined that the 
            <see cref="P:DotNetOpenId.Provider.CheckIdRequest.ClaimedIdentifier"/> belongs to the currently logged in user
            and wishes to share this information with the consumer.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.Immediate">
            <summary>
            Whether the consumer demands an immediate response.
            If false, the consumer is willing to wait for the identity provider
            to authenticate the user.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.Realm">
            <summary>
            The URL the consumer site claims to use as its 'base' address.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.IsReturnUrlDiscoverable">
            <summary>
            Whether verification of the return URL claimed by the Relying Party
            succeeded.
            </summary>
            <remarks>
            This property will never throw a WebException or OpenIdException.  Any failures
            occuring during return URL verification results in a false value being returned.
            Details regarding failure may be found in the trace log.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.IsDirectedIdentity">
            <summary>
            Whether the Provider should help the user select a Claimed Identifier
            to send back to the relying party.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.LocalIdentifier">
            <summary>
            The user identifier used by this particular provider.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.ClaimedIdentifier">
            <summary>
            The identifier this user is claiming to control.  
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.ReturnTo">
            <summary>
            The URL to redirect the user agent to after the authentication attempt.
            This must fall "under" the realm URL.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.IsResponseReady">
            <summary>
            Indicates whether this request has all the information necessary to formulate a response.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.CancelUrl">
            <summary>
            Get the URL to cancel this request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Provider.CheckIdRequest.SetupUrl">
            <summary>
            Encode this request as a URL to GET.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.EncodingType.RedirectBrowserUrl">
            <summary>
            Response data to be sent to the consumer web site by telling the 
            browser to redirect back to the consumer web site with a querystring
            that contains our data.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.EncodingType.ResponseBody">
            <summary>
            Response data to be sent directly to the consumer site, 
            in response to a direct request initiated by the consumer site
            (not the client browser).
            </summary>
        </member>
        <member name="T:DotNetOpenId.Provider.Signatory">
            <summary>
            Signs things.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.Signatory.smartAssociationLifetime">
            <summary>
            The duration any association and secret key the Provider generates will be good for.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.Signatory.dumbSecretLifetime">
            <summary>
            The duration a secret key used for signing dumb client requests will be good for.
            </summary>
        </member>
        <member name="F:DotNetOpenId.Provider.Signatory.store">
            <summary>
            The store for shared secrets.
            </summary>
        </member>
        <member name="T:DotNetOpenId.XrdsUrlLocations">
            <summary>
            The locations the YADIS protocol describes can contain a reference
            to an XRDS document.
            </summary>
        </member>
        <member name="F:DotNetOpenId.XrdsUrlLocations.HttpHeader">
            <summary>
            Indicates XRDS document referencing from an HTTP protocol header (outside the HTML).
            </summary>
        </member>
        <member name="F:DotNetOpenId.XrdsUrlLocations.HtmlMeta">
            <summary>
            Indicates XRDS document referencing from within an HTML page's &lt;HEAD&gt; tag.
            </summary>
        </member>
        <member name="F:DotNetOpenId.XrdsUrlLocations.Both">
            <summary>
            Indicates XRDS document referencing in both HTTP headers and HTML HEAD tags.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.AttributeAlreadyAdded">
            <summary>
              Looks up a localized string similar to An attribute with type URI &apos;{0}&apos; has already been added..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.AttributeTooManyValues">
            <summary>
              Looks up a localized string similar to Only {0} values for attribute &apos;{1}&apos; were requested, but {2} were supplied..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.BadAssociationPrivateData">
            <summary>
              Looks up a localized string similar to The private data supplied does not meet the requirements of any known Association type.  Its length may be too short, or it may have been corrupted..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.CurrentHttpContextRequired">
            <summary>
              Looks up a localized string similar to HttpContext.Current is null.  There must be an ASP.NET request in process for this operation to succeed..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.EncryptionRequired">
            <summary>
              Looks up a localized string similar to An encrypted session using either HTTPS or Diffie-Hellman is required when establishing associations between relying parties and providers..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ExpectedBase64OpenIdQueryParameter">
            <summary>
              Looks up a localized string similar to OpenID parameter &apos;{0}&apos; was expected to be base64 encoded but is not..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ExpiredNonce">
            <summary>
              Looks up a localized string similar to The nonce has expired..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ExtensionAlreadyAddedWithSameTypeURI">
            <summary>
              Looks up a localized string similar to An extension sharing namespace &apos;{0}&apos; has already been added.  Only one extension per namespace is allowed in a given request..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ExtensionParameterKeysWithoutPrefixExpected">
            <summary>
              Looks up a localized string similar to Extension parameter key &apos;{0}&apos; encountered, but extension parameter keys should not include their prefix..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.FieldMustBeSigned">
            <summary>
              Looks up a localized string similar to The OpenID parameter &apos;{0}&apos; must be signed by the OpenID Provider, but was not..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.HttpContextRequiredForThisOverload">
            <summary>
              Looks up a localized string similar to No current ASP.NET HttpContext was detected.  Use an overload that does not require one..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.IAssociationStoreRequiredWhenNoHttpContextAvailable">
            <summary>
              Looks up a localized string similar to No current HttpContext was detected, so an IAssociationStore must be explicitly provided. Call the Server constructor overload that takes an IAssociationStore..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.IdentifierSelectModeOnly">
            <summary>
              Looks up a localized string similar to This operation is only allowed when IsIdentifierSelect is true..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.IdentifierSelectRequiresMatchingIdentifiers">
            <summary>
              Looks up a localized string similar to ClaimedIdentifier and LocalIdentifier must be the same when IsIdentifierSelect is true..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidCharacterInKeyValueFormInput">
            <summary>
              Looks up a localized string similar to Cannot encode &apos;{0}&apos; because it contains an illegal character for Key-Value Form encoding..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidKeyValueFormCharacterMissing">
            <summary>
              Looks up a localized string similar to Cannot decode Key-Value Form because a line was found without a &apos;{0}&apos; character..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidNonce">
            <summary>
              Looks up a localized string similar to The nonce was not in the expected format..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidOpenIdExtensionParameterValue">
            <summary>
              Looks up a localized string similar to OpenID extension {0} parameter {1} had unexpected value &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidOpenIdQueryParameterValue">
            <summary>
              Looks up a localized string similar to OpenID parameter &apos;{0}&apos; had unexpected value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidOpenIdQueryParameterValueBadBase64">
            <summary>
              Looks up a localized string similar to OpenID parameter &apos;{0}&apos; with value &apos;{1}&apos; failed to base64 decode..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidScheme">
            <summary>
              Looks up a localized string similar to The scheme must be http or https but was &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidSignature">
            <summary>
              Looks up a localized string similar to The signature verification failed..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.InvalidXri">
            <summary>
              Looks up a localized string similar to Not a recognized XRI format: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.IssuedAssertionFailsIdentifierDiscovery">
            <summary>
              Looks up a localized string similar to The OpenId Provider issued an assertion for an Identifier whose discovery information did not match..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.KeyAlreadyExists">
            <summary>
              Looks up a localized string similar to The given key &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.KeysListAndDictionaryDoNotMatch">
            <summary>
              Looks up a localized string similar to The list of keys do not match the provided dictionary..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.MatchingArgumentsExpected">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; and &apos;{1}&apos; parameters must both be or not be &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.MissingCanonicalIDElement">
            <summary>
              Looks up a localized string similar to The XRDS document is missing the required CanonicalID element..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.MissingInternalQueryParameter">
            <summary>
              Looks up a localized string similar to Query parameter &apos;{0}&apos; was missing from the query..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.MissingOpenIdQueryParameter">
            <summary>
              Looks up a localized string similar to OpenID parameter &apos;{0}&apos; was missing from the query..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.MissingReturnToQueryParameter">
            <summary>
              Looks up a localized string similar to Query parameter &apos;{0}&apos; was expected in the return_to query &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.NoRelyingPartyEndpointDiscovered">
            <summary>
              Looks up a localized string similar to No XRDS document containing OpenId relying party endpoint information could be found at {0}..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.OpenIdEndpointNotFound">
            <summary>
              Looks up a localized string similar to No OpenId endpoint found..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.OpenIdTextBoxEmpty">
            <summary>
              Looks up a localized string similar to No OpenId url is provided..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.PrefixWithoutPeriodsExpected">
            <summary>
              Looks up a localized string similar to Prefix should not begin or end with a period..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ProviderOpenIdVersionUnknown">
            <summary>
              Looks up a localized string similar to Unable to determine provider&apos;s OpenID version..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ProviderRespondedWithError">
            <summary>
              Looks up a localized string similar to The OpenId Provider responded with an error: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ProviderRespondedWithUnrecognizedHTTPStatusCode">
            <summary>
              Looks up a localized string similar to The OpenId Provider responded with unrecognized HTTP status code {0}..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.RealmCausedRedirectUponDiscovery">
            <summary>
              Looks up a localized string similar to An HTTP request to the realm URL ({0}) resulted in a redirect, which is not allowed during relying party discovery..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ReplayAttackDetected">
            <summary>
              Looks up a localized string similar to The nonce has already been used..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ResponseNotReady">
            <summary>
              Looks up a localized string similar to OpenId provider&apos;s response is not ready.  Use IsResponseReady to check, and fill in the required properties first..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ReturnToArgDifferentFromQueryArg">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; parameter does not have the same value for return_to (&apos;{1}&apos;) and the regular query (&apos;{2}&apos;)..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ReturnToNotUnderRealm">
            <summary>
              Looks up a localized string similar to return_to &apos;{0}&apos; not under realm &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.ReturnToParamDoesNotMatchRequestUrl">
            <summary>
              Looks up a localized string similar to The {0} parameter does not match the actual URL the request was made with..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.TamperingDetected">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; parameter was expected to have the value &apos;{1}&apos; but had &apos;{2}&apos; instead..
            </summary>
        </member>
        <member name="P:DotNetOpenId.Strings.TypeMustImplementX">
            <summary>
              Looks up a localized string similar to The type must implement {0}..
            </summary>
        </member>
        <member name="M:DotNetOpenId.TraceUtil.ToString(System.Object)">
            <summary>
            Serialize obj to an xml string.
            </summary>
        </member>
        <member name="P:DotNetOpenId.TraceUtil.Switch">
            <summary>
            Gets the switch that indicates whether the user of this library desires for trace messages
            to be emitted.
            </summary>
        </member>
        <member name="T:DotNetOpenId.Realm">
            <summary>
            A trust root to validate requests and match return URLs against.
            </summary>
            <remarks>
            This fills the OpenID Authentication 2.0 specification for realms.
            See http://openid.net/specs/openid-authentication-2_0.html#realms
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Realm.op_Implicit(System.String)~DotNetOpenId.Realm">
            <summary>
            Implicitly converts the string-form of a URI to a <see cref="T:DotNetOpenId.Realm"/> object.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.op_Implicit(System.Uri)~DotNetOpenId.Realm">
            <summary>
            Implicitly converts a <see cref="T:System.Uri"/> to a <see cref="T:DotNetOpenId.Realm"/> object.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.op_Implicit(DotNetOpenId.Realm)~System.String">
            <summary>
            Implicitly converts a <see cref="T:DotNetOpenId.Realm"/> object to its <see cref="T:System.String"/> form.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.#ctor(System.String)">
            <summary>
            Instantiates a <see cref="T:DotNetOpenId.Realm"/> from its string representation.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.#ctor(System.Uri)">
            <summary>
            Instantiates a <see cref="T:DotNetOpenId.Realm"/> from its <see cref="T:System.Uri"/> representation.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.#ctor(System.UriBuilder)">
            <summary>
            Instantiates a <see cref="T:DotNetOpenId.Realm"/> from its <see cref="T:System.UriBuilder"/> representation.
            </summary>
            <remarks>
            This is useful because UriBuilder can construct a host with a wildcard 
            in the Host property, but once there it can't be converted to a Uri.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.Realm.Contains(System.String)">
            <summary>
            Validates a URL against this trust root.
            </summary>
            <param name="url">A string specifying URL to check.</param>
            <returns>Whether the given URL is within this trust root.</returns>
        </member>
        <member name="M:DotNetOpenId.Realm.Contains(System.Uri)">
            <summary>
            Validates a URL against this trust root.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>Whether the given URL is within this trust root.</returns>
        </member>
        <member name="M:DotNetOpenId.Realm.Discover(System.Boolean)">
            <summary>
            Searches for an XRDS document at the realm URL, and if found, searches
            for a description of a relying party endpoints (OpenId login pages).
            </summary>
            <param name="allowRedirects">
            Whether redirects may be followed when discovering the Realm.
            This may be true when creating an unsolicited assertion, but must be
            false when performing return URL verification per 2.0 spec section 9.2.1.
            </param>
            <returns>The details of the endpoints if found, otherwise null.</returns>
        </member>
        <member name="M:DotNetOpenId.Realm.Equals(System.Object)">
            <summary>
            Checks whether one <see cref="T:DotNetOpenId.Realm"/> is equal to another.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Realm.GetHashCode">
            <summary>
            Returns the hash code used for storing this object in a hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetOpenId.Realm.ToString">
            <summary>
            Returns the string form of this <see cref="T:DotNetOpenId.Realm"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.DomainWildcard">
            <summary>
            Whether a '*.' prefix to the hostname is used in the realm to allow
            subdomains or hosts to be added to the URL.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.Host">
            <summary>
            Gets the host component of this instance.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.Scheme">
            <summary>
            Gets the scheme name for this URI.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.Port">
            <summary>
            Gets the port number of this URI.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.AbsolutePath">
            <summary>
            Gets the absolute path of the URI.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.PathAndQuery">
            <summary>
            Gets the System.Uri.AbsolutePath and System.Uri.Query properties separated
            by a question mark (?).
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.NoWildcardUri">
            <summary>
            Gets the realm URL.  If the realm includes a wildcard, it is not included here.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Realm.UriWithWildcardChangedToWww">
            <summary>
            Produces the Realm URL.  If the realm URL had a wildcard in it,
            the wildcard is replaced with a "www." prefix.
            </summary>
            <remarks>
            See OpenID 2.0 spec section 9.2.1 for the explanation on the addition of
            the "www" prefix.
            </remarks>
        </member>
        <member name="P:DotNetOpenId.Realm.IsSane">
            <summary>
            This method checks the to see if a trust root represents a reasonable (sane) set of URLs.
            </summary>
            <remarks>
            'http://*.com/', for example is not a reasonable pattern, as it cannot meaningfully 
            specify the site claiming it. This function attempts to find many related examples, 
            but it can only work via heuristics. Negative responses from this method should be 
            treated as advisory, used only to alert the user to examine the trust root carefully.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.UriIdentifier.DiscoverFromHtml(System.Uri,System.String)">
            <summary>
            Searches HTML for the HEAD META tags that describe OpenID provider services.
            </summary>
            <param name="claimedIdentifier">
            The final URL that provided this HTML document.  
            This may not be the same as (this) userSuppliedIdentifier if the 
            userSuppliedIdentifier pointed to a 301 Redirect.
            </param>
            <param name="html">The HTML that was downloaded and should be searched.</param>
            <returns>
            An initialized ServiceEndpoint if the OpenID Provider information was
            found.  Otherwise null.
            </returns>
            <remarks>
            OpenID 2.0 tags are always used if they are present, otherwise
            OpenID 1.x tags are used if present.
            </remarks>
        </member>
        <member name="M:DotNetOpenId.UriUtil.CreateQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Concatenates a list of name-value pairs as key=value&amp;key=value,
            taking care to properly encode each key and value for URL
            transmission.  No ? is prefixed to the string.
            </summary>
        </member>
        <member name="M:DotNetOpenId.UriUtil.CreateQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Concatenates a list of name-value pairs as key=value&amp;key=value,
            taking care to properly encode each key and value for URL
            transmission.  No ? is prefixed to the string.
            </summary>
        </member>
        <member name="M:DotNetOpenId.UriUtil.AppendQueryArgs(System.UriBuilder,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a set of name-value pairs to the end of a given URL
            as part of the querystring piece.  Prefixes a ? or &amp; before
            first element as necessary.
            </summary>
            <param name="builder">The UriBuilder to add arguments to.</param>
            <param name="args">
            The arguments to add to the query.  
            If null, <paramref name="builder"/> is not changed.
            </param>
        </member>
        <member name="M:DotNetOpenId.UriUtil.UriBuilderToStringWithImpliedPorts(System.UriBuilder)">
            <summary>
            Equivalent to UriBuilder.ToString() but omits port # if it may be implied.
            Equivalent to UriBuilder.Uri.ToString(), but doesn't throw an exception if the Host has a wildcard.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Util.FindBestVersion``1(DotNetOpenId.Util.Func{DotNetOpenId.Protocol,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scans a list for matches with some element of the OpenID protocol,
            searching from newest to oldest protocol for the first and best match.
            </summary>
            <typeparam name="T">The type of element retrieved from the <see cref="T:DotNetOpenId.Protocol"/> instance.</typeparam>
            <param name="elementOf">Takes a <see cref="T:DotNetOpenId.Protocol"/> instance and returns an element of it.</param>
            <param name="list">The list to scan for matches.</param>
            <returns>The protocol with the element that matches some item in the list.</returns>
        </member>
        <member name="P:DotNetOpenId.Yadis.XrdElement.OpenIdProviderIdentifierServices">
            <summary>
            Returns services for OP Identifiers.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.XrdElement.OpenIdClaimedIdentifierServices">
            <summary>
            Returns services for Claimed Identifiers.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.XrdElement.ServiceUris">
            <summary>
            An enumeration of all Service/URI elements, sorted in priority order.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Yadis.XrdsDocument.findClaimedIdentifierServices">
            <summary>
            Returns the OpenID-compatible services described by a given XRDS document,
            in priority order.
            </summary>
        </member>
        <member name="M:DotNetOpenId.XriIdentifier.IsValidXri(System.String)">
            <summary>
            Tests whether a given string represents a valid XRI format.
            </summary>
        </member>
        <member name="M:DotNetOpenId.XriIdentifier.canonicalizeXri(System.String)">
            <summary>
            Takes any valid form of XRI string and returns the canonical form of the same XRI.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XriIdentifier.OriginalXri">
            <summary>
            The original XRI supplied to the constructor.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XriIdentifier.CanonicalXri">
            <summary>
            The canonical form of the XRI string.
            </summary>
        </member>
        <member name="P:DotNetOpenId.XriIdentifier.XrdsUrl">
            <summary>
            Resolves the XRI to a URL from which an XRDS document may be downloaded.
            </summary>
        </member>
        <member name="M:DotNetOpenId.Yadis.Yadis.FindYadisDocumentLocationInHtmlMetaTags(System.String)">
            <summary>
            Searches an HTML document for a 
            &lt;meta http-equiv="X-XRDS-Location" content="{YadisURL}"&gt;
            tag and returns the content of YadisURL.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.RequestUri">
            <summary>
            The URI of the original YADIS discovery request.  
            This is the user supplied Identifier as given in the original
            YADIS discovery request.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.NormalizedUri">
            <summary>
            The fully resolved (after redirects) URL of the user supplied Identifier.
            This becomes the ClaimedIdentifier.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.YadisLocation">
            <summary>
            The location the XRDS document was downloaded from, if different
            from the user supplied Identifier.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.ContentType">
            <summary>
            The Content-Type associated with the <see cref="P:DotNetOpenId.Yadis.DiscoveryResult.ResponseText"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.ResponseText">
            <summary>
            The text in the final response.
            This may be an XRDS document or it may be an HTML document, 
            as determined by the <see cref="P:DotNetOpenId.Yadis.DiscoveryResult.IsXrds"/> property.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.IsXrds">
            <summary>
            Whether the <see cref="P:DotNetOpenId.Yadis.DiscoveryResult.ResponseText"/> represents an XRDS document.
            False if the response is an HTML document.
            </summary>
        </member>
        <member name="P:DotNetOpenId.Yadis.DiscoveryResult.UsedYadisLocation">
            <summary>
            True if the response to the userSuppliedIdentifier pointed to a different URL
            for the XRDS document.
            </summary>
        </member>
    </members>
</doc>

using System;
using System.Collections.Generic;
using System.Text;
using RemotingLite;
using System.Net;

namespace MPAPI
{
    /// <summary>
    /// Creating a proxy class that inherits from ClientBase, instead of using the default proxy generated by
    /// ProxyFactory, makes sense in this case since there are a number of values we can actually cache
    /// on this side of the connection.
    /// </summary>
    public class RemoteNodeProxy : ClientBase<INode>, INode
    {
        private int _processorCount = -1;
        private IPEndPoint _endPoint = null;
        private ushort _id = ushort.MaxValue;

        public RemoteNodeProxy(IPEndPoint endpoint)
            : base(endpoint)
        {
            //cache a few values that are unlikely to change
            _processorCount = Proxy.GetProcessorCount();
            _endPoint = Proxy.GetIPEndPoint();
            _id = Proxy.GetId();
        }

        #region INode Members

        public void PutMessage(MessageLevel messageLevel, ushort receiverNodeId, ushort receiverWorkerId, ushort senderNodeId, ushort senderWorkerId, int messageType, object content)
        {
            Proxy.PutMessage(messageLevel, receiverNodeId, receiverWorkerId, senderNodeId, senderWorkerId, messageType, content);
        }

        public List<ushort> GetWorkerIds()
        {
            return Proxy.GetWorkerIds();
        }

        public bool Spawn(Type workerType, out ushort workerId)
        {
            return Proxy.Spawn(workerType, out workerId);
        }

        public bool Spawn(string workerTypeName, out ushort workerId)
        {
            return Proxy.Spawn(workerTypeName, out workerId);
        }

        public int GetProcessorCount()
        {
            return _processorCount;
        }

        public int GetWorkerCount()
        {
            return Proxy.GetWorkerCount();
        }

        public void Monitor(WorkerAddress monitor, WorkerAddress monitoree)
        {
            Proxy.Monitor(monitor, monitoree);
        }

        public System.Net.IPEndPoint GetIPEndPoint()
        {
            return _endPoint;
        }

        #endregion

        #region INodeIdentity Members

        public ushort GetId()
        {
            return _id;
        }

        #endregion
    }
}

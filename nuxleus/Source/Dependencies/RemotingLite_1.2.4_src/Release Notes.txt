1.2.3 -> 1.2.4
===============
o Forced the TcpClient used in communication to use IP v. 4. This will enable the framework to run on Windows Vista, where
  the default protocol seems to be IP v. 6, preventing the framework from working properly.
  Thanks to Maneesak Pimsarn for providing the solution.
  
1.2.2 -> 1.2.3
===============
o Further optimized the serialization if the parameters of the method being invoked are one of the following simple
  types: bool, byte, sbyte, char, decimal, double, float, int, uint, long, ulong, short, ushort, string, byte[], char[]
  This gives a performance gain of up to 33% if the parameters are all one of the simple types.

1.2.1 -> 1.2.2
===============
o Fixed problem with out-parameters. The wrong opcodes where generated for the IL-code of the proxies, and the wrong type parameter was
  checked for when assigning ref- and out-parameter values.

1.2 -> 1.2.1
===============
o Fixed the Mono incompatibility problem with the proxies generated by ProxyFactory.

1.1 -> 1.2
===============
o Significant performance improvements by a factor of 70-100 when communicating on network.
  - Better and more efficient serialization and deserialization.
  - A bit of transport protocol tuning.
  - Only sending argument values back to the client when the argument is by reference.
o It is now possible to let the service host use thread pool threads instead of regular background threads.


Version 1.1.0
==============
o RemotingHost renamed to ServiceHost
o Added the property "EndPoint" to ServiceHost that specifies the end point the host is accepting incoming connections on.
o Renamed RemotingClientBase to ClientBase, and made it internal
o Added ProxyFactory which constructs proxies based on an interface. The instance coming out inherits from ClientBase.
  This eliminates the need to write your own implementations of the proxies, and with all the type casting that was
  necessary in version 1.0. This is automatically handled in the proxy.
o Added ClientBase. Subclass this when you want more control over what happens when invoking the host. This is also
  necessary if you are implementing with the "using" keyword, since the instance needs to be castable to IDisposable.
o Added support for exceptions.
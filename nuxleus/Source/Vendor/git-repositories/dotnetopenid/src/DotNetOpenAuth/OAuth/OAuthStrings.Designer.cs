//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetOpenAuth.OAuth {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class OAuthStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OAuthStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotNetOpenAuth.OAuth.OAuthStrings", typeof(OAuthStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot send access token to Consumer for request token &apos;{0}&apos; before it has been authorized..
        /// </summary>
        internal static string AccessTokenNotAuthorized {
            get {
                return ResourceManager.GetString("AccessTokenNotAuthorized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The access token &apos;{0}&apos; is invalid or expired..
        /// </summary>
        internal static string BadAccessTokenInProtectedResourceRequest {
            get {
                return ResourceManager.GetString("BadAccessTokenInProtectedResourceRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure looking up secret for consumer or token..
        /// </summary>
        internal static string ConsumerOrTokenSecretNotFound {
            get {
                return ResourceManager.GetString("ConsumerOrTokenSecretNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to oauth_verifier argument was incorrect..
        /// </summary>
        internal static string IncorrectVerifier {
            get {
                return ResourceManager.GetString("IncorrectVerifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid OAuth message received and discarded..
        /// </summary>
        internal static string InvalidIncomingMessage {
            get {
                return ResourceManager.GetString("InvalidIncomingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} message included extra data which is not allowed..
        /// </summary>
        internal static string MessageNotAllowedExtraParameters {
            get {
                return ResourceManager.GetString("MessageNotAllowedExtraParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of the OpenID+OAuth extension requires that the token manager in use implement the {0} interface..
        /// </summary>
        internal static string OpenIdOAuthExtensionRequiresSpecialTokenManagerInterface {
            get {
                return ResourceManager.GetString("OpenIdOAuthExtensionRequiresSpecialTokenManagerInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OpenID Relying Party&apos;s realm is not recognized as belonging to the OAuth Consumer identified by the consumer key given..
        /// </summary>
        internal static string OpenIdOAuthRealmConsumerKeyDoNotMatch {
            get {
                return ResourceManager.GetString("OpenIdOAuthRealmConsumerKeyDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This OAuth service provider requires OAuth consumers to implement OAuth {0}, but this consumer appears to only support {1}..
        /// </summary>
        internal static string MinimumConsumerVersionRequirementNotMet {
            get {
                return ResourceManager.GetString("MinimumConsumerVersionRequirementNotMet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request URL query MUST NOT contain any OAuth Protocol Parameters..
        /// </summary>
        internal static string RequestUrlMustNotHaveOAuthParameters {
            get {
                return ResourceManager.GetString("RequestUrlMustNotHaveOAuthParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signing element already has been associated with a channel..
        /// </summary>
        internal static string SigningElementAlreadyAssociatedWithChannel {
            get {
                return ResourceManager.GetString("SigningElementAlreadyAssociatedWithChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All signing elements must offer the same message protection..
        /// </summary>
        internal static string SigningElementsMustShareSameProtection {
            get {
                return ResourceManager.GetString("SigningElementsMustShareSameProtection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A token in the message was not recognized by the service provider..
        /// </summary>
        internal static string TokenNotFound {
            get {
                return ResourceManager.GetString("TokenNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RSA-SHA1 signing binding element has not been set with a certificate for signing..
        /// </summary>
        internal static string X509CertificateNotProvidedForSigning {
            get {
                return ResourceManager.GetString("X509CertificateNotProvidedForSigning", resourceCulture);
            }
        }
    }
}

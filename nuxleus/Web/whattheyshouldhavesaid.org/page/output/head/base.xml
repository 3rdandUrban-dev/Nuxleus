<?xml version="1.0"?>
<page:head xmlns:page="http://atomictalk.org/page" xmlns:head="http://atomictalk.org/page/output/head">
	<head:title>@@page-title@@</head:title>
	<head:link rel="alternate" type="application/atom+xml" title="@@page-title@@" href="@@static@@/feed.atom"/>
	<head:link rel="alternate" type="application/xml" title="@@page-title@@" href="@@static@@/feed.atom"/>
	<head:link rel="shortcut icon" href="@@shortcut-icon@@" type="image/png"/>
	<head:include fileType="css" href="@@static@@/css/base.css"/>
	<head:include fileType="css" href="@@static@@/css/transparency.css"/>
	<head:include fileType="javascript" src="@@static@@/js/jquery-1.2.6.min.js"/>
	<head:include fileType="javascript" src="@@static@@/js/jquery.history.js"/>
	<head:include fileType="javascript" src="@@static@@/js/sarissa-compressed.js"/>
	<head:include fileType="javascript" src="@@static@@/js/sarissa_ieemu_xpath-compressed.js"/>
	<head:include fileType="javascript" src="@@static@@/js/jquery.xslTransform.js"/>
	<head:include fileType="javascript" src="@@static@@/js/jquery.form.js"/>
	<head:include fileType="javascript"><![CDATA[
	$(document).ready(function(){
		var options = { 
	        target:        '#output2',   // target element(s) to be updated with server response 
	        beforeSubmit:  showRequest,  // pre-submit callback 
	        success:       showResponse,  // post-submit callback 

	        // other available options: 
	        //url:       url         // override for form's 'action' attribute 
	        //type:      type        // 'get' or 'post', override for form's 'method' attribute 
	        //dataType:  null        // 'xml', 'script', or 'json' (expected server response type) 
	        clearForm: true,        // clear all form fields after successful submit 
	        resetForm: true        // reset the form after successful submit 

	        // $.ajax options can be used here too, for example: 
	        //timeout:   3000 
	    };
			$("form[@class='ajaxForm-temp']").submit(function() { 
	        // inside event callbacks 'this' is the DOM element so we first 
	        // wrap it in a jQuery object and then invoke ajaxSubmit 
	        $(this).ajaxSubmit(options); 

	        // !!! Important !!! 
	        // always return false to prevent standard browser submit and page navigation 
	        return false; 
	    });
	
		$("a[@class='navigation']").click(function(){
      var hash = this.href;
      var current = hash.replace(/^.*#/, '');
			var data_controller = this.rel.split(':');
      $('#test').getTransform('/page/controller/'.concat(data_controller[1]).concat('.xsl'), data_controller[0].concat('/atom.xml'), 
				{ params:{showModal:'1'},
        	callback: function(){
        	}
      });
      return false;
    });
	});
	
	// pre-submit callback 
	function showRequest(formData, jqForm, options) { 
	    // formData is an array; here we use $.param to convert it to a string to display it 
	    // but the form plugin does this for you automatically when it submits the data 
	    var queryString = $.param(formData); 

	    // jqForm is a jQuery object encapsulating the form element.  To access the 
	    // DOM element for the form do this: 
	    // var formElement = jqForm[0]; 

	    alert('About to submit: \n\n' + queryString); 

	    // here we could return false to prevent the form from being submitted; 
	    // returning anything other than false will allow the form submit to continue 
	    return true; 
	} 

	// post-submit callback 
	function showResponse(responseText, statusText)  { 
	    // for normal html responses, the first argument to the success callback 
	    // is the XMLHttpRequest object's responseText property 

	    // if the ajaxSubmit method was passed an Options Object with the dataType 
	    // property set to 'xml' then the first argument to the success callback 
	    // is the XMLHttpRequest object's responseXML property 

	    // if the ajaxSubmit method was passed an Options Object with the dataType 
	    // property set to 'json' then the first argument to the success callback 
	    // is the json data object returned by the server 

	    alert('status: ' + statusText + '\n\nresponseText: \n' + responseText + 
	        '\n\nThe output div should have already been updated with the responseText.'); 
	}
]]></head:include>
</page:head>

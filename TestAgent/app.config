<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
    <!-- Register a section handler for the log4net section -->
    <section name="log4net" type="System.Configuration.IgnoreSectionHandler" />
  </configSections>
  <!-- Enable internal debugging in log4net -->
  <appSettings>
    <!-- To enable internal log4net logging specify the following appSettings key -->
    <!-- <add key="log4net.Internal.Debug" value="true"/> -->
  </appSettings>
  <unity>
    <aliases>
      <add alias="SnmpDemon" type="Lextm.SharpSnmpLib.Agent.SnmpDemon, snmpd"/>
      <add alias="SnmpApplicationFactory" type="Lextm.SharpSnmpLib.Agent.SnmpApplicationFactory, snmpd"/>
      <add alias="Logger" type="Lextm.SharpSnmpLib.Agent.RollingLogger, snmpd"/>
      <add alias="ILogger" type="Lextm.SharpSnmpLib.Agent.ILogger, snmpd"/>
      <add alias="ObjectStore" type="Lextm.SharpSnmpLib.Agent.ObjectStore, snmpd"/>
      <add alias="Version1MembershipProvider" type="Lextm.SharpSnmpLib.Agent.Version1MembershipProvider, snmpd"/>
      <add alias="Version2MembershipProvider" type="Lextm.SharpSnmpLib.Agent.Version2MembershipProvider, snmpd"/>
      <add alias="Version3MembershipProvider" type="Lextm.SharpSnmpLib.Agent.Version3MembershipProvider, snmpd"/>
      <add alias="ComposedMembershipProvider" type="Lextm.SharpSnmpLib.Agent.ComposedMembershipProvider, snmpd"/>
      <add alias="IMembershipProvider" type="Lextm.SharpSnmpLib.Agent.IMembershipProvider, snmpd"/>
      <add alias="IMembershipProviderArray" type="Lextm.SharpSnmpLib.Agent.IMembershipProvider[], snmpd"/>
      <add alias="MessageHandlerFactory" type="Lextm.SharpSnmpLib.Agent.MessageHandlerFactory, snmpd"/>
      <add alias="HandlerMappingArray" type="Lextm.SharpSnmpLib.Agent.HandlerMapping[], snmpd" />
      <add alias="HandlerMapping" type="Lextm.SharpSnmpLib.Agent.HandlerMapping, snmpd"/>
      <add alias="IMessageHandler" type="Lextm.SharpSnmpLib.Agent.IMessageHandler, snmpd"/>
      <add alias="GetMessageHandler" type="Lextm.SharpSnmpLib.Agent.GetMessageHandler, snmpd"/>
      <add alias="SetMessageHandler" type="Lextm.SharpSnmpLib.Agent.SetMessageHandler, snmpd"/>
      <add alias="GetNextMessageHandler" type="Lextm.SharpSnmpLib.Agent.GetNextMessageHandler, snmpd"/>
      <add alias="GetBulkMessageHandler" type="Lextm.SharpSnmpLib.Agent.GetBulkMessageHandler, snmpd"/>
      <add alias="NullMessageHandler" type="Lextm.SharpSnmpLib.Agent.NullMessageHandler, snmpd"/>
      <add alias="AgentObjects" type="Lextm.SharpSnmpLib.Agent.AgentObjects, snmpd"/>
      <add alias="OctetString" type="Lextm.SharpSnmpLib.OctetString, SharpSnmpLib"/>
      <add alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
      <add alias="UserRegistry" type=" Lextm.SharpSnmpLib.Security.UserRegistry, SharpSnmpLib"/>
      <add alias="UserArray" type="Lextm.SharpSnmpLib.Security.User[], SharpSnmpLib"/>
      <add alias="User" type="Lextm.SharpSnmpLib.Security.User, SharpSnmpLib"/>
      <add alias="Listener" type="Lextm.SharpSnmpLib.Messaging.Listener, SharpSnmpLib.Controls"/>
    </aliases>
    <containers>
      <container name="agent">
        <register type="Listener">
          <lifetime type="singleton"/>
          <property name="Users" propertyType="UserRegistry">
            <dependency/>
          </property>
        </register>
        <register type="OctetString" name="authen">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="authen"/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="privacy">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="privacy"/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="authenPhrase">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="authentication"/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="neither">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="neither"/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="noAuthen">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value=""/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="noPrivacy">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value=""/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="privacyPhrase">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="privacyphrase"/>
            </param>
          </constructor>
        </register>
        <register type="User" name="neither">
          <lifetime type="singleton"/>
          <constructor>
            <param name="name" parameterType="OctetString">
              <dependency name="neither"/>
            </param>
            <param name="authen" parameterType="System.String">
              <value value=""/>
            </param>
            <param name="authenPhrase" parameterType="OctetString">
              <dependency name="noAuthen"/>
            </param>
            <param name="privacy" parameterType="System.String">
              <value value=""/>
            </param>
            <param name="privacyPhrase" parameterType="OctetString">
              <dependency name="noPrivacy"/>
            </param>
          </constructor>
        </register>
        <register type="User" name="authen">
          <lifetime type="singleton"/>
          <constructor>
            <param name="name" parameterType="OctetString">
              <dependency name="authen"/>
            </param>
            <param name="authen" parameterType="System.String">
              <value value="MD5"/>
            </param>
            <param name="authenPhrase" parameterType="OctetString">
              <dependency name="authenPhrase"/>
            </param>
            <param name="privacy" parameterType="System.String">
              <value value=""/>
            </param>
            <param name="privacyPhrase" parameterType="OctetString">
              <dependency name="noPrivacy"/>
            </param>
          </constructor>
        </register>
        <register type="User" name="privacy">
          <lifetime type="singleton"/>
          <constructor>
            <param name="name" parameterType="OctetString">
              <dependency name="privacy"/>
            </param>
            <param name="authen" parameterType="System.String">
              <value value="MD5"/>
            </param>
            <param name="authenPhrase" parameterType="OctetString">
              <dependency name="authenPhrase"/>
            </param>
            <param name="privacy" parameterType="System.String">
              <value value="DES"/>
            </param>
            <param name="privacyPhrase" parameterType="OctetString">
              <dependency name="privacyPhrase"/>
            </param>
          </constructor>
        </register>
        <register type="UserRegistry">
          <lifetime type="singleton"/>
          <constructor>
            <param name="users" parameterType="UserArray">
              <!--<array>
                    <dependency name="neither"/>
                    <dependency name="authen"/>
                    <dependency name="privacy"/>
                  </array> 
                  -->
              <dependency/>
            </param>
          </constructor>
        </register>
        <!-- message handler settings-->
        <register type="MessageHandlerFactory" name="MessageFactory">
          <lifetime type="singleton"/>
          <constructor>
            <param name="mappings" parameterType="HandlerMappingArray">
              <array>
                <!-- here we only have four -->
                <dependency name="GET"/>
                <dependency name="SET"/>
                <dependency name="GETNEXT"/>
                <dependency name="GETBULK"/>
                <dependency name="ALL"/>
              </array>
            </param>
          </constructor>
        </register>
        <register type="HandlerMapping" name="GET">
          <lifetime type="singleton"/>
          <constructor>
            <param name="version" parameterType="System.String">
              <value value="*"/>
            </param>
            <param name="command" parameterType="System.String">
              <value value="GET"/>
            </param>
            <param name="handler" parameterType="IMessageHandler">
              <dependency name="GetHandler"/>
            </param>
          </constructor>
        </register>
        <register type="HandlerMapping" name="SET">
          <lifetime type="singleton"/>
          <constructor>
            <param name="version" parameterType="System.String">
              <value value="*"/>
            </param>
            <param name="command" parameterType="System.String">
              <value value="SET"/>
            </param>
            <param name="handler" parameterType="IMessageHandler">
              <dependency name="SetHandler"/>
            </param>
          </constructor>
        </register>
        <register type="HandlerMapping" name="GETNEXT">
          <lifetime type="singleton"/>
          <constructor>
            <param name="version" parameterType="System.String">
              <value value="*"/>
            </param>
            <param name="command" parameterType="System.String">
              <value value="GETNEXT"/>
            </param>
            <param name="handler" parameterType="IMessageHandler">
              <dependency name="GetNextHandler"/>
            </param>
          </constructor>
        </register>
        <register type="HandlerMapping" name="GETNULK">
          <lifetime type="singleton"/>
          <constructor>
            <param name="version" parameterType="System.String">
              <value value="v2"/>
            </param>
            <param name="command" parameterType="System.String">
              <value value="GETBULK"/>
            </param>
            <param name="handler" parameterType="IMessageHandler">
              <dependency name="GetBulkHandler"/>
            </param>
          </constructor>
        </register>
        <register type="HandlerMapping" name="ALL">
          <lifetime type="singleton"/>
          <constructor>
            <param name="version" parameterType="System.String">
              <value value="*"/>
            </param>
            <param name="command" parameterType="System.String">
              <value value="*"/>
            </param>
            <param name="handler" parameterType="IMessageHandler">
              <dependency name="NullHandler"/>
            </param>
          </constructor>
        </register>
        <register type="IMessageHandler" mapTo="GetMessageHandler" name="GetHandler">
          <lifetime type="singleton"/>
        </register>
        <register type="IMessageHandler" mapTo="SetMessageHandler" name="SetHandler">
          <lifetime type="singleton"/>
        </register>
        <register type="IMessageHandler" mapTo="GetNextMessageHandler" name="GetNextHandler">
          <lifetime type="singleton"/>
        </register>
        <register type="IMessageHandler" mapTo="GetBulkMessageHandler" name="GetBulkHandler">
          <lifetime type="singleton"/>
        </register>
        <register type="IMessageHandler" mapTo="NullMessageHandler" name="NullHandler">
          <lifetime type="singleton"/>
        </register>
        <!-- application factory and its parts -->
        <register type="SnmpApplicationFactory">
          <lifetime type="singleton"/>
          <constructor>
            <param name="logger" parameterType="ILogger">
              <dependency/>
            </param>
            <param name="store" parameterType="ObjectStore">
              <dependency/>
            </param>
            <param name="membershipProvider" parameterType="IMembershipProvider">
              <dependency name="Composed"/>
            </param>
            <param name="factory" parameterType="MessageHandlerFactory">
              <dependency/>
            </param>
          </constructor>
        </register>
        <register type="ILogger" mapTo="Logger">
          <lifetime type="singleton"/>
        </register>
        <register type="ObjectStore">
          <lifetime type="singleton"/>
        </register>
        <!-- this is the membership provider -->
        <register type="IMembershipProvider" mapTo="ComposedMembershipProvider" name="Composed">
          <lifetime type="singleton"/>
          <constructor>
            <param name="providers" parameterType="IMembershipProviderArray">
              <array>
                <dependency name="v1"/>
                <dependency name="v2"/>
                <dependency name="v3"/>
              </array>
            </param>
          </constructor>
        </register>
        <register type="IMembershipProvider" mapTo="Version1MembershipProvider" name="v1">
          <lifetime type="singleton"/>
          <constructor>
            <param name="getCommunity" parameterType="OctetString">
              <dependency name="get"/>
            </param>
            <param name="setCommunity" parameterType="OctetString">
              <dependency name="set"/>
            </param>
          </constructor>
        </register>
        <register type="IMembershipProvider" mapTo="Version2MembershipProvider" name="v2">
          <lifetime type="singleton"/>
          <constructor>
            <param name="getCommunity" parameterType="OctetString">
              <dependency name="get"/>
            </param>
            <param name="setCommunity" parameterType="OctetString">
              <dependency name="set"/>
            </param>
          </constructor>
        </register>
        <register type="IMembershipProvider" mapTo="Version3MembershipProvider" name="v3">
          <lifetime type="singleton"/>
        </register>
        <register type="OctetString" name="get">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="public"/>
            </param>
          </constructor>
        </register>
        <register type="OctetString" name="set">
          <lifetime type="singleton"/>
          <constructor>
            <param name="content" parameterType="System.String">
              <value value="public"/>
            </param>
          </constructor>
        </register>
        <!-- finally we construct the demon -->
        <register type="SnmpDemon">
          <lifetime type="singleton"/>
          <constructor>
            <param name="factory" parameterType="SnmpApplicationFactory">
              <dependency/>
            </param>
            <param name="listener" parameterType="Listener">
              <dependency/>
            </param>
            <param name="objects" parameterType="AgentObjects">
              <dependency/>
            </param>
          </constructor>
        </register>
      </container>
    </containers>
  </unity>
  <!-- This section contains the log4net configuration settings -->
  <log4net>
    <!-- Define some output appenders -->
    <appender name="RollingLogFileAppender" type="Lextm.Common.RollingFileAppender">
      <file value="snmp" />
      <appendToFile value="true" />
      <rollingStyle value="Date" />
      <datePattern value="yyMMdd" />
      <staticLogFileName value="false" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%message%newline" />
      </layout>
    </appender>
    <!-- Setup the root category, add the appenders and set the default level -->
    <root>
      <level value="WARN" />
    </root>
    <!-- Specify the level for some specific categories -->
    <logger name="Lextm.SharpSnmpLib.Agent.RollingLogger">
      <level value="ALL" />
      <appender-ref ref="RollingLogFileAppender" />
    </logger>
  </log4net>
  <startup>
    <supportedRuntime version="v2.0.50727"/>
  </startup>
</configuration>
